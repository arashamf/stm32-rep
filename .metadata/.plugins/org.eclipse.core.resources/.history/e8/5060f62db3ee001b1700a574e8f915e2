/*
 * SPI.c
 *
 *  Created on: 18 РїС—Р…РїС—Р…РїС—Р…РїС—Р…. 2020 РїС—Р….
 *      Author: ALEXEY
 */

#include "SPI_lib.h"

//-------------------------С„СѓРЅРєС†РёСЏ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё SPI2-------------------------------//
void SPI2_ini ()
{
	RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOB, ENABLE); //Р·Р°С‚Р°РєС‚РёСЂСѓРµРј РїРѕСЂС‚ B

	GPIO_InitTypeDef 	GPIO_ini_SPI2;
	GPIO_ini_SPI2.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_15; //РІС‹Р±РµСЂРµРј РїРёРЅ 13, 15 РїРѕСЂС‚Р° B РґР»СЏ РЅР°СЃС‚СЂРѕР№РєРё
	GPIO_ini_SPI2.GPIO_Mode = GPIO_Mode_AF; //РїРѕСЂС‚ Рђ РїРёРЅ 13, 15 РЅР° Р°Р»СЊС‚. РІС‹С…РѕРґ
	GPIO_ini_SPI2.GPIO_Speed = GPIO_Medium_Speed; //СЃРєРѕСЂРѕСЃС‚СЊ РїРѕСЂС‚Р°
	GPIO_ini_SPI2.GPIO_OType = GPIO_OType_PP; //РІС‹С…РѕРґ СЃ РїРѕРґС‚СЏР¶РєРѕР№ (push-pull)
	GPIO_ini_SPI2.GPIO_PuPd = GPIO_PuPd_NOPULL; //РІС…РѕРґ Р±РµР· РїРѕРґС‚СЏР¶РєРё

	GPIO_Init (GPIOB, &GPIO_ini_SPI2);

//	GPIO_PinAFConfig (GPIOB, (GPIO_PinSource12), GPIO_AF_SPI2); //SPI2_NSS
	GPIO_PinAFConfig (GPIOB, (GPIO_PinSource13), GPIO_AF_SPI2); //SPI2_SCK
//	GPIO_PinAFConfig (GPIOB, (GPIO_PinSource14), GPIO_AF_SPI2); //SPI2_MISO
	GPIO_PinAFConfig (GPIOB, (GPIO_PinSource15), GPIO_AF_SPI2); //SPI2_MOSI

	SET_BIT (GPIOA->MODER, GPIO_MODER_MODER4_0); // PA4 (CS) РЅР° РІС‹С…РѕРґ

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE); // Р·Р°РїСѓСЃРєР°РµРј С‚Р°РєС‚РѕРІС‹Р№ РіРµРЅРµСЂР°С‚РѕСЂ SPI1

	SPI_InitTypeDef		SPI2_Init;
//	SPI2_Init.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //РїРѕР»РЅРѕРґСѓРїР»РµРєСЃРЅС‹Р№ СЂРµР¶РёРј Рё РЅР° РїСЂРёС‘Рј Рё РЅР° РїРµСЂРµРґР°С‡Сѓ
	SPI2_Init.SPI_Direction = SPI_Direction_1Line_Tx; //РїРѕ РѕРґРЅРѕР№ Р»РёРЅРёРё С‚РѕР»СЊРєРѕ РЅР° РїРµСЂРµРґР°С‡Сѓ
	SPI2_Init.SPI_Mode = SPI_Mode_Master; //РјРє РІ СЂРµР¶РёРјРµ РјР°СЃС‚РµСЂ
	SPI2_Init.SPI_DataSize = SPI_DataSize_16b; //16 Р±РёС‚ РґР°РЅРЅС‹Рµ
	SPI2_Init.SPI_CPOL = SPI_CPOL_Low; //РµСЃР»Рё Р±РёС‚ CPOL СЃР±СЂРѕС€РµРЅ, РІС‹РІРѕРґ SCK РёРјРµРµС‚ СЃРѕСЃС‚РѕСЏРЅРёРµ РЅРёР·РєРѕРіРѕ СѓСЂРѕРІРЅСЏ РїСЂРё РїСЂРѕСЃС‚РѕРµ
	SPI2_Init.SPI_CPHA = SPI_CPHA_1Edge; //РµСЃР»Рё Р±РёС‚ CPHA СЃР±СЂРѕС€РµРЅ , С‚Рѕ РїРµСЂРІС‹Р№ РєСЂР°Р№ РЅР° РІС‹РІРѕРґРµ SCK (РЅР°СЂР°СЃС‚Р°СЋС‰РёР№ С„СЂРѕРЅС‚, РµСЃР»Рё Р±РёС‚ CPOL СЃР±СЂРѕС€РµРЅ, СЃРїР°РґР°СЋС‰РёР№ С„СЂРѕРЅС‚, РµСЃР»Рё Р±РёС‚ CPOL СѓСЃС‚Р°РЅРѕРІР»РµРЅ) СЏРІР»СЏРµС‚СЃСЏ СЃС‚СЂРѕР±РѕРј Р·Р°С…РІР°С‚Р° MSBit.
	SPI2_Init.SPI_NSS = SPI_NSS_Soft;  // РїСЂРѕРіСЂР°РјРјРЅРѕРµ СѓРїСЂР°РІР»РµРЅРёРµ РІС‹РІРѕРґРѕРј NSS
	SPI2_Init.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2; //Р·Р°РґР°РґРёРј РґРµР»РёС‚РµР»СЊ С‡Р°СЃС‚РѕС‚С‹ С€РёРЅС‹ (F_SPI2=F_APB1/Prescaler=6/2=3MHz)
	SPI2_Init.SPI_FirstBit = SPI_FirstBit_MSB; // РїРµСЂРІС‹Р№ РёРґРµС‚ СЃС‚Р°СЂС€РёР№ Р±РёС‚
	SPI2_Init.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2, &SPI2_Init);

	SPI_Cmd(SPI2, ENABLE); //РІРєР»СЋС‡РёРј SPI1

	//	NVIC_EnableIRQ(SPI2_IRQn); //РІРєР»СЋС‡РёРј РїСЂРµСЂС‹РІР°РЅРёСЏ РѕС‚ SPI2 РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂРµ РїСЂРµСЂС‹РІР°РЅРёР№ IRQ
}

//-----------------------------С„-СЏ С‡С‚РµРЅРёСЏ Р±Р°Р№С‚Р° РїРѕ SPI2---------------------------//
uint8_t SPI2_read_byte (uint8_t adress)
{
	uint8_t SPI2_data= 0;
	SPI_SSOutputCmd(SPI2, ENABLE); //РІРєР»СЋС‡РёРј РІС‹РІРѕРґ CS
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {};  //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїРµСЂРµРґР°С‡Рё РЅРµ РїСѓСЃС‚
	*(uint8_t*)&SPI2->DR = (adress + LIS3DSH_Cmd_Read); //Р·Р°РїРёСЃС‹РІР°РµРј Р°РґСЂРµСЃ СЂРµРіРёСЃС‚СЂР° Рё Р±РёС‚ С‡С‚РµРЅРёСЏ
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {}; //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїРµСЂРµРґР°С‡Рё РЅРµ РїСѓСЃС‚
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {}; //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїСЂРёС‘РјР° РїСѓСЃС‚
	(void) SPI2->DR; //СЃС‡РёС‚С‹РІР°РµРј СЂРµРіРёСЃС‚СЂ РЅРµРЅСѓР¶РЅС‹С… РґР°РЅРЅС‹С…
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {}; //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїРµСЂРµРґР°С‡Рё РЅРµ РїСѓСЃС‚
	*(uint8_t*)&SPI2->DR = 0x00; //РїРѕСЃС‹Р»Р°РµРј РЅСѓР»Рё
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {}; //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїРµСЂРµРґР°С‡Рё РЅРµ РїСѓСЃС‚
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {}; //РѕР¶РёРґР°РµРј РїРѕРєР° Р±СѓС„РµСЂ РїСЂРёС‘РјР° РїСѓСЃС‚
	SPI2_data = *(uint8_t*)&SPI2->DR; //РїРѕР»СѓС‡Р°РµРј РїРѕР»РµР·РЅС‹Рµ РґР°РЅРЅС‹Рµ
	SPI_SSOutputCmd(SPI2, DISABLE); //РѕС‚РєР»СЋС‡РёРј РІС‹РІРѕРґ CS
	return SPI2_data;
}

//-----------------------------С„-СЏ Р·Р°РїРёСЃРё Р±Р°Р№С‚Р° РїРѕ SPI2---------------------------//
void SPI2_write_byte (uint8_t adress, uint8_t data)
{
	SPI_SSOutputCmd(SPI2, ENABLE); //РІРєР»СЋС‡РёРј РІС‹РІРѕРґ CS
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {};
	*(uint8_t*)&SPI2->DR = (adress + LIS3DSH_Cmd_Write); //Р·Р°РїРёСЃС‹РІР°РµРј Р°РґСЂРµСЃ СЂРµРіРёСЃС‚СЂР° Рё Р±РёС‚ Р·Р°РїРёСЃРё
	//SPI2->DR = (adress + LIS3DSH_Cmd_Write);
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {};
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};
	(void) SPI2->DR;  //СЃС‡РёС‚С‹РІР°РµРј СЂРµРіРёСЃС‚СЂ РЅРµРЅСѓР¶РЅС‹С… РґР°РЅРЅС‹С…
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {};
	*(uint8_t*)&SPI2->DR = data; //Р·Р°РїРёСЃС‹РІР°РµРј РїРѕР»РµР·РЅС‹Рµ РґР°РЅРЅС‹Рµ
	//SPI2->DR = data;
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {};
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};
	(void) SPI2->DR; //СЃС‡РёС‚С‹РІР°РµРј СЂРµРіРёСЃС‚СЂ РЅРµРЅСѓР¶РЅС‹С… РґР°РЅРЅС‹С…
	SPI_SSOutputCmd(SPI2, DISABLE); //РѕС‚РєР»СЋС‡РёРј РІС‹РІРѕРґ CS
}

//-----------------------------С„-СЏ С‡С‚РµРЅРёСЏ РґР°РЅРЅС‹С… РјР°СЃСЃРёРІР° РїРѕ SPI2---------------------------//
void SPI2_read_array(uint8_t adress, char *data, uint8_t data_len)  //data_len - РєРѕР»РёС‡РµСЃС‚РІРѕ Р±Р°Р№С‚ РЅРµРѕР±С…РѕРґРёРјС‹С… РїРѕР»СѓС‡РёС‚СЊ
{
	for(uint8_t i = 0x0; i <= data_len; i++)
		{
		if(i == data_len)
			{
			SPI_SSOutputCmd(SPI2, DISABLE); //РѕС‚РєР»СЋС‡РёРј РІС‹РІРѕРґ CS;
			break;
			}
		*data++ = SPI2_read_byte (adress+i);
		}
}

//-------------------------С„СѓРЅРєС†РёСЏ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё SPI1-------------------------------//
void SPI1_ini ()
{
	RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOA, ENABLE); //Р·Р°С‚Р°РєС‚РёСЂСѓРµРј РїРѕСЂС‚ Рђ

	SPI_I2S_DeInit (SPI1);

	GPIO_InitTypeDef 	GPIO_ini_SPI1;
	GPIO_ini_SPI1.GPIO_Pin =  GPIO_Pin_5 | GPIO_Pin_7; //РІС‹Р±РµСЂРµРј РїРёРЅ 5-7 РїРѕСЂС‚Р° Рђ РґР»СЏ РЅР°СЃС‚СЂРѕР№РєРё
	GPIO_ini_SPI1.GPIO_Mode = GPIO_Mode_AF; //РїРѕСЂС‚ Рђ РїРёРЅ 5-7 РЅР° Р°Р»СЊС‚. РІС‹С…РѕРґ
	GPIO_ini_SPI1.GPIO_Speed = GPIO_Low_Speed; //СЃРєРѕСЂРѕСЃС‚СЊ РїРѕСЂС‚Р°
	GPIO_ini_SPI1.GPIO_OType = GPIO_OType_PP; //РІС‹С…РѕРґ СЃ РїРѕРґС‚СЏР¶РєРѕР№ (push-pull)
	GPIO_ini_SPI1.GPIO_PuPd = GPIO_PuPd_NOPULL; //РІС…РѕРґ Р±РµР· РїРѕРґС‚СЏР¶РєРё

	GPIO_Init (GPIOA, &GPIO_ini_SPI1);

	//GPIO_PinAFConfig (GPIOA, (GPIO_PinSource4), GPIO_AF_SPI1); //PA4 - SPI1_NSS
	GPIO_PinAFConfig (GPIOA, (GPIO_PinSource5), GPIO_AF_SPI1); //PA5 - SPI1_SCK
//	GPIO_PinAFConfig (GPIOA, (GPIO_PinSource6), GPIO_AF_SPI1); //PA6 - SPI1_MISO
	GPIO_PinAFConfig (GPIOA, (GPIO_PinSource7), GPIO_AF_SPI1);//PA7 - SPI1_MOSI


	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE); // Р·Р°РїСѓСЃРєР°РµРј С‚Р°РєС‚РѕРІС‹Р№ РіРµРЅРµСЂР°С‚РѕСЂ SPI1

	SPI_InitTypeDef		SPI2_Init;
	SPI2_Init.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  //РїРѕР»РЅРѕРґСѓРїР»РµРєСЃРЅС‹Р№ СЂРµР¶РёРј Рё РЅР° РїСЂРёС‘Рј Рё РЅР° РїРµСЂРµРґР°С‡Сѓ
	SPI2_Init.SPI_Mode = SPI_Mode_Master; //РјРє РІ СЂРµР¶РёРјРµ РјР°СЃС‚РµСЂ
	SPI2_Init.SPI_DataSize = SPI_DataSize_8b; //8 Р±РёС‚ РґР°РЅРЅС‹Рµ
	SPI2_Init.SPI_CPOL = SPI_CPOL_Low; //РµСЃР»Рё Р±РёС‚ CPOL СЃР±СЂРѕС€РµРЅ, РІС‹РІРѕРґ SCK РёРјРµРµС‚ СЃРѕСЃС‚РѕСЏРЅРёРµ РЅРёР·РєРѕРіРѕ СѓСЂРѕРІРЅСЏ РїСЂРё РїСЂРѕСЃС‚РѕРµ
	SPI2_Init.SPI_CPHA = SPI_CPHA_1Edge; //РµСЃР»Рё Р±РёС‚ CPHA СЃР±СЂРѕС€РµРЅ , С‚Рѕ РїРµСЂРІС‹Р№ РєСЂР°Р№ РЅР° РІС‹РІРѕРґРµ SCK (РЅР°СЂР°СЃС‚Р°СЋС‰РёР№ С„СЂРѕРЅС‚, РµСЃР»Рё Р±РёС‚ CPOL СЃР±СЂРѕС€РµРЅ, СЃРїР°РґР°СЋС‰РёР№ С„СЂРѕРЅС‚, РµСЃР»Рё Р±РёС‚ CPOL СѓСЃС‚Р°РЅРѕРІР»РµРЅ) СЏРІР»СЏРµС‚СЃСЏ СЃС‚СЂРѕР±РѕРј Р·Р°С…РІР°С‚Р° MSBit.
	SPI2_Init.SPI_NSS = SPI_NSS_Soft;  // РїСЂРѕРіСЂР°РјРјРЅРѕРµ СѓРїСЂР°РІР»РµРЅРёРµ РІС‹РІРѕРґРѕРј NSS
	SPI2_Init.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; //Р·Р°РґР°РґРёРј РґРµР»РёС‚РµР»СЊ С‡Р°СЃС‚РѕС‚С‹ С€РёРЅС‹
	SPI2_Init.SPI_FirstBit = SPI_FirstBit_MSB; // РїРµСЂРІС‹Р№ РёРґРµС‚ СЃС‚Р°СЂС€РёР№ Р±РёС‚
	SPI2_Init.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2, &SPI2_Init); //Р�РЅРёС†РёР°Р»РёР·РёСЂСѓРµС‚ SPI РІ СЃРѕРѕС‚РІРµС‚СЃС‚РІРёРё СЃ РїР°СЂР°РјРµС‚СЂР°РјРё РІ СЃС‚СЂСѓРєС‚СѓСЂРµ SPI2_Init

	SPI_Cmd(SPI1, ENABLE);

//	NVIC_EnableIRQ(SPI1_IRQn);
}
