
usb_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f7c  08005f7c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08005f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  200001c8  0800614c  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800614c  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010366  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002774  00000000  00000000  0003055e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228ac  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c1  00000000  00000000  0005697c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3323  00000000  00000000  0006233d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  001256dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f04 	.word	0x08005f04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	08005f04 	.word	0x08005f04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GetPointerData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void GetPointerData (uint8_t *mbuffer, int8_t x, int8_t y)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	70bb      	strb	r3, [r7, #2]
	uint8_t button = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET)
 80004dc:	2101      	movs	r1, #1
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <GetPointerData+0x4c>)
 80004e0:	f000 fd40 	bl	8000f64 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d102      	bne.n	80004f0 <GetPointerData+0x28>
		button = 2; //1-однократное нажатие левой клавиши мыши,
 80004ea:	2302      	movs	r3, #2
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	e001      	b.n	80004f4 <GetPointerData+0x2c>
	else
		button = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
	mouse_buffer [0] = button; //состояние кнопки
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <GetPointerData+0x50>)
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	7013      	strb	r3, [r2, #0]
	mouse_buffer [1] = x; //состояние курсора по оси Х
 80004fa:	78fa      	ldrb	r2, [r7, #3]
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <GetPointerData+0x50>)
 80004fe:	705a      	strb	r2, [r3, #1]
	mouse_buffer [2] = y; //состояние курсора по оси Y
 8000500:	78ba      	ldrb	r2, [r7, #2]
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <GetPointerData+0x50>)
 8000504:	709a      	strb	r2, [r3, #2]
	mouse_buffer [3] = 0; //состояния колеса мыши
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <GetPointerData+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	70da      	strb	r2, [r3, #3]
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020000 	.word	0x40020000
 8000518:	200001f4 	.word	0x200001f4

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int8_t kord_x = 0, kord_y = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	2300      	movs	r3, #0
 8000528:	71bb      	strb	r3, [r7, #6]
	uint8_t cnt = 0; //счётчик циклов
 800052a:	2300      	movs	r3, #0
 800052c:	717b      	strb	r3, [r7, #5]
	uint8_t kursor = 0; //направление курсора
 800052e:	2300      	movs	r3, #0
 8000530:	713b      	strb	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 f9d7 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f837 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f89f 	bl	800067c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053e:	f004 ffc3 	bl	80054c8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay (100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fa40 	bl	80009c8 <HAL_Delay>
	  if ((cnt < 10) && (kursor == 0))
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	2b09      	cmp	r3, #9
 800054c:	d80a      	bhi.n	8000564 <main+0x48>
 800054e:	793b      	ldrb	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d107      	bne.n	8000564 <main+0x48>
	  	{
		  kord_x = CURSOR_STEP;
 8000554:	2302      	movs	r3, #2
 8000556:	71fb      	strb	r3, [r7, #7]
		  kord_y = CURSOR_STEP;
 8000558:	2302      	movs	r3, #2
 800055a:	71bb      	strb	r3, [r7, #6]
		  cnt++;
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	3301      	adds	r3, #1
 8000560:	717b      	strb	r3, [r7, #5]
 8000562:	e00e      	b.n	8000582 <main+0x66>
	  	}
	  	else
	  		if (cnt > 0)
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d009      	beq.n	800057e <main+0x62>
	  		{
	  			kursor = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	713b      	strb	r3, [r7, #4]
	  			kord_x = -CURSOR_STEP;
 800056e:	23fe      	movs	r3, #254	; 0xfe
 8000570:	71fb      	strb	r3, [r7, #7]
	  			kord_y = -CURSOR_STEP;
 8000572:	23fe      	movs	r3, #254	; 0xfe
 8000574:	71bb      	strb	r3, [r7, #6]
	  			cnt--;
 8000576:	797b      	ldrb	r3, [r7, #5]
 8000578:	3b01      	subs	r3, #1
 800057a:	717b      	strb	r3, [r7, #5]
 800057c:	e001      	b.n	8000582 <main+0x66>
	  		}
	  		else
	  			kursor = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	713b      	strb	r3, [r7, #4]
	  GetPointerData (mouse_buffer, kord_x, kord_y);
 8000582:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	4619      	mov	r1, r3
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <main+0x84>)
 800058e:	f7ff ff9b 	bl	80004c8 <GetPointerData>
	  USBD_HID_SendReport (&hUsbDeviceFS, mouse_buffer, 4);
 8000592:	2204      	movs	r2, #4
 8000594:	4902      	ldr	r1, [pc, #8]	; (80005a0 <main+0x84>)
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <main+0x88>)
 8000598:	f003 fee6 	bl	8004368 <USBD_HID_SendReport>
	  HAL_Delay (100);
 800059c:	e7d1      	b.n	8000542 <main+0x26>
 800059e:	bf00      	nop
 80005a0:	200001f4 	.word	0x200001f4
 80005a4:	200001fc 	.word	0x200001fc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fbe2 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	; 0xa8
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fe3d 	bl	80022ac <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f880 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f896 	bl	800278c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f869 	bl	800073c <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0xb4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0xb4>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_GPIO_Init+0xb4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_GPIO_Init+0xb8>)
 80006ee:	f000 fc51 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006fa:	2302      	movs	r3, #2
 80006fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_GPIO_Init+0xbc>)
 8000706:	f000 fa93 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800070a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xb8>)
 8000724:	f000 fa84 	bl	8000c30 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40020000 	.word	0x40020000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <HAL_MspInit+0x4c>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f8ca 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <OTG_FS_IRQHandler+0x10>)
 80007fe:	f000 fd32 	bl	8001266 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000698 	.word	0x20000698

0800080c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x50>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x16>
		heap_end = &end;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <_sbrk+0x50>)
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <_sbrk+0x54>)
 8000820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <_sbrk+0x50>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <_sbrk+0x50>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	466a      	mov	r2, sp
 8000832:	4293      	cmp	r3, r2
 8000834:	d907      	bls.n	8000846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000836:	f005 fa69 	bl	8005d0c <__errno>
 800083a:	4602      	mov	r2, r0
 800083c:	230c      	movs	r3, #12
 800083e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	e006      	b.n	8000854 <_sbrk+0x48>
	}

	heap_end += incr;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <_sbrk+0x50>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a03      	ldr	r2, [pc, #12]	; (800085c <_sbrk+0x50>)
 8000850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001e4 	.word	0x200001e4
 8000860:	20000aa8 	.word	0x20000aa8

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <SystemInit+0x28>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <SystemInit+0x28>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <SystemInit+0x28>)
 800087a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087e:	609a      	str	r2, [r3, #8]
#endif
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000894:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000896:	e003      	b.n	80008a0 <LoopCopyDataInit>

08000898 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800089a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800089c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800089e:	3104      	adds	r1, #4

080008a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008a8:	d3f6      	bcc.n	8000898 <CopyDataInit>
  ldr  r2, =_sbss
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008ac:	e002      	b.n	80008b4 <LoopFillZerobss>

080008ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008b0:	f842 3b04 	str.w	r3, [r2], #4

080008b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008b8:	d3f9      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ba:	f7ff ffd3 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008be:	f005 fa2b 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c2:	f7ff fe2b 	bl	800051c <main>
  bx  lr    
 80008c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008cc:	08005f84 	.word	0x08005f84
  ldr  r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008d4:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 80008d8:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 80008dc:	20000aa4 	.word	0x20000aa4

080008e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <HAL_Init+0x40>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_Init+0x40>)
 80008fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_Init+0x40>)
 8000906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f94d 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff ff18 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023c00 	.word	0x40023c00

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f965 	bl	8000c16 <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f92d 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	200001f8 	.word	0x200001f8

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	200001f8 	.word	0x200001f8

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_Delay+0x40>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffde 	bl	80009b0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000008 	.word	0x20000008

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff29 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff3e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff31 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa2 	bl	8000b68 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	e16b      	b.n	8000f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f040 815a 	bne.w	8000f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d00b      	beq.n	8000c8a <HAL_GPIO_Init+0x5a>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7e:	2b11      	cmp	r3, #17
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d130      	bne.n	8000cec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	f003 0201 	and.w	r2, r3, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0xfc>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b12      	cmp	r3, #18
 8000d2a:	d123      	bne.n	8000d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	69b9      	ldr	r1, [r7, #24]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80b4 	beq.w	8000f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <HAL_GPIO_Init+0x308>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <HAL_GPIO_Init+0x308>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	; (8000f38 <HAL_GPIO_Init+0x308>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d02b      	beq.n	8000e56 <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x314>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d025      	beq.n	8000e52 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x318>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01f      	beq.n	8000e4e <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x31c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x320>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x324>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x328>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x20e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <HAL_GPIO_Init+0x32c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x20a>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00e      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	e00c      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e00a      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e008      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e56:	2300      	movs	r3, #0
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e68:	4934      	ldr	r1, [pc, #208]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e9a:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	f67f ae90 	bls.w	8000c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3724      	adds	r7, #36	; 0x24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40021400 	.word	0x40021400
 8000f58:	40021800 	.word	0x40021800
 8000f5c:	40021c00 	.word	0x40021c00
 8000f60:	40013c00 	.word	0x40013c00

08000f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e001      	b.n	8000f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb0:	e003      	b.n	8000fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	619a      	str	r2, [r3, #24]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc8:	b08f      	sub	sp, #60	; 0x3c
 8000fca:	af0a      	add	r7, sp, #40	; 0x28
 8000fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e10f      	b.n	80011f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d106      	bne.n	8000ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f004 fb9c 	bl	8005730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fe97 	bl	8002d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	687e      	ldr	r6, [r7, #4]
 8001024:	466d      	mov	r5, sp
 8001026:	f106 0410 	add.w	r4, r6, #16
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001036:	e885 0003 	stmia.w	r5, {r0, r1}
 800103a:	1d33      	adds	r3, r6, #4
 800103c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f001 fd6e 	bl	8002b20 <USB_CoreInit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2202      	movs	r2, #2
 800104e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0d0      	b.n	80011f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fe85 	bl	8002d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e04a      	b.n	80010fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	333d      	adds	r3, #61	; 0x3d
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	333c      	adds	r3, #60	; 0x3c
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	b298      	uxth	r0, r3
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3342      	adds	r3, #66	; 0x42
 80010a4:	4602      	mov	r2, r0
 80010a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	333f      	adds	r3, #63	; 0x3f
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3344      	adds	r3, #68	; 0x44
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	3348      	adds	r3, #72	; 0x48
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3350      	adds	r3, #80	; 0x50
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3af      	bcc.n	8001068 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e044      	b.n	8001198 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3b5      	bcc.n	800110e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	687e      	ldr	r6, [r7, #4]
 80011aa:	466d      	mov	r5, sp
 80011ac:	f106 0410 	add.w	r4, r6, #16
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c0:	1d33      	adds	r3, r6, #4
 80011c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fdfb 	bl	8002dc0 <USB_DevInit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e00d      	b.n	80011f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fdf0 	bl	8003dd6 <USB_DevDisconnect>

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001200 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_PCD_Start+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e020      	b.n	800125e <HAL_PCD_Start+0x5e>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b01      	cmp	r3, #1
 800122a:	d109      	bne.n	8001240 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fdae 	bl	8003da6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fd6a 	bl	8002d28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001266:	b590      	push	{r4, r7, lr}
 8001268:	b08d      	sub	sp, #52	; 0x34
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fe55 	bl	8003f2c <USB_GetMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 838e 	bne.w	80019a6 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fdb9 	bl	8003e06 <USB_ReadInterrupts>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8384 	beq.w	80019a4 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fdb0 	bl	8003e06 <USB_ReadInterrupts>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d107      	bne.n	80012c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f002 0202 	and.w	r2, r2, #2
 80012be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fd9e 	bl	8003e06 <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012d4:	d17b      	bne.n	80013ce <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fda4 	bl	8003e2c <USB_ReadDevAllOutEpInterrupt>
 80012e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012e6:	e06f      	b.n	80013c8 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d064      	beq.n	80013bc <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fdc9 	bl	8003e94 <USB_ReadDevOutEPInterrupt>
 8001302:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00c      	beq.n	8001328 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131a:	461a      	mov	r2, r3
 800131c:	2301      	movs	r3, #1
 800131e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fdf6 	bl	8001f14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fef5 	bl	8002124 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	015a      	lsls	r2, r3, #5
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	4413      	add	r3, r2
 8001342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001346:	461a      	mov	r2, r3
 8001348:	2308      	movs	r3, #8
 800134a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001362:	461a      	mov	r2, r3
 8001364:	2310      	movs	r3, #16
 8001366:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b00      	cmp	r3, #0
 8001370:	d015      	beq.n	800139e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001384:	461a      	mov	r2, r3
 8001386:	2101      	movs	r1, #1
 8001388:	f002 fe14 	bl	8003fb4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	015a      	lsls	r2, r3, #5
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001398:	461a      	mov	r2, r3
 800139a:	2320      	movs	r3, #32
 800139c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	015a      	lsls	r2, r3, #5
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b4:	461a      	mov	r2, r3
 80013b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d18c      	bne.n	80012e8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fd17 	bl	8003e06 <USB_ReadInterrupts>
 80013d8:	4603      	mov	r3, r0
 80013da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e2:	f040 80c4 	bne.w	800156e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fd38 	bl	8003e60 <USB_ReadDevAllInEpInterrupt>
 80013f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013f6:	e0b6      	b.n	8001566 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80ab 	beq.w	800155a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fd5e 	bl	8003ed0 <USB_ReadDevInEPInterrupt>
 8001414:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	43db      	mvns	r3, r3
 800143a:	69f9      	ldr	r1, [r7, #28]
 800143c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001440:	4013      	ands	r3, r2
 8001442:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d11b      	bne.n	8001496 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3348      	adds	r3, #72	; 0x48
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4403      	add	r3, r0
 800147e:	3344      	adds	r3, #68	; 0x44
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4419      	add	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4403      	add	r3, r0
 8001492:	3348      	adds	r3, #72	; 0x48
 8001494:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f004 f9c8 	bl	8005832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d116      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d113      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x272>
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3350      	adds	r3, #80	; 0x50
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d108      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014d0:	461a      	mov	r2, r3
 80014d2:	2101      	movs	r1, #1
 80014d4:	f002 fd6e 	bl	8003fb4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800150a:	461a      	mov	r2, r3
 800150c:	2310      	movs	r3, #16
 800150e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001526:	461a      	mov	r2, r3
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001542:	461a      	mov	r2, r3
 8001544:	2302      	movs	r3, #2
 8001546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fc4f 	bl	8001df8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f af45 	bne.w	80013f8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fc47 	bl	8003e06 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800157e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001582:	d122      	bne.n	80015ca <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015aa:	2100      	movs	r1, #0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fe71 	bl	8002294 <HAL_PCDEx_LPM_Callback>
 80015b2:	e002      	b.n	80015ba <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f004 f9b3 	bl	8005920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fc19 	bl	8003e06 <USB_ReadInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015de:	d112      	bne.n	8001606 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d102      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f004 f96f 	bl	80058d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001604:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fbfb 	bl	8003e06 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161a:	f040 80a7 	bne.w	800176c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2110      	movs	r1, #16
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fd33 	bl	80030a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001642:	e036      	b.n	80016b2 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001650:	461a      	mov	r2, r3
 8001652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001656:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001668:	0151      	lsls	r1, r2, #5
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	440a      	add	r2, r1
 800166e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001676:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001684:	461a      	mov	r2, r3
 8001686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800168a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169c:	0151      	lsls	r1, r2, #5
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	440a      	add	r2, r1
 80016a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	3301      	adds	r3, #1
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3c3      	bcc.n	8001644 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d016      	beq.n	8001706 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e8:	f043 030b 	orr.w	r3, r3, #11
 80016ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016fe:	f043 030b 	orr.w	r3, r3, #11
 8001702:	6453      	str	r3, [r2, #68]	; 0x44
 8001704:	e015      	b.n	8001732 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001718:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800171c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800172c:	f043 030b 	orr.w	r3, r3, #11
 8001730:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001740:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001744:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001756:	461a      	mov	r2, r3
 8001758:	f002 fc2c 	bl	8003fb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800176a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fb48 	bl	8003e06 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001780:	d124      	bne.n	80017cc <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fbde 	bl	8003f48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fce8 	bl	8003166 <USB_GetDevSpeed>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681c      	ldr	r4, [r3, #0]
 80017a2:	f001 f9b1 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 80017a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	4620      	mov	r0, r4
 80017b2:	f001 fa17 	bl	8002be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f004 f863 	bl	8005882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fb18 	bl	8003e06 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d161      	bne.n	80018a4 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0210 	bic.w	r2, r2, #16
 80017ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 020f 	and.w	r2, r3, #15
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	3304      	adds	r3, #4
 800180e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	0c5b      	lsrs	r3, r3, #17
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	2b02      	cmp	r3, #2
 800181a:	d124      	bne.n	8001866 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d035      	beq.n	8001894 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	6a38      	ldr	r0, [r7, #32]
 800183c:	f002 f990 	bl	8003b60 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800184c:	441a      	add	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800185e:	441a      	add	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	e016      	b.n	8001894 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	0c5b      	lsrs	r3, r3, #17
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	2b06      	cmp	r3, #6
 8001870:	d110      	bne.n	8001894 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001878:	2208      	movs	r2, #8
 800187a:	4619      	mov	r1, r3
 800187c:	6a38      	ldr	r0, [r7, #32]
 800187e:	f002 f96f 	bl	8003b60 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188e:	441a      	add	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0210 	orr.w	r2, r2, #16
 80018a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 faac 	bl	8003e06 <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d10a      	bne.n	80018ce <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f003 ffd4 	bl	8005866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f002 0208 	and.w	r2, r2, #8
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fa97 	bl	8003e06 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e2:	d10f      	bne.n	8001904 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f004 f836 	bl	8005960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fa7c 	bl	8003e06 <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001918:	d10f      	bne.n	800193a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f004 f809 	bl	800593c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fa61 	bl	8003e06 <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800194a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194e:	d10a      	bne.n	8001966 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f004 f817 	bl	8005984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fa4b 	bl	8003e06 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b04      	cmp	r3, #4
 8001978:	d115      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f004 f807 	bl	80059a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	e000      	b.n	80019a6 <HAL_PCD_IRQHandler+0x740>
      return;
 80019a4:	bf00      	nop
    }
  }
}
 80019a6:	3734      	adds	r7, #52	; 0x34
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_PCD_SetAddress+0x1a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e013      	b.n	80019ee <HAL_PCD_SetAddress+0x42>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 f9bb 	bl	8003d5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	4608      	mov	r0, r1
 8001a00:	4611      	mov	r1, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	803b      	strh	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da0f      	bge.n	8001a3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 020f 	and.w	r2, r3, #15
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	3338      	adds	r3, #56	; 0x38
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	705a      	strb	r2, [r3, #1]
 8001a3a:	e00f      	b.n	8001a5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a68:	883a      	ldrh	r2, [r7, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	78ba      	ldrb	r2, [r7, #2]
 8001a72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_EP_Open+0xaa>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e00e      	b.n	8001abe <HAL_PCD_EP_Open+0xc8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fb7e 	bl	80031b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001abc:	7afb      	ldrb	r3, [r7, #11]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0f      	bge.n	8001afa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	3338      	adds	r3, #56	; 0x38
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00f      	b.n	8001b1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_EP_Close+0x6e>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e00e      	b.n	8001b52 <HAL_PCD_EP_Close+0x8c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fbbc 	bl	80032c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	460b      	mov	r3, r1
 8001b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	f003 020f 	and.w	r2, r3, #15
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	f001 fe3f 	bl	8003850 <USB_EP0StartXfer>
 8001bd2:	e008      	b.n	8001be6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	6979      	ldr	r1, [r7, #20]
 8001be2:	f001 fbf1 	bl	80033c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c00:	7afb      	ldrb	r3, [r7, #11]
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	3338      	adds	r3, #56	; 0x38
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	f001 fdf5 	bl	8003850 <USB_EP0StartXfer>
 8001c66:	e008      	b.n	8001c7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	6979      	ldr	r1, [r7, #20]
 8001c76:	f001 fba7 	bl	80033c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 020f 	and.w	r2, r3, #15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d901      	bls.n	8001ca2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e050      	b.n	8001d44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da0f      	bge.n	8001cca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 020f 	and.w	r2, r3, #15
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	3338      	adds	r3, #56	; 0x38
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	705a      	strb	r2, [r3, #1]
 8001cc8:	e00d      	b.n	8001ce6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_PCD_EP_SetStall+0x82>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e01e      	b.n	8001d44 <HAL_PCD_EP_SetStall+0xc0>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 ff4c 	bl	8003bb2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d34:	461a      	mov	r2, r3
 8001d36:	f002 f93d 	bl	8003fb4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d901      	bls.n	8001d6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e042      	b.n	8001df0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da0f      	bge.n	8001d92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 020f 	and.w	r2, r3, #15
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	3338      	adds	r3, #56	; 0x38
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	705a      	strb	r2, [r3, #1]
 8001d90:	e00f      	b.n	8001db2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_EP_ClrStall+0x86>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e00e      	b.n	8001df0 <HAL_PCD_EP_ClrStall+0xa4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 ff54 	bl	8003c8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3338      	adds	r3, #56	; 0x38
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d901      	bls.n	8001e30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e06c      	b.n	8001f0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d902      	bls.n	8001e4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3303      	adds	r3, #3
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e54:	e02b      	b.n	8001eae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d902      	bls.n	8001e72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3303      	adds	r3, #3
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f001 fe30 	bl	8003af6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	441a      	add	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d809      	bhi.n	8001ed8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d203      	bcs.n	8001ed8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1be      	bne.n	8001e56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d811      	bhi.n	8001f08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	2201      	movs	r2, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	6939      	ldr	r1, [r7, #16]
 8001f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f04:	4013      	ands	r3, r2
 8001f06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	333c      	adds	r3, #60	; 0x3c
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	f040 80b3 	bne.w	80020b2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d028      	beq.n	8001fa8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a70      	ldr	r2, [pc, #448]	; (800211c <PCD_EP_OutXfrComplete_int+0x208>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d90e      	bls.n	8001f7c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f003 fc2b 	bl	80057d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f002 f810 	bl	8003fb4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	6093      	str	r3, [r2, #8]
 8001fa6:	e0b3      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	6093      	str	r3, [r2, #8]
 8001fc4:	e0a4      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 809f 	bne.w	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <PCD_EP_OutXfrComplete_int+0x208>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d90f      	bls.n	8001ffa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff6:	6093      	str	r3, [r2, #8]
 8001ff8:	e08a      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	440b      	add	r3, r1
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002020:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4403      	add	r3, r0
 8002030:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002034:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4403      	add	r3, r0
 8002058:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4419      	add	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4403      	add	r3, r0
 800206e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002072:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f003 fbbe 	bl	80057fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d144      	bne.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d138      	bne.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020a8:	461a      	mov	r2, r3
 80020aa:	2101      	movs	r1, #1
 80020ac:	f001 ff82 	bl	8003fb4 <USB_EP0_OutStart>
 80020b0:	e02e      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <PCD_EP_OutXfrComplete_int+0x20c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d124      	bne.n	8002104 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d0:	461a      	mov	r2, r3
 80020d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d6:	6093      	str	r3, [r2, #8]
 80020d8:	e01a      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f0:	461a      	mov	r2, r3
 80020f2:	2320      	movs	r3, #32
 80020f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f003 fb7d 	bl	80057fc <HAL_PCD_DataOutStageCallback>
 8002102:	e005      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f003 fb76 	bl	80057fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	4f54300a 	.word	0x4f54300a
 8002120:	4f54310a 	.word	0x4f54310a

08002124 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d113      	bne.n	8002182 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <PCD_EP_OutSetupPacket_int+0xb8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d922      	bls.n	80021a8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01d      	beq.n	80021a8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e012      	b.n	80021a8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10e      	bne.n	80021a8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f003 fb15 	bl	80057d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <PCD_EP_OutSetupPacket_int+0xb8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d90c      	bls.n	80021d0 <PCD_EP_OutSetupPacket_int+0xac>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c8:	461a      	mov	r2, r3
 80021ca:	2101      	movs	r1, #1
 80021cc:	f001 fef2 	bl	8003fb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	4f54300a 	.word	0x4f54300a
 80021e0:	4f54310a 	.word	0x4f54310a

080021e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
 80021f0:	4613      	mov	r3, r2
 80021f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002202:	883b      	ldrh	r3, [r7, #0]
 8002204:	0419      	lsls	r1, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	430a      	orrs	r2, r1
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
 8002210:	e028      	b.n	8002264 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e00d      	b.n	8002242 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3340      	adds	r3, #64	; 0x40
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	3301      	adds	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	3b01      	subs	r3, #1
 8002248:	429a      	cmp	r2, r3
 800224a:	d3ec      	bcc.n	8002226 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800224c:	883b      	ldrh	r3, [r7, #0]
 800224e:	0418      	lsls	r0, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	3b01      	subs	r3, #1
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4302      	orrs	r2, r0
 800225c:	3340      	adds	r3, #64	; 0x40
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e25b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d075      	beq.n	80023b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ca:	4ba3      	ldr	r3, [pc, #652]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d6:	4ba0      	ldr	r3, [pc, #640]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b9d      	ldr	r3, [pc, #628]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4b99      	ldr	r3, [pc, #612]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d157      	bne.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e236      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x74>
 8002312:	4b91      	ldr	r3, [pc, #580]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a90      	ldr	r2, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a87      	ldr	r2, [pc, #540]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002344:	4b84      	ldr	r3, [pc, #528]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a83      	ldr	r2, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a80      	ldr	r2, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fb24 	bl	80009b0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fb20 	bl	80009b0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1fb      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xc0>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fb10 	bl	80009b0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fb0c 	bl	80009b0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1e7      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b62      	ldr	r3, [pc, #392]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1bb      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4952      	ldr	r1, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_RCC_OscConfig+0x2b0>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fac5 	bl	80009b0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fac1 	bl	80009b0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e19c      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4940      	ldr	r1, [pc, #256]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0x2b0>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe faa4 	bl	80009b0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe faa0 	bl	80009b0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d030      	beq.n	80024f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x2b4>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fa84 	bl	80009b0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fa80 	bl	80009b0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e15b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
 80024ca:	e015      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x2b4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fa6d 	bl	80009b0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fa69 	bl	80009b0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e144      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a0 	beq.w	8002646 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d121      	bne.n	8002586 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7fe fa2f 	bl	80009b0 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e011      	b.n	800257a <HAL_RCC_OscConfig+0x2ce>
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	42470000 	.word	0x42470000
 8002560:	42470e80 	.word	0x42470e80
 8002564:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fa22 	bl	80009b0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0fd      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x4d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x2f0>
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e01c      	b.n	80025d6 <HAL_RCC_OscConfig+0x32a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x312>
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a76      	ldr	r2, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a73      	ldr	r2, [pc, #460]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x32a>
 80025be:	4b71      	ldr	r3, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a70      	ldr	r2, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a6d      	ldr	r2, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe f9e7 	bl	80009b0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe f9e3 	bl	80009b0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0bc      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x33a>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe f9d1 	bl	80009b0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe f9cd 	bl	80009b0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0a6      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8092 	beq.w	8002774 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d05c      	beq.n	8002716 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d141      	bne.n	80026e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe f9a1 	bl	80009b0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe f99d 	bl	80009b0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e078      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	019b      	lsls	r3, r3, #6
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4933      	ldr	r1, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe f976 	bl	80009b0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe f972 	bl	80009b0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04d      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x41c>
 80026e6:	e045      	b.n	8002774 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe f95f 	bl	80009b0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe f95b 	bl	80009b0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e036      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x44a>
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e029      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	429a      	cmp	r2, r3
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d115      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002750:	4293      	cmp	r3, r2
 8002752:	d10d      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000
 8002784:	40023800 	.word	0x40023800
 8002788:	42470060 	.word	0x42470060

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cc      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90c      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d044      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	2b03      	cmp	r3, #3
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e067      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe f898 	bl	80009b0 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe f894 	bl	80009b0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d20c      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	fa21 f303 	lsr.w	r3, r1, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fff8 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00
 8002948:	40023800 	.word	0x40023800
 800294c:	08005f64 	.word	0x08005f64
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d007      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x32>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d008      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x38>
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80b4 	bne.w	8002aec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002986:	60bb      	str	r3, [r7, #8]
       break;
 8002988:	e0b3      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800298c:	60bb      	str	r3, [r7, #8]
      break;
 800298e:	e0b0      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002998:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299a:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d04a      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	ea03 0501 	and.w	r5, r3, r1
 80029bc:	ea04 0602 	and.w	r6, r4, r2
 80029c0:	4629      	mov	r1, r5
 80029c2:	4632      	mov	r2, r6
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	0154      	lsls	r4, r2, #5
 80029ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d2:	014b      	lsls	r3, r1, #5
 80029d4:	4619      	mov	r1, r3
 80029d6:	4622      	mov	r2, r4
 80029d8:	1b49      	subs	r1, r1, r5
 80029da:	eb62 0206 	sbc.w	r2, r2, r6
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	0194      	lsls	r4, r2, #6
 80029e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ec:	018b      	lsls	r3, r1, #6
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	eb64 0402 	sbc.w	r4, r4, r2
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	00e2      	lsls	r2, r4, #3
 80029fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a02:	00d9      	lsls	r1, r3, #3
 8002a04:	460b      	mov	r3, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	195b      	adds	r3, r3, r5
 8002a0a:	eb44 0406 	adc.w	r4, r4, r6
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	0262      	lsls	r2, r4, #9
 8002a18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a1c:	0259      	lsls	r1, r3, #9
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	4621      	mov	r1, r4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	f7fd fbca 	bl	80001c8 <__aeabi_uldivmod>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e049      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	ea03 0501 	and.w	r5, r3, r1
 8002a52:	ea04 0602 	and.w	r6, r4, r2
 8002a56:	4629      	mov	r1, r5
 8002a58:	4632      	mov	r2, r6
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f04f 0400 	mov.w	r4, #0
 8002a62:	0154      	lsls	r4, r2, #5
 8002a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a68:	014b      	lsls	r3, r1, #5
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	1b49      	subs	r1, r1, r5
 8002a70:	eb62 0206 	sbc.w	r2, r2, r6
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	f04f 0400 	mov.w	r4, #0
 8002a7c:	0194      	lsls	r4, r2, #6
 8002a7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a82:	018b      	lsls	r3, r1, #6
 8002a84:	1a5b      	subs	r3, r3, r1
 8002a86:	eb64 0402 	sbc.w	r4, r4, r2
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	00e2      	lsls	r2, r4, #3
 8002a94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a98:	00d9      	lsls	r1, r3, #3
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	195b      	adds	r3, r3, r5
 8002aa0:	eb44 0406 	adc.w	r4, r4, r6
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	02a2      	lsls	r2, r4, #10
 8002aae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ab2:	0299      	lsls	r1, r3, #10
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4621      	mov	r1, r4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f04f 0400 	mov.w	r4, #0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	f7fd fb7f 	bl	80001c8 <__aeabi_uldivmod>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	60bb      	str	r3, [r7, #8]
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aee:	60bb      	str	r3, [r7, #8]
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	68bb      	ldr	r3, [r7, #8]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b20:	b084      	sub	sp, #16
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	f107 001c 	add.w	r0, r7, #28
 8002b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d122      	bne.n	8002b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f001 fa7c 	bl	8004070 <USB_CoreReset>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e01a      	b.n	8002bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 fa70 	bl	8004070 <USB_CoreReset>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba6:	e005      	b.n	8002bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10b      	bne.n	8002bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f043 0206 	orr.w	r2, r3, #6
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bde:	b004      	add	sp, #16
 8002be0:	4770      	bx	lr
	...

08002be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d165      	bne.n	8002cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a41      	ldr	r2, [pc, #260]	; (8002d00 <USB_SetTurnaroundTime+0x11c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d906      	bls.n	8002c0e <USB_SetTurnaroundTime+0x2a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <USB_SetTurnaroundTime+0x120>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d802      	bhi.n	8002c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e062      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <USB_SetTurnaroundTime+0x120>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d906      	bls.n	8002c24 <USB_SetTurnaroundTime+0x40>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <USB_SetTurnaroundTime+0x124>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d802      	bhi.n	8002c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c1e:	230e      	movs	r3, #14
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e057      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <USB_SetTurnaroundTime+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d906      	bls.n	8002c3a <USB_SetTurnaroundTime+0x56>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <USB_SetTurnaroundTime+0x128>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d802      	bhi.n	8002c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c34:	230d      	movs	r3, #13
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e04c      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <USB_SetTurnaroundTime+0x128>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d906      	bls.n	8002c50 <USB_SetTurnaroundTime+0x6c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <USB_SetTurnaroundTime+0x12c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d802      	bhi.n	8002c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e041      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <USB_SetTurnaroundTime+0x12c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d906      	bls.n	8002c66 <USB_SetTurnaroundTime+0x82>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <USB_SetTurnaroundTime+0x130>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d802      	bhi.n	8002c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c60:	230b      	movs	r3, #11
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e036      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <USB_SetTurnaroundTime+0x130>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d906      	bls.n	8002c7c <USB_SetTurnaroundTime+0x98>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <USB_SetTurnaroundTime+0x134>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c76:	230a      	movs	r3, #10
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e02b      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <USB_SetTurnaroundTime+0x134>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d906      	bls.n	8002c92 <USB_SetTurnaroundTime+0xae>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <USB_SetTurnaroundTime+0x138>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d802      	bhi.n	8002c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e020      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <USB_SetTurnaroundTime+0x138>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d906      	bls.n	8002ca8 <USB_SetTurnaroundTime+0xc4>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <USB_SetTurnaroundTime+0x13c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d802      	bhi.n	8002ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e015      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <USB_SetTurnaroundTime+0x13c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d906      	bls.n	8002cbe <USB_SetTurnaroundTime+0xda>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <USB_SetTurnaroundTime+0x140>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d802      	bhi.n	8002cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00a      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e007      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cca:	2309      	movs	r3, #9
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e001      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	00d8acbf 	.word	0x00d8acbf
 8002d04:	00e4e1bf 	.word	0x00e4e1bf
 8002d08:	00f423ff 	.word	0x00f423ff
 8002d0c:	0106737f 	.word	0x0106737f
 8002d10:	011a499f 	.word	0x011a499f
 8002d14:	01312cff 	.word	0x01312cff
 8002d18:	014ca43f 	.word	0x014ca43f
 8002d1c:	016e35ff 	.word	0x016e35ff
 8002d20:	01a6ab1f 	.word	0x01a6ab1f
 8002d24:	01e847ff 	.word	0x01e847ff

08002d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0201 	bic.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e00b      	b.n	8002db0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	e001      	b.n	8002db0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e003      	b.n	8002db8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002db0:	2032      	movs	r0, #50	; 0x32
 8002db2:	f7fd fe09 	bl	80009c8 <HAL_Delay>

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e009      	b.n	8002df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3340      	adds	r3, #64	; 0x40
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3301      	adds	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0e      	cmp	r3, #14
 8002df8:	d9f2      	bls.n	8002de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d112      	bne.n	8002e26 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
 8002e24:	e00b      	b.n	8002e3e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2300      	movs	r3, #0
 8002e48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	4619      	mov	r1, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	461a      	mov	r2, r3
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10c      	bne.n	8002e7e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f961 	bl	8003134 <USB_SetDevSpeed>
 8002e72:	e008      	b.n	8002e86 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e74:	2101      	movs	r1, #1
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f95c 	bl	8003134 <USB_SetDevSpeed>
 8002e7c:	e003      	b.n	8002e86 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e7e:	2103      	movs	r1, #3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f957 	bl	8003134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e86:	2110      	movs	r1, #16
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f90b 	bl	80030a4 <USB_FlushTxFifo>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f929 	bl	80030f0 <USB_FlushRxFifo>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	e043      	b.n	8002f5a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ee8:	d118      	bne.n	8002f1c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e013      	b.n	8002f2e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f12:	461a      	mov	r2, r3
 8002f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e008      	b.n	8002f2e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3301      	adds	r3, #1
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3b7      	bcc.n	8002ed2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e043      	b.n	8002ff0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7e:	d118      	bne.n	8002fb2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e013      	b.n	8002fc4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e008      	b.n	8002fc4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3301      	adds	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3b7      	bcc.n	8002f68 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	2b01      	cmp	r3, #1
 8003010:	d111      	bne.n	8003036 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003018:	461a      	mov	r2, r3
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <USB_DevInit+0x2dc>)
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	f043 0303 	orr.w	r3, r3, #3
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <USB_DevInit+0x2e0>)
 800305c:	4313      	orrs	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f043 0208 	orr.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003096:	b004      	add	sp, #16
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	00800100 	.word	0x00800100
 80030a0:	803c3800 	.word	0x803c3800

080030a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3301      	adds	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <USB_FlushTxFifo+0x48>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e006      	b.n	80030de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d0f0      	beq.n	80030be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	00030d40 	.word	0x00030d40

080030f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2210      	movs	r2, #16
 8003100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <USB_FlushRxFifo+0x40>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e006      	b.n	8003122 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b10      	cmp	r3, #16
 800311e:	d0f0      	beq.n	8003102 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	00030d40 	.word	0x00030d40

08003134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0306 	and.w	r3, r3, #6
 800317e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003186:	2300      	movs	r3, #0
 8003188:	75fb      	strb	r3, [r7, #23]
 800318a:	e00a      	b.n	80031a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d002      	beq.n	8003198 <USB_GetDevSpeed+0x32>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d102      	bne.n	800319e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003198:	2302      	movs	r3, #2
 800319a:	75fb      	strb	r3, [r7, #23]
 800319c:	e001      	b.n	80031a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800319e:	230f      	movs	r3, #15
 80031a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d13a      	bne.n	8003242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d155      	bne.n	80032b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	78db      	ldrb	r3, [r3, #3]
 800321e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	059b      	lsls	r3, r3, #22
 8003226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003228:	4313      	orrs	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	440a      	add	r2, r1
 8003232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e036      	b.n	80032b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	78db      	ldrb	r3, [r3, #3]
 8003294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003296:	430b      	orrs	r3, r1
 8003298:	4313      	orrs	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d135      	bne.n	8003348 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032fc:	4013      	ands	r3, r2
 80032fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003320:	4013      	ands	r3, r2
 8003322:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0159      	lsls	r1, r3, #5
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	440b      	add	r3, r1
 800333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333e:	4619      	mov	r1, r3
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <USB_DeactivateEndpoint+0x100>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
 8003346:	e034      	b.n	80033b2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	43db      	mvns	r3, r3
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003368:	4013      	ands	r3, r2
 800336a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	43db      	mvns	r3, r3
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338c:	4013      	ands	r3, r2
 800338e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	0159      	lsls	r1, r3, #5
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	4619      	mov	r1, r3
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <USB_DeactivateEndpoint+0x104>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	ec337800 	.word	0xec337800
 80033c4:	eff37800 	.word	0xeff37800

080033c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 815c 	bne.w	80036a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d132      	bne.n	8003458 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	440a      	add	r2, r1
 8003408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800340c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	0151      	lsls	r1, r2, #5
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	440a      	add	r2, r1
 800342c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	440a      	add	r2, r1
 800344c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003450:	0cdb      	lsrs	r3, r3, #19
 8003452:	04db      	lsls	r3, r3, #19
 8003454:	6113      	str	r3, [r2, #16]
 8003456:	e074      	b.n	8003542 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	440a      	add	r2, r1
 800346e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003472:	0cdb      	lsrs	r3, r3, #19
 8003474:	04db      	lsls	r3, r3, #19
 8003476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	440a      	add	r2, r1
 800348e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800349a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6959      	ldr	r1, [r3, #20]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	440b      	add	r3, r1
 80034b4:	1e59      	subs	r1, r3, #1
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80034be:	04d9      	lsls	r1, r3, #19
 80034c0:	4b9d      	ldr	r3, [pc, #628]	; (8003738 <USB_EPStartXfer+0x370>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	69b9      	ldr	r1, [r7, #24]
 80034c6:	0148      	lsls	r0, r1, #5
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	4401      	add	r1, r0
 80034cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034d0:	4313      	orrs	r3, r2
 80034d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	0148      	lsls	r0, r1, #5
 80034ee:	69f9      	ldr	r1, [r7, #28]
 80034f0:	4401      	add	r1, r0
 80034f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034f6:	4313      	orrs	r3, r2
 80034f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d11f      	bne.n	8003542 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	440a      	add	r2, r1
 8003518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003520:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	440a      	add	r2, r1
 8003538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003540:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d14b      	bne.n	80035e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	78db      	ldrb	r3, [r3, #3]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d128      	bne.n	80035be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e00f      	b.n	80035be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e12f      	b.n	8003840 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d015      	beq.n	8003634 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8117 	beq.w	8003840 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800362e:	4313      	orrs	r3, r2
 8003630:	634b      	str	r3, [r1, #52]	; 0x34
 8003632:	e105      	b.n	8003840 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d110      	bne.n	8003666 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e00f      	b.n	8003686 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	b298      	uxth	r0, r3
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa2b 	bl	8003af6 <USB_WritePacket>
 80036a0:	e0ce      	b.n	8003840 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036bc:	0cdb      	lsrs	r3, r3, #19
 80036be:	04db      	lsls	r3, r3, #19
 80036c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	0151      	lsls	r1, r2, #5
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	440a      	add	r2, r1
 80036d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d126      	bne.n	800373c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	0148      	lsls	r0, r1, #5
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	4401      	add	r1, r0
 800370c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003710:	4313      	orrs	r3, r2
 8003712:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	440a      	add	r2, r1
 800372a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003732:	6113      	str	r3, [r2, #16]
 8003734:	e036      	b.n	80037a4 <USB_EPStartXfer+0x3dc>
 8003736:	bf00      	nop
 8003738:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4413      	add	r3, r2
 8003746:	1e5a      	subs	r2, r3, #1
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	04d9      	lsls	r1, r3, #19
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <USB_EPStartXfer+0x484>)
 8003766:	400b      	ands	r3, r1
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	0148      	lsls	r0, r1, #5
 800376c:	69f9      	ldr	r1, [r7, #28]
 800376e:	4401      	add	r1, r0
 8003770:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	8af9      	ldrh	r1, [r7, #22]
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003794:	69b9      	ldr	r1, [r7, #24]
 8003796:	0148      	lsls	r0, r1, #5
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	4401      	add	r1, r0
 800379c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10d      	bne.n	80037c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	460a      	mov	r2, r1
 80037c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d128      	bne.n	8003820 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d110      	bne.n	8003800 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00f      	b.n	8003820 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800383e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	1ff80000 	.word	0x1ff80000

08003850 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 80cd 	bne.w	8003a0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d132      	bne.n	80038e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	440a      	add	r2, r1
 8003890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003894:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003898:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800389c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	0151      	lsls	r1, r2, #5
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	440a      	add	r2, r1
 80038d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d8:	0cdb      	lsrs	r3, r3, #19
 80038da:	04db      	lsls	r3, r3, #19
 80038dc:	6113      	str	r3, [r2, #16]
 80038de:	e04e      	b.n	800397e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fa:	0cdb      	lsrs	r3, r3, #19
 80038fc:	04db      	lsls	r3, r3, #19
 80038fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800391e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003922:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396e:	6939      	ldr	r1, [r7, #16]
 8003970:	0148      	lsls	r0, r1, #5
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	4401      	add	r1, r0
 8003976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d11e      	bne.n	80039c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e092      	b.n	8003ae8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	0151      	lsls	r1, r2, #5
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	440a      	add	r2, r1
 80039d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07e      	beq.n	8003ae8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	6979      	ldr	r1, [r7, #20]
 8003a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a06:	4313      	orrs	r3, r2
 8003a08:	634b      	str	r3, [r1, #52]	; 0x34
 8003a0a:	e06d      	b.n	8003ae8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a26:	0cdb      	lsrs	r3, r3, #19
 8003a28:	04db      	lsls	r3, r3, #19
 8003a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a4e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	6939      	ldr	r1, [r7, #16]
 8003a98:	0148      	lsls	r0, r1, #5
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	4401      	add	r1, r0
 8003a9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10d      	bne.n	8003ac8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b089      	sub	sp, #36	; 0x24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	4611      	mov	r1, r2
 8003b02:	461a      	mov	r2, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	71fb      	strb	r3, [r7, #7]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11a      	bne.n	8003b52 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b1c:	88bb      	ldrh	r3, [r7, #4]
 8003b1e:	3303      	adds	r3, #3
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e00f      	b.n	8003b4a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	031a      	lsls	r2, r3, #12
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b36:	461a      	mov	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3304      	adds	r3, #4
 8003b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3eb      	bcc.n	8003b2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3724      	adds	r7, #36	; 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	3303      	adds	r3, #3
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e00b      	b.n	8003b9c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3304      	adds	r3, #4
 8003b94:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d3ef      	bcc.n	8003b84 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d12c      	bne.n	8003c28 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db12      	blt.n	8003c06 <USB_EPSetStall+0x54>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00f      	beq.n	8003c06 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c04:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e02b      	b.n	8003c80 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db12      	blt.n	8003c60 <USB_EPSetStall+0xae>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c5e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d128      	bne.n	8003cfc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	78db      	ldrb	r3, [r3, #3]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d003      	beq.n	8003cda <USB_EPClearStall+0x4c>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	78db      	ldrb	r3, [r3, #3]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d138      	bne.n	8003d4c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e027      	b.n	8003d4c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	78db      	ldrb	r3, [r3, #3]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d003      	beq.n	8003d2c <USB_EPClearStall+0x9e>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	78db      	ldrb	r3, [r3, #3]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d10f      	bne.n	8003d4c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	f7fc fdfe 	bl	80009c8 <HAL_Delay>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003df6:	2003      	movs	r0, #3
 8003df8:	f7fc fde6 	bl	80009c8 <HAL_Delay>

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	0c1b      	lsrs	r3, r3, #16
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	b29b      	uxth	r3, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
 8003f00:	01db      	lsls	r3, r3, #7
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0301 	and.w	r3, r3, #1
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f66:	f023 0307 	bic.w	r3, r3, #7
 8003f6a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0306 	and.w	r3, r3, #6
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d109      	bne.n	8003f90 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8a:	f043 0303 	orr.w	r3, r3, #3
 8003f8e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	333c      	adds	r3, #60	; 0x3c
 8003fca:	3304      	adds	r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <USB_EP0_OutStart+0xb8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d90a      	bls.n	8003fee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe8:	d101      	bne.n	8003fee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e037      	b.n	800405e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800400c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401c:	f043 0318 	orr.w	r3, r3, #24
 8004020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004034:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10f      	bne.n	800405c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004056:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800405a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	4f54300a 	.word	0x4f54300a

08004070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <USB_CoreReset+0x64>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e01b      	b.n	80040c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	daf2      	bge.n	800407c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <USB_CoreReset+0x64>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d0f0      	beq.n	80040a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	00030d40 	.word	0x00030d40

080040d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80040e4:	2304      	movs	r3, #4
 80040e6:	2203      	movs	r2, #3
 80040e8:	2181      	movs	r1, #129	; 0x81
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f001 fccd 	bl	8005a8a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80040f6:	2010      	movs	r0, #16
 80040f8:	f001 fe32 	bl	8005d60 <malloc>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if (pdev->pClassData == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <USBD_HID_Init+0x3c>
  {
    return USBD_FAIL;
 8004110:	2302      	movs	r3, #2
 8004112:	e005      	b.n	8004120 <USBD_HID_Init+0x48>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800411a:	2200      	movs	r2, #0
 800411c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004134:	2181      	movs	r1, #129	; 0x81
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f001 fccd 	bl	8005ad6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fe0c 	bl	8005d70 <free>
    pdev->pClassData = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800417c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004196:	2b00      	cmp	r3, #0
 8004198:	d045      	beq.n	8004226 <USBD_HID_Setup+0xba>
 800419a:	2b20      	cmp	r3, #32
 800419c:	f040 80d3 	bne.w	8004346 <USBD_HID_Setup+0x1da>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	3b02      	subs	r3, #2
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d835      	bhi.n	8004216 <USBD_HID_Setup+0xaa>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <USBD_HID_Setup+0x44>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	08004207 	.word	0x08004207
 80041b4:	080041e7 	.word	0x080041e7
 80041b8:	08004217 	.word	0x08004217
 80041bc:	08004217 	.word	0x08004217
 80041c0:	08004217 	.word	0x08004217
 80041c4:	08004217 	.word	0x08004217
 80041c8:	08004217 	.word	0x08004217
 80041cc:	08004217 	.word	0x08004217
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041d9 	.word	0x080041d9
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	885b      	ldrh	r3, [r3, #2]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	601a      	str	r2, [r3, #0]
      break;
 80041e4:	e01e      	b.n	8004224 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2201      	movs	r2, #1
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f001 f905 	bl	80053fc <USBD_CtlSendData>
      break;
 80041f2:	e017      	b.n	8004224 <USBD_HID_Setup+0xb8>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	885b      	ldrh	r3, [r3, #2]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]
      break;
 8004204:	e00e      	b.n	8004224 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3304      	adds	r3, #4
 800420a:	2201      	movs	r2, #1
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f001 f8f4 	bl	80053fc <USBD_CtlSendData>
      break;
 8004214:	e006      	b.n	8004224 <USBD_HID_Setup+0xb8>

    default:
      USBD_CtlError (pdev, req);
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 f884 	bl	8005326 <USBD_CtlError>
      ret = USBD_FAIL;
 800421e:	2302      	movs	r3, #2
 8004220:	75fb      	strb	r3, [r7, #23]
      break;
 8004222:	bf00      	nop
    }
    break;
 8004224:	e096      	b.n	8004354 <USBD_HID_Setup+0x1e8>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b0b      	cmp	r3, #11
 800422c:	f200 8083 	bhi.w	8004336 <USBD_HID_Setup+0x1ca>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <USBD_HID_Setup+0xcc>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004269 	.word	0x08004269
 800423c:	08004337 	.word	0x08004337
 8004240:	08004337 	.word	0x08004337
 8004244:	08004337 	.word	0x08004337
 8004248:	08004337 	.word	0x08004337
 800424c:	08004337 	.word	0x08004337
 8004250:	08004291 	.word	0x08004291
 8004254:	08004337 	.word	0x08004337
 8004258:	08004337 	.word	0x08004337
 800425c:	08004337 	.word	0x08004337
 8004260:	080042e9 	.word	0x080042e9
 8004264:	08004311 	.word	0x08004311
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <USBD_HID_Setup+0x116>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004272:	f107 030e 	add.w	r3, r7, #14
 8004276:	2202      	movs	r2, #2
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f001 f8be 	bl	80053fc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004280:	e060      	b.n	8004344 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 f84e 	bl	8005326 <USBD_CtlError>
			  ret = USBD_FAIL;
 800428a:	2302      	movs	r3, #2
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e059      	b.n	8004344 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_DESCRIPTOR:
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	885b      	ldrh	r3, [r3, #2]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b22      	cmp	r3, #34	; 0x22
 800429a:	d108      	bne.n	80042ae <USBD_HID_Setup+0x142>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	88db      	ldrh	r3, [r3, #6]
 80042a0:	2b4a      	cmp	r3, #74	; 0x4a
 80042a2:	bf28      	it	cs
 80042a4:	234a      	movcs	r3, #74	; 0x4a
 80042a6:	83fb      	strh	r3, [r7, #30]
        pbuf = HID_MOUSE_ReportDesc;
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <USBD_HID_Setup+0x1f4>)
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	e015      	b.n	80042da <USBD_HID_Setup+0x16e>
      }
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	885b      	ldrh	r3, [r3, #2]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b21      	cmp	r3, #33	; 0x21
 80042b8:	d108      	bne.n	80042cc <USBD_HID_Setup+0x160>
      {
        pbuf = USBD_HID_Desc;
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <USBD_HID_Setup+0x1f8>)
 80042bc:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	88db      	ldrh	r3, [r3, #6]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	bf28      	it	cs
 80042c6:	2309      	movcs	r3, #9
 80042c8:	83fb      	strh	r3, [r7, #30]
 80042ca:	e006      	b.n	80042da <USBD_HID_Setup+0x16e>
      }
      else
      {
        USBD_CtlError (pdev, req);
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 f829 	bl	8005326 <USBD_CtlError>
        ret = USBD_FAIL;
 80042d4:	2302      	movs	r3, #2
 80042d6:	75fb      	strb	r3, [r7, #23]
        break;
 80042d8:	e034      	b.n	8004344 <USBD_HID_Setup+0x1d8>
      }
      USBD_CtlSendData (pdev, pbuf, len);
 80042da:	8bfb      	ldrh	r3, [r7, #30]
 80042dc:	461a      	mov	r2, r3
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 f88b 	bl	80053fc <USBD_CtlSendData>
      break;
 80042e6:	e02d      	b.n	8004344 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <USBD_HID_Setup+0x196>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3308      	adds	r3, #8
 80042f6:	2201      	movs	r2, #1
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 f87e 	bl	80053fc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004300:	e020      	b.n	8004344 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f80e 	bl	8005326 <USBD_CtlError>
			  ret = USBD_FAIL;
 800430a:	2302      	movs	r3, #2
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	e019      	b.n	8004344 <USBD_HID_Setup+0x1d8>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004316:	2b03      	cmp	r3, #3
 8004318:	d106      	bne.n	8004328 <USBD_HID_Setup+0x1bc>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	885b      	ldrh	r3, [r3, #2]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004326:	e00d      	b.n	8004344 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fffb 	bl	8005326 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004330:	2302      	movs	r3, #2
 8004332:	75fb      	strb	r3, [r7, #23]
      break;
 8004334:	e006      	b.n	8004344 <USBD_HID_Setup+0x1d8>

    default:
      USBD_CtlError (pdev, req);
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fff4 	bl	8005326 <USBD_CtlError>
      ret = USBD_FAIL;
 800433e:	2302      	movs	r3, #2
 8004340:	75fb      	strb	r3, [r7, #23]
      break;
 8004342:	bf00      	nop
    }
    break;
 8004344:	e006      	b.n	8004354 <USBD_HID_Setup+0x1e8>

  default:
    USBD_CtlError (pdev, req);
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 ffec 	bl	8005326 <USBD_CtlError>
    ret = USBD_FAIL;
 800434e:	2302      	movs	r3, #2
 8004350:	75fb      	strb	r3, [r7, #23]
    break;
 8004352:	bf00      	nop
  }

  return ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200000c8 	.word	0x200000c8
 8004364:	200000b0 	.word	0x200000b0

08004368 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800437c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004384:	2b03      	cmp	r3, #3
 8004386:	d10c      	bne.n	80043a2 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	7b1b      	ldrb	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d108      	bne.n	80043a2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2201      	movs	r2, #1
 8004394:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	2181      	movs	r1, #129	; 0x81
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f001 fc42 	bl	8005c26 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgFSDesc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2222      	movs	r2, #34	; 0x22
 80043b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000044 	.word	0x20000044

080043cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgHSDesc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2222      	movs	r2, #34	; 0x22
 80043d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80043da:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	20000068 	.word	0x20000068

080043ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2222      	movs	r2, #34	; 0x22
 80043f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	2000008c 	.word	0x2000008c

0800440c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800441e:	2200      	movs	r2, #0
 8004420:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	220a      	movs	r2, #10
 800443c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800443e:	4b03      	ldr	r3, [pc, #12]	; (800444c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	200000bc 	.word	0x200000bc

08004450 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004464:	2302      	movs	r3, #2
 8004466:	e01a      	b.n	800449e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	79fa      	ldrb	r2, [r7, #7]
 8004494:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f001 fa90 	bl	80059bc <USBD_LL_Init>

  return USBD_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e001      	b.n	80044cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80044c8:	2302      	movs	r3, #2
 80044ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 fab6 	bl	8005a54 <USBD_LL_Start>

  return USBD_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004514:	2302      	movs	r3, #2
 8004516:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	4611      	mov	r1, r2
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	4611      	mov	r1, r2
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
  return USBD_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe94 	bl	80052ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d00c      	beq.n	80045c2 <USBD_LL_SetupStage+0x56>
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d302      	bcc.n	80045b2 <USBD_LL_SetupStage+0x46>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d010      	beq.n	80045d2 <USBD_LL_SetupStage+0x66>
 80045b0:	e017      	b.n	80045e2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa04 	bl	80049c8 <USBD_StdDevReq>
    break;
 80045c0:	e01a      	b.n	80045f8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa66 	bl	8004a9c <USBD_StdItfReq>
    break;
 80045d0:	e012      	b.n	80045f8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 faa4 	bl	8004b28 <USBD_StdEPReq>
    break;
 80045e0:	e00a      	b.n	80045f8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80045e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 fa8f 	bl	8005b14 <USBD_LL_StallEP>
    break;
 80045f6:	bf00      	nop
  }

  return USBD_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	460b      	mov	r3, r1
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d14b      	bne.n	80046ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800461c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004624:	2b03      	cmp	r3, #3
 8004626:	d134      	bne.n	8004692 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d919      	bls.n	8004668 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004652:	b29b      	uxth	r3, r3
 8004654:	e002      	b.n	800465c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fef9 	bl	8005458 <USBD_CtlContinueRx>
 8004666:	e038      	b.n	80046da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800467a:	2b03      	cmp	r3, #3
 800467c:	d105      	bne.n	800468a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fef6 	bl	800547c <USBD_CtlSendStatus>
 8004690:	e023      	b.n	80046da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004698:	2b05      	cmp	r3, #5
 800469a:	d11e      	bne.n	80046da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80046a4:	2100      	movs	r1, #0
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f001 fa34 	bl	8005b14 <USBD_LL_StallEP>
 80046ac:	e015      	b.n	80046da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d108      	bne.n	80046d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	7afa      	ldrb	r2, [r7, #11]
 80046ce:	4611      	mov	r1, r2
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	4798      	blx	r3
 80046d4:	e001      	b.n	80046da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80046d6:	2302      	movs	r3, #2
 80046d8:	e000      	b.n	80046dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	460b      	mov	r3, r1
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80046f2:	7afb      	ldrb	r3, [r7, #11]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d17f      	bne.n	80047f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3314      	adds	r3, #20
 80046fc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004704:	2b02      	cmp	r3, #2
 8004706:	d15c      	bne.n	80047c2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d915      	bls.n	8004740 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fe81 	bl	8005434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004732:	2300      	movs	r3, #0
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f001 fa97 	bl	8005c6c <USBD_LL_PrepareReceive>
 800473e:	e04e      	b.n	80047de <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	6912      	ldr	r2, [r2, #16]
 8004748:	fbb3 f1f2 	udiv	r1, r3, r2
 800474c:	fb02 f201 	mul.w	r2, r2, r1
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11c      	bne.n	8004790 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800475e:	429a      	cmp	r2, r3
 8004760:	d316      	bcc.n	8004790 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800476c:	429a      	cmp	r2, r3
 800476e:	d20f      	bcs.n	8004790 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004770:	2200      	movs	r2, #0
 8004772:	2100      	movs	r1, #0
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fe5d 	bl	8005434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004782:	2300      	movs	r3, #0
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f001 fa6f 	bl	8005c6c <USBD_LL_PrepareReceive>
 800478e:	e026      	b.n	80047de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d105      	bne.n	80047b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f001 f9ad 	bl	8005b14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fe71 	bl	80054a2 <USBD_CtlReceiveStatus>
 80047c0:	e00d      	b.n	80047de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d004      	beq.n	80047d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f001 f99b 	bl	8005b14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d11d      	bne.n	8004824 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff fe82 	bl	80044f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80047f6:	e015      	b.n	8004824 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800480a:	2b03      	cmp	r3, #3
 800480c:	d108      	bne.n	8004820 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	7afa      	ldrb	r2, [r7, #11]
 8004818:	4611      	mov	r1, r2
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	4798      	blx	r3
 800481e:	e001      	b.n	8004824 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004820:	2302      	movs	r3, #2
 8004822:	e000      	b.n	8004826 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004836:	2340      	movs	r3, #64	; 0x40
 8004838:	2200      	movs	r2, #0
 800483a:	2100      	movs	r1, #0
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 f924 	bl	8005a8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2240      	movs	r2, #64	; 0x40
 800484e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004852:	2340      	movs	r3, #64	; 0x40
 8004854:	2200      	movs	r2, #0
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f916 	bl	8005a8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2240      	movs	r2, #64	; 0x40
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6852      	ldr	r2, [r2, #4]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	4611      	mov	r1, r2
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
  }

  return USBD_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2204      	movs	r2, #4
 80048e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800492a:	2b03      	cmp	r3, #3
 800492c:	d10b      	bne.n	8004946 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6852      	ldr	r2, [r2, #4]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	4611      	mov	r1, r2
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3

  return USBD_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d004      	beq.n	80049ec <USBD_StdDevReq+0x24>
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d002      	beq.n	80049ec <USBD_StdDevReq+0x24>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <USBD_StdDevReq+0x34>
 80049ea:	e04c      	b.n	8004a86 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
    break;
 80049fa:	e049      	b.n	8004a90 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b09      	cmp	r3, #9
 8004a02:	d83a      	bhi.n	8004a7a <USBD_StdDevReq+0xb2>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <USBD_StdDevReq+0x44>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004a71 	.word	0x08004a71
 8004a14:	08004a7b 	.word	0x08004a7b
 8004a18:	08004a67 	.word	0x08004a67
 8004a1c:	08004a7b 	.word	0x08004a7b
 8004a20:	08004a3f 	.word	0x08004a3f
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a7b 	.word	0x08004a7b
 8004a2c:	08004a53 	.word	0x08004a53
 8004a30:	08004a49 	.word	0x08004a49
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9d2 	bl	8004de0 <USBD_GetDescriptor>
      break;
 8004a3c:	e022      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fac7 	bl	8004fd4 <USBD_SetAddress>
      break;
 8004a46:	e01d      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fb04 	bl	8005058 <USBD_SetConfig>
      break;
 8004a50:	e018      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb8d 	bl	8005174 <USBD_GetConfig>
      break;
 8004a5a:	e013      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004a5c:	6839      	ldr	r1, [r7, #0]
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fbbc 	bl	80051dc <USBD_GetStatus>
      break;
 8004a64:	e00e      	b.n	8004a84 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fbea 	bl	8005242 <USBD_SetFeature>
      break;
 8004a6e:	e009      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fbf9 	bl	800526a <USBD_ClrFeature>
      break;
 8004a78:	e004      	b.n	8004a84 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fc52 	bl	8005326 <USBD_CtlError>
      break;
 8004a82:	bf00      	nop
    }
    break;
 8004a84:	e004      	b.n	8004a90 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fc4c 	bl	8005326 <USBD_CtlError>
    break;
 8004a8e:	bf00      	nop
  }

  return ret;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop

08004a9c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d003      	beq.n	8004abe <USBD_StdItfReq+0x22>
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d001      	beq.n	8004abe <USBD_StdItfReq+0x22>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d12a      	bne.n	8004b14 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d81d      	bhi.n	8004b06 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	889b      	ldrh	r3, [r3, #4]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d813      	bhi.n	8004afc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	88db      	ldrh	r3, [r3, #6]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d110      	bne.n	8004b10 <USBD_StdItfReq+0x74>
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fcc1 	bl	800547c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004afa:	e009      	b.n	8004b10 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fc11 	bl	8005326 <USBD_CtlError>
      break;
 8004b04:	e004      	b.n	8004b10 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fc0c 	bl	8005326 <USBD_CtlError>
      break;
 8004b0e:	e000      	b.n	8004b12 <USBD_StdItfReq+0x76>
      break;
 8004b10:	bf00      	nop
    }
    break;
 8004b12:	e004      	b.n	8004b1e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fc05 	bl	8005326 <USBD_CtlError>
    break;
 8004b1c:	bf00      	nop
  }

  return USBD_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	889b      	ldrh	r3, [r3, #4]
 8004b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d004      	beq.n	8004b52 <USBD_StdEPReq+0x2a>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d002      	beq.n	8004b52 <USBD_StdEPReq+0x2a>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <USBD_StdEPReq+0x3a>
 8004b50:	e13b      	b.n	8004dca <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
    break;
 8004b60:	e138      	b.n	8004dd4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d10a      	bne.n	8004b84 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	e128      	b.n	8004dd6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d03e      	beq.n	8004c0a <USBD_StdEPReq+0xe2>
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d002      	beq.n	8004b96 <USBD_StdEPReq+0x6e>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d070      	beq.n	8004c76 <USBD_StdEPReq+0x14e>
 8004b94:	e113      	b.n	8004dbe <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d002      	beq.n	8004ba6 <USBD_StdEPReq+0x7e>
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d015      	beq.n	8004bd0 <USBD_StdEPReq+0xa8>
 8004ba4:	e02b      	b.n	8004bfe <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <USBD_StdEPReq+0x9e>
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d009      	beq.n	8004bc6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004bb2:	7bbb      	ldrb	r3, [r7, #14]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 ffac 	bl	8005b14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 ffa8 	bl	8005b14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004bc4:	e020      	b.n	8004c08 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fbac 	bl	8005326 <USBD_CtlError>
        break;
 8004bce:	e01b      	b.n	8004c08 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	885b      	ldrh	r3, [r3, #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004bd8:	7bbb      	ldrb	r3, [r7, #14]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <USBD_StdEPReq+0xce>
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d008      	beq.n	8004bf6 <USBD_StdEPReq+0xce>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	88db      	ldrh	r3, [r3, #6]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ff8f 	bl	8005b14 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fc40 	bl	800547c <USBD_CtlSendStatus>

        break;
 8004bfc:	e004      	b.n	8004c08 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fb90 	bl	8005326 <USBD_CtlError>
        break;
 8004c06:	bf00      	nop
      }
      break;
 8004c08:	e0de      	b.n	8004dc8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d002      	beq.n	8004c1a <USBD_StdEPReq+0xf2>
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d015      	beq.n	8004c44 <USBD_StdEPReq+0x11c>
 8004c18:	e026      	b.n	8004c68 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <USBD_StdEPReq+0x112>
 8004c20:	7bbb      	ldrb	r3, [r7, #14]
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d009      	beq.n	8004c3a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004c26:	7bbb      	ldrb	r3, [r7, #14]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 ff72 	bl	8005b14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 ff6e 	bl	8005b14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004c38:	e01c      	b.n	8004c74 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb72 	bl	8005326 <USBD_CtlError>
        break;
 8004c42:	e017      	b.n	8004c74 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	885b      	ldrh	r3, [r3, #2]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d112      	bne.n	8004c72 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c56:	7bbb      	ldrb	r3, [r7, #14]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 ff79 	bl	8005b52 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fc0b 	bl	800547c <USBD_CtlSendStatus>
        }
        break;
 8004c66:	e004      	b.n	8004c72 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb5b 	bl	8005326 <USBD_CtlError>
        break;
 8004c70:	e000      	b.n	8004c74 <USBD_StdEPReq+0x14c>
        break;
 8004c72:	bf00      	nop
      }
      break;
 8004c74:	e0a8      	b.n	8004dc8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d002      	beq.n	8004c86 <USBD_StdEPReq+0x15e>
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d031      	beq.n	8004ce8 <USBD_StdEPReq+0x1c0>
 8004c84:	e095      	b.n	8004db2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c86:	7bbb      	ldrb	r3, [r7, #14]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <USBD_StdEPReq+0x174>
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d004      	beq.n	8004c9c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb46 	bl	8005326 <USBD_CtlError>
          break;
 8004c9a:	e08f      	b.n	8004dbc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da0b      	bge.n	8004cbc <USBD_StdEPReq+0x194>
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3304      	adds	r3, #4
 8004cba:	e00a      	b.n	8004cd2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fb8b 	bl	80053fc <USBD_CtlSendData>
          break;
 8004ce6:	e069      	b.n	8004dbc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	da11      	bge.n	8004d14 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	f003 020f 	and.w	r2, r3, #15
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3318      	adds	r3, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d117      	bne.n	8004d3a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb0a 	bl	8005326 <USBD_CtlError>
            break;
 8004d12:	e053      	b.n	8004dbc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d14:	7bbb      	ldrb	r3, [r7, #14]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 faf7 	bl	8005326 <USBD_CtlError>
            break;
 8004d38:	e040      	b.n	8004dbc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da0b      	bge.n	8004d5a <USBD_StdEPReq+0x232>
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	3310      	adds	r3, #16
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	3304      	adds	r3, #4
 8004d58:	e00a      	b.n	8004d70 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
 8004d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d72:	7bbb      	ldrb	r3, [r7, #14]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <USBD_StdEPReq+0x256>
 8004d78:	7bbb      	ldrb	r3, [r7, #14]
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d103      	bne.n	8004d86 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e00e      	b.n	8004da4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 ff00 	bl	8005b90 <USBD_LL_IsStallEP>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e002      	b.n	8004da4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2202      	movs	r2, #2
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb26 	bl	80053fc <USBD_CtlSendData>
          break;
 8004db0:	e004      	b.n	8004dbc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fab6 	bl	8005326 <USBD_CtlError>
        break;
 8004dba:	bf00      	nop
      }
      break;
 8004dbc:	e004      	b.n	8004dc8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fab0 	bl	8005326 <USBD_CtlError>
      break;
 8004dc6:	bf00      	nop
    }
    break;
 8004dc8:	e004      	b.n	8004dd4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 faaa 	bl	8005326 <USBD_CtlError>
    break;
 8004dd2:	bf00      	nop
  }

  return ret;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	885b      	ldrh	r3, [r3, #2]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	f200 80c9 	bhi.w	8004f8c <USBD_GetDescriptor+0x1ac>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <USBD_GetDescriptor+0x20>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e75 	.word	0x08004e75
 8004e0c:	08004f8d 	.word	0x08004f8d
 8004e10:	08004f8d 	.word	0x08004f8d
 8004e14:	08004f39 	.word	0x08004f39
 8004e18:	08004f5f 	.word	0x08004f5f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	7c12      	ldrb	r2, [r2, #16]
 8004e28:	f107 010a 	add.w	r1, r7, #10
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4798      	blx	r3
 8004e30:	60f8      	str	r0, [r7, #12]
    break;
 8004e32:	e0b0      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7c1b      	ldrb	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10d      	bne.n	8004e58 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	f107 020a 	add.w	r2, r7, #10
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4798      	blx	r3
 8004e4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	2202      	movs	r2, #2
 8004e54:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004e56:	e09e      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f107 020a 	add.w	r2, r7, #10
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
 8004e68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	2202      	movs	r2, #2
 8004e70:	701a      	strb	r2, [r3, #0]
    break;
 8004e72:	e090      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	885b      	ldrh	r3, [r3, #2]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d856      	bhi.n	8004f2c <USBD_GetDescriptor+0x14c>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <USBD_GetDescriptor+0xa4>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e9d 	.word	0x08004e9d
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004f15 	.word	0x08004f15
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	7c12      	ldrb	r2, [r2, #16]
 8004ea8:	f107 010a 	add.w	r1, r7, #10
 8004eac:	4610      	mov	r0, r2
 8004eae:	4798      	blx	r3
 8004eb0:	60f8      	str	r0, [r7, #12]
      break;
 8004eb2:	e040      	b.n	8004f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	7c12      	ldrb	r2, [r2, #16]
 8004ec0:	f107 010a 	add.w	r1, r7, #10
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
 8004ec8:	60f8      	str	r0, [r7, #12]
      break;
 8004eca:	e034      	b.n	8004f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	7c12      	ldrb	r2, [r2, #16]
 8004ed8:	f107 010a 	add.w	r1, r7, #10
 8004edc:	4610      	mov	r0, r2
 8004ede:	4798      	blx	r3
 8004ee0:	60f8      	str	r0, [r7, #12]
      break;
 8004ee2:	e028      	b.n	8004f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	7c12      	ldrb	r2, [r2, #16]
 8004ef0:	f107 010a 	add.w	r1, r7, #10
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
 8004ef8:	60f8      	str	r0, [r7, #12]
      break;
 8004efa:	e01c      	b.n	8004f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	7c12      	ldrb	r2, [r2, #16]
 8004f08:	f107 010a 	add.w	r1, r7, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4798      	blx	r3
 8004f10:	60f8      	str	r0, [r7, #12]
      break;
 8004f12:	e010      	b.n	8004f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	7c12      	ldrb	r2, [r2, #16]
 8004f20:	f107 010a 	add.w	r1, r7, #10
 8004f24:	4610      	mov	r0, r2
 8004f26:	4798      	blx	r3
 8004f28:	60f8      	str	r0, [r7, #12]
      break;
 8004f2a:	e004      	b.n	8004f36 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9f9 	bl	8005326 <USBD_CtlError>
      return;
 8004f34:	e04b      	b.n	8004fce <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8004f36:	e02e      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7c1b      	ldrb	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	f107 020a 	add.w	r2, r7, #10
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
 8004f50:	60f8      	str	r0, [r7, #12]
      break;
 8004f52:	e020      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9e5 	bl	8005326 <USBD_CtlError>
      return;
 8004f5c:	e037      	b.n	8004fce <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7c1b      	ldrb	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10d      	bne.n	8004f82 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f107 020a 	add.w	r2, r7, #10
 8004f72:	4610      	mov	r0, r2
 8004f74:	4798      	blx	r3
 8004f76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	701a      	strb	r2, [r3, #0]
      break;
 8004f80:	e009      	b.n	8004f96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f9ce 	bl	8005326 <USBD_CtlError>
      return;
 8004f8a:	e020      	b.n	8004fce <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9c9 	bl	8005326 <USBD_CtlError>
    return;
 8004f94:	e01b      	b.n	8004fce <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <USBD_GetDescriptor+0x1e0>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	88db      	ldrh	r3, [r3, #6]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	88da      	ldrh	r2, [r3, #6]
 8004fa8:	897b      	ldrh	r3, [r7, #10]
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bf28      	it	cs
 8004fae:	4613      	movcs	r3, r2
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa1e 	bl	80053fc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	88db      	ldrh	r3, [r3, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fa57 	bl	800547c <USBD_CtlSendStatus>
  }
}
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	889b      	ldrh	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d130      	bne.n	8005048 <USBD_SetAddress+0x74>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	88db      	ldrh	r3, [r3, #6]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d12c      	bne.n	8005048 <USBD_SetAddress+0x74>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	885b      	ldrh	r3, [r3, #2]
 8004ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff4:	d828      	bhi.n	8005048 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	885b      	ldrh	r3, [r3, #2]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005008:	2b03      	cmp	r3, #3
 800500a:	d104      	bne.n	8005016 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f989 	bl	8005326 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005014:	e01c      	b.n	8005050 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fde0 	bl	8005be8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa27 	bl	800547c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800503c:	e008      	b.n	8005050 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005046:	e003      	b.n	8005050 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f96b 	bl	8005326 <USBD_CtlError>
  }
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	4b41      	ldr	r3, [pc, #260]	; (8005170 <USBD_SetConfig+0x118>)
 800506a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800506c:	4b40      	ldr	r3, [pc, #256]	; (8005170 <USBD_SetConfig+0x118>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d904      	bls.n	800507e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f955 	bl	8005326 <USBD_CtlError>
 800507c:	e075      	b.n	800516a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005084:	2b02      	cmp	r3, #2
 8005086:	d002      	beq.n	800508e <USBD_SetConfig+0x36>
 8005088:	2b03      	cmp	r3, #3
 800508a:	d023      	beq.n	80050d4 <USBD_SetConfig+0x7c>
 800508c:	e062      	b.n	8005154 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800508e:	4b38      	ldr	r3, [pc, #224]	; (8005170 <USBD_SetConfig+0x118>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01a      	beq.n	80050cc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <USBD_SetConfig+0x118>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2203      	movs	r2, #3
 80050a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050a8:	4b31      	ldr	r3, [pc, #196]	; (8005170 <USBD_SetConfig+0x118>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fa2a 	bl	8004508 <USBD_SetClassConfig>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d104      	bne.n	80050c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f932 	bl	8005326 <USBD_CtlError>
          return;
 80050c2:	e052      	b.n	800516a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f9d9 	bl	800547c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80050ca:	e04e      	b.n	800516a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9d5 	bl	800547c <USBD_CtlSendStatus>
      break;
 80050d2:	e04a      	b.n	800516a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80050d4:	4b26      	ldr	r3, [pc, #152]	; (8005170 <USBD_SetConfig+0x118>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d112      	bne.n	8005102 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <USBD_SetConfig+0x118>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <USBD_SetConfig+0x118>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fa26 	bl	8004546 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9be 	bl	800547c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005100:	e033      	b.n	800516a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <USBD_SetConfig+0x118>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d01d      	beq.n	800514c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fa14 	bl	8004546 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <USBD_SetConfig+0x118>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <USBD_SetConfig+0x118>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff f9ea 	bl	8004508 <USBD_SetClassConfig>
 8005134:	4603      	mov	r3, r0
 8005136:	2b02      	cmp	r3, #2
 8005138:	d104      	bne.n	8005144 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8f2 	bl	8005326 <USBD_CtlError>
          return;
 8005142:	e012      	b.n	800516a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f999 	bl	800547c <USBD_CtlSendStatus>
      break;
 800514a:	e00e      	b.n	800516a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f995 	bl	800547c <USBD_CtlSendStatus>
      break;
 8005152:	e00a      	b.n	800516a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8e5 	bl	8005326 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <USBD_SetConfig+0x118>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff f9ef 	bl	8004546 <USBD_ClrClassConfig>
      break;
 8005168:	bf00      	nop
    }
  }
}
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200001e8 	.word	0x200001e8

08005174 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	88db      	ldrh	r3, [r3, #6]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d004      	beq.n	8005190 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8cc 	bl	8005326 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800518e:	e021      	b.n	80051d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005196:	2b01      	cmp	r3, #1
 8005198:	db17      	blt.n	80051ca <USBD_GetConfig+0x56>
 800519a:	2b02      	cmp	r3, #2
 800519c:	dd02      	ble.n	80051a4 <USBD_GetConfig+0x30>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d00b      	beq.n	80051ba <USBD_GetConfig+0x46>
 80051a2:	e012      	b.n	80051ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3308      	adds	r3, #8
 80051ae:	2201      	movs	r2, #1
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f922 	bl	80053fc <USBD_CtlSendData>
      break;
 80051b8:	e00c      	b.n	80051d4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f91a 	bl	80053fc <USBD_CtlSendData>
      break;
 80051c8:	e004      	b.n	80051d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8aa 	bl	8005326 <USBD_CtlError>
      break;
 80051d2:	bf00      	nop
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80051ec:	3b01      	subs	r3, #1
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d81e      	bhi.n	8005230 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	88db      	ldrh	r3, [r3, #6]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d004      	beq.n	8005204 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f892 	bl	8005326 <USBD_CtlError>
      break;
 8005202:	e01a      	b.n	800523a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f043 0202 	orr.w	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	330c      	adds	r3, #12
 8005224:	2202      	movs	r2, #2
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8e7 	bl	80053fc <USBD_CtlSendData>
    break;
 800522e:	e004      	b.n	800523a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f877 	bl	8005326 <USBD_CtlError>
    break;
 8005238:	bf00      	nop
  }
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	885b      	ldrh	r3, [r3, #2]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f90d 	bl	800547c <USBD_CtlSendStatus>
  }

}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800527a:	3b01      	subs	r3, #1
 800527c:	2b02      	cmp	r3, #2
 800527e:	d80b      	bhi.n	8005298 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	885b      	ldrh	r3, [r3, #2]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10c      	bne.n	80052a2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8f3 	bl	800547c <USBD_CtlSendStatus>
    }
    break;
 8005296:	e004      	b.n	80052a2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f843 	bl	8005326 <USBD_CtlError>
    break;
 80052a0:	e000      	b.n	80052a4 <USBD_ClrFeature+0x3a>
    break;
 80052a2:	bf00      	nop
  }
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785a      	ldrb	r2, [r3, #1]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3302      	adds	r3, #2
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3303      	adds	r3, #3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4413      	add	r3, r2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3305      	adds	r3, #5
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4413      	add	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	3306      	adds	r3, #6
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b29a      	uxth	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	3307      	adds	r3, #7
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	b29b      	uxth	r3, r3
 8005312:	4413      	add	r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	80da      	strh	r2, [r3, #6]

}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fbee 	bl	8005b14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fbea 	bl	8005b14 <USBD_LL_StallEP>
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d032      	beq.n	80053c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f834 	bl	80053cc <USBD_GetLen>
 8005364:	4603      	mov	r3, r0
 8005366:	3301      	adds	r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	75fa      	strb	r2, [r7, #23]
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	75fa      	strb	r2, [r7, #23]
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4413      	add	r3, r2
 8005390:	2203      	movs	r2, #3
 8005392:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005394:	e012      	b.n	80053bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	7dfa      	ldrb	r2, [r7, #23]
 800539e:	1c51      	adds	r1, r2, #1
 80053a0:	75f9      	strb	r1, [r7, #23]
 80053a2:	4611      	mov	r1, r2
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	440a      	add	r2, r1
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	75fa      	strb	r2, [r7, #23]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4413      	add	r3, r2
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e8      	bne.n	8005396 <USBD_GetString+0x4e>
    }
  }
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80053d8:	e005      	b.n	80053e6 <USBD_GetLen+0x1a>
    {
        len++;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	3301      	adds	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
        buf++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f5      	bne.n	80053da <USBD_GetLen+0xe>
    }

    return len;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	2100      	movs	r1, #0
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fbfe 	bl	8005c26 <USBD_LL_Transmit>

  return USBD_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	2100      	movs	r1, #0
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fbec 	bl	8005c26 <USBD_LL_Transmit>

  return USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	2100      	movs	r1, #0
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fbfd 	bl	8005c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2204      	movs	r2, #4
 8005488:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800548c:	2300      	movs	r3, #0
 800548e:	2200      	movs	r2, #0
 8005490:	2100      	movs	r1, #0
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbc7 	bl	8005c26 <USBD_LL_Transmit>

  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2205      	movs	r2, #5
 80054ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80054b2:	2300      	movs	r3, #0
 80054b4:	2200      	movs	r2, #0
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fbd7 	bl	8005c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80054cc:	2200      	movs	r2, #0
 80054ce:	490e      	ldr	r1, [pc, #56]	; (8005508 <MX_USB_DEVICE_Init+0x40>)
 80054d0:	480e      	ldr	r0, [pc, #56]	; (800550c <MX_USB_DEVICE_Init+0x44>)
 80054d2:	f7fe ffbd 	bl	8004450 <USBD_Init>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80054dc:	f7fb f92e 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80054e0:	490b      	ldr	r1, [pc, #44]	; (8005510 <MX_USB_DEVICE_Init+0x48>)
 80054e2:	480a      	ldr	r0, [pc, #40]	; (800550c <MX_USB_DEVICE_Init+0x44>)
 80054e4:	f7fe ffdf 	bl	80044a6 <USBD_RegisterClass>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80054ee:	f7fb f925 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80054f2:	4806      	ldr	r0, [pc, #24]	; (800550c <MX_USB_DEVICE_Init+0x44>)
 80054f4:	f7fe fff1 	bl	80044da <USBD_Start>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80054fe:	f7fb f91d 	bl	800073c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000114 	.word	0x20000114
 800550c:	200001fc 	.word	0x200001fc
 8005510:	2000000c 	.word	0x2000000c

08005514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2212      	movs	r2, #18
 8005524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005526:	4b03      	ldr	r3, [pc, #12]	; (8005534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000130 	.word	0x20000130

08005538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	6039      	str	r1, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2204      	movs	r2, #4
 8005548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000144 	.word	0x20000144

0800555c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	6039      	str	r1, [r7, #0]
 8005566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d105      	bne.n	800557a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <USBD_FS_ProductStrDescriptor+0x34>)
 8005572:	4808      	ldr	r0, [pc, #32]	; (8005594 <USBD_FS_ProductStrDescriptor+0x38>)
 8005574:	f7ff fee8 	bl	8005348 <USBD_GetString>
 8005578:	e004      	b.n	8005584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	4904      	ldr	r1, [pc, #16]	; (8005590 <USBD_FS_ProductStrDescriptor+0x34>)
 800557e:	4805      	ldr	r0, [pc, #20]	; (8005594 <USBD_FS_ProductStrDescriptor+0x38>)
 8005580:	f7ff fee2 	bl	8005348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000498 	.word	0x20000498
 8005594:	08005f1c 	.word	0x08005f1c

08005598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	4904      	ldr	r1, [pc, #16]	; (80055b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80055a8:	4804      	ldr	r0, [pc, #16]	; (80055bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80055aa:	f7ff fecd 	bl	8005348 <USBD_GetString>
  return USBD_StrDesc;
 80055ae:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000498 	.word	0x20000498
 80055bc:	08005f34 	.word	0x08005f34

080055c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	221a      	movs	r2, #26
 80055d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80055d2:	f000 f843 	bl	800565c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80055d6:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000148 	.word	0x20000148

080055e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4907      	ldr	r1, [pc, #28]	; (8005618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80055fa:	4808      	ldr	r0, [pc, #32]	; (800561c <USBD_FS_ConfigStrDescriptor+0x38>)
 80055fc:	f7ff fea4 	bl	8005348 <USBD_GetString>
 8005600:	e004      	b.n	800560c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4904      	ldr	r1, [pc, #16]	; (8005618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005606:	4805      	ldr	r0, [pc, #20]	; (800561c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005608:	f7ff fe9e 	bl	8005348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800560c:	4b02      	ldr	r3, [pc, #8]	; (8005618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000498 	.word	0x20000498
 800561c:	08005f48 	.word	0x08005f48

08005620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	4907      	ldr	r1, [pc, #28]	; (8005654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005636:	4808      	ldr	r0, [pc, #32]	; (8005658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005638:	f7ff fe86 	bl	8005348 <USBD_GetString>
 800563c:	e004      	b.n	8005648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	4904      	ldr	r1, [pc, #16]	; (8005654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005642:	4805      	ldr	r0, [pc, #20]	; (8005658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005644:	f7ff fe80 	bl	8005348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005648:	4b02      	ldr	r3, [pc, #8]	; (8005654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000498 	.word	0x20000498
 8005658:	08005f54 	.word	0x08005f54

0800565c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <Get_SerialNum+0x44>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <Get_SerialNum+0x48>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <Get_SerialNum+0x4c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005682:	2208      	movs	r2, #8
 8005684:	4909      	ldr	r1, [pc, #36]	; (80056ac <Get_SerialNum+0x50>)
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f814 	bl	80056b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800568c:	2204      	movs	r2, #4
 800568e:	4908      	ldr	r1, [pc, #32]	; (80056b0 <Get_SerialNum+0x54>)
 8005690:	68b8      	ldr	r0, [r7, #8]
 8005692:	f000 f80f 	bl	80056b4 <IntToUnicode>
  }
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	1fff7a10 	.word	0x1fff7a10
 80056a4:	1fff7a14 	.word	0x1fff7a14
 80056a8:	1fff7a18 	.word	0x1fff7a18
 80056ac:	2000014a 	.word	0x2000014a
 80056b0:	2000015a 	.word	0x2000015a

080056b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
 80056ca:	e027      	b.n	800571c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	0f1b      	lsrs	r3, r3, #28
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	d80b      	bhi.n	80056ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	0f1b      	lsrs	r3, r3, #28
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	7dfb      	ldrb	r3, [r7, #23]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4619      	mov	r1, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	440b      	add	r3, r1
 80056e4:	3230      	adds	r2, #48	; 0x30
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e00a      	b.n	8005702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	0f1b      	lsrs	r3, r3, #28
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4619      	mov	r1, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	440b      	add	r3, r1
 80056fc:	3237      	adds	r2, #55	; 0x37
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	3301      	adds	r3, #1
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	3301      	adds	r3, #1
 800571a:	75fb      	strb	r3, [r7, #23]
 800571c:	7dfa      	ldrb	r2, [r7, #23]
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	429a      	cmp	r2, r3
 8005722:	d3d3      	bcc.n	80056cc <IntToUnicode+0x18>
  }
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005750:	d13a      	bne.n	80057c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6313      	str	r3, [r2, #48]	; 0x30
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800576e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577c:	2303      	movs	r3, #3
 800577e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005780:	230a      	movs	r3, #10
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4619      	mov	r1, r3
 800578a:	4812      	ldr	r0, [pc, #72]	; (80057d4 <HAL_PCD_MspInit+0xa4>)
 800578c:	f7fb fa50 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	6353      	str	r3, [r2, #52]	; 0x34
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 80057a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057aa:	6453      	str	r3, [r2, #68]	; 0x44
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <HAL_PCD_MspInit+0xa0>)
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	2043      	movs	r0, #67	; 0x43
 80057be:	f7fb fa00 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80057c2:	2043      	movs	r0, #67	; 0x43
 80057c4:	f7fb fa19 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80057c8:	bf00      	nop
 80057ca:	3728      	adds	r7, #40	; 0x28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40023800 	.word	0x40023800
 80057d4:	40020000 	.word	0x40020000

080057d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe febc 	bl	800456c <USBD_LL_SetupStage>
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	4619      	mov	r1, r3
 8005826:	f7fe feec 	bl	8004602 <USBD_LL_DataOutStage>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3348      	adds	r3, #72	; 0x48
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	4619      	mov	r1, r3
 800585a:	f7fe ff43 	bl	80046e4 <USBD_LL_DataInStage>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff f851 	bl	800491c <USBD_LL_SOF>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e008      	b.n	80058ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d102      	bne.n	80058aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	e001      	b.n	80058ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80058aa:	f7fa ff47 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fff9 	bl	80048b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe ffb2 	bl	800482e <USBD_LL_Reset>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fff4 	bl	80048d0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_PCD_SuspendCallback+0x48>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <HAL_PCD_SuspendCallback+0x48>)
 800590e:	f043 0306 	orr.w	r3, r3, #6
 8005912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe ffe3 	bl	80048fa <USBD_LL_Resume>
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff f809 	bl	800496a <USBD_LL_IsoOUTIncomplete>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe ffea 	bl	8004950 <USBD_LL_IsoINIncomplete>
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fff6 	bl	8004984 <USBD_LL_DevConnected>
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fff3 	bl	800499a <USBD_LL_DevDisconnected>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d13c      	bne.n	8005a46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80059cc:	4a20      	ldr	r2, [pc, #128]	; (8005a50 <USBD_LL_Init+0x94>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <USBD_LL_Init+0x94>)
 80059d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80059dc:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <USBD_LL_Init+0x94>)
 80059de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80059e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <USBD_LL_Init+0x94>)
 80059e6:	2204      	movs	r2, #4
 80059e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80059ea:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <USBD_LL_Init+0x94>)
 80059ec:	2202      	movs	r2, #2
 80059ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <USBD_LL_Init+0x94>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80059f6:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <USBD_LL_Init+0x94>)
 80059f8:	2202      	movs	r2, #2
 80059fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <USBD_LL_Init+0x94>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a1a:	480d      	ldr	r0, [pc, #52]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a1c:	f7fb fad3 	bl	8000fc6 <HAL_PCD_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005a26:	f7fa fe89 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	4808      	ldr	r0, [pc, #32]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a2e:	f7fc fc20 	bl	8002272 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005a32:	2240      	movs	r2, #64	; 0x40
 8005a34:	2100      	movs	r1, #0
 8005a36:	4806      	ldr	r0, [pc, #24]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a38:	f7fc fbd4 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4803      	ldr	r0, [pc, #12]	; (8005a50 <USBD_LL_Init+0x94>)
 8005a42:	f7fc fbcf 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000698 	.word	0x20000698

08005a54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fb fbc8 	bl	8001200 <HAL_PCD_Start>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f91c 	bl	8005cb4 <USBD_Get_USB_Status>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	4608      	mov	r0, r1
 8005a94:	4611      	mov	r1, r2
 8005a96:	461a      	mov	r2, r3
 8005a98:	4603      	mov	r3, r0
 8005a9a:	70fb      	strb	r3, [r7, #3]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70bb      	strb	r3, [r7, #2]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005ab2:	78bb      	ldrb	r3, [r7, #2]
 8005ab4:	883a      	ldrh	r2, [r7, #0]
 8005ab6:	78f9      	ldrb	r1, [r7, #3]
 8005ab8:	f7fb ff9d 	bl	80019f6 <HAL_PCD_EP_Open>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f8f6 	bl	8005cb4 <USBD_Get_USB_Status>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fb ffe6 	bl	8001ac6 <HAL_PCD_EP_Close>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 f8d7 	bl	8005cb4 <USBD_Get_USB_Status>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fc f8a6 	bl	8001c84 <HAL_PCD_EP_SetStall>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f8b8 	bl	8005cb4 <USBD_Get_USB_Status>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fc f8eb 	bl	8001d4c <HAL_PCD_EP_ClrStall>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f899 	bl	8005cb4 <USBD_Get_USB_Status>
 8005b82:	4603      	mov	r3, r0
 8005b84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005ba2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da0b      	bge.n	8005bc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	333e      	adds	r3, #62	; 0x3e
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	e00b      	b.n	8005bdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb fed0 	bl	80019ac <HAL_PCD_SetAddress>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f84e 	bl	8005cb4 <USBD_Get_USB_Status>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	461a      	mov	r2, r3
 8005c32:	460b      	mov	r3, r1
 8005c34:	72fb      	strb	r3, [r7, #11]
 8005c36:	4613      	mov	r3, r2
 8005c38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c48:	893b      	ldrh	r3, [r7, #8]
 8005c4a:	7af9      	ldrb	r1, [r7, #11]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	f7fb ffcf 	bl	8001bf0 <HAL_PCD_EP_Transmit>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f82b 	bl	8005cb4 <USBD_Get_USB_Status>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c62:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	461a      	mov	r2, r3
 8005c78:	460b      	mov	r3, r1
 8005c7a:	72fb      	strb	r3, [r7, #11]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	7af9      	ldrb	r1, [r7, #11]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	f7fb ff61 	bl	8001b5a <HAL_PCD_EP_Receive>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f808 	bl	8005cb4 <USBD_Get_USB_Status>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d817      	bhi.n	8005cf8 <USBD_Get_USB_Status+0x44>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <USBD_Get_USB_Status+0x1c>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005ce7 	.word	0x08005ce7
 8005cd8:	08005ced 	.word	0x08005ced
 8005cdc:	08005cf3 	.word	0x08005cf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ce4:	e00b      	b.n	8005cfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8005cea:	e008      	b.n	8005cfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
    break;
 8005cf0:	e005      	b.n	8005cfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8005cf6:	e002      	b.n	8005cfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8005cfc:	bf00      	nop
  }
  return usb_status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <__errno>:
 8005d0c:	4b01      	ldr	r3, [pc, #4]	; (8005d14 <__errno+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000164 	.word	0x20000164

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4e0d      	ldr	r6, [pc, #52]	; (8005d50 <__libc_init_array+0x38>)
 8005d1c:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d1e:	1ba4      	subs	r4, r4, r6
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	2500      	movs	r5, #0
 8005d24:	42a5      	cmp	r5, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	4e0b      	ldr	r6, [pc, #44]	; (8005d58 <__libc_init_array+0x40>)
 8005d2a:	4c0c      	ldr	r4, [pc, #48]	; (8005d5c <__libc_init_array+0x44>)
 8005d2c:	f000 f8ea 	bl	8005f04 <_init>
 8005d30:	1ba4      	subs	r4, r4, r6
 8005d32:	10a4      	asrs	r4, r4, #2
 8005d34:	2500      	movs	r5, #0
 8005d36:	42a5      	cmp	r5, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d40:	4798      	blx	r3
 8005d42:	3501      	adds	r5, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d4a:	4798      	blx	r3
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08005f7c 	.word	0x08005f7c
 8005d54:	08005f7c 	.word	0x08005f7c
 8005d58:	08005f7c 	.word	0x08005f7c
 8005d5c:	08005f80 	.word	0x08005f80

08005d60 <malloc>:
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <malloc+0xc>)
 8005d62:	4601      	mov	r1, r0
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f000 b861 	b.w	8005e2c <_malloc_r>
 8005d6a:	bf00      	nop
 8005d6c:	20000164 	.word	0x20000164

08005d70 <free>:
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <free+0xc>)
 8005d72:	4601      	mov	r1, r0
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f000 b80b 	b.w	8005d90 <_free_r>
 8005d7a:	bf00      	nop
 8005d7c:	20000164 	.word	0x20000164

08005d80 <memset>:
 8005d80:	4402      	add	r2, r0
 8005d82:	4603      	mov	r3, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <_free_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4605      	mov	r5, r0
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d045      	beq.n	8005e24 <_free_r+0x94>
 8005d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9c:	1f0c      	subs	r4, r1, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfb8      	it	lt
 8005da2:	18e4      	addlt	r4, r4, r3
 8005da4:	f000 f8ac 	bl	8005f00 <__malloc_lock>
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <_free_r+0x98>)
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	4610      	mov	r0, r2
 8005dae:	b933      	cbnz	r3, 8005dbe <_free_r+0x2e>
 8005db0:	6063      	str	r3, [r4, #4]
 8005db2:	6014      	str	r4, [r2, #0]
 8005db4:	4628      	mov	r0, r5
 8005db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dba:	f000 b8a2 	b.w	8005f02 <__malloc_unlock>
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	d90c      	bls.n	8005ddc <_free_r+0x4c>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	1862      	adds	r2, r4, r1
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bf04      	itt	eq
 8005dca:	681a      	ldreq	r2, [r3, #0]
 8005dcc:	685b      	ldreq	r3, [r3, #4]
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	bf04      	itt	eq
 8005dd2:	1852      	addeq	r2, r2, r1
 8005dd4:	6022      	streq	r2, [r4, #0]
 8005dd6:	6004      	str	r4, [r0, #0]
 8005dd8:	e7ec      	b.n	8005db4 <_free_r+0x24>
 8005dda:	4613      	mov	r3, r2
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	b10a      	cbz	r2, 8005de4 <_free_r+0x54>
 8005de0:	42a2      	cmp	r2, r4
 8005de2:	d9fa      	bls.n	8005dda <_free_r+0x4a>
 8005de4:	6819      	ldr	r1, [r3, #0]
 8005de6:	1858      	adds	r0, r3, r1
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	d10b      	bne.n	8005e04 <_free_r+0x74>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	4401      	add	r1, r0
 8005df0:	1858      	adds	r0, r3, r1
 8005df2:	4282      	cmp	r2, r0
 8005df4:	6019      	str	r1, [r3, #0]
 8005df6:	d1dd      	bne.n	8005db4 <_free_r+0x24>
 8005df8:	6810      	ldr	r0, [r2, #0]
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	4401      	add	r1, r0
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	e7d7      	b.n	8005db4 <_free_r+0x24>
 8005e04:	d902      	bls.n	8005e0c <_free_r+0x7c>
 8005e06:	230c      	movs	r3, #12
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	e7d3      	b.n	8005db4 <_free_r+0x24>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	1821      	adds	r1, r4, r0
 8005e10:	428a      	cmp	r2, r1
 8005e12:	bf04      	itt	eq
 8005e14:	6811      	ldreq	r1, [r2, #0]
 8005e16:	6852      	ldreq	r2, [r2, #4]
 8005e18:	6062      	str	r2, [r4, #4]
 8005e1a:	bf04      	itt	eq
 8005e1c:	1809      	addeq	r1, r1, r0
 8005e1e:	6021      	streq	r1, [r4, #0]
 8005e20:	605c      	str	r4, [r3, #4]
 8005e22:	e7c7      	b.n	8005db4 <_free_r+0x24>
 8005e24:	bd38      	pop	{r3, r4, r5, pc}
 8005e26:	bf00      	nop
 8005e28:	200001ec 	.word	0x200001ec

08005e2c <_malloc_r>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	1ccd      	adds	r5, r1, #3
 8005e30:	f025 0503 	bic.w	r5, r5, #3
 8005e34:	3508      	adds	r5, #8
 8005e36:	2d0c      	cmp	r5, #12
 8005e38:	bf38      	it	cc
 8005e3a:	250c      	movcc	r5, #12
 8005e3c:	2d00      	cmp	r5, #0
 8005e3e:	4606      	mov	r6, r0
 8005e40:	db01      	blt.n	8005e46 <_malloc_r+0x1a>
 8005e42:	42a9      	cmp	r1, r5
 8005e44:	d903      	bls.n	8005e4e <_malloc_r+0x22>
 8005e46:	230c      	movs	r3, #12
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	f000 f857 	bl	8005f00 <__malloc_lock>
 8005e52:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <_malloc_r+0xac>)
 8005e54:	6814      	ldr	r4, [r2, #0]
 8005e56:	4621      	mov	r1, r4
 8005e58:	b991      	cbnz	r1, 8005e80 <_malloc_r+0x54>
 8005e5a:	4c20      	ldr	r4, [pc, #128]	; (8005edc <_malloc_r+0xb0>)
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	b91b      	cbnz	r3, 8005e68 <_malloc_r+0x3c>
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f83d 	bl	8005ee0 <_sbrk_r>
 8005e66:	6020      	str	r0, [r4, #0]
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f000 f838 	bl	8005ee0 <_sbrk_r>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d124      	bne.n	8005ebe <_malloc_r+0x92>
 8005e74:	230c      	movs	r3, #12
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f842 	bl	8005f02 <__malloc_unlock>
 8005e7e:	e7e4      	b.n	8005e4a <_malloc_r+0x1e>
 8005e80:	680b      	ldr	r3, [r1, #0]
 8005e82:	1b5b      	subs	r3, r3, r5
 8005e84:	d418      	bmi.n	8005eb8 <_malloc_r+0x8c>
 8005e86:	2b0b      	cmp	r3, #11
 8005e88:	d90f      	bls.n	8005eaa <_malloc_r+0x7e>
 8005e8a:	600b      	str	r3, [r1, #0]
 8005e8c:	50cd      	str	r5, [r1, r3]
 8005e8e:	18cc      	adds	r4, r1, r3
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 f836 	bl	8005f02 <__malloc_unlock>
 8005e96:	f104 000b 	add.w	r0, r4, #11
 8005e9a:	1d23      	adds	r3, r4, #4
 8005e9c:	f020 0007 	bic.w	r0, r0, #7
 8005ea0:	1ac3      	subs	r3, r0, r3
 8005ea2:	d0d3      	beq.n	8005e4c <_malloc_r+0x20>
 8005ea4:	425a      	negs	r2, r3
 8005ea6:	50e2      	str	r2, [r4, r3]
 8005ea8:	e7d0      	b.n	8005e4c <_malloc_r+0x20>
 8005eaa:	428c      	cmp	r4, r1
 8005eac:	684b      	ldr	r3, [r1, #4]
 8005eae:	bf16      	itet	ne
 8005eb0:	6063      	strne	r3, [r4, #4]
 8005eb2:	6013      	streq	r3, [r2, #0]
 8005eb4:	460c      	movne	r4, r1
 8005eb6:	e7eb      	b.n	8005e90 <_malloc_r+0x64>
 8005eb8:	460c      	mov	r4, r1
 8005eba:	6849      	ldr	r1, [r1, #4]
 8005ebc:	e7cc      	b.n	8005e58 <_malloc_r+0x2c>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d005      	beq.n	8005ed4 <_malloc_r+0xa8>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f000 f808 	bl	8005ee0 <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0cf      	beq.n	8005e74 <_malloc_r+0x48>
 8005ed4:	6025      	str	r5, [r4, #0]
 8005ed6:	e7db      	b.n	8005e90 <_malloc_r+0x64>
 8005ed8:	200001ec 	.word	0x200001ec
 8005edc:	200001f0 	.word	0x200001f0

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4c06      	ldr	r4, [pc, #24]	; (8005efc <_sbrk_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	f7fa fc8e 	bl	800080c <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000aa0 	.word	0x20000aa0

08005f00 <__malloc_lock>:
 8005f00:	4770      	bx	lr

08005f02 <__malloc_unlock>:
 8005f02:	4770      	bx	lr

08005f04 <_init>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr

08005f10 <_fini>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr
