
f103_spi_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002b40  08002b40  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b40  08002b40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000074  08002bbc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002bbc  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e85  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001950  00000000  00000000  00028f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b3  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009232  00000000  00000000  00042b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084363  00000000  00000000  0004bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ac  00000000  00000000  000d016c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aac 	.word	0x08002aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002aac 	.word	0x08002aac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fad5 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f863 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f907 	bl	800037c <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8a5 	bl	80002bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8d9 	bl	8000328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ENABLE);
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017c:	4823      	ldr	r0, [pc, #140]	; (800020c <main+0xb0>)
 800017e:	f000 fe55 	bl	8000e2c <HAL_GPIO_WritePin>
  sprintf (UART_msg_TX, "ARDUINO_connect\r\n");
 8000182:	4923      	ldr	r1, [pc, #140]	; (8000210 <main+0xb4>)
 8000184:	4823      	ldr	r0, [pc, #140]	; (8000214 <main+0xb8>)
 8000186:	f002 f857 	bl	8002238 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX), 0xFF);
 800018a:	4822      	ldr	r0, [pc, #136]	; (8000214 <main+0xb8>)
 800018c:	f7ff ffde 	bl	800014c <strlen>
 8000190:	4603      	mov	r3, r0
 8000192:	b29a      	uxth	r2, r3
 8000194:	23ff      	movs	r3, #255	; 0xff
 8000196:	491f      	ldr	r1, [pc, #124]	; (8000214 <main+0xb8>)
 8000198:	481f      	ldr	r0, [pc, #124]	; (8000218 <main+0xbc>)
 800019a:	f001 feb0 	bl	8001efe <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 800019e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a2:	481a      	ldr	r0, [pc, #104]	; (800020c <main+0xb0>)
 80001a4:	f000 fe5a 	bl	8000e5c <HAL_GPIO_TogglePin>
	  CS_ON;
 80001a8:	2200      	movs	r2, #0
 80001aa:	2110      	movs	r1, #16
 80001ac:	481b      	ldr	r0, [pc, #108]	; (800021c <main+0xc0>)
 80001ae:	f000 fe3d 	bl	8000e2c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &point, &SPI_msg, 1, 5000);
 80001b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	2301      	movs	r3, #1
 80001ba:	4a19      	ldr	r2, [pc, #100]	; (8000220 <main+0xc4>)
 80001bc:	4919      	ldr	r1, [pc, #100]	; (8000224 <main+0xc8>)
 80001be:	481a      	ldr	r0, [pc, #104]	; (8000228 <main+0xcc>)
 80001c0:	f001 fb04 	bl	80017cc <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi1, &point, &SPI_msg, 2, 5000);
 80001c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	2302      	movs	r3, #2
 80001cc:	4a14      	ldr	r2, [pc, #80]	; (8000220 <main+0xc4>)
 80001ce:	4915      	ldr	r1, [pc, #84]	; (8000224 <main+0xc8>)
 80001d0:	4815      	ldr	r0, [pc, #84]	; (8000228 <main+0xcc>)
 80001d2:	f001 fafb 	bl	80017cc <HAL_SPI_TransmitReceive>
	  sprintf (UART_msg_TX,  "ADC = %hu\n\r", (uint16_t)SPI_msg[0]);
 80001d6:	4b12      	ldr	r3, [pc, #72]	; (8000220 <main+0xc4>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	461a      	mov	r2, r3
 80001dc:	4913      	ldr	r1, [pc, #76]	; (800022c <main+0xd0>)
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <main+0xb8>)
 80001e0:	f002 f82a 	bl	8002238 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX), 0xFF);
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <main+0xb8>)
 80001e6:	f7ff ffb1 	bl	800014c <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	23ff      	movs	r3, #255	; 0xff
 80001f0:	4908      	ldr	r1, [pc, #32]	; (8000214 <main+0xb8>)
 80001f2:	4809      	ldr	r0, [pc, #36]	; (8000218 <main+0xbc>)
 80001f4:	f001 fe83 	bl	8001efe <HAL_UART_Transmit>
	  CS_OFF;
 80001f8:	2201      	movs	r2, #1
 80001fa:	2110      	movs	r1, #16
 80001fc:	4807      	ldr	r0, [pc, #28]	; (800021c <main+0xc0>)
 80001fe:	f000 fe15 	bl	8000e2c <HAL_GPIO_WritePin>
	  HAL_Delay (500);
 8000202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000206:	f000 fae5 	bl	80007d4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 800020a:	e7c8      	b.n	800019e <main+0x42>
 800020c:	40011000 	.word	0x40011000
 8000210:	08002ac4 	.word	0x08002ac4
 8000214:	20000090 	.word	0x20000090
 8000218:	200000d0 	.word	0x200000d0
 800021c:	40010800 	.word	0x40010800
 8000220:	2000016c 	.word	0x2000016c
 8000224:	20000000 	.word	0x20000000
 8000228:	20000114 	.word	0x20000114
 800022c:	08002ad8 	.word	0x08002ad8

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fff2 	bl	8002228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000252:	2301      	movs	r3, #1
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800026e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fe09 	bl	8000e90 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000284:	f000 f8da 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2101      	movs	r1, #1
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f873 	bl	8001390 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b0:	f000 f8c4 	bl	800043c <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3740      	adds	r7, #64	; 0x40
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_SPI1_Init+0x64>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <MX_SPI1_Init+0x68>)
 80002c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_SPI1_Init+0x64>)
 80002c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_SPI1_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_SPI1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_SPI1_Init+0x64>)
 80002e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_SPI1_Init+0x64>)
 80002f0:	2208      	movs	r2, #8
 80002f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <MX_SPI1_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_SPI1_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_SPI1_Init+0x64>)
 8000308:	220a      	movs	r2, #10
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_SPI1_Init+0x64>)
 800030e:	f001 f9d9 	bl	80016c4 <HAL_SPI_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000318:	f000 f890 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000114 	.word	0x20000114
 8000324:	40013000 	.word	0x40013000

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000360:	f001 fd80 	bl	8001e64 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f867 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000d0 	.word	0x200000d0
 8000378:	40013800 	.word	0x40013800

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <MX_GPIO_Init+0xb4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <MX_GPIO_Init+0xb4>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <MX_GPIO_Init+0xb4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b21      	ldr	r3, [pc, #132]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_GPIO_Init+0xb4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4815      	ldr	r0, [pc, #84]	; (8000434 <MX_GPIO_Init+0xb8>)
 80003e0:	f000 fd24 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2110      	movs	r1, #16
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_GPIO_Init+0xbc>)
 80003ea:	f000 fd1f 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <MX_GPIO_Init+0xb8>)
 8000408:	f000 fb8c 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800040c:	2310      	movs	r3, #16
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000418:	2301      	movs	r3, #1
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_GPIO_Init+0xbc>)
 8000424:	f000 fb7e 	bl	8000b24 <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <HAL_SPI_MspInit+0x98>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d137      	bne.n	800053c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <HAL_SPI_MspInit+0xa0>)
 8000510:	f000 fb08 	bl	8000b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000514:	2340      	movs	r3, #64	; 0x40
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <HAL_SPI_MspInit+0xa0>)
 8000528:	f000 fafc 	bl	8000b24 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2023      	movs	r0, #35	; 0x23
 8000532:	f000 fa4a 	bl	80009ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000536:	2023      	movs	r0, #35	; 0x23
 8000538:	f000 fa63 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013000 	.word	0x40013000
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <HAL_UART_MspInit+0x8c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d131      	bne.n	80005d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005b6:	f000 fab5 	bl	8000b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005d0:	f000 faa8 	bl	8000b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f8b5 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <SPI1_IRQHandler+0x10>)
 800063e:	f001 fa67 	bl	8001b10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000114 	.word	0x20000114

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f001 fdaa 	bl	80021d4 <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20005000 	.word	0x20005000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	200000c4 	.word	0x200000c4
 80006b4:	20000198 	.word	0x20000198

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffe5 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f001 fd77 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fd33 	bl	800015c <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000700:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8000704:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000708:	20000194 	.word	0x20000194

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f947 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fe8c 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f95f 	bl	8000a1e <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f927 	bl	80009ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000004 	.word	0x20000004
 8000794:	2000000c 	.word	0x2000000c
 8000798:	20000008 	.word	0x20000008

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	20000180 	.word	0x20000180

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000180 	.word	0x20000180

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff fff0 	bl	80007c0 <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_Delay+0x44>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffe0 	bl	80007c0 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000000c 	.word	0x2000000c

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <__NVIC_EnableIRQ+0x34>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff ff90 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff2d 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff42 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff90 	bl	800090c <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5f 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff35 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffa2 	bl	8000970 <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d005      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2204      	movs	r2, #4
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e051      	b.n	8000afe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 020e 	bic.w	r2, r2, #14
 8000a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_DMA_Abort_IT+0xd0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d029      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0xa0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_DMA_Abort_IT+0xd4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d022      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0x9c>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_DMA_Abort_IT+0xd8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d01a      	beq.n	8000ace <HAL_DMA_Abort_IT+0x96>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_DMA_Abort_IT+0xdc>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d012      	beq.n	8000ac8 <HAL_DMA_Abort_IT+0x90>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <HAL_DMA_Abort_IT+0xe0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00a      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x8a>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_DMA_Abort_IT+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d102      	bne.n	8000abc <HAL_DMA_Abort_IT+0x84>
 8000ab6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aba:	e00e      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac0:	e00b      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac6:	e008      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	e005      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad2:	e002      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	e000      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <HAL_DMA_Abort_IT+0xe8>)
 8000adc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4798      	blx	r3
    } 
  }
  return status;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40020008 	.word	0x40020008
 8000b0c:	4002001c 	.word	0x4002001c
 8000b10:	40020030 	.word	0x40020030
 8000b14:	40020044 	.word	0x40020044
 8000b18:	40020058 	.word	0x40020058
 8000b1c:	4002006c 	.word	0x4002006c
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e169      	b.n	8000e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 8158 	bne.w	8000e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4a9a      	ldr	r2, [pc, #616]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d05e      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b60:	4a98      	ldr	r2, [pc, #608]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d875      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b66:	4a98      	ldr	r2, [pc, #608]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d058      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b6c:	4a96      	ldr	r2, [pc, #600]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d86f      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b72:	4a96      	ldr	r2, [pc, #600]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d052      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b78:	4a94      	ldr	r2, [pc, #592]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d869      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d04c      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b84:	4a92      	ldr	r2, [pc, #584]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d863      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d046      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b90:	4a90      	ldr	r2, [pc, #576]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d85d      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d82a      	bhi.n	8000bf0 <HAL_GPIO_Init+0xcc>
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d859      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <HAL_GPIO_Init+0x80>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000bf9 	.word	0x08000bf9
 8000bac:	08000c0b 	.word	0x08000c0b
 8000bb0:	08000c4d 	.word	0x08000c4d
 8000bb4:	08000c53 	.word	0x08000c53
 8000bb8:	08000c53 	.word	0x08000c53
 8000bbc:	08000c53 	.word	0x08000c53
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000c53 	.word	0x08000c53
 8000bc8:	08000c53 	.word	0x08000c53
 8000bcc:	08000c53 	.word	0x08000c53
 8000bd0:	08000c53 	.word	0x08000c53
 8000bd4:	08000c53 	.word	0x08000c53
 8000bd8:	08000c53 	.word	0x08000c53
 8000bdc:	08000c53 	.word	0x08000c53
 8000be0:	08000c53 	.word	0x08000c53
 8000be4:	08000c53 	.word	0x08000c53
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000c15 	.word	0x08000c15
 8000bf0:	4a79      	ldr	r2, [pc, #484]	; (8000dd8 <HAL_GPIO_Init+0x2b4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf6:	e02c      	b.n	8000c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e029      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	3304      	adds	r3, #4
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e024      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e01f      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	330c      	adds	r3, #12
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e01a      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c26:	2304      	movs	r3, #4
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e013      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	611a      	str	r2, [r3, #16]
          break;
 8000c3e:	e009      	b.n	8000c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	615a      	str	r2, [r3, #20]
          break;
 8000c4a:	e003      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e000      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          break;
 8000c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d801      	bhi.n	8000c5e <HAL_GPIO_Init+0x13a>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	e001      	b.n	8000c62 <HAL_GPIO_Init+0x13e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3304      	adds	r3, #4
 8000c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d802      	bhi.n	8000c70 <HAL_GPIO_Init+0x14c>
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x152>
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3b08      	subs	r3, #8
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	6a39      	ldr	r1, [r7, #32]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80b1 	beq.w	8000e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cbc:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <HAL_GPIO_Init+0x2c0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d013      	beq.n	8000d10 <HAL_GPIO_Init+0x1ec>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3f      	ldr	r2, [pc, #252]	; (8000de8 <HAL_GPIO_Init+0x2c4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d00d      	beq.n	8000d0c <HAL_GPIO_Init+0x1e8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <HAL_GPIO_Init+0x2c8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x1e4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <HAL_GPIO_Init+0x2cc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <HAL_GPIO_Init+0x1e0>
 8000d00:	2303      	movs	r3, #3
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d04:	2304      	movs	r3, #4
 8000d06:	e004      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	492c      	ldr	r1, [pc, #176]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4928      	ldr	r1, [pc, #160]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4922      	ldr	r1, [pc, #136]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	491e      	ldr	r1, [pc, #120]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4918      	ldr	r1, [pc, #96]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4914      	ldr	r1, [pc, #80]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	490e      	ldr	r1, [pc, #56]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	e021      	b.n	8000e06 <HAL_GPIO_Init+0x2e2>
 8000dc2:	bf00      	nop
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10310000 	.word	0x10310000
 8000dcc:	10220000 	.word	0x10220000
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4909      	ldr	r1, [pc, #36]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	3301      	adds	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	fa22 f303 	lsr.w	r3, r2, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae8e 	bne.w	8000b38 <HAL_GPIO_Init+0x14>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	372c      	adds	r7, #44	; 0x2c
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43d9      	mvns	r1, r3
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e26c      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8087 	beq.w	8000fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb0:	4b92      	ldr	r3, [pc, #584]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d00c      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ebc:	4b8f      	ldr	r3, [pc, #572]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d112      	bne.n	8000eee <HAL_RCC_OscConfig+0x5e>
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed4:	d10b      	bne.n	8000eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed6:	4b89      	ldr	r3, [pc, #548]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d06c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x12c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d168      	bne.n	8000fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e246      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x76>
 8000ef8:	4b80      	ldr	r3, [pc, #512]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a7f      	ldr	r2, [pc, #508]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e02e      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x98>
 8000f0e:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b78      	ldr	r3, [pc, #480]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a77      	ldr	r2, [pc, #476]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0xbc>
 8000f32:	4b72      	ldr	r3, [pc, #456]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a71      	ldr	r2, [pc, #452]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b6f      	ldr	r3, [pc, #444]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f4c:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b68      	ldr	r3, [pc, #416]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a67      	ldr	r2, [pc, #412]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc28 	bl	80007c0 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fc24 	bl	80007c0 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e1fa      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xe4>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc14 	bl	80007c0 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fc10 	bl	80007c0 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1e6      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x10c>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d063      	beq.n	8001092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d11c      	bne.n	800101c <HAL_RCC_OscConfig+0x18c>
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x176>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1ba      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4939      	ldr	r1, [pc, #228]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	e03a      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d020      	beq.n	8001066 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fbc9 	bl	80007c0 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fbc5 	bl	80007c0 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e19b      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fba8 	bl	80007c0 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fba4 	bl	80007c0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e17a      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d03a      	beq.n	8001114 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d019      	beq.n	80010da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_RCC_OscConfig+0x274>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ac:	f7ff fb88 	bl	80007c0 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fb84 	bl	80007c0 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e15a      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fad8 	bl	8001688 <RCC_Delay>
 80010d8:	e01c      	b.n	8001114 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_RCC_OscConfig+0x274>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fb6e 	bl	80007c0 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e6:	e00f      	b.n	8001108 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fb6a 	bl	80007c0 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d908      	bls.n	8001108 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e140      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	42420000 	.word	0x42420000
 8001104:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e9      	bne.n	80010e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a6 	beq.w	800126e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b97      	ldr	r3, [pc, #604]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b94      	ldr	r3, [pc, #592]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a93      	ldr	r2, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b91      	ldr	r3, [pc, #580]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8a      	ldr	r2, [pc, #552]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fb2b 	bl	80007c0 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fb27 	bl	80007c0 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0fd      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x312>
 8001194:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a7a      	ldr	r2, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	e02d      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x334>
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6213      	str	r3, [r2, #32]
 80011b6:	4b73      	ldr	r3, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a72      	ldr	r2, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	6213      	str	r3, [r2, #32]
 80011c2:	e01c      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x356>
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6213      	str	r3, [r2, #32]
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a66      	ldr	r2, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b64      	ldr	r3, [pc, #400]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fadb 	bl	80007c0 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fad7 	bl	80007c0 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0ab      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ee      	beq.n	800120e <HAL_RCC_OscConfig+0x37e>
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fac5 	bl	80007c0 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fac1 	bl	80007c0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e095      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ee      	bne.n	800123a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d105      	bne.n	800126e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8081 	beq.w	800137a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d061      	beq.n	8001348 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d146      	bne.n	800131a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fa95 	bl	80007c0 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fa91 	bl	80007c0 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e067      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d108      	bne.n	80012d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	492d      	ldr	r1, [pc, #180]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a19      	ldr	r1, [r3, #32]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	430b      	orrs	r3, r1
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fa65 	bl	80007c0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fa61 	bl	80007c0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e037      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x46a>
 8001318:	e02f      	b.n	800137a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fa4e 	bl	80007c0 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fa4a 	bl	80007c0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e020      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x498>
 8001346:	e018      	b.n	800137a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e013      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	429a      	cmp	r2, r3
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000
 800138c:	42420060 	.word	0x42420060

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff f99e 	bl	80007c0 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff f99a 	bl	80007c0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f8fc 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08002af4 	.word	0x08002af4
 800155c:	20000004 	.word	0x20000004
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b490      	push	{r4, r7}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb0>)
 800156c:	1d3c      	adds	r4, r7, #4
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001574:	f240 2301 	movw	r3, #513	; 0x201
 8001578:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x40>
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x46>
 80015a2:	e02d      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c5b      	lsrs	r3, r3, #17
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015d6:	4413      	add	r3, r2
 80015d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e2:	fb02 f203 	mul.w	r2, r2, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	e004      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	623b      	str	r3, [r7, #32]
      break;
 80015fe:	e002      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001602:	623b      	str	r3, [r7, #32]
      break;
 8001604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001606:	6a3b      	ldr	r3, [r7, #32]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bc90      	pop	{r4, r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08002ae4 	.word	0x08002ae4
 8001618:	40021000 	.word	0x40021000
 800161c:	007a1200 	.word	0x007a1200
 8001620:	003d0900 	.word	0x003d0900

08001624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <HAL_RCC_GetHCLKFreq+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800163c:	f7ff fff2 	bl	8001624 <HAL_RCC_GetHCLKFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	4903      	ldr	r1, [pc, #12]	; (800165c <HAL_RCC_GetPCLK1Freq+0x24>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	08002b04 	.word	0x08002b04

08001660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001664:	f7ff ffde 	bl	8001624 <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0adb      	lsrs	r3, r3, #11
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	08002b04 	.word	0x08002b04

08001688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <RCC_Delay+0x34>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <RCC_Delay+0x38>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0a5b      	lsrs	r3, r3, #9
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a4:	bf00      	nop
  }
  while (Delay --);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	60fa      	str	r2, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <RCC_Delay+0x1c>
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000004 	.word	0x20000004
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e076      	b.n	80017c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016e6:	d009      	beq.n	80016fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
 80016ee:	e005      	b.n	80016fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe fec8 	bl	80004ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001780:	ea42 0103 	orr.w	r1, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f002 0204 	and.w	r2, r2, #4
 80017a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80017da:	2301      	movs	r3, #1
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x26>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e18a      	b.n	8001b08 <HAL_SPI_TransmitReceive+0x33c>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017fa:	f7fe ffe1 	bl	80007c0 <HAL_GetTick>
 80017fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001818:	2b01      	cmp	r3, #1
 800181a:	d00f      	beq.n	800183c <HAL_SPI_TransmitReceive+0x70>
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001822:	d107      	bne.n	8001834 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <HAL_SPI_TransmitReceive+0x68>
 800182c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001830:	2b04      	cmp	r3, #4
 8001832:	d003      	beq.n	800183c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001834:	2302      	movs	r3, #2
 8001836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800183a:	e15b      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_SPI_TransmitReceive+0x82>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_SPI_TransmitReceive+0x82>
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001854:	e14e      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b04      	cmp	r3, #4
 8001860:	d003      	beq.n	800186a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2205      	movs	r2, #5
 8001866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d007      	beq.n	80018be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c6:	d178      	bne.n	80019ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_SPI_TransmitReceive+0x10a>
 80018d0:	8b7b      	ldrh	r3, [r7, #26]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d166      	bne.n	80019a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	1c9a      	adds	r2, r3, #2
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018fa:	e053      	b.n	80019a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d11b      	bne.n	8001942 <HAL_SPI_TransmitReceive+0x176>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d016      	beq.n	8001942 <HAL_SPI_TransmitReceive+0x176>
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	2b01      	cmp	r3, #1
 8001918:	d113      	bne.n	8001942 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	1c9a      	adds	r2, r3, #2
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d119      	bne.n	8001984 <HAL_SPI_TransmitReceive+0x1b8>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d014      	beq.n	8001984 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	b292      	uxth	r2, r2
 8001966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	1c9a      	adds	r2, r3, #2
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001980:	2301      	movs	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001984:	f7fe ff1c 	bl	80007c0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001990:	429a      	cmp	r2, r3
 8001992:	d807      	bhi.n	80019a4 <HAL_SPI_TransmitReceive+0x1d8>
 8001994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d003      	beq.n	80019a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019a2:	e0a7      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1a6      	bne.n	80018fc <HAL_SPI_TransmitReceive+0x130>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1a1      	bne.n	80018fc <HAL_SPI_TransmitReceive+0x130>
 80019b8:	e07c      	b.n	8001ab4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_SPI_TransmitReceive+0x1fc>
 80019c2:	8b7b      	ldrh	r3, [r7, #26]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d16b      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	330c      	adds	r3, #12
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019ee:	e057      	b.n	8001aa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d11c      	bne.n	8001a38 <HAL_SPI_TransmitReceive+0x26c>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d017      	beq.n	8001a38 <HAL_SPI_TransmitReceive+0x26c>
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d114      	bne.n	8001a38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	330c      	adds	r3, #12
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <HAL_SPI_TransmitReceive+0x2ae>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d014      	beq.n	8001a7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a7a:	f7fe fea1 	bl	80007c0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d803      	bhi.n	8001a92 <HAL_SPI_TransmitReceive+0x2c6>
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d102      	bne.n	8001a98 <HAL_SPI_TransmitReceive+0x2cc>
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001a9e:	e029      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1a2      	bne.n	80019f0 <HAL_SPI_TransmitReceive+0x224>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d19d      	bne.n	80019f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9b5 	bl	8001e28 <SPI_EndRxTxTransaction>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001ad0:	e010      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	e000      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10f      	bne.n	8001b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
    return;
 8001b52:	e0be      	b.n	8001cd2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HAL_SPI_IRQHandler+0x66>
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	09db      	lsrs	r3, r3, #7
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    return;
 8001b74:	e0ad      	b.n	8001cd2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_SPI_IRQHandler+0x80>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a1 	beq.w	8001cd2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 809a 	beq.w	8001cd2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d023      	beq.n	8001bf2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d011      	beq.n	8001bda <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
        return;
 8001bf0:	e06f      	b.n	8001cd2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d014      	beq.n	8001c28 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04f      	beq.n	8001cd0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c3e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_SPI_IRQHandler+0x14c>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d034      	beq.n	8001cc6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0203 	bic.w	r2, r2, #3
 8001c6a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d011      	beq.n	8001c98 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <HAL_SPI_IRQHandler+0x1c8>)
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fed9 	bl	8000a38 <HAL_DMA_Abort_IT>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d016      	beq.n	8001cce <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_SPI_IRQHandler+0x1c8>)
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fec3 	bl	8000a38 <HAL_DMA_Abort_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001cc4:	e003      	b.n	8001cce <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f808 	bl	8001cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ccc:	e000      	b.n	8001cd0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001cce:	bf00      	nop
    return;
 8001cd0:	bf00      	nop
  }
}
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08001cef 	.word	0x08001cef

08001cdc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff ffe7 	bl	8001cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d28:	f7fe fd4a 	bl	80007c0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d38:	f7fe fd42 	bl	80007c0 <HAL_GetTick>
 8001d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	0d1b      	lsrs	r3, r3, #20
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d4e:	e054      	b.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d050      	beq.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d58:	f7fe fd32 	bl	80007c0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d902      	bls.n	8001d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d13d      	bne.n	8001dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d86:	d111      	bne.n	8001dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d90:	d004      	beq.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d107      	bne.n	8001dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d10f      	bne.n	8001dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e017      	b.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4013      	ands	r3, r2
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d19b      	bne.n	8001d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff ff6a 	bl	8001d18 <SPI_WaitFlagStateUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e000      	b.n	8001e5c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e03f      	b.n	8001ef6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fb60 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f905 	bl	80020b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08a      	sub	sp, #40	; 0x28
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d17c      	bne.n	8002018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_UART_Transmit+0x2c>
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e075      	b.n	800201a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_UART_Transmit+0x3e>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e06e      	b.n	800201a <HAL_UART_Transmit+0x11c>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2221      	movs	r2, #33	; 0x21
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f52:	f7fe fc35 	bl	80007c0 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6c:	d108      	bne.n	8001f80 <HAL_UART_Transmit+0x82>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d104      	bne.n	8001f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e003      	b.n	8001f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f90:	e02a      	b.n	8001fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f840 	bl	8002022 <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e036      	b.n	800201a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10b      	bne.n	8001fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e007      	b.n	8001fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1cf      	bne.n	8001f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f810 	bl	8002022 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e006      	b.n	800201a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002032:	e02c      	b.n	800208e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d028      	beq.n	800208e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x30>
 8002042:	f7fe fbbd 	bl	80007c0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	429a      	cmp	r2, r3
 8002050:	d21d      	bcs.n	800208e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002060:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e00f      	b.n	80020ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d0c3      	beq.n	8002034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020f2:	f023 030c 	bic.w	r3, r3, #12
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <UART_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002120:	f7ff fa9e 	bl	8001660 <HAL_RCC_GetPCLK2Freq>
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	e002      	b.n	800212e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002128:	f7ff fa86 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
 800212c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <UART_SetConfig+0x118>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	0119      	lsls	r1, r3, #4
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <UART_SetConfig+0x118>)
 8002166:	fba3 0302 	umull	r0, r3, r3, r2
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2064      	movs	r0, #100	; 0x64
 800216e:	fb00 f303 	mul.w	r3, r0, r3
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	3332      	adds	r3, #50	; 0x32
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <UART_SetConfig+0x118>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002184:	4419      	add	r1, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fbb2 f2f3 	udiv	r2, r2, r3
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <UART_SetConfig+0x118>)
 800219e:	fba3 0302 	umull	r0, r3, r3, r2
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2064      	movs	r0, #100	; 0x64
 80021a6:	fb00 f303 	mul.w	r3, r0, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	3332      	adds	r3, #50	; 0x32
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <UART_SetConfig+0x118>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	f003 020f 	and.w	r2, r3, #15
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	440a      	add	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40013800 	.word	0x40013800
 80021d0:	51eb851f 	.word	0x51eb851f

080021d4 <__errno>:
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <__errno+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000010 	.word	0x20000010

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	2600      	movs	r6, #0
 80021e4:	4d0c      	ldr	r5, [pc, #48]	; (8002218 <__libc_init_array+0x38>)
 80021e6:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e8:	1b64      	subs	r4, r4, r5
 80021ea:	10a4      	asrs	r4, r4, #2
 80021ec:	42a6      	cmp	r6, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	f000 fc5c 	bl	8002aac <_init>
 80021f4:	2600      	movs	r6, #0
 80021f6:	4d0a      	ldr	r5, [pc, #40]	; (8002220 <__libc_init_array+0x40>)
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <__libc_init_array+0x44>)
 80021fa:	1b64      	subs	r4, r4, r5
 80021fc:	10a4      	asrs	r4, r4, #2
 80021fe:	42a6      	cmp	r6, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f855 3b04 	ldr.w	r3, [r5], #4
 8002208:	4798      	blx	r3
 800220a:	3601      	adds	r6, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002212:	4798      	blx	r3
 8002214:	3601      	adds	r6, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08002b40 	.word	0x08002b40
 800221c:	08002b40 	.word	0x08002b40
 8002220:	08002b40 	.word	0x08002b40
 8002224:	08002b44 	.word	0x08002b44

08002228 <memset>:
 8002228:	4603      	mov	r3, r0
 800222a:	4402      	add	r2, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <siprintf>:
 8002238:	b40e      	push	{r1, r2, r3}
 800223a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800223e:	b500      	push	{lr}
 8002240:	b09c      	sub	sp, #112	; 0x70
 8002242:	ab1d      	add	r3, sp, #116	; 0x74
 8002244:	9002      	str	r0, [sp, #8]
 8002246:	9006      	str	r0, [sp, #24]
 8002248:	9107      	str	r1, [sp, #28]
 800224a:	9104      	str	r1, [sp, #16]
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <siprintf+0x38>)
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <siprintf+0x3c>)
 8002250:	f853 2b04 	ldr.w	r2, [r3], #4
 8002254:	9105      	str	r1, [sp, #20]
 8002256:	6800      	ldr	r0, [r0, #0]
 8002258:	a902      	add	r1, sp, #8
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f000 f868 	bl	8002330 <_svfiprintf_r>
 8002260:	2200      	movs	r2, #0
 8002262:	9b02      	ldr	r3, [sp, #8]
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	b01c      	add	sp, #112	; 0x70
 8002268:	f85d eb04 	ldr.w	lr, [sp], #4
 800226c:	b003      	add	sp, #12
 800226e:	4770      	bx	lr
 8002270:	20000010 	.word	0x20000010
 8002274:	ffff0208 	.word	0xffff0208

08002278 <__ssputs_r>:
 8002278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800227c:	688e      	ldr	r6, [r1, #8]
 800227e:	4682      	mov	sl, r0
 8002280:	429e      	cmp	r6, r3
 8002282:	460c      	mov	r4, r1
 8002284:	4690      	mov	r8, r2
 8002286:	461f      	mov	r7, r3
 8002288:	d838      	bhi.n	80022fc <__ssputs_r+0x84>
 800228a:	898a      	ldrh	r2, [r1, #12]
 800228c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002290:	d032      	beq.n	80022f8 <__ssputs_r+0x80>
 8002292:	6825      	ldr	r5, [r4, #0]
 8002294:	6909      	ldr	r1, [r1, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	eba5 0901 	sub.w	r9, r5, r1
 800229c:	6965      	ldr	r5, [r4, #20]
 800229e:	444b      	add	r3, r9
 80022a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022a8:	106d      	asrs	r5, r5, #1
 80022aa:	429d      	cmp	r5, r3
 80022ac:	bf38      	it	cc
 80022ae:	461d      	movcc	r5, r3
 80022b0:	0553      	lsls	r3, r2, #21
 80022b2:	d531      	bpl.n	8002318 <__ssputs_r+0xa0>
 80022b4:	4629      	mov	r1, r5
 80022b6:	f000 fb53 	bl	8002960 <_malloc_r>
 80022ba:	4606      	mov	r6, r0
 80022bc:	b950      	cbnz	r0, 80022d4 <__ssputs_r+0x5c>
 80022be:	230c      	movs	r3, #12
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f8ca 3000 	str.w	r3, [sl]
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ce:	81a3      	strh	r3, [r4, #12]
 80022d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022d4:	464a      	mov	r2, r9
 80022d6:	6921      	ldr	r1, [r4, #16]
 80022d8:	f000 face 	bl	8002878 <memcpy>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	6126      	str	r6, [r4, #16]
 80022ea:	444e      	add	r6, r9
 80022ec:	6026      	str	r6, [r4, #0]
 80022ee:	463e      	mov	r6, r7
 80022f0:	6165      	str	r5, [r4, #20]
 80022f2:	eba5 0509 	sub.w	r5, r5, r9
 80022f6:	60a5      	str	r5, [r4, #8]
 80022f8:	42be      	cmp	r6, r7
 80022fa:	d900      	bls.n	80022fe <__ssputs_r+0x86>
 80022fc:	463e      	mov	r6, r7
 80022fe:	4632      	mov	r2, r6
 8002300:	4641      	mov	r1, r8
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	f000 fac6 	bl	8002894 <memmove>
 8002308:	68a3      	ldr	r3, [r4, #8]
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	1b9b      	subs	r3, r3, r6
 800230e:	4432      	add	r2, r6
 8002310:	2000      	movs	r0, #0
 8002312:	60a3      	str	r3, [r4, #8]
 8002314:	6022      	str	r2, [r4, #0]
 8002316:	e7db      	b.n	80022d0 <__ssputs_r+0x58>
 8002318:	462a      	mov	r2, r5
 800231a:	f000 fb7b 	bl	8002a14 <_realloc_r>
 800231e:	4606      	mov	r6, r0
 8002320:	2800      	cmp	r0, #0
 8002322:	d1e1      	bne.n	80022e8 <__ssputs_r+0x70>
 8002324:	4650      	mov	r0, sl
 8002326:	6921      	ldr	r1, [r4, #16]
 8002328:	f000 face 	bl	80028c8 <_free_r>
 800232c:	e7c7      	b.n	80022be <__ssputs_r+0x46>
	...

08002330 <_svfiprintf_r>:
 8002330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002334:	4698      	mov	r8, r3
 8002336:	898b      	ldrh	r3, [r1, #12]
 8002338:	4607      	mov	r7, r0
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	460d      	mov	r5, r1
 800233e:	4614      	mov	r4, r2
 8002340:	b09d      	sub	sp, #116	; 0x74
 8002342:	d50e      	bpl.n	8002362 <_svfiprintf_r+0x32>
 8002344:	690b      	ldr	r3, [r1, #16]
 8002346:	b963      	cbnz	r3, 8002362 <_svfiprintf_r+0x32>
 8002348:	2140      	movs	r1, #64	; 0x40
 800234a:	f000 fb09 	bl	8002960 <_malloc_r>
 800234e:	6028      	str	r0, [r5, #0]
 8002350:	6128      	str	r0, [r5, #16]
 8002352:	b920      	cbnz	r0, 800235e <_svfiprintf_r+0x2e>
 8002354:	230c      	movs	r3, #12
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	e0d1      	b.n	8002502 <_svfiprintf_r+0x1d2>
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	616b      	str	r3, [r5, #20]
 8002362:	2300      	movs	r3, #0
 8002364:	9309      	str	r3, [sp, #36]	; 0x24
 8002366:	2320      	movs	r3, #32
 8002368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800236c:	2330      	movs	r3, #48	; 0x30
 800236e:	f04f 0901 	mov.w	r9, #1
 8002372:	f8cd 800c 	str.w	r8, [sp, #12]
 8002376:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800251c <_svfiprintf_r+0x1ec>
 800237a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800237e:	4623      	mov	r3, r4
 8002380:	469a      	mov	sl, r3
 8002382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002386:	b10a      	cbz	r2, 800238c <_svfiprintf_r+0x5c>
 8002388:	2a25      	cmp	r2, #37	; 0x25
 800238a:	d1f9      	bne.n	8002380 <_svfiprintf_r+0x50>
 800238c:	ebba 0b04 	subs.w	fp, sl, r4
 8002390:	d00b      	beq.n	80023aa <_svfiprintf_r+0x7a>
 8002392:	465b      	mov	r3, fp
 8002394:	4622      	mov	r2, r4
 8002396:	4629      	mov	r1, r5
 8002398:	4638      	mov	r0, r7
 800239a:	f7ff ff6d 	bl	8002278 <__ssputs_r>
 800239e:	3001      	adds	r0, #1
 80023a0:	f000 80aa 	beq.w	80024f8 <_svfiprintf_r+0x1c8>
 80023a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023a6:	445a      	add	r2, fp
 80023a8:	9209      	str	r2, [sp, #36]	; 0x24
 80023aa:	f89a 3000 	ldrb.w	r3, [sl]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80a2 	beq.w	80024f8 <_svfiprintf_r+0x1c8>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023be:	f10a 0a01 	add.w	sl, sl, #1
 80023c2:	9304      	str	r3, [sp, #16]
 80023c4:	9307      	str	r3, [sp, #28]
 80023c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023ca:	931a      	str	r3, [sp, #104]	; 0x68
 80023cc:	4654      	mov	r4, sl
 80023ce:	2205      	movs	r2, #5
 80023d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d4:	4851      	ldr	r0, [pc, #324]	; (800251c <_svfiprintf_r+0x1ec>)
 80023d6:	f000 fa41 	bl	800285c <memchr>
 80023da:	9a04      	ldr	r2, [sp, #16]
 80023dc:	b9d8      	cbnz	r0, 8002416 <_svfiprintf_r+0xe6>
 80023de:	06d0      	lsls	r0, r2, #27
 80023e0:	bf44      	itt	mi
 80023e2:	2320      	movmi	r3, #32
 80023e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023e8:	0711      	lsls	r1, r2, #28
 80023ea:	bf44      	itt	mi
 80023ec:	232b      	movmi	r3, #43	; 0x2b
 80023ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023f2:	f89a 3000 	ldrb.w	r3, [sl]
 80023f6:	2b2a      	cmp	r3, #42	; 0x2a
 80023f8:	d015      	beq.n	8002426 <_svfiprintf_r+0xf6>
 80023fa:	4654      	mov	r4, sl
 80023fc:	2000      	movs	r0, #0
 80023fe:	f04f 0c0a 	mov.w	ip, #10
 8002402:	9a07      	ldr	r2, [sp, #28]
 8002404:	4621      	mov	r1, r4
 8002406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800240a:	3b30      	subs	r3, #48	; 0x30
 800240c:	2b09      	cmp	r3, #9
 800240e:	d94e      	bls.n	80024ae <_svfiprintf_r+0x17e>
 8002410:	b1b0      	cbz	r0, 8002440 <_svfiprintf_r+0x110>
 8002412:	9207      	str	r2, [sp, #28]
 8002414:	e014      	b.n	8002440 <_svfiprintf_r+0x110>
 8002416:	eba0 0308 	sub.w	r3, r0, r8
 800241a:	fa09 f303 	lsl.w	r3, r9, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	46a2      	mov	sl, r4
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	e7d2      	b.n	80023cc <_svfiprintf_r+0x9c>
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	1d19      	adds	r1, r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	9103      	str	r1, [sp, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	bfbb      	ittet	lt
 8002432:	425b      	neglt	r3, r3
 8002434:	f042 0202 	orrlt.w	r2, r2, #2
 8002438:	9307      	strge	r3, [sp, #28]
 800243a:	9307      	strlt	r3, [sp, #28]
 800243c:	bfb8      	it	lt
 800243e:	9204      	strlt	r2, [sp, #16]
 8002440:	7823      	ldrb	r3, [r4, #0]
 8002442:	2b2e      	cmp	r3, #46	; 0x2e
 8002444:	d10c      	bne.n	8002460 <_svfiprintf_r+0x130>
 8002446:	7863      	ldrb	r3, [r4, #1]
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d135      	bne.n	80024b8 <_svfiprintf_r+0x188>
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	3402      	adds	r4, #2
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	9203      	str	r2, [sp, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	bfb8      	it	lt
 800245a:	f04f 33ff 	movlt.w	r3, #4294967295
 800245e:	9305      	str	r3, [sp, #20]
 8002460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800252c <_svfiprintf_r+0x1fc>
 8002464:	2203      	movs	r2, #3
 8002466:	4650      	mov	r0, sl
 8002468:	7821      	ldrb	r1, [r4, #0]
 800246a:	f000 f9f7 	bl	800285c <memchr>
 800246e:	b140      	cbz	r0, 8002482 <_svfiprintf_r+0x152>
 8002470:	2340      	movs	r3, #64	; 0x40
 8002472:	eba0 000a 	sub.w	r0, r0, sl
 8002476:	fa03 f000 	lsl.w	r0, r3, r0
 800247a:	9b04      	ldr	r3, [sp, #16]
 800247c:	3401      	adds	r4, #1
 800247e:	4303      	orrs	r3, r0
 8002480:	9304      	str	r3, [sp, #16]
 8002482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002486:	2206      	movs	r2, #6
 8002488:	4825      	ldr	r0, [pc, #148]	; (8002520 <_svfiprintf_r+0x1f0>)
 800248a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800248e:	f000 f9e5 	bl	800285c <memchr>
 8002492:	2800      	cmp	r0, #0
 8002494:	d038      	beq.n	8002508 <_svfiprintf_r+0x1d8>
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <_svfiprintf_r+0x1f4>)
 8002498:	bb1b      	cbnz	r3, 80024e2 <_svfiprintf_r+0x1b2>
 800249a:	9b03      	ldr	r3, [sp, #12]
 800249c:	3307      	adds	r3, #7
 800249e:	f023 0307 	bic.w	r3, r3, #7
 80024a2:	3308      	adds	r3, #8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024a8:	4433      	add	r3, r6
 80024aa:	9309      	str	r3, [sp, #36]	; 0x24
 80024ac:	e767      	b.n	800237e <_svfiprintf_r+0x4e>
 80024ae:	460c      	mov	r4, r1
 80024b0:	2001      	movs	r0, #1
 80024b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80024b6:	e7a5      	b.n	8002404 <_svfiprintf_r+0xd4>
 80024b8:	2300      	movs	r3, #0
 80024ba:	f04f 0c0a 	mov.w	ip, #10
 80024be:	4619      	mov	r1, r3
 80024c0:	3401      	adds	r4, #1
 80024c2:	9305      	str	r3, [sp, #20]
 80024c4:	4620      	mov	r0, r4
 80024c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024ca:	3a30      	subs	r2, #48	; 0x30
 80024cc:	2a09      	cmp	r2, #9
 80024ce:	d903      	bls.n	80024d8 <_svfiprintf_r+0x1a8>
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0c5      	beq.n	8002460 <_svfiprintf_r+0x130>
 80024d4:	9105      	str	r1, [sp, #20]
 80024d6:	e7c3      	b.n	8002460 <_svfiprintf_r+0x130>
 80024d8:	4604      	mov	r4, r0
 80024da:	2301      	movs	r3, #1
 80024dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80024e0:	e7f0      	b.n	80024c4 <_svfiprintf_r+0x194>
 80024e2:	ab03      	add	r3, sp, #12
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	462a      	mov	r2, r5
 80024e8:	4638      	mov	r0, r7
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <_svfiprintf_r+0x1f8>)
 80024ec:	a904      	add	r1, sp, #16
 80024ee:	f3af 8000 	nop.w
 80024f2:	1c42      	adds	r2, r0, #1
 80024f4:	4606      	mov	r6, r0
 80024f6:	d1d6      	bne.n	80024a6 <_svfiprintf_r+0x176>
 80024f8:	89ab      	ldrh	r3, [r5, #12]
 80024fa:	065b      	lsls	r3, r3, #25
 80024fc:	f53f af2c 	bmi.w	8002358 <_svfiprintf_r+0x28>
 8002500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002502:	b01d      	add	sp, #116	; 0x74
 8002504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002508:	ab03      	add	r3, sp, #12
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	462a      	mov	r2, r5
 800250e:	4638      	mov	r0, r7
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <_svfiprintf_r+0x1f8>)
 8002512:	a904      	add	r1, sp, #16
 8002514:	f000 f87c 	bl	8002610 <_printf_i>
 8002518:	e7eb      	b.n	80024f2 <_svfiprintf_r+0x1c2>
 800251a:	bf00      	nop
 800251c:	08002b0c 	.word	0x08002b0c
 8002520:	08002b16 	.word	0x08002b16
 8002524:	00000000 	.word	0x00000000
 8002528:	08002279 	.word	0x08002279
 800252c:	08002b12 	.word	0x08002b12

08002530 <_printf_common>:
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	4616      	mov	r6, r2
 8002536:	4699      	mov	r9, r3
 8002538:	688a      	ldr	r2, [r1, #8]
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	4607      	mov	r7, r0
 800253e:	4293      	cmp	r3, r2
 8002540:	bfb8      	it	lt
 8002542:	4613      	movlt	r3, r2
 8002544:	6033      	str	r3, [r6, #0]
 8002546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800254a:	460c      	mov	r4, r1
 800254c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002550:	b10a      	cbz	r2, 8002556 <_printf_common+0x26>
 8002552:	3301      	adds	r3, #1
 8002554:	6033      	str	r3, [r6, #0]
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	0699      	lsls	r1, r3, #26
 800255a:	bf42      	ittt	mi
 800255c:	6833      	ldrmi	r3, [r6, #0]
 800255e:	3302      	addmi	r3, #2
 8002560:	6033      	strmi	r3, [r6, #0]
 8002562:	6825      	ldr	r5, [r4, #0]
 8002564:	f015 0506 	ands.w	r5, r5, #6
 8002568:	d106      	bne.n	8002578 <_printf_common+0x48>
 800256a:	f104 0a19 	add.w	sl, r4, #25
 800256e:	68e3      	ldr	r3, [r4, #12]
 8002570:	6832      	ldr	r2, [r6, #0]
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	42ab      	cmp	r3, r5
 8002576:	dc28      	bgt.n	80025ca <_printf_common+0x9a>
 8002578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800257c:	1e13      	subs	r3, r2, #0
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	bf18      	it	ne
 8002582:	2301      	movne	r3, #1
 8002584:	0692      	lsls	r2, r2, #26
 8002586:	d42d      	bmi.n	80025e4 <_printf_common+0xb4>
 8002588:	4649      	mov	r1, r9
 800258a:	4638      	mov	r0, r7
 800258c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002590:	47c0      	blx	r8
 8002592:	3001      	adds	r0, #1
 8002594:	d020      	beq.n	80025d8 <_printf_common+0xa8>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	68e5      	ldr	r5, [r4, #12]
 800259a:	f003 0306 	and.w	r3, r3, #6
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf18      	it	ne
 80025a2:	2500      	movne	r5, #0
 80025a4:	6832      	ldr	r2, [r6, #0]
 80025a6:	f04f 0600 	mov.w	r6, #0
 80025aa:	68a3      	ldr	r3, [r4, #8]
 80025ac:	bf08      	it	eq
 80025ae:	1aad      	subeq	r5, r5, r2
 80025b0:	6922      	ldr	r2, [r4, #16]
 80025b2:	bf08      	it	eq
 80025b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025b8:	4293      	cmp	r3, r2
 80025ba:	bfc4      	itt	gt
 80025bc:	1a9b      	subgt	r3, r3, r2
 80025be:	18ed      	addgt	r5, r5, r3
 80025c0:	341a      	adds	r4, #26
 80025c2:	42b5      	cmp	r5, r6
 80025c4:	d11a      	bne.n	80025fc <_printf_common+0xcc>
 80025c6:	2000      	movs	r0, #0
 80025c8:	e008      	b.n	80025dc <_printf_common+0xac>
 80025ca:	2301      	movs	r3, #1
 80025cc:	4652      	mov	r2, sl
 80025ce:	4649      	mov	r1, r9
 80025d0:	4638      	mov	r0, r7
 80025d2:	47c0      	blx	r8
 80025d4:	3001      	adds	r0, #1
 80025d6:	d103      	bne.n	80025e0 <_printf_common+0xb0>
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e0:	3501      	adds	r5, #1
 80025e2:	e7c4      	b.n	800256e <_printf_common+0x3e>
 80025e4:	2030      	movs	r0, #48	; 0x30
 80025e6:	18e1      	adds	r1, r4, r3
 80025e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025f2:	4422      	add	r2, r4
 80025f4:	3302      	adds	r3, #2
 80025f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025fa:	e7c5      	b.n	8002588 <_printf_common+0x58>
 80025fc:	2301      	movs	r3, #1
 80025fe:	4622      	mov	r2, r4
 8002600:	4649      	mov	r1, r9
 8002602:	4638      	mov	r0, r7
 8002604:	47c0      	blx	r8
 8002606:	3001      	adds	r0, #1
 8002608:	d0e6      	beq.n	80025d8 <_printf_common+0xa8>
 800260a:	3601      	adds	r6, #1
 800260c:	e7d9      	b.n	80025c2 <_printf_common+0x92>
	...

08002610 <_printf_i>:
 8002610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002614:	460c      	mov	r4, r1
 8002616:	7e27      	ldrb	r7, [r4, #24]
 8002618:	4691      	mov	r9, r2
 800261a:	2f78      	cmp	r7, #120	; 0x78
 800261c:	4680      	mov	r8, r0
 800261e:	469a      	mov	sl, r3
 8002620:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002626:	d807      	bhi.n	8002638 <_printf_i+0x28>
 8002628:	2f62      	cmp	r7, #98	; 0x62
 800262a:	d80a      	bhi.n	8002642 <_printf_i+0x32>
 800262c:	2f00      	cmp	r7, #0
 800262e:	f000 80d9 	beq.w	80027e4 <_printf_i+0x1d4>
 8002632:	2f58      	cmp	r7, #88	; 0x58
 8002634:	f000 80a4 	beq.w	8002780 <_printf_i+0x170>
 8002638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800263c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002640:	e03a      	b.n	80026b8 <_printf_i+0xa8>
 8002642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002646:	2b15      	cmp	r3, #21
 8002648:	d8f6      	bhi.n	8002638 <_printf_i+0x28>
 800264a:	a001      	add	r0, pc, #4	; (adr r0, 8002650 <_printf_i+0x40>)
 800264c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002650:	080026a9 	.word	0x080026a9
 8002654:	080026bd 	.word	0x080026bd
 8002658:	08002639 	.word	0x08002639
 800265c:	08002639 	.word	0x08002639
 8002660:	08002639 	.word	0x08002639
 8002664:	08002639 	.word	0x08002639
 8002668:	080026bd 	.word	0x080026bd
 800266c:	08002639 	.word	0x08002639
 8002670:	08002639 	.word	0x08002639
 8002674:	08002639 	.word	0x08002639
 8002678:	08002639 	.word	0x08002639
 800267c:	080027cb 	.word	0x080027cb
 8002680:	080026ed 	.word	0x080026ed
 8002684:	080027ad 	.word	0x080027ad
 8002688:	08002639 	.word	0x08002639
 800268c:	08002639 	.word	0x08002639
 8002690:	080027ed 	.word	0x080027ed
 8002694:	08002639 	.word	0x08002639
 8002698:	080026ed 	.word	0x080026ed
 800269c:	08002639 	.word	0x08002639
 80026a0:	08002639 	.word	0x08002639
 80026a4:	080027b5 	.word	0x080027b5
 80026a8:	680b      	ldr	r3, [r1, #0]
 80026aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	600a      	str	r2, [r1, #0]
 80026b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0a4      	b.n	8002806 <_printf_i+0x1f6>
 80026bc:	6825      	ldr	r5, [r4, #0]
 80026be:	6808      	ldr	r0, [r1, #0]
 80026c0:	062e      	lsls	r6, r5, #24
 80026c2:	f100 0304 	add.w	r3, r0, #4
 80026c6:	d50a      	bpl.n	80026de <_printf_i+0xce>
 80026c8:	6805      	ldr	r5, [r0, #0]
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	da03      	bge.n	80026d8 <_printf_i+0xc8>
 80026d0:	232d      	movs	r3, #45	; 0x2d
 80026d2:	426d      	negs	r5, r5
 80026d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d8:	230a      	movs	r3, #10
 80026da:	485e      	ldr	r0, [pc, #376]	; (8002854 <_printf_i+0x244>)
 80026dc:	e019      	b.n	8002712 <_printf_i+0x102>
 80026de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026e2:	6805      	ldr	r5, [r0, #0]
 80026e4:	600b      	str	r3, [r1, #0]
 80026e6:	bf18      	it	ne
 80026e8:	b22d      	sxthne	r5, r5
 80026ea:	e7ef      	b.n	80026cc <_printf_i+0xbc>
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	6825      	ldr	r5, [r4, #0]
 80026f0:	1d18      	adds	r0, r3, #4
 80026f2:	6008      	str	r0, [r1, #0]
 80026f4:	0628      	lsls	r0, r5, #24
 80026f6:	d501      	bpl.n	80026fc <_printf_i+0xec>
 80026f8:	681d      	ldr	r5, [r3, #0]
 80026fa:	e002      	b.n	8002702 <_printf_i+0xf2>
 80026fc:	0669      	lsls	r1, r5, #25
 80026fe:	d5fb      	bpl.n	80026f8 <_printf_i+0xe8>
 8002700:	881d      	ldrh	r5, [r3, #0]
 8002702:	2f6f      	cmp	r7, #111	; 0x6f
 8002704:	bf0c      	ite	eq
 8002706:	2308      	moveq	r3, #8
 8002708:	230a      	movne	r3, #10
 800270a:	4852      	ldr	r0, [pc, #328]	; (8002854 <_printf_i+0x244>)
 800270c:	2100      	movs	r1, #0
 800270e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002712:	6866      	ldr	r6, [r4, #4]
 8002714:	2e00      	cmp	r6, #0
 8002716:	bfa8      	it	ge
 8002718:	6821      	ldrge	r1, [r4, #0]
 800271a:	60a6      	str	r6, [r4, #8]
 800271c:	bfa4      	itt	ge
 800271e:	f021 0104 	bicge.w	r1, r1, #4
 8002722:	6021      	strge	r1, [r4, #0]
 8002724:	b90d      	cbnz	r5, 800272a <_printf_i+0x11a>
 8002726:	2e00      	cmp	r6, #0
 8002728:	d04d      	beq.n	80027c6 <_printf_i+0x1b6>
 800272a:	4616      	mov	r6, r2
 800272c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002730:	fb03 5711 	mls	r7, r3, r1, r5
 8002734:	5dc7      	ldrb	r7, [r0, r7]
 8002736:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800273a:	462f      	mov	r7, r5
 800273c:	42bb      	cmp	r3, r7
 800273e:	460d      	mov	r5, r1
 8002740:	d9f4      	bls.n	800272c <_printf_i+0x11c>
 8002742:	2b08      	cmp	r3, #8
 8002744:	d10b      	bne.n	800275e <_printf_i+0x14e>
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	07df      	lsls	r7, r3, #31
 800274a:	d508      	bpl.n	800275e <_printf_i+0x14e>
 800274c:	6923      	ldr	r3, [r4, #16]
 800274e:	6861      	ldr	r1, [r4, #4]
 8002750:	4299      	cmp	r1, r3
 8002752:	bfde      	ittt	le
 8002754:	2330      	movle	r3, #48	; 0x30
 8002756:	f806 3c01 	strble.w	r3, [r6, #-1]
 800275a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800275e:	1b92      	subs	r2, r2, r6
 8002760:	6122      	str	r2, [r4, #16]
 8002762:	464b      	mov	r3, r9
 8002764:	4621      	mov	r1, r4
 8002766:	4640      	mov	r0, r8
 8002768:	f8cd a000 	str.w	sl, [sp]
 800276c:	aa03      	add	r2, sp, #12
 800276e:	f7ff fedf 	bl	8002530 <_printf_common>
 8002772:	3001      	adds	r0, #1
 8002774:	d14c      	bne.n	8002810 <_printf_i+0x200>
 8002776:	f04f 30ff 	mov.w	r0, #4294967295
 800277a:	b004      	add	sp, #16
 800277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002780:	4834      	ldr	r0, [pc, #208]	; (8002854 <_printf_i+0x244>)
 8002782:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002786:	680e      	ldr	r6, [r1, #0]
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	f856 5b04 	ldr.w	r5, [r6], #4
 800278e:	061f      	lsls	r7, r3, #24
 8002790:	600e      	str	r6, [r1, #0]
 8002792:	d514      	bpl.n	80027be <_printf_i+0x1ae>
 8002794:	07d9      	lsls	r1, r3, #31
 8002796:	bf44      	itt	mi
 8002798:	f043 0320 	orrmi.w	r3, r3, #32
 800279c:	6023      	strmi	r3, [r4, #0]
 800279e:	b91d      	cbnz	r5, 80027a8 <_printf_i+0x198>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f023 0320 	bic.w	r3, r3, #32
 80027a6:	6023      	str	r3, [r4, #0]
 80027a8:	2310      	movs	r3, #16
 80027aa:	e7af      	b.n	800270c <_printf_i+0xfc>
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6023      	str	r3, [r4, #0]
 80027b4:	2378      	movs	r3, #120	; 0x78
 80027b6:	4828      	ldr	r0, [pc, #160]	; (8002858 <_printf_i+0x248>)
 80027b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027bc:	e7e3      	b.n	8002786 <_printf_i+0x176>
 80027be:	065e      	lsls	r6, r3, #25
 80027c0:	bf48      	it	mi
 80027c2:	b2ad      	uxthmi	r5, r5
 80027c4:	e7e6      	b.n	8002794 <_printf_i+0x184>
 80027c6:	4616      	mov	r6, r2
 80027c8:	e7bb      	b.n	8002742 <_printf_i+0x132>
 80027ca:	680b      	ldr	r3, [r1, #0]
 80027cc:	6826      	ldr	r6, [r4, #0]
 80027ce:	1d1d      	adds	r5, r3, #4
 80027d0:	6960      	ldr	r0, [r4, #20]
 80027d2:	600d      	str	r5, [r1, #0]
 80027d4:	0635      	lsls	r5, r6, #24
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	d501      	bpl.n	80027de <_printf_i+0x1ce>
 80027da:	6018      	str	r0, [r3, #0]
 80027dc:	e002      	b.n	80027e4 <_printf_i+0x1d4>
 80027de:	0671      	lsls	r1, r6, #25
 80027e0:	d5fb      	bpl.n	80027da <_printf_i+0x1ca>
 80027e2:	8018      	strh	r0, [r3, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	4616      	mov	r6, r2
 80027e8:	6123      	str	r3, [r4, #16]
 80027ea:	e7ba      	b.n	8002762 <_printf_i+0x152>
 80027ec:	680b      	ldr	r3, [r1, #0]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	600a      	str	r2, [r1, #0]
 80027f2:	681e      	ldr	r6, [r3, #0]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4630      	mov	r0, r6
 80027f8:	6862      	ldr	r2, [r4, #4]
 80027fa:	f000 f82f 	bl	800285c <memchr>
 80027fe:	b108      	cbz	r0, 8002804 <_printf_i+0x1f4>
 8002800:	1b80      	subs	r0, r0, r6
 8002802:	6060      	str	r0, [r4, #4]
 8002804:	6863      	ldr	r3, [r4, #4]
 8002806:	6123      	str	r3, [r4, #16]
 8002808:	2300      	movs	r3, #0
 800280a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800280e:	e7a8      	b.n	8002762 <_printf_i+0x152>
 8002810:	4632      	mov	r2, r6
 8002812:	4649      	mov	r1, r9
 8002814:	4640      	mov	r0, r8
 8002816:	6923      	ldr	r3, [r4, #16]
 8002818:	47d0      	blx	sl
 800281a:	3001      	adds	r0, #1
 800281c:	d0ab      	beq.n	8002776 <_printf_i+0x166>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	079b      	lsls	r3, r3, #30
 8002822:	d413      	bmi.n	800284c <_printf_i+0x23c>
 8002824:	68e0      	ldr	r0, [r4, #12]
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	4298      	cmp	r0, r3
 800282a:	bfb8      	it	lt
 800282c:	4618      	movlt	r0, r3
 800282e:	e7a4      	b.n	800277a <_printf_i+0x16a>
 8002830:	2301      	movs	r3, #1
 8002832:	4632      	mov	r2, r6
 8002834:	4649      	mov	r1, r9
 8002836:	4640      	mov	r0, r8
 8002838:	47d0      	blx	sl
 800283a:	3001      	adds	r0, #1
 800283c:	d09b      	beq.n	8002776 <_printf_i+0x166>
 800283e:	3501      	adds	r5, #1
 8002840:	68e3      	ldr	r3, [r4, #12]
 8002842:	9903      	ldr	r1, [sp, #12]
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	42ab      	cmp	r3, r5
 8002848:	dcf2      	bgt.n	8002830 <_printf_i+0x220>
 800284a:	e7eb      	b.n	8002824 <_printf_i+0x214>
 800284c:	2500      	movs	r5, #0
 800284e:	f104 0619 	add.w	r6, r4, #25
 8002852:	e7f5      	b.n	8002840 <_printf_i+0x230>
 8002854:	08002b1d 	.word	0x08002b1d
 8002858:	08002b2e 	.word	0x08002b2e

0800285c <memchr>:
 800285c:	4603      	mov	r3, r0
 800285e:	b510      	push	{r4, lr}
 8002860:	b2c9      	uxtb	r1, r1
 8002862:	4402      	add	r2, r0
 8002864:	4293      	cmp	r3, r2
 8002866:	4618      	mov	r0, r3
 8002868:	d101      	bne.n	800286e <memchr+0x12>
 800286a:	2000      	movs	r0, #0
 800286c:	e003      	b.n	8002876 <memchr+0x1a>
 800286e:	7804      	ldrb	r4, [r0, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	428c      	cmp	r4, r1
 8002874:	d1f6      	bne.n	8002864 <memchr+0x8>
 8002876:	bd10      	pop	{r4, pc}

08002878 <memcpy>:
 8002878:	440a      	add	r2, r1
 800287a:	4291      	cmp	r1, r2
 800287c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002880:	d100      	bne.n	8002884 <memcpy+0xc>
 8002882:	4770      	bx	lr
 8002884:	b510      	push	{r4, lr}
 8002886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800288a:	4291      	cmp	r1, r2
 800288c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002890:	d1f9      	bne.n	8002886 <memcpy+0xe>
 8002892:	bd10      	pop	{r4, pc}

08002894 <memmove>:
 8002894:	4288      	cmp	r0, r1
 8002896:	b510      	push	{r4, lr}
 8002898:	eb01 0402 	add.w	r4, r1, r2
 800289c:	d902      	bls.n	80028a4 <memmove+0x10>
 800289e:	4284      	cmp	r4, r0
 80028a0:	4623      	mov	r3, r4
 80028a2:	d807      	bhi.n	80028b4 <memmove+0x20>
 80028a4:	1e43      	subs	r3, r0, #1
 80028a6:	42a1      	cmp	r1, r4
 80028a8:	d008      	beq.n	80028bc <memmove+0x28>
 80028aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028b2:	e7f8      	b.n	80028a6 <memmove+0x12>
 80028b4:	4601      	mov	r1, r0
 80028b6:	4402      	add	r2, r0
 80028b8:	428a      	cmp	r2, r1
 80028ba:	d100      	bne.n	80028be <memmove+0x2a>
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028c6:	e7f7      	b.n	80028b8 <memmove+0x24>

080028c8 <_free_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4605      	mov	r5, r0
 80028cc:	2900      	cmp	r1, #0
 80028ce:	d043      	beq.n	8002958 <_free_r+0x90>
 80028d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028d4:	1f0c      	subs	r4, r1, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bfb8      	it	lt
 80028da:	18e4      	addlt	r4, r4, r3
 80028dc:	f000 f8d0 	bl	8002a80 <__malloc_lock>
 80028e0:	4a1e      	ldr	r2, [pc, #120]	; (800295c <_free_r+0x94>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	4610      	mov	r0, r2
 80028e6:	b933      	cbnz	r3, 80028f6 <_free_r+0x2e>
 80028e8:	6063      	str	r3, [r4, #4]
 80028ea:	6014      	str	r4, [r2, #0]
 80028ec:	4628      	mov	r0, r5
 80028ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028f2:	f000 b8cb 	b.w	8002a8c <__malloc_unlock>
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	d90a      	bls.n	8002910 <_free_r+0x48>
 80028fa:	6821      	ldr	r1, [r4, #0]
 80028fc:	1862      	adds	r2, r4, r1
 80028fe:	4293      	cmp	r3, r2
 8002900:	bf01      	itttt	eq
 8002902:	681a      	ldreq	r2, [r3, #0]
 8002904:	685b      	ldreq	r3, [r3, #4]
 8002906:	1852      	addeq	r2, r2, r1
 8002908:	6022      	streq	r2, [r4, #0]
 800290a:	6063      	str	r3, [r4, #4]
 800290c:	6004      	str	r4, [r0, #0]
 800290e:	e7ed      	b.n	80028ec <_free_r+0x24>
 8002910:	461a      	mov	r2, r3
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b10b      	cbz	r3, 800291a <_free_r+0x52>
 8002916:	42a3      	cmp	r3, r4
 8002918:	d9fa      	bls.n	8002910 <_free_r+0x48>
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	1850      	adds	r0, r2, r1
 800291e:	42a0      	cmp	r0, r4
 8002920:	d10b      	bne.n	800293a <_free_r+0x72>
 8002922:	6820      	ldr	r0, [r4, #0]
 8002924:	4401      	add	r1, r0
 8002926:	1850      	adds	r0, r2, r1
 8002928:	4283      	cmp	r3, r0
 800292a:	6011      	str	r1, [r2, #0]
 800292c:	d1de      	bne.n	80028ec <_free_r+0x24>
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4401      	add	r1, r0
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	6053      	str	r3, [r2, #4]
 8002938:	e7d8      	b.n	80028ec <_free_r+0x24>
 800293a:	d902      	bls.n	8002942 <_free_r+0x7a>
 800293c:	230c      	movs	r3, #12
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	e7d4      	b.n	80028ec <_free_r+0x24>
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	1821      	adds	r1, r4, r0
 8002946:	428b      	cmp	r3, r1
 8002948:	bf01      	itttt	eq
 800294a:	6819      	ldreq	r1, [r3, #0]
 800294c:	685b      	ldreq	r3, [r3, #4]
 800294e:	1809      	addeq	r1, r1, r0
 8002950:	6021      	streq	r1, [r4, #0]
 8002952:	6063      	str	r3, [r4, #4]
 8002954:	6054      	str	r4, [r2, #4]
 8002956:	e7c9      	b.n	80028ec <_free_r+0x24>
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	200000c8 	.word	0x200000c8

08002960 <_malloc_r>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	1ccd      	adds	r5, r1, #3
 8002964:	f025 0503 	bic.w	r5, r5, #3
 8002968:	3508      	adds	r5, #8
 800296a:	2d0c      	cmp	r5, #12
 800296c:	bf38      	it	cc
 800296e:	250c      	movcc	r5, #12
 8002970:	2d00      	cmp	r5, #0
 8002972:	4606      	mov	r6, r0
 8002974:	db01      	blt.n	800297a <_malloc_r+0x1a>
 8002976:	42a9      	cmp	r1, r5
 8002978:	d903      	bls.n	8002982 <_malloc_r+0x22>
 800297a:	230c      	movs	r3, #12
 800297c:	6033      	str	r3, [r6, #0]
 800297e:	2000      	movs	r0, #0
 8002980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002982:	f000 f87d 	bl	8002a80 <__malloc_lock>
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <_malloc_r+0xac>)
 8002988:	680a      	ldr	r2, [r1, #0]
 800298a:	4614      	mov	r4, r2
 800298c:	b99c      	cbnz	r4, 80029b6 <_malloc_r+0x56>
 800298e:	4f20      	ldr	r7, [pc, #128]	; (8002a10 <_malloc_r+0xb0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b923      	cbnz	r3, 800299e <_malloc_r+0x3e>
 8002994:	4621      	mov	r1, r4
 8002996:	4630      	mov	r0, r6
 8002998:	f000 f862 	bl	8002a60 <_sbrk_r>
 800299c:	6038      	str	r0, [r7, #0]
 800299e:	4629      	mov	r1, r5
 80029a0:	4630      	mov	r0, r6
 80029a2:	f000 f85d 	bl	8002a60 <_sbrk_r>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	d123      	bne.n	80029f2 <_malloc_r+0x92>
 80029aa:	230c      	movs	r3, #12
 80029ac:	4630      	mov	r0, r6
 80029ae:	6033      	str	r3, [r6, #0]
 80029b0:	f000 f86c 	bl	8002a8c <__malloc_unlock>
 80029b4:	e7e3      	b.n	800297e <_malloc_r+0x1e>
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	1b5b      	subs	r3, r3, r5
 80029ba:	d417      	bmi.n	80029ec <_malloc_r+0x8c>
 80029bc:	2b0b      	cmp	r3, #11
 80029be:	d903      	bls.n	80029c8 <_malloc_r+0x68>
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	441c      	add	r4, r3
 80029c4:	6025      	str	r5, [r4, #0]
 80029c6:	e004      	b.n	80029d2 <_malloc_r+0x72>
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	42a2      	cmp	r2, r4
 80029cc:	bf0c      	ite	eq
 80029ce:	600b      	streq	r3, [r1, #0]
 80029d0:	6053      	strne	r3, [r2, #4]
 80029d2:	4630      	mov	r0, r6
 80029d4:	f000 f85a 	bl	8002a8c <__malloc_unlock>
 80029d8:	f104 000b 	add.w	r0, r4, #11
 80029dc:	1d23      	adds	r3, r4, #4
 80029de:	f020 0007 	bic.w	r0, r0, #7
 80029e2:	1ac2      	subs	r2, r0, r3
 80029e4:	d0cc      	beq.n	8002980 <_malloc_r+0x20>
 80029e6:	1a1b      	subs	r3, r3, r0
 80029e8:	50a3      	str	r3, [r4, r2]
 80029ea:	e7c9      	b.n	8002980 <_malloc_r+0x20>
 80029ec:	4622      	mov	r2, r4
 80029ee:	6864      	ldr	r4, [r4, #4]
 80029f0:	e7cc      	b.n	800298c <_malloc_r+0x2c>
 80029f2:	1cc4      	adds	r4, r0, #3
 80029f4:	f024 0403 	bic.w	r4, r4, #3
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d0e3      	beq.n	80029c4 <_malloc_r+0x64>
 80029fc:	1a21      	subs	r1, r4, r0
 80029fe:	4630      	mov	r0, r6
 8002a00:	f000 f82e 	bl	8002a60 <_sbrk_r>
 8002a04:	3001      	adds	r0, #1
 8002a06:	d1dd      	bne.n	80029c4 <_malloc_r+0x64>
 8002a08:	e7cf      	b.n	80029aa <_malloc_r+0x4a>
 8002a0a:	bf00      	nop
 8002a0c:	200000c8 	.word	0x200000c8
 8002a10:	200000cc 	.word	0x200000cc

08002a14 <_realloc_r>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	4607      	mov	r7, r0
 8002a18:	4614      	mov	r4, r2
 8002a1a:	460e      	mov	r6, r1
 8002a1c:	b921      	cbnz	r1, 8002a28 <_realloc_r+0x14>
 8002a1e:	4611      	mov	r1, r2
 8002a20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a24:	f7ff bf9c 	b.w	8002960 <_malloc_r>
 8002a28:	b922      	cbnz	r2, 8002a34 <_realloc_r+0x20>
 8002a2a:	f7ff ff4d 	bl	80028c8 <_free_r>
 8002a2e:	4625      	mov	r5, r4
 8002a30:	4628      	mov	r0, r5
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a34:	f000 f830 	bl	8002a98 <_malloc_usable_size_r>
 8002a38:	42a0      	cmp	r0, r4
 8002a3a:	d20f      	bcs.n	8002a5c <_realloc_r+0x48>
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f7ff ff8e 	bl	8002960 <_malloc_r>
 8002a44:	4605      	mov	r5, r0
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0f2      	beq.n	8002a30 <_realloc_r+0x1c>
 8002a4a:	4631      	mov	r1, r6
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	f7ff ff13 	bl	8002878 <memcpy>
 8002a52:	4631      	mov	r1, r6
 8002a54:	4638      	mov	r0, r7
 8002a56:	f7ff ff37 	bl	80028c8 <_free_r>
 8002a5a:	e7e9      	b.n	8002a30 <_realloc_r+0x1c>
 8002a5c:	4635      	mov	r5, r6
 8002a5e:	e7e7      	b.n	8002a30 <_realloc_r+0x1c>

08002a60 <_sbrk_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	2300      	movs	r3, #0
 8002a64:	4d05      	ldr	r5, [pc, #20]	; (8002a7c <_sbrk_r+0x1c>)
 8002a66:	4604      	mov	r4, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	602b      	str	r3, [r5, #0]
 8002a6c:	f7fd fdee 	bl	800064c <_sbrk>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_sbrk_r+0x1a>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_sbrk_r+0x1a>
 8002a78:	6023      	str	r3, [r4, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	20000184 	.word	0x20000184

08002a80 <__malloc_lock>:
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <__malloc_lock+0x8>)
 8002a82:	f000 b811 	b.w	8002aa8 <__retarget_lock_acquire_recursive>
 8002a86:	bf00      	nop
 8002a88:	2000018c 	.word	0x2000018c

08002a8c <__malloc_unlock>:
 8002a8c:	4801      	ldr	r0, [pc, #4]	; (8002a94 <__malloc_unlock+0x8>)
 8002a8e:	f000 b80c 	b.w	8002aaa <__retarget_lock_release_recursive>
 8002a92:	bf00      	nop
 8002a94:	2000018c 	.word	0x2000018c

08002a98 <_malloc_usable_size_r>:
 8002a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a9c:	1f18      	subs	r0, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bfbc      	itt	lt
 8002aa2:	580b      	ldrlt	r3, [r1, r0]
 8002aa4:	18c0      	addlt	r0, r0, r3
 8002aa6:	4770      	bx	lr

08002aa8 <__retarget_lock_acquire_recursive>:
 8002aa8:	4770      	bx	lr

08002aaa <__retarget_lock_release_recursive>:
 8002aaa:	4770      	bx	lr

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
