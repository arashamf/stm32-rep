
f103_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  0800362c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  0800362c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b5c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001990  00000000  00000000  00027bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017032  00000000  00000000  0002a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008053  00000000  00000000  000413b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b89  00000000  00000000  00049405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbf8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000cbfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080034f8 	.word	0x080034f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080034f8 	.word	0x080034f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <write_flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void write_flash ()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); // разблокировать флеш
 8000162:	f001 f857 	bl	8001214 <HAL_FLASH_Unlock>
	uint32_t address = FLASH_START_ADDR-0x30; // запись в начало страницы 127
 8000166:	4b51      	ldr	r3, [pc, #324]	; (80002ac <write_flash+0x150>)
 8000168:	617b      	str	r3, [r7, #20]
	kordinata.name = 0xFECA;
 800016a:	4b51      	ldr	r3, [pc, #324]	; (80002b0 <write_flash+0x154>)
 800016c:	f64f 62ca 	movw	r2, #65226	; 0xfeca
 8000170:	801a      	strh	r2, [r3, #0]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, kordinata.name) != HAL_OK) //обработчик ошибки
 8000172:	4b4f      	ldr	r3, [pc, #316]	; (80002b0 <write_flash+0x154>)
 8000174:	881b      	ldrh	r3, [r3, #0]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f04f 0300 	mov.w	r3, #0
 800017c:	6979      	ldr	r1, [r7, #20]
 800017e:	2001      	movs	r0, #1
 8000180:	f000 ffd8 	bl	8001134 <HAL_FLASH_Program>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d012      	beq.n	80001b0 <write_flash+0x54>
	{
	    uint32_t code_error = HAL_FLASH_GetError();
 800018a:	f001 f879 	bl	8001280 <HAL_FLASH_GetError>
 800018e:	6078      	str	r0, [r7, #4]
	    sprintf(UART_msg_TX, "ERRoR = %lu\r\n", code_error);
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	4948      	ldr	r1, [pc, #288]	; (80002b4 <write_flash+0x158>)
 8000194:	4848      	ldr	r0, [pc, #288]	; (80002b8 <write_flash+0x15c>)
 8000196:	f002 fd63 	bl	8002c60 <siprintf>
	    HAL_UART_Transmit_DMA (&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 800019a:	4847      	ldr	r0, [pc, #284]	; (80002b8 <write_flash+0x15c>)
 800019c:	f7ff ffd6 	bl	800014c <strlen>
 80001a0:	4603      	mov	r3, r0
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	4944      	ldr	r1, [pc, #272]	; (80002b8 <write_flash+0x15c>)
 80001a8:	4844      	ldr	r0, [pc, #272]	; (80002bc <write_flash+0x160>)
 80001aa:	f002 f805 	bl	80021b8 <HAL_UART_Transmit_DMA>
	    return;
 80001ae:	e079      	b.n	80002a4 <write_flash+0x148>
	}
	address = address + 2; // смещаем адрес на 2 байта
 80001b0:	697b      	ldr	r3, [r7, #20]
 80001b2:	3302      	adds	r3, #2
 80001b4:	617b      	str	r3, [r7, #20]
	kordinata.day = 0x29;
 80001b6:	4b3e      	ldr	r3, [pc, #248]	; (80002b0 <write_flash+0x154>)
 80001b8:	2229      	movs	r2, #41	; 0x29
 80001ba:	701a      	strb	r2, [r3, #0]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, kordinata.day) != HAL_OK) //обработчик ошибки
 80001bc:	4b3c      	ldr	r3, [pc, #240]	; (80002b0 <write_flash+0x154>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	f04f 0300 	mov.w	r3, #0
 80001c6:	6979      	ldr	r1, [r7, #20]
 80001c8:	2001      	movs	r0, #1
 80001ca:	f000 ffb3 	bl	8001134 <HAL_FLASH_Program>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d012      	beq.n	80001fa <write_flash+0x9e>
	{
	 	uint32_t code_error = HAL_FLASH_GetError();
 80001d4:	f001 f854 	bl	8001280 <HAL_FLASH_GetError>
 80001d8:	60b8      	str	r0, [r7, #8]
	 	sprintf(UART_msg_TX, "ERRoR = %lu\r\n", code_error);
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	4935      	ldr	r1, [pc, #212]	; (80002b4 <write_flash+0x158>)
 80001de:	4836      	ldr	r0, [pc, #216]	; (80002b8 <write_flash+0x15c>)
 80001e0:	f002 fd3e 	bl	8002c60 <siprintf>
	 	HAL_UART_Transmit_DMA (&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 80001e4:	4834      	ldr	r0, [pc, #208]	; (80002b8 <write_flash+0x15c>)
 80001e6:	f7ff ffb1 	bl	800014c <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	461a      	mov	r2, r3
 80001f0:	4931      	ldr	r1, [pc, #196]	; (80002b8 <write_flash+0x15c>)
 80001f2:	4832      	ldr	r0, [pc, #200]	; (80002bc <write_flash+0x160>)
 80001f4:	f001 ffe0 	bl	80021b8 <HAL_UART_Transmit_DMA>
	 	return;
 80001f8:	e054      	b.n	80002a4 <write_flash+0x148>
	}
	address = address + 2; // смещаем адрес на 2 байта
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3302      	adds	r3, #2
 80001fe:	617b      	str	r3, [r7, #20]
	kordinata.month = 0x2;
 8000200:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <write_flash+0x154>)
 8000202:	2202      	movs	r2, #2
 8000204:	701a      	strb	r2, [r3, #0]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, kordinata.month) != HAL_OK) //обработчик ошибки
 8000206:	4b2a      	ldr	r3, [pc, #168]	; (80002b0 <write_flash+0x154>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2da      	uxtb	r2, r3
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	6979      	ldr	r1, [r7, #20]
 8000212:	2001      	movs	r0, #1
 8000214:	f000 ff8e 	bl	8001134 <HAL_FLASH_Program>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d012      	beq.n	8000244 <write_flash+0xe8>
	{
		 uint32_t code_error = HAL_FLASH_GetError();
 800021e:	f001 f82f 	bl	8001280 <HAL_FLASH_GetError>
 8000222:	60f8      	str	r0, [r7, #12]
		 sprintf(UART_msg_TX, "ERRoR = %lu\r\n", code_error);
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	4923      	ldr	r1, [pc, #140]	; (80002b4 <write_flash+0x158>)
 8000228:	4823      	ldr	r0, [pc, #140]	; (80002b8 <write_flash+0x15c>)
 800022a:	f002 fd19 	bl	8002c60 <siprintf>
		 HAL_UART_Transmit_DMA (&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 800022e:	4822      	ldr	r0, [pc, #136]	; (80002b8 <write_flash+0x15c>)
 8000230:	f7ff ff8c 	bl	800014c <strlen>
 8000234:	4603      	mov	r3, r0
 8000236:	b29b      	uxth	r3, r3
 8000238:	461a      	mov	r2, r3
 800023a:	491f      	ldr	r1, [pc, #124]	; (80002b8 <write_flash+0x15c>)
 800023c:	481f      	ldr	r0, [pc, #124]	; (80002bc <write_flash+0x160>)
 800023e:	f001 ffbb 	bl	80021b8 <HAL_UART_Transmit_DMA>
		 return;
 8000242:	e02f      	b.n	80002a4 <write_flash+0x148>
	}
	address = address + 2; // смещаем адрес на 2 байта
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	3302      	adds	r3, #2
 8000248:	617b      	str	r3, [r7, #20]
	kordinata.year = 0x2021;
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <write_flash+0x154>)
 800024c:	f242 0221 	movw	r2, #8225	; 0x2021
 8000250:	801a      	strh	r2, [r3, #0]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, kordinata.year) != HAL_OK) //обработчик ошибки
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <write_flash+0x154>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	b29a      	uxth	r2, r3
 8000258:	f04f 0300 	mov.w	r3, #0
 800025c:	6979      	ldr	r1, [r7, #20]
 800025e:	2001      	movs	r0, #1
 8000260:	f000 ff68 	bl	8001134 <HAL_FLASH_Program>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d012      	beq.n	8000290 <write_flash+0x134>
	{
		 uint32_t code_error = HAL_FLASH_GetError();
 800026a:	f001 f809 	bl	8001280 <HAL_FLASH_GetError>
 800026e:	6138      	str	r0, [r7, #16]
		 sprintf(UART_msg_TX, "ERRoR = %lu\r\n", code_error);
 8000270:	693a      	ldr	r2, [r7, #16]
 8000272:	4910      	ldr	r1, [pc, #64]	; (80002b4 <write_flash+0x158>)
 8000274:	4810      	ldr	r0, [pc, #64]	; (80002b8 <write_flash+0x15c>)
 8000276:	f002 fcf3 	bl	8002c60 <siprintf>
		 HAL_UART_Transmit_DMA (&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 800027a:	480f      	ldr	r0, [pc, #60]	; (80002b8 <write_flash+0x15c>)
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29b      	uxth	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	490c      	ldr	r1, [pc, #48]	; (80002b8 <write_flash+0x15c>)
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <write_flash+0x160>)
 800028a:	f001 ff95 	bl	80021b8 <HAL_UART_Transmit_DMA>
		 return;
 800028e:	e009      	b.n	80002a4 <write_flash+0x148>
	}
	address = address + 2; // смещаем адрес на 2 байта
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3302      	adds	r3, #2
 8000294:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit_DMA (&huart1, (uint8_t*)"Write in flash OK\r\n", strlen("Write in flash OK\r\n"));
 8000296:	2213      	movs	r2, #19
 8000298:	4909      	ldr	r1, [pc, #36]	; (80002c0 <write_flash+0x164>)
 800029a:	4808      	ldr	r0, [pc, #32]	; (80002bc <write_flash+0x160>)
 800029c:	f001 ff8c 	bl	80021b8 <HAL_UART_Transmit_DMA>
	HAL_FLASH_Lock(); // заблокировать флеш
 80002a0:	f000 ffde 	bl	8001260 <HAL_FLASH_Lock>
}
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	0801fbd0 	.word	0x0801fbd0
 80002b0:	200000d8 	.word	0x200000d8
 80002b4:	08003510 	.word	0x08003510
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	20000120 	.word	0x20000120
 80002c0:	08003520 	.word	0x08003520

080002c4 <HAL_UART_TxHalfCpltCallback>:

//--------------------------------------------колбэк прерывания от UART 1 при передаче половины сообщения------------------------------------//
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
		{

		}
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <HAL_UART_TxCpltCallback>:
/*DMA вызывает два прерывания, первое после отправки половины буфера, а второе при завершении. Чтобы отключить половинку,
нужно в файле stm32f1xx_hal_uart.c найти функцию HAL_UART_Transmit_DMA(...) и закомментировать строку huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt*/

//--------------------------------------колбэк прерывания от UART 1 при передаче полного сообщения-------------------------------------------//
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80002d6:	b480      	push	{r7}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
		{

        }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <HAL_UART_RxCpltCallback>:


//--------------------------------------колбэк прерывания от UART 1 при приёме полного сообщения-------------------------------------------//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a36      	ldr	r2, [pc, #216]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d165      	bne.n	80003c4 <HAL_UART_RxCpltCallback+0xdc>
		{
		memset(UART_msg_TX, '\0', sizeof(UART_msg_TX)); //ф-я memset копирует младший байт символа ch в первые count символов массива buf. Возвращает указатель на массив.
 80002f8:	221e      	movs	r2, #30
 80002fa:	2100      	movs	r1, #0
 80002fc:	4834      	ldr	r0, [pc, #208]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 80002fe:	f002 fca7 	bl	8002c50 <memset>
		for (count = 0; count < 7; count++)
 8000302:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
 8000308:	e043      	b.n	8000392 <HAL_UART_RxCpltCallback+0xaa>
		{
			if (count == 5)
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b05      	cmp	r3, #5
 8000310:	d110      	bne.n	8000334 <HAL_UART_RxCpltCallback+0x4c>
				{
				symbol = UART_msg_TX [count] = '\r';
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4a2e      	ldr	r2, [pc, #184]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000318:	210d      	movs	r1, #13
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 800031e:	5cd2      	ldrb	r2, [r2, r3]
 8000320:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000322:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit (&huart1, (unsigned char*)&symbol, 1, 0xFFF);
 8000324:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000328:	2201      	movs	r2, #1
 800032a:	492b      	ldr	r1, [pc, #172]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 800032c:	4827      	ldr	r0, [pc, #156]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 800032e:	f001 fe80 	bl	8002032 <HAL_UART_Transmit>
				continue;
 8000332:	e028      	b.n	8000386 <HAL_UART_RxCpltCallback+0x9e>
				}
			if (count == 6)
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b06      	cmp	r3, #6
 800033a:	d110      	bne.n	800035e <HAL_UART_RxCpltCallback+0x76>
				{
				symbol = UART_msg_TX [count] = '\n';
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000342:	210a      	movs	r1, #10
 8000344:	54d1      	strb	r1, [r2, r3]
 8000346:	4a22      	ldr	r2, [pc, #136]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000348:	5cd2      	ldrb	r2, [r2, r3]
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 800034c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit (&huart1, (unsigned char*)&symbol, 1, 0xFFF);
 800034e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000352:	2201      	movs	r2, #1
 8000354:	4920      	ldr	r1, [pc, #128]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000356:	481d      	ldr	r0, [pc, #116]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 8000358:	f001 fe6b 	bl	8002032 <HAL_UART_Transmit>
				break;
 800035c:	e01d      	b.n	800039a <HAL_UART_RxCpltCallback+0xb2>
				}
			symbol = UART_msg_TX [count] = UART_buf_RX [count];
 800035e:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <HAL_UART_RxCpltCallback+0xf4>)
 800036a:	5c51      	ldrb	r1, [r2, r1]
 800036c:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 800036e:	54d1      	strb	r1, [r2, r3]
 8000370:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000372:	5cd2      	ldrb	r2, [r2, r3]
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000376:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit (&huart1, (unsigned char*)&symbol, 1, 0xFFF);
 8000378:	f640 73ff 	movw	r3, #4095	; 0xfff
 800037c:	2201      	movs	r2, #1
 800037e:	4916      	ldr	r1, [pc, #88]	; (80003d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000380:	4812      	ldr	r0, [pc, #72]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 8000382:	f001 fe56 	bl	8002032 <HAL_UART_Transmit>
		for (count = 0; count < 7; count++)
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_UART_RxCpltCallback+0xec>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b06      	cmp	r3, #6
 8000398:	d9b7      	bls.n	800030a <HAL_UART_RxCpltCallback+0x22>
		}
		if(!strncmp(UART_buf_RX, "write", 5)) //ф-я strncmp сравнивает первые n символов строк. Возвращает "0", если строки одинаковы, "< 0" - если строка1 меньше сроки2, "> 0" - если строка1 больше строки 2
 800039a:	2205      	movs	r2, #5
 800039c:	4910      	ldr	r1, [pc, #64]	; (80003e0 <HAL_UART_RxCpltCallback+0xf8>)
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <HAL_UART_RxCpltCallback+0xf4>)
 80003a0:	f002 fc7e 	bl	8002ca0 <strncmp>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d102      	bne.n	80003b0 <HAL_UART_RxCpltCallback+0xc8>
			{
//			HAL_UART_Transmit_DMA (&huart1, (unsigned char*)message1, strlen(message1));
			write_flash ();
 80003aa:	f7ff fed7 	bl	800015c <write_flash>
 80003ae:	e004      	b.n	80003ba <HAL_UART_RxCpltCallback+0xd2>
			}
		else
			{
			HAL_UART_Transmit_DMA (&huart1, (unsigned char*)message2, strlen(message2));
 80003b0:	2207      	movs	r2, #7
 80003b2:	490c      	ldr	r1, [pc, #48]	; (80003e4 <HAL_UART_RxCpltCallback+0xfc>)
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 80003b6:	f001 feff 	bl	80021b8 <HAL_UART_Transmit_DMA>
			}
//		HAL_UART_Transmit (&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0xFFF);
		HAL_UART_Receive_IT(&huart1, (uint8_t*)UART_buf_RX, 5);
 80003ba:	2205      	movs	r2, #5
 80003bc:	4907      	ldr	r1, [pc, #28]	; (80003dc <HAL_UART_RxCpltCallback+0xf4>)
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <HAL_UART_RxCpltCallback+0xe4>)
 80003c0:	f001 fec9 	bl	8002156 <HAL_UART_Receive_IT>
        }
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000120 	.word	0x20000120
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	200000ca 	.word	0x200000ca
 80003d8:	200000cb 	.word	0x200000cb
 80003dc:	200000ac 	.word	0x200000ac
 80003e0:	08003534 	.word	0x08003534
 80003e4:	08003560 	.word	0x08003560

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fa70 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f834 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f8be 	bl	8000574 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f8:	f000 f89e 	bl	8000538 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003fc:	f000 f872 	bl	80004e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf (UART_msg_TX,"flash_edit_start\r\n");
 8000400:	4911      	ldr	r1, [pc, #68]	; (8000448 <main+0x60>)
 8000402:	4812      	ldr	r0, [pc, #72]	; (800044c <main+0x64>)
 8000404:	f002 fc2c 	bl	8002c60 <siprintf>
  HAL_UART_Transmit_DMA (&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX));
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <main+0x64>)
 800040a:	f7ff fe9f 	bl	800014c <strlen>
 800040e:	4603      	mov	r3, r0
 8000410:	b29b      	uxth	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	490d      	ldr	r1, [pc, #52]	; (800044c <main+0x64>)
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <main+0x68>)
 8000418:	f001 fece 	bl	80021b8 <HAL_UART_Transmit_DMA>
  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, ENABLE);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	480c      	ldr	r0, [pc, #48]	; (8000454 <main+0x6c>)
 8000424:	f001 f96c 	bl	8001700 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)UART_buf_RX, 5); //ожидаем получения 5 символов по УАРТ
 8000428:	2205      	movs	r2, #5
 800042a:	490b      	ldr	r1, [pc, #44]	; (8000458 <main+0x70>)
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x68>)
 800042e:	f001 fe92 	bl	8002156 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4807      	ldr	r0, [pc, #28]	; (8000454 <main+0x6c>)
 8000438:	f001 f97a 	bl	8001730 <HAL_GPIO_TogglePin>
	HAL_Delay (1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000440:	f000 faa8 	bl	8000994 <HAL_Delay>
	HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000444:	e7f5      	b.n	8000432 <main+0x4a>
 8000446:	bf00      	nop
 8000448:	0800353c 	.word	0x0800353c
 800044c:	2000008c 	.word	0x2000008c
 8000450:	20000120 	.word	0x20000120
 8000454:	40011000 	.word	0x40011000
 8000458:	200000ac 	.word	0x200000ac

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b090      	sub	sp, #64	; 0x40
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	2228      	movs	r2, #40	; 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fbf0 	bl	8002c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047e:	2301      	movs	r3, #1
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800049a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800049e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 f95d 	bl	8001764 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b0:	f000 f8ba 	bl	8000628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2101      	movs	r1, #1
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fbc9 	bl	8001c64 <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004d8:	f000 f8a6 	bl	8000628 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3740      	adds	r7, #64	; 0x40
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <MX_USART1_UART_Init+0x50>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 800051c:	f001 fd3c 	bl	8001f98 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000526:	f000 f87f 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000120 	.word	0x20000120
 8000534:	40013800 	.word	0x40013800

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_DMA_Init+0x38>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <MX_DMA_Init+0x38>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_DMA_Init+0x38>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	200e      	movs	r0, #14
 800055c:	f000 fb15 	bl	8000b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000560:	200e      	movs	r0, #14
 8000562:	f000 fb2e 	bl	8000bc2 <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <MX_GPIO_Init+0xa8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a23      	ldr	r2, [pc, #140]	; (800061c <MX_GPIO_Init+0xa8>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_GPIO_Init+0xa8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0xa8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <MX_GPIO_Init+0xa8>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0xa8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0xa8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_GPIO_Init+0xa8>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_GPIO_Init+0xa8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <MX_GPIO_Init+0xac>)
 80005d8:	f001 f892 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <MX_GPIO_Init+0xac>)
 80005f6:	f000 feff 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80005fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_GPIO_Init+0xb0>)
 8000610:	f000 fef2 	bl	80013f8 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	40011000 	.word	0x40011000
 8000624:	40010800 	.word	0x40010800

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <HAL_UART_MspInit+0xe8>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d15f      	bne.n	8000778 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a31      	ldr	r2, [pc, #196]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <HAL_UART_MspInit+0xec>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	4822      	ldr	r0, [pc, #136]	; (8000788 <HAL_UART_MspInit+0xf0>)
 80006fe:	f000 fe7b 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	481c      	ldr	r0, [pc, #112]	; (8000788 <HAL_UART_MspInit+0xf0>)
 8000718:	f000 fe6e 	bl	80013f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_UART_MspInit+0xf4>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_UART_MspInit+0xf8>)
 8000720:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000724:	2210      	movs	r2, #16
 8000726:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_UART_MspInit+0xf4>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_UART_MspInit+0xf4>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800074c:	480f      	ldr	r0, [pc, #60]	; (800078c <HAL_UART_MspInit+0xf4>)
 800074e:	f000 fa53 	bl	8000bf8 <HAL_DMA_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000758:	f7ff ff66 	bl	8000628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_UART_MspInit+0xf4>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2025      	movs	r0, #37	; 0x25
 800076e:	f000 fa0c 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000772:	2025      	movs	r0, #37	; 0x25
 8000774:	f000 fa25 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013800 	.word	0x40013800
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	200000dc 	.word	0x200000dc
 8000790:	40020044 	.word	0x40020044

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f8bf 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <DMA1_Channel4_IRQHandler+0x10>)
 80007ea:	f000 fb6f 	bl	8000ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000dc 	.word	0x200000dc

080007f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <USART1_IRQHandler+0x10>)
 80007fe:	f001 fd47 	bl	8002290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000120 	.word	0x20000120

0800080c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <_sbrk+0x5c>)
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <_sbrk+0x60>)
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <_sbrk+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <_sbrk+0x64>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <_sbrk+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	429a      	cmp	r2, r3
 800083a:	d207      	bcs.n	800084c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800083c:	f002 f9de 	bl	8002bfc <__errno>
 8000840:	4603      	mov	r3, r0
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e009      	b.n	8000860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <_sbrk+0x64>)
 800085c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20005000 	.word	0x20005000
 800086c:	00000400 	.word	0x00000400
 8000870:	200000cc 	.word	0x200000cc
 8000874:	20000198 	.word	0x20000198

08000878 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008aa:	f7ff ffe5 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f002 f9ab 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd99 	bl	80003e8 <main>
  bx lr
 80008b6:	4770      	bx	lr
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008c0:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 80008c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008c8:	20000198 	.word	0x20000198

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f947 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fea2 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f95f 	bl	8000bde <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f927 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	20000164 	.word	0x20000164

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000164 	.word	0x20000164

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4906      	ldr	r1, [pc, #24]	; (8000a74 <__NVIC_EnableIRQ+0x34>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff90 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff2d 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff42 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff90 	bl	8000acc <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5f 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff35 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffa2 	bl	8000b30 <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e043      	b.n	8000c96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_DMA_Init+0xa8>)
 8000c16:	4413      	add	r3, r2
 8000c18:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_DMA_Init+0xac>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	009a      	lsls	r2, r3, #2
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_DMA_Init+0xb0>)
 8000c2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	bffdfff8 	.word	0xbffdfff8
 8000ca4:	cccccccd 	.word	0xcccccccd
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_DMA_Start_IT+0x20>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e04a      	b.n	8000d62 <HAL_DMA_Start_IT+0xb6>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d13a      	bne.n	8000d54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0201 	bic.w	r2, r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f000 f9e8 	bl	80010d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 020e 	orr.w	r2, r2, #14
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e00f      	b.n	8000d42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0204 	bic.w	r2, r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f042 020a 	orr.w	r2, r2, #10
 8000d40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 0201 	orr.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e005      	b.n	8000d60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d008      	beq.n	8000d92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2204      	movs	r2, #4
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e020      	b.n	8000dd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 020e 	bic.w	r2, r2, #14
 8000da0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0201 	bic.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d005      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2204      	movs	r2, #4
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e051      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 020e 	bic.w	r2, r2, #14
 8000e10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_DMA_Abort_IT+0xd0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d029      	beq.n	8000e80 <HAL_DMA_Abort_IT+0xa0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_DMA_Abort_IT+0xd4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d022      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x9c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_DMA_Abort_IT+0xd8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d01a      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x96>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_DMA_Abort_IT+0xdc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d012      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x90>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <HAL_DMA_Abort_IT+0xe0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00a      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x8a>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <HAL_DMA_Abort_IT+0xe4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d102      	bne.n	8000e64 <HAL_DMA_Abort_IT+0x84>
 8000e5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e62:	e00e      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e68:	e00b      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6e:	e008      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	e005      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7a:	e002      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	e000      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e80:	2301      	movs	r3, #1
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <HAL_DMA_Abort_IT+0xe8>)
 8000e84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
    } 
  }
  return status;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	4002001c 	.word	0x4002001c
 8000eb8:	40020030 	.word	0x40020030
 8000ebc:	40020044 	.word	0x40020044
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	4002006c 	.word	0x4002006c
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	2204      	movs	r2, #4
 8000eea:	409a      	lsls	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d04f      	beq.n	8000f94 <HAL_DMA_IRQHandler+0xc8>
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d04a      	beq.n	8000f94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d107      	bne.n	8000f1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0204 	bic.w	r2, r2, #4
 8000f1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a66      	ldr	r2, [pc, #408]	; (80010bc <HAL_DMA_IRQHandler+0x1f0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d029      	beq.n	8000f7a <HAL_DMA_IRQHandler+0xae>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d022      	beq.n	8000f76 <HAL_DMA_IRQHandler+0xaa>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_DMA_IRQHandler+0x1f8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01a      	beq.n	8000f70 <HAL_DMA_IRQHandler+0xa4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d012      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x9e>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a60      	ldr	r2, [pc, #384]	; (80010cc <HAL_DMA_IRQHandler+0x200>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x98>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a5f      	ldr	r2, [pc, #380]	; (80010d0 <HAL_DMA_IRQHandler+0x204>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d102      	bne.n	8000f5e <HAL_DMA_IRQHandler+0x92>
 8000f58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5c:	e00e      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f62:	e00b      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f68:	e008      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6e:	e005      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	e002      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	e000      	b.n	8000f7c <HAL_DMA_IRQHandler+0xb0>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	4a55      	ldr	r2, [pc, #340]	; (80010d4 <HAL_DMA_IRQHandler+0x208>)
 8000f7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8094 	beq.w	80010b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f92:	e08e      	b.n	80010b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	2202      	movs	r2, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d056      	beq.n	8001052 <HAL_DMA_IRQHandler+0x186>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d051      	beq.n	8001052 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10b      	bne.n	8000fd4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a38      	ldr	r2, [pc, #224]	; (80010bc <HAL_DMA_IRQHandler+0x1f0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d029      	beq.n	8001032 <HAL_DMA_IRQHandler+0x166>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a37      	ldr	r2, [pc, #220]	; (80010c0 <HAL_DMA_IRQHandler+0x1f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d022      	beq.n	800102e <HAL_DMA_IRQHandler+0x162>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a35      	ldr	r2, [pc, #212]	; (80010c4 <HAL_DMA_IRQHandler+0x1f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01a      	beq.n	8001028 <HAL_DMA_IRQHandler+0x15c>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <HAL_DMA_IRQHandler+0x1fc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d012      	beq.n	8001022 <HAL_DMA_IRQHandler+0x156>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <HAL_DMA_IRQHandler+0x200>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00a      	beq.n	800101c <HAL_DMA_IRQHandler+0x150>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_DMA_IRQHandler+0x204>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d102      	bne.n	8001016 <HAL_DMA_IRQHandler+0x14a>
 8001010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001014:	e00e      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 8001016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101a:	e00b      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 800101c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001020:	e008      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 8001022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001026:	e005      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	e002      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 800102e:	2320      	movs	r3, #32
 8001030:	e000      	b.n	8001034 <HAL_DMA_IRQHandler+0x168>
 8001032:	2302      	movs	r3, #2
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_DMA_IRQHandler+0x208>)
 8001036:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d034      	beq.n	80010b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001050:	e02f      	b.n	80010b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2208      	movs	r2, #8
 8001058:	409a      	lsls	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d028      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x1e8>
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 020e 	bic.w	r2, r2, #14
 800107a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
    }
  }
  return;
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
}
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020008 	.word	0x40020008
 80010c0:	4002001c 	.word	0x4002001c
 80010c4:	40020030 	.word	0x40020030
 80010c8:	40020044 	.word	0x40020044
 80010cc:	40020058 	.word	0x40020058
 80010d0:	4002006c 	.word	0x4002006c
 80010d4:	40020000 	.word	0x40020000

080010d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b10      	cmp	r3, #16
 8001104:	d108      	bne.n	8001118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001116:	e007      	b.n	8001128 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
	...

08001134 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_FLASH_Program+0xd8>)
 8001150:	7e1b      	ldrb	r3, [r3, #24]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_FLASH_Program+0x26>
 8001156:	2302      	movs	r3, #2
 8001158:	e054      	b.n	8001204 <HAL_FLASH_Program+0xd0>
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_FLASH_Program+0xd8>)
 800115c:	2201      	movs	r2, #1
 800115e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001164:	f000 f8b2 	bl	80012cc <FLASH_WaitForLastOperation>
 8001168:	4603      	mov	r3, r0
 800116a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d144      	bne.n	80011fc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001178:	2301      	movs	r3, #1
 800117a:	757b      	strb	r3, [r7, #21]
 800117c:	e007      	b.n	800118e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d102      	bne.n	800118a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001184:	2302      	movs	r3, #2
 8001186:	757b      	strb	r3, [r7, #21]
 8001188:	e001      	b.n	800118e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800118a:	2304      	movs	r3, #4
 800118c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800118e:	2300      	movs	r3, #0
 8001190:	75bb      	strb	r3, [r7, #22]
 8001192:	e02d      	b.n	80011f0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001194:	7dbb      	ldrb	r3, [r7, #22]
 8001196:	005a      	lsls	r2, r3, #1
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	eb02 0c03 	add.w	ip, r2, r3
 800119e:	7dbb      	ldrb	r3, [r7, #22]
 80011a0:	0119      	lsls	r1, r3, #4
 80011a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011a6:	f1c1 0620 	rsb	r6, r1, #32
 80011aa:	f1a1 0020 	sub.w	r0, r1, #32
 80011ae:	fa22 f401 	lsr.w	r4, r2, r1
 80011b2:	fa03 f606 	lsl.w	r6, r3, r6
 80011b6:	4334      	orrs	r4, r6
 80011b8:	fa23 f000 	lsr.w	r0, r3, r0
 80011bc:	4304      	orrs	r4, r0
 80011be:	fa23 f501 	lsr.w	r5, r3, r1
 80011c2:	b2a3      	uxth	r3, r4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4660      	mov	r0, ip
 80011c8:	f000 f864 	bl	8001294 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d0:	f000 f87c 	bl	80012cc <FLASH_WaitForLastOperation>
 80011d4:	4603      	mov	r3, r0
 80011d6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_FLASH_Program+0xdc>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_FLASH_Program+0xdc>)
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	3301      	adds	r3, #1
 80011ee:	75bb      	strb	r3, [r7, #22]
 80011f0:	7dba      	ldrb	r2, [r7, #22]
 80011f2:	7d7b      	ldrb	r3, [r7, #21]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3cd      	bcc.n	8001194 <HAL_FLASH_Program+0x60>
 80011f8:	e000      	b.n	80011fc <HAL_FLASH_Program+0xc8>
      {
        break;
 80011fa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_FLASH_Program+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]

  return status;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
}
 8001204:	4618      	mov	r0, r3
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120c:	20000168 	.word	0x20000168
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_FLASH_Unlock+0x40>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_FLASH_Unlock+0x40>)
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_FLASH_Unlock+0x44>)
 800122e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_FLASH_Unlock+0x40>)
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_FLASH_Unlock+0x48>)
 8001234:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_FLASH_Unlock+0x40>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001246:	79fb      	ldrb	r3, [r7, #7]
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000
 8001258:	45670123 	.word	0x45670123
 800125c:	cdef89ab 	.word	0xcdef89ab

08001260 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_FLASH_Lock+0x1c>)
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_FLASH_Lock+0x1c>)
 800126a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_FLASH_GetError+0x10>)
 8001286:	69db      	ldr	r3, [r3, #28]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000168 	.word	0x20000168

08001294 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <FLASH_Program_HalfWord+0x30>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <FLASH_Program_HalfWord+0x34>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <FLASH_Program_HalfWord+0x34>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	801a      	strh	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000168 	.word	0x20000168
 80012c8:	40022000 	.word	0x40022000

080012cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff fb54 	bl	8000980 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012da:	e010      	b.n	80012fe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e2:	d00c      	beq.n	80012fe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <FLASH_WaitForLastOperation+0x2e>
 80012ea:	f7ff fb49 	bl	8000980 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d201      	bcs.n	80012fe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e025      	b.n	800134a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e8      	bne.n	80012dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001318:	2220      	movs	r2, #32
 800131a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10b      	bne.n	8001340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <FLASH_WaitForLastOperation+0x88>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001340:	f000 f80a 	bl	8001358 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001378:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 8001398:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <FLASH_SetErrorCode+0x9c>)
 80013b8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f240 1201 	movw	r2, #257	; 0x101
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d106      	bne.n	80013de <FLASH_SetErrorCode+0x86>
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	61d3      	str	r3, [r2, #28]
}  
 80013dc:	e002      	b.n	80013e4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <FLASH_SetErrorCode+0x98>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60d3      	str	r3, [r2, #12]
}  
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000
 80013f4:	20000168 	.word	0x20000168

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e169      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800140c:	2201      	movs	r2, #1
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8158 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a9a      	ldr	r2, [pc, #616]	; (8001698 <HAL_GPIO_Init+0x2a0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d05e      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001434:	4a98      	ldr	r2, [pc, #608]	; (8001698 <HAL_GPIO_Init+0x2a0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d875      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800143a:	4a98      	ldr	r2, [pc, #608]	; (800169c <HAL_GPIO_Init+0x2a4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d058      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001440:	4a96      	ldr	r2, [pc, #600]	; (800169c <HAL_GPIO_Init+0x2a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d86f      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001446:	4a96      	ldr	r2, [pc, #600]	; (80016a0 <HAL_GPIO_Init+0x2a8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d052      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 800144c:	4a94      	ldr	r2, [pc, #592]	; (80016a0 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d869      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001452:	4a94      	ldr	r2, [pc, #592]	; (80016a4 <HAL_GPIO_Init+0x2ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d04c      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001458:	4a92      	ldr	r2, [pc, #584]	; (80016a4 <HAL_GPIO_Init+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d863      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800145e:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d046      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001464:	4a90      	ldr	r2, [pc, #576]	; (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d85d      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d82a      	bhi.n	80014c4 <HAL_GPIO_Init+0xcc>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d859      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <HAL_GPIO_Init+0x80>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014df 	.word	0x080014df
 8001484:	08001521 	.word	0x08001521
 8001488:	08001527 	.word	0x08001527
 800148c:	08001527 	.word	0x08001527
 8001490:	08001527 	.word	0x08001527
 8001494:	08001527 	.word	0x08001527
 8001498:	08001527 	.word	0x08001527
 800149c:	08001527 	.word	0x08001527
 80014a0:	08001527 	.word	0x08001527
 80014a4:	08001527 	.word	0x08001527
 80014a8:	08001527 	.word	0x08001527
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001527 	.word	0x08001527
 80014b4:	08001527 	.word	0x08001527
 80014b8:	08001527 	.word	0x08001527
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	4a79      	ldr	r2, [pc, #484]	; (80016ac <HAL_GPIO_Init+0x2b4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ca:	e02c      	b.n	8001526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e029      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e024      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e01f      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	330c      	adds	r3, #12
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e01a      	b.n	8001528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fa:	2304      	movs	r3, #4
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e013      	b.n	8001528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	611a      	str	r2, [r3, #16]
          break;
 8001512:	e009      	b.n	8001528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	615a      	str	r2, [r3, #20]
          break;
 800151e:	e003      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x130>
          break;
 8001526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d801      	bhi.n	8001532 <HAL_GPIO_Init+0x13a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_Init+0x13e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d802      	bhi.n	8001544 <HAL_GPIO_Init+0x14c>
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x152>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	3b08      	subs	r3, #8
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	210f      	movs	r1, #15
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	6a39      	ldr	r1, [r7, #32]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80b1 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001578:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a4c      	ldr	r2, [pc, #304]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_GPIO_Init+0x2b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001590:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_GPIO_Init+0x2bc>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <HAL_GPIO_Init+0x2c0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d013      	beq.n	80015e4 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00d      	beq.n	80015e0 <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_GPIO_Init+0x1e4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_GPIO_Init+0x1e0>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015d8:	2304      	movs	r3, #4
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e4:	2300      	movs	r3, #0
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f6:	492f      	ldr	r1, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x2bc>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	492c      	ldr	r1, [pc, #176]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4928      	ldr	r1, [pc, #160]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	491e      	ldr	r1, [pc, #120]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4918      	ldr	r1, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	4914      	ldr	r1, [pc, #80]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001678:	4013      	ands	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d021      	beq.n	80016cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	490e      	ldr	r1, [pc, #56]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
 8001694:	e021      	b.n	80016da <HAL_GPIO_Init+0x2e2>
 8001696:	bf00      	nop
 8001698:	10320000 	.word	0x10320000
 800169c:	10310000 	.word	0x10310000
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10120000 	.word	0x10120000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40011400 	.word	0x40011400
 80016c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	3301      	adds	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f47f ae8e 	bne.w	800140c <HAL_GPIO_Init+0x14>
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	372c      	adds	r7, #44	; 0x2c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43d9      	mvns	r1, r3
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	400b      	ands	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e26c      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 800179c:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e246      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7a      	ldr	r2, [pc, #488]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f89e 	bl	8000980 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f89a 	bl	8000980 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1fa      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff f88a 	bl	8000980 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff f886 	bl	8000980 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1e6      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4939      	ldr	r1, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f83f 	bl	8000980 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff f83b 	bl	8000980 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e19b      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4927      	ldr	r1, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff f81e 	bl	8000980 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff f81a 	bl	8000980 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e17a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03a      	beq.n	80019e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7fe fffe 	bl	8000980 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7fe fffa 	bl	8000980 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e15a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fad8 	bl	8001f5c <RCC_Delay>
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7fe ffe4 	bl	8000980 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7fe ffe0 	bl	8000980 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d908      	bls.n	80019dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e140      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42420000 	.word	0x42420000
 80019d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e9      	bne.n	80019bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a93      	ldr	r2, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b91      	ldr	r3, [pc, #580]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe ffa1 	bl	8000980 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7fe ff9d 	bl	8000980 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0fd      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x312>
 8001a68:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x356>
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a63      	ldr	r2, [pc, #396]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7fe ff51 	bl	8000980 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe ff4d 	bl	8000980 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ab      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7fe ff3b 	bl	8000980 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7fe ff37 	bl	8000980 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e095      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8081 	beq.w	8001c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d061      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d146      	bne.n	8001bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7fe ff0b 	bl	8000980 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe ff07 	bl	8000980 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e067      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	492d      	ldr	r1, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a19      	ldr	r1, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	4927      	ldr	r1, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fedb 	bl	8000980 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe fed7 	bl	8000980 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e037      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x46a>
 8001bec:	e02f      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fec4 	bl	8000980 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe fec0 	bl	8000980 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e020      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x498>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42420060 	.word	0x42420060

08001c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0d0      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0207 	bic.w	r2, r3, #7
 8001c8e:	4965      	ldr	r1, [pc, #404]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b8      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	494d      	ldr	r1, [pc, #308]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d040      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e07f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e073      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7fe fe14 	bl	8000980 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe fe10 	bl	8000980 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e053      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d210      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4916      	ldr	r1, [pc, #88]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f000 f821 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	490a      	ldr	r1, [pc, #40]	; (8001e2c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	5ccb      	ldrb	r3, [r1, r3]
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1cc>)
 8001e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fd72 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08003568 	.word	0x08003568
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b490      	push	{r4, r7}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e40:	1d3c      	adds	r4, r7, #4
 8001e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e48:	f240 2301 	movw	r3, #513	; 0x201
 8001e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x40>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x46>
 8001e76:	e02d      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	e02d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c5b      	lsrs	r3, r3, #17
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eaa:	4413      	add	r3, r2
 8001eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	fb02 f203 	mul.w	r2, r2, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	e004      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	623b      	str	r3, [r7, #32]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed6:	623b      	str	r3, [r7, #32]
      break;
 8001ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc90      	pop	{r4, r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	08003550 	.word	0x08003550
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	003d0900 	.word	0x003d0900

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b02      	ldr	r3, [pc, #8]	; (8001f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff2 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08003578 	.word	0x08003578

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003578 	.word	0x08003578

08001f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <RCC_Delay+0x34>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <RCC_Delay+0x38>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f78:	bf00      	nop
  }
  while (Delay --);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	60fa      	str	r2, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <RCC_Delay+0x1c>
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000000 	.word	0x20000000
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e03f      	b.n	800202a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fb6a 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fd7f 	bl	8002ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	d17c      	bne.n	800214c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_UART_Transmit+0x2c>
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e075      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_UART_Transmit+0x3e>
 800206c:	2302      	movs	r3, #2
 800206e:	e06e      	b.n	800214e <HAL_UART_Transmit+0x11c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2221      	movs	r2, #33	; 0x21
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002086:	f7fe fc7b 	bl	8000980 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d108      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e003      	b.n	80020bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020c4:	e02a      	b.n	800211c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fb1c 	bl	800270e <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e036      	b.n	800214e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3302      	adds	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e007      	b.n	800210e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1cf      	bne.n	80020c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 faec 	bl	800270e <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e006      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	d11d      	bne.n	80021ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_UART_Receive_IT+0x26>
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e016      	b.n	80021ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_UART_Receive_IT+0x38>
 800218a:	2302      	movs	r3, #2
 800218c:	e00f      	b.n	80021ae <HAL_UART_Receive_IT+0x58>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	461a      	mov	r2, r3
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fafd 	bl	80027a2 <UART_Start_Receive_IT>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d153      	bne.n	800227a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_UART_Transmit_DMA+0x26>
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e04c      	b.n	800227c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Transmit_DMA+0x38>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e045      	b.n	800227c <HAL_UART_Transmit_DMA+0xc4>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2221      	movs	r2, #33	; 0x21
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_UART_Transmit_DMA+0xcc>)
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_UART_Transmit_DMA+0xd0>)
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_UART_Transmit_DMA+0xd4>)
 800222e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	2200      	movs	r2, #0
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3304      	adds	r3, #4
 800224c:	461a      	mov	r2, r3
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	f7fe fd2c 	bl	8000cac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800225c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002274:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800227a:	2302      	movs	r3, #2
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	0800260d 	.word	0x0800260d
 8002288:	0800265f 	.word	0x0800265f
 800228c:	0800267b 	.word	0x0800267b

08002290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10d      	bne.n	80022e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_UART_IRQHandler+0x52>
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fb56 	bl	800298c <UART_Receive_IT>
      return;
 80022e0:	e17b      	b.n	80025da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b1 	beq.w	800244c <HAL_UART_IRQHandler+0x1bc>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_UART_IRQHandler+0x70>
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a6 	beq.w	800244c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_UART_IRQHandler+0x90>
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_UART_IRQHandler+0xb0>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_UART_IRQHandler+0xd0>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00f      	beq.n	800238a <HAL_UART_IRQHandler+0xfa>
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_UART_IRQHandler+0xee>
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0208 	orr.w	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 811e 	beq.w	80025d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_UART_IRQHandler+0x11e>
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 faef 	bl	800298c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_UART_IRQHandler+0x146>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d031      	beq.n	800243a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa31 	bl	800283e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d013      	beq.n	800242a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <HAL_UART_IRQHandler+0x350>)
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fce6 	bl	8000de0 <HAL_DMA_Abort_IT>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002424:	4610      	mov	r0, r2
 8002426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	e00e      	b.n	8002448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8da 	bl	80025e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e00a      	b.n	8002448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8d6 	bl	80025e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	e006      	b.n	8002448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8d2 	bl	80025e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002446:	e0c3      	b.n	80025d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	bf00      	nop
    return;
 800244a:	e0c1      	b.n	80025d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 80a1 	bne.w	8002598 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 809b 	beq.w	8002598 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8095 	beq.w	8002598 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04e      	beq.n	8002530 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800249c:	8a3b      	ldrh	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8098 	beq.w	80025d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024a8:	8a3a      	ldrh	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	f080 8092 	bcs.w	80025d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8a3a      	ldrh	r2, [r7, #16]
 80024b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d02b      	beq.n	8002518 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0210 	bic.w	r2, r2, #16
 800250c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fc29 	bl	8000d6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002520:	b29b      	uxth	r3, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f864 	bl	80025f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800252e:	e051      	b.n	80025d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002538:	b29b      	uxth	r3, r3
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d047      	beq.n	80025d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002548:	8a7b      	ldrh	r3, [r7, #18]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d044      	beq.n	80025d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800255c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0210 	bic.w	r2, r2, #16
 800258a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800258c:	8a7b      	ldrh	r3, [r7, #18]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f830 	bl	80025f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002596:	e01f      	b.n	80025d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_UART_IRQHandler+0x324>
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f986 	bl	80028be <UART_Transmit_IT>
    return;
 80025b2:	e012      	b.n	80025da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_UART_IRQHandler+0x34a>
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f9c7 	bl	800295c <UART_EndTransmit_IT>
    return;
 80025ce:	e004      	b.n	80025da <HAL_UART_IRQHandler+0x34a>
    return;
 80025d0:	bf00      	nop
 80025d2:	e002      	b.n	80025da <HAL_UART_IRQHandler+0x34a>
      return;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <HAL_UART_IRQHandler+0x34a>
      return;
 80025d8:	bf00      	nop
  }
}
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08002897 	.word	0x08002897

080025e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800264e:	e002      	b.n	8002656 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7fd fe40 	bl	80002d6 <HAL_UART_TxCpltCallback>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7fd fe29 	bl	80002c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b21      	cmp	r3, #33	; 0x21
 80026ac:	d108      	bne.n	80026c0 <UART_DMAError+0x46>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80026ba:	68b8      	ldr	r0, [r7, #8]
 80026bc:	f000 f8aa 	bl	8002814 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b22      	cmp	r3, #34	; 0x22
 80026e0:	d108      	bne.n	80026f4 <UART_DMAError+0x7a>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	f000 f8a5 	bl	800283e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0210 	orr.w	r2, r3, #16
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f7ff ff6f 	bl	80025e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	e02c      	b.n	800277a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d028      	beq.n	800277a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0x30>
 800272e:	f7fe f927 	bl	8000980 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	429a      	cmp	r2, r3
 800273c:	d21d      	bcs.n	800277a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800274c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e00f      	b.n	800279a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	429a      	cmp	r2, r3
 8002796:	d0c3      	beq.n	8002720 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2222      	movs	r2, #34	; 0x22
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800282a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002854:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0210 	bic.w	r2, r2, #16
 800287c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fe97 	bl	80025e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b21      	cmp	r3, #33	; 0x21
 80028d0:	d13e      	bne.n	8002950 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d114      	bne.n	8002906 <UART_Transmit_IT+0x48>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d110      	bne.n	8002906 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	621a      	str	r2, [r3, #32]
 8002904:	e008      	b.n	8002918 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6211      	str	r1, [r2, #32]
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29b      	uxth	r3, r3
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4619      	mov	r1, r3
 8002926:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10f      	bne.n	800294c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002972:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fd fcaa 	bl	80002d6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b22      	cmp	r3, #34	; 0x22
 800299e:	f040 8099 	bne.w	8002ad4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	d117      	bne.n	80029dc <UART_Receive_IT+0x50>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
 80029da:	e026      	b.n	8002a2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d007      	beq.n	8002a00 <UART_Receive_IT+0x74>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <UART_Receive_IT+0x82>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e008      	b.n	8002a20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4619      	mov	r1, r3
 8002a38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d148      	bne.n	8002ad0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0220 	bic.w	r2, r2, #32
 8002a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d123      	bne.n	8002ac6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0210 	bic.w	r2, r2, #16
 8002a92:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d10a      	bne.n	8002ab8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fd99 	bl	80025f6 <HAL_UARTEx_RxEventCallback>
 8002ac4:	e002      	b.n	8002acc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd fc0e 	bl	80002e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e002      	b.n	8002ad6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b1a:	f023 030c 	bic.w	r3, r3, #12
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <UART_SetConfig+0x114>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff f9f4 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	e002      	b.n	8002b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff f9dc 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8002b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <UART_SetConfig+0x118>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	0119      	lsls	r1, r3, #4
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <UART_SetConfig+0x118>)
 8002b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <UART_SetConfig+0x118>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	4419      	add	r1, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <UART_SetConfig+0x118>)
 8002bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <UART_SetConfig+0x118>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	440a      	add	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <__errno>:
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <__errno+0x8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	4d0c      	ldr	r5, [pc, #48]	; (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4c0d      	ldr	r4, [pc, #52]	; (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	f000 fc6e 	bl	80034f8 <_init>
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	4d0a      	ldr	r5, [pc, #40]	; (8002c48 <__libc_init_array+0x40>)
 8002c20:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <__libc_init_array+0x44>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	080035b4 	.word	0x080035b4
 8002c44:	080035b4 	.word	0x080035b4
 8002c48:	080035b4 	.word	0x080035b4
 8002c4c:	080035b8 	.word	0x080035b8

08002c50 <memset>:
 8002c50:	4603      	mov	r3, r0
 8002c52:	4402      	add	r2, r0
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d100      	bne.n	8002c5a <memset+0xa>
 8002c58:	4770      	bx	lr
 8002c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5e:	e7f9      	b.n	8002c54 <memset+0x4>

08002c60 <siprintf>:
 8002c60:	b40e      	push	{r1, r2, r3}
 8002c62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c66:	b500      	push	{lr}
 8002c68:	b09c      	sub	sp, #112	; 0x70
 8002c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c6c:	9002      	str	r0, [sp, #8]
 8002c6e:	9006      	str	r0, [sp, #24]
 8002c70:	9107      	str	r1, [sp, #28]
 8002c72:	9104      	str	r1, [sp, #16]
 8002c74:	4808      	ldr	r0, [pc, #32]	; (8002c98 <siprintf+0x38>)
 8002c76:	4909      	ldr	r1, [pc, #36]	; (8002c9c <siprintf+0x3c>)
 8002c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c7c:	9105      	str	r1, [sp, #20]
 8002c7e:	6800      	ldr	r0, [r0, #0]
 8002c80:	a902      	add	r1, sp, #8
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f000 f87a 	bl	8002d7c <_svfiprintf_r>
 8002c88:	2200      	movs	r2, #0
 8002c8a:	9b02      	ldr	r3, [sp, #8]
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	b01c      	add	sp, #112	; 0x70
 8002c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c94:	b003      	add	sp, #12
 8002c96:	4770      	bx	lr
 8002c98:	2000000c 	.word	0x2000000c
 8002c9c:	ffff0208 	.word	0xffff0208

08002ca0 <strncmp>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	b16a      	cbz	r2, 8002cc0 <strncmp+0x20>
 8002ca4:	3901      	subs	r1, #1
 8002ca6:	1884      	adds	r4, r0, r2
 8002ca8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002cac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <strncmp+0x1c>
 8002cb4:	42a0      	cmp	r0, r4
 8002cb6:	d001      	beq.n	8002cbc <strncmp+0x1c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f5      	bne.n	8002ca8 <strncmp+0x8>
 8002cbc:	1a98      	subs	r0, r3, r2
 8002cbe:	bd10      	pop	{r4, pc}
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	e7fc      	b.n	8002cbe <strncmp+0x1e>

08002cc4 <__ssputs_r>:
 8002cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	688e      	ldr	r6, [r1, #8]
 8002cca:	4682      	mov	sl, r0
 8002ccc:	429e      	cmp	r6, r3
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	461f      	mov	r7, r3
 8002cd4:	d838      	bhi.n	8002d48 <__ssputs_r+0x84>
 8002cd6:	898a      	ldrh	r2, [r1, #12]
 8002cd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cdc:	d032      	beq.n	8002d44 <__ssputs_r+0x80>
 8002cde:	6825      	ldr	r5, [r4, #0]
 8002ce0:	6909      	ldr	r1, [r1, #16]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	eba5 0901 	sub.w	r9, r5, r1
 8002ce8:	6965      	ldr	r5, [r4, #20]
 8002cea:	444b      	add	r3, r9
 8002cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cf4:	106d      	asrs	r5, r5, #1
 8002cf6:	429d      	cmp	r5, r3
 8002cf8:	bf38      	it	cc
 8002cfa:	461d      	movcc	r5, r3
 8002cfc:	0553      	lsls	r3, r2, #21
 8002cfe:	d531      	bpl.n	8002d64 <__ssputs_r+0xa0>
 8002d00:	4629      	mov	r1, r5
 8002d02:	f000 fb53 	bl	80033ac <_malloc_r>
 8002d06:	4606      	mov	r6, r0
 8002d08:	b950      	cbnz	r0, 8002d20 <__ssputs_r+0x5c>
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f8ca 3000 	str.w	r3, [sl]
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d20:	464a      	mov	r2, r9
 8002d22:	6921      	ldr	r1, [r4, #16]
 8002d24:	f000 face 	bl	80032c4 <memcpy>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	81a3      	strh	r3, [r4, #12]
 8002d34:	6126      	str	r6, [r4, #16]
 8002d36:	444e      	add	r6, r9
 8002d38:	6026      	str	r6, [r4, #0]
 8002d3a:	463e      	mov	r6, r7
 8002d3c:	6165      	str	r5, [r4, #20]
 8002d3e:	eba5 0509 	sub.w	r5, r5, r9
 8002d42:	60a5      	str	r5, [r4, #8]
 8002d44:	42be      	cmp	r6, r7
 8002d46:	d900      	bls.n	8002d4a <__ssputs_r+0x86>
 8002d48:	463e      	mov	r6, r7
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	f000 fac6 	bl	80032e0 <memmove>
 8002d54:	68a3      	ldr	r3, [r4, #8]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	1b9b      	subs	r3, r3, r6
 8002d5a:	4432      	add	r2, r6
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	6022      	str	r2, [r4, #0]
 8002d62:	e7db      	b.n	8002d1c <__ssputs_r+0x58>
 8002d64:	462a      	mov	r2, r5
 8002d66:	f000 fb7b 	bl	8003460 <_realloc_r>
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1e1      	bne.n	8002d34 <__ssputs_r+0x70>
 8002d70:	4650      	mov	r0, sl
 8002d72:	6921      	ldr	r1, [r4, #16]
 8002d74:	f000 face 	bl	8003314 <_free_r>
 8002d78:	e7c7      	b.n	8002d0a <__ssputs_r+0x46>
	...

08002d7c <_svfiprintf_r>:
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	4698      	mov	r8, r3
 8002d82:	898b      	ldrh	r3, [r1, #12]
 8002d84:	4607      	mov	r7, r0
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	b09d      	sub	sp, #116	; 0x74
 8002d8e:	d50e      	bpl.n	8002dae <_svfiprintf_r+0x32>
 8002d90:	690b      	ldr	r3, [r1, #16]
 8002d92:	b963      	cbnz	r3, 8002dae <_svfiprintf_r+0x32>
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	f000 fb09 	bl	80033ac <_malloc_r>
 8002d9a:	6028      	str	r0, [r5, #0]
 8002d9c:	6128      	str	r0, [r5, #16]
 8002d9e:	b920      	cbnz	r0, 8002daa <_svfiprintf_r+0x2e>
 8002da0:	230c      	movs	r3, #12
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	e0d1      	b.n	8002f4e <_svfiprintf_r+0x1d2>
 8002daa:	2340      	movs	r3, #64	; 0x40
 8002dac:	616b      	str	r3, [r5, #20]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9309      	str	r3, [sp, #36]	; 0x24
 8002db2:	2320      	movs	r3, #32
 8002db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002db8:	2330      	movs	r3, #48	; 0x30
 8002dba:	f04f 0901 	mov.w	r9, #1
 8002dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f68 <_svfiprintf_r+0x1ec>
 8002dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dca:	4623      	mov	r3, r4
 8002dcc:	469a      	mov	sl, r3
 8002dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dd2:	b10a      	cbz	r2, 8002dd8 <_svfiprintf_r+0x5c>
 8002dd4:	2a25      	cmp	r2, #37	; 0x25
 8002dd6:	d1f9      	bne.n	8002dcc <_svfiprintf_r+0x50>
 8002dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ddc:	d00b      	beq.n	8002df6 <_svfiprintf_r+0x7a>
 8002dde:	465b      	mov	r3, fp
 8002de0:	4622      	mov	r2, r4
 8002de2:	4629      	mov	r1, r5
 8002de4:	4638      	mov	r0, r7
 8002de6:	f7ff ff6d 	bl	8002cc4 <__ssputs_r>
 8002dea:	3001      	adds	r0, #1
 8002dec:	f000 80aa 	beq.w	8002f44 <_svfiprintf_r+0x1c8>
 8002df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df2:	445a      	add	r2, fp
 8002df4:	9209      	str	r2, [sp, #36]	; 0x24
 8002df6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a2 	beq.w	8002f44 <_svfiprintf_r+0x1c8>
 8002e00:	2300      	movs	r3, #0
 8002e02:	f04f 32ff 	mov.w	r2, #4294967295
 8002e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e0a:	f10a 0a01 	add.w	sl, sl, #1
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	9307      	str	r3, [sp, #28]
 8002e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e16:	931a      	str	r3, [sp, #104]	; 0x68
 8002e18:	4654      	mov	r4, sl
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e20:	4851      	ldr	r0, [pc, #324]	; (8002f68 <_svfiprintf_r+0x1ec>)
 8002e22:	f000 fa41 	bl	80032a8 <memchr>
 8002e26:	9a04      	ldr	r2, [sp, #16]
 8002e28:	b9d8      	cbnz	r0, 8002e62 <_svfiprintf_r+0xe6>
 8002e2a:	06d0      	lsls	r0, r2, #27
 8002e2c:	bf44      	itt	mi
 8002e2e:	2320      	movmi	r3, #32
 8002e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e34:	0711      	lsls	r1, r2, #28
 8002e36:	bf44      	itt	mi
 8002e38:	232b      	movmi	r3, #43	; 0x2b
 8002e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e42:	2b2a      	cmp	r3, #42	; 0x2a
 8002e44:	d015      	beq.n	8002e72 <_svfiprintf_r+0xf6>
 8002e46:	4654      	mov	r4, sl
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f04f 0c0a 	mov.w	ip, #10
 8002e4e:	9a07      	ldr	r2, [sp, #28]
 8002e50:	4621      	mov	r1, r4
 8002e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e56:	3b30      	subs	r3, #48	; 0x30
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	d94e      	bls.n	8002efa <_svfiprintf_r+0x17e>
 8002e5c:	b1b0      	cbz	r0, 8002e8c <_svfiprintf_r+0x110>
 8002e5e:	9207      	str	r2, [sp, #28]
 8002e60:	e014      	b.n	8002e8c <_svfiprintf_r+0x110>
 8002e62:	eba0 0308 	sub.w	r3, r0, r8
 8002e66:	fa09 f303 	lsl.w	r3, r9, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	46a2      	mov	sl, r4
 8002e6e:	9304      	str	r3, [sp, #16]
 8002e70:	e7d2      	b.n	8002e18 <_svfiprintf_r+0x9c>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	1d19      	adds	r1, r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	9103      	str	r1, [sp, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bfbb      	ittet	lt
 8002e7e:	425b      	neglt	r3, r3
 8002e80:	f042 0202 	orrlt.w	r2, r2, #2
 8002e84:	9307      	strge	r3, [sp, #28]
 8002e86:	9307      	strlt	r3, [sp, #28]
 8002e88:	bfb8      	it	lt
 8002e8a:	9204      	strlt	r2, [sp, #16]
 8002e8c:	7823      	ldrb	r3, [r4, #0]
 8002e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e90:	d10c      	bne.n	8002eac <_svfiprintf_r+0x130>
 8002e92:	7863      	ldrb	r3, [r4, #1]
 8002e94:	2b2a      	cmp	r3, #42	; 0x2a
 8002e96:	d135      	bne.n	8002f04 <_svfiprintf_r+0x188>
 8002e98:	9b03      	ldr	r3, [sp, #12]
 8002e9a:	3402      	adds	r4, #2
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	9203      	str	r2, [sp, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bfb8      	it	lt
 8002ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eaa:	9305      	str	r3, [sp, #20]
 8002eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f78 <_svfiprintf_r+0x1fc>
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	7821      	ldrb	r1, [r4, #0]
 8002eb6:	f000 f9f7 	bl	80032a8 <memchr>
 8002eba:	b140      	cbz	r0, 8002ece <_svfiprintf_r+0x152>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	eba0 000a 	sub.w	r0, r0, sl
 8002ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec6:	9b04      	ldr	r3, [sp, #16]
 8002ec8:	3401      	adds	r4, #1
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed2:	2206      	movs	r2, #6
 8002ed4:	4825      	ldr	r0, [pc, #148]	; (8002f6c <_svfiprintf_r+0x1f0>)
 8002ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eda:	f000 f9e5 	bl	80032a8 <memchr>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d038      	beq.n	8002f54 <_svfiprintf_r+0x1d8>
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <_svfiprintf_r+0x1f4>)
 8002ee4:	bb1b      	cbnz	r3, 8002f2e <_svfiprintf_r+0x1b2>
 8002ee6:	9b03      	ldr	r3, [sp, #12]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	3308      	adds	r3, #8
 8002ef0:	9303      	str	r3, [sp, #12]
 8002ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef4:	4433      	add	r3, r6
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	e767      	b.n	8002dca <_svfiprintf_r+0x4e>
 8002efa:	460c      	mov	r4, r1
 8002efc:	2001      	movs	r0, #1
 8002efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f02:	e7a5      	b.n	8002e50 <_svfiprintf_r+0xd4>
 8002f04:	2300      	movs	r3, #0
 8002f06:	f04f 0c0a 	mov.w	ip, #10
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	3401      	adds	r4, #1
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	4620      	mov	r0, r4
 8002f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f16:	3a30      	subs	r2, #48	; 0x30
 8002f18:	2a09      	cmp	r2, #9
 8002f1a:	d903      	bls.n	8002f24 <_svfiprintf_r+0x1a8>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0c5      	beq.n	8002eac <_svfiprintf_r+0x130>
 8002f20:	9105      	str	r1, [sp, #20]
 8002f22:	e7c3      	b.n	8002eac <_svfiprintf_r+0x130>
 8002f24:	4604      	mov	r4, r0
 8002f26:	2301      	movs	r3, #1
 8002f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2c:	e7f0      	b.n	8002f10 <_svfiprintf_r+0x194>
 8002f2e:	ab03      	add	r3, sp, #12
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	462a      	mov	r2, r5
 8002f34:	4638      	mov	r0, r7
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <_svfiprintf_r+0x1f8>)
 8002f38:	a904      	add	r1, sp, #16
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	1c42      	adds	r2, r0, #1
 8002f40:	4606      	mov	r6, r0
 8002f42:	d1d6      	bne.n	8002ef2 <_svfiprintf_r+0x176>
 8002f44:	89ab      	ldrh	r3, [r5, #12]
 8002f46:	065b      	lsls	r3, r3, #25
 8002f48:	f53f af2c 	bmi.w	8002da4 <_svfiprintf_r+0x28>
 8002f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f4e:	b01d      	add	sp, #116	; 0x74
 8002f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	ab03      	add	r3, sp, #12
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	462a      	mov	r2, r5
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <_svfiprintf_r+0x1f8>)
 8002f5e:	a904      	add	r1, sp, #16
 8002f60:	f000 f87c 	bl	800305c <_printf_i>
 8002f64:	e7eb      	b.n	8002f3e <_svfiprintf_r+0x1c2>
 8002f66:	bf00      	nop
 8002f68:	08003580 	.word	0x08003580
 8002f6c:	0800358a 	.word	0x0800358a
 8002f70:	00000000 	.word	0x00000000
 8002f74:	08002cc5 	.word	0x08002cc5
 8002f78:	08003586 	.word	0x08003586

08002f7c <_printf_common>:
 8002f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	4616      	mov	r6, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	688a      	ldr	r2, [r1, #8]
 8002f86:	690b      	ldr	r3, [r1, #16]
 8002f88:	4607      	mov	r7, r0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	bfb8      	it	lt
 8002f8e:	4613      	movlt	r3, r2
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f96:	460c      	mov	r4, r1
 8002f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f9c:	b10a      	cbz	r2, 8002fa2 <_printf_common+0x26>
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	0699      	lsls	r1, r3, #26
 8002fa6:	bf42      	ittt	mi
 8002fa8:	6833      	ldrmi	r3, [r6, #0]
 8002faa:	3302      	addmi	r3, #2
 8002fac:	6033      	strmi	r3, [r6, #0]
 8002fae:	6825      	ldr	r5, [r4, #0]
 8002fb0:	f015 0506 	ands.w	r5, r5, #6
 8002fb4:	d106      	bne.n	8002fc4 <_printf_common+0x48>
 8002fb6:	f104 0a19 	add.w	sl, r4, #25
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	6832      	ldr	r2, [r6, #0]
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	dc28      	bgt.n	8003016 <_printf_common+0x9a>
 8002fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fc8:	1e13      	subs	r3, r2, #0
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	0692      	lsls	r2, r2, #26
 8002fd2:	d42d      	bmi.n	8003030 <_printf_common+0xb4>
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fdc:	47c0      	blx	r8
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d020      	beq.n	8003024 <_printf_common+0xa8>
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	68e5      	ldr	r5, [r4, #12]
 8002fe6:	f003 0306 	and.w	r3, r3, #6
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf18      	it	ne
 8002fee:	2500      	movne	r5, #0
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	bf08      	it	eq
 8002ffa:	1aad      	subeq	r5, r5, r2
 8002ffc:	6922      	ldr	r2, [r4, #16]
 8002ffe:	bf08      	it	eq
 8003000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003004:	4293      	cmp	r3, r2
 8003006:	bfc4      	itt	gt
 8003008:	1a9b      	subgt	r3, r3, r2
 800300a:	18ed      	addgt	r5, r5, r3
 800300c:	341a      	adds	r4, #26
 800300e:	42b5      	cmp	r5, r6
 8003010:	d11a      	bne.n	8003048 <_printf_common+0xcc>
 8003012:	2000      	movs	r0, #0
 8003014:	e008      	b.n	8003028 <_printf_common+0xac>
 8003016:	2301      	movs	r3, #1
 8003018:	4652      	mov	r2, sl
 800301a:	4649      	mov	r1, r9
 800301c:	4638      	mov	r0, r7
 800301e:	47c0      	blx	r8
 8003020:	3001      	adds	r0, #1
 8003022:	d103      	bne.n	800302c <_printf_common+0xb0>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	3501      	adds	r5, #1
 800302e:	e7c4      	b.n	8002fba <_printf_common+0x3e>
 8003030:	2030      	movs	r0, #48	; 0x30
 8003032:	18e1      	adds	r1, r4, r3
 8003034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800303e:	4422      	add	r2, r4
 8003040:	3302      	adds	r3, #2
 8003042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003046:	e7c5      	b.n	8002fd4 <_printf_common+0x58>
 8003048:	2301      	movs	r3, #1
 800304a:	4622      	mov	r2, r4
 800304c:	4649      	mov	r1, r9
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	3001      	adds	r0, #1
 8003054:	d0e6      	beq.n	8003024 <_printf_common+0xa8>
 8003056:	3601      	adds	r6, #1
 8003058:	e7d9      	b.n	800300e <_printf_common+0x92>
	...

0800305c <_printf_i>:
 800305c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	460c      	mov	r4, r1
 8003062:	7e27      	ldrb	r7, [r4, #24]
 8003064:	4691      	mov	r9, r2
 8003066:	2f78      	cmp	r7, #120	; 0x78
 8003068:	4680      	mov	r8, r0
 800306a:	469a      	mov	sl, r3
 800306c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800306e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003072:	d807      	bhi.n	8003084 <_printf_i+0x28>
 8003074:	2f62      	cmp	r7, #98	; 0x62
 8003076:	d80a      	bhi.n	800308e <_printf_i+0x32>
 8003078:	2f00      	cmp	r7, #0
 800307a:	f000 80d9 	beq.w	8003230 <_printf_i+0x1d4>
 800307e:	2f58      	cmp	r7, #88	; 0x58
 8003080:	f000 80a4 	beq.w	80031cc <_printf_i+0x170>
 8003084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800308c:	e03a      	b.n	8003104 <_printf_i+0xa8>
 800308e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003092:	2b15      	cmp	r3, #21
 8003094:	d8f6      	bhi.n	8003084 <_printf_i+0x28>
 8003096:	a001      	add	r0, pc, #4	; (adr r0, 800309c <_printf_i+0x40>)
 8003098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003085 	.word	0x08003085
 80030a8:	08003085 	.word	0x08003085
 80030ac:	08003085 	.word	0x08003085
 80030b0:	08003085 	.word	0x08003085
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003085 	.word	0x08003085
 80030bc:	08003085 	.word	0x08003085
 80030c0:	08003085 	.word	0x08003085
 80030c4:	08003085 	.word	0x08003085
 80030c8:	08003217 	.word	0x08003217
 80030cc:	08003139 	.word	0x08003139
 80030d0:	080031f9 	.word	0x080031f9
 80030d4:	08003085 	.word	0x08003085
 80030d8:	08003085 	.word	0x08003085
 80030dc:	08003239 	.word	0x08003239
 80030e0:	08003085 	.word	0x08003085
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003085 	.word	0x08003085
 80030ec:	08003085 	.word	0x08003085
 80030f0:	08003201 	.word	0x08003201
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	600a      	str	r2, [r1, #0]
 8003100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003104:	2301      	movs	r3, #1
 8003106:	e0a4      	b.n	8003252 <_printf_i+0x1f6>
 8003108:	6825      	ldr	r5, [r4, #0]
 800310a:	6808      	ldr	r0, [r1, #0]
 800310c:	062e      	lsls	r6, r5, #24
 800310e:	f100 0304 	add.w	r3, r0, #4
 8003112:	d50a      	bpl.n	800312a <_printf_i+0xce>
 8003114:	6805      	ldr	r5, [r0, #0]
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	2d00      	cmp	r5, #0
 800311a:	da03      	bge.n	8003124 <_printf_i+0xc8>
 800311c:	232d      	movs	r3, #45	; 0x2d
 800311e:	426d      	negs	r5, r5
 8003120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003124:	230a      	movs	r3, #10
 8003126:	485e      	ldr	r0, [pc, #376]	; (80032a0 <_printf_i+0x244>)
 8003128:	e019      	b.n	800315e <_printf_i+0x102>
 800312a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800312e:	6805      	ldr	r5, [r0, #0]
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	bf18      	it	ne
 8003134:	b22d      	sxthne	r5, r5
 8003136:	e7ef      	b.n	8003118 <_printf_i+0xbc>
 8003138:	680b      	ldr	r3, [r1, #0]
 800313a:	6825      	ldr	r5, [r4, #0]
 800313c:	1d18      	adds	r0, r3, #4
 800313e:	6008      	str	r0, [r1, #0]
 8003140:	0628      	lsls	r0, r5, #24
 8003142:	d501      	bpl.n	8003148 <_printf_i+0xec>
 8003144:	681d      	ldr	r5, [r3, #0]
 8003146:	e002      	b.n	800314e <_printf_i+0xf2>
 8003148:	0669      	lsls	r1, r5, #25
 800314a:	d5fb      	bpl.n	8003144 <_printf_i+0xe8>
 800314c:	881d      	ldrh	r5, [r3, #0]
 800314e:	2f6f      	cmp	r7, #111	; 0x6f
 8003150:	bf0c      	ite	eq
 8003152:	2308      	moveq	r3, #8
 8003154:	230a      	movne	r3, #10
 8003156:	4852      	ldr	r0, [pc, #328]	; (80032a0 <_printf_i+0x244>)
 8003158:	2100      	movs	r1, #0
 800315a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800315e:	6866      	ldr	r6, [r4, #4]
 8003160:	2e00      	cmp	r6, #0
 8003162:	bfa8      	it	ge
 8003164:	6821      	ldrge	r1, [r4, #0]
 8003166:	60a6      	str	r6, [r4, #8]
 8003168:	bfa4      	itt	ge
 800316a:	f021 0104 	bicge.w	r1, r1, #4
 800316e:	6021      	strge	r1, [r4, #0]
 8003170:	b90d      	cbnz	r5, 8003176 <_printf_i+0x11a>
 8003172:	2e00      	cmp	r6, #0
 8003174:	d04d      	beq.n	8003212 <_printf_i+0x1b6>
 8003176:	4616      	mov	r6, r2
 8003178:	fbb5 f1f3 	udiv	r1, r5, r3
 800317c:	fb03 5711 	mls	r7, r3, r1, r5
 8003180:	5dc7      	ldrb	r7, [r0, r7]
 8003182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003186:	462f      	mov	r7, r5
 8003188:	42bb      	cmp	r3, r7
 800318a:	460d      	mov	r5, r1
 800318c:	d9f4      	bls.n	8003178 <_printf_i+0x11c>
 800318e:	2b08      	cmp	r3, #8
 8003190:	d10b      	bne.n	80031aa <_printf_i+0x14e>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	07df      	lsls	r7, r3, #31
 8003196:	d508      	bpl.n	80031aa <_printf_i+0x14e>
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	6861      	ldr	r1, [r4, #4]
 800319c:	4299      	cmp	r1, r3
 800319e:	bfde      	ittt	le
 80031a0:	2330      	movle	r3, #48	; 0x30
 80031a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031aa:	1b92      	subs	r2, r2, r6
 80031ac:	6122      	str	r2, [r4, #16]
 80031ae:	464b      	mov	r3, r9
 80031b0:	4621      	mov	r1, r4
 80031b2:	4640      	mov	r0, r8
 80031b4:	f8cd a000 	str.w	sl, [sp]
 80031b8:	aa03      	add	r2, sp, #12
 80031ba:	f7ff fedf 	bl	8002f7c <_printf_common>
 80031be:	3001      	adds	r0, #1
 80031c0:	d14c      	bne.n	800325c <_printf_i+0x200>
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	b004      	add	sp, #16
 80031c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031cc:	4834      	ldr	r0, [pc, #208]	; (80032a0 <_printf_i+0x244>)
 80031ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031d2:	680e      	ldr	r6, [r1, #0]
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80031da:	061f      	lsls	r7, r3, #24
 80031dc:	600e      	str	r6, [r1, #0]
 80031de:	d514      	bpl.n	800320a <_printf_i+0x1ae>
 80031e0:	07d9      	lsls	r1, r3, #31
 80031e2:	bf44      	itt	mi
 80031e4:	f043 0320 	orrmi.w	r3, r3, #32
 80031e8:	6023      	strmi	r3, [r4, #0]
 80031ea:	b91d      	cbnz	r5, 80031f4 <_printf_i+0x198>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	e7af      	b.n	8003158 <_printf_i+0xfc>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	2378      	movs	r3, #120	; 0x78
 8003202:	4828      	ldr	r0, [pc, #160]	; (80032a4 <_printf_i+0x248>)
 8003204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003208:	e7e3      	b.n	80031d2 <_printf_i+0x176>
 800320a:	065e      	lsls	r6, r3, #25
 800320c:	bf48      	it	mi
 800320e:	b2ad      	uxthmi	r5, r5
 8003210:	e7e6      	b.n	80031e0 <_printf_i+0x184>
 8003212:	4616      	mov	r6, r2
 8003214:	e7bb      	b.n	800318e <_printf_i+0x132>
 8003216:	680b      	ldr	r3, [r1, #0]
 8003218:	6826      	ldr	r6, [r4, #0]
 800321a:	1d1d      	adds	r5, r3, #4
 800321c:	6960      	ldr	r0, [r4, #20]
 800321e:	600d      	str	r5, [r1, #0]
 8003220:	0635      	lsls	r5, r6, #24
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	d501      	bpl.n	800322a <_printf_i+0x1ce>
 8003226:	6018      	str	r0, [r3, #0]
 8003228:	e002      	b.n	8003230 <_printf_i+0x1d4>
 800322a:	0671      	lsls	r1, r6, #25
 800322c:	d5fb      	bpl.n	8003226 <_printf_i+0x1ca>
 800322e:	8018      	strh	r0, [r3, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	4616      	mov	r6, r2
 8003234:	6123      	str	r3, [r4, #16]
 8003236:	e7ba      	b.n	80031ae <_printf_i+0x152>
 8003238:	680b      	ldr	r3, [r1, #0]
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	600a      	str	r2, [r1, #0]
 800323e:	681e      	ldr	r6, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4630      	mov	r0, r6
 8003244:	6862      	ldr	r2, [r4, #4]
 8003246:	f000 f82f 	bl	80032a8 <memchr>
 800324a:	b108      	cbz	r0, 8003250 <_printf_i+0x1f4>
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	6060      	str	r0, [r4, #4]
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	2300      	movs	r3, #0
 8003256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800325a:	e7a8      	b.n	80031ae <_printf_i+0x152>
 800325c:	4632      	mov	r2, r6
 800325e:	4649      	mov	r1, r9
 8003260:	4640      	mov	r0, r8
 8003262:	6923      	ldr	r3, [r4, #16]
 8003264:	47d0      	blx	sl
 8003266:	3001      	adds	r0, #1
 8003268:	d0ab      	beq.n	80031c2 <_printf_i+0x166>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	079b      	lsls	r3, r3, #30
 800326e:	d413      	bmi.n	8003298 <_printf_i+0x23c>
 8003270:	68e0      	ldr	r0, [r4, #12]
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	4298      	cmp	r0, r3
 8003276:	bfb8      	it	lt
 8003278:	4618      	movlt	r0, r3
 800327a:	e7a4      	b.n	80031c6 <_printf_i+0x16a>
 800327c:	2301      	movs	r3, #1
 800327e:	4632      	mov	r2, r6
 8003280:	4649      	mov	r1, r9
 8003282:	4640      	mov	r0, r8
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d09b      	beq.n	80031c2 <_printf_i+0x166>
 800328a:	3501      	adds	r5, #1
 800328c:	68e3      	ldr	r3, [r4, #12]
 800328e:	9903      	ldr	r1, [sp, #12]
 8003290:	1a5b      	subs	r3, r3, r1
 8003292:	42ab      	cmp	r3, r5
 8003294:	dcf2      	bgt.n	800327c <_printf_i+0x220>
 8003296:	e7eb      	b.n	8003270 <_printf_i+0x214>
 8003298:	2500      	movs	r5, #0
 800329a:	f104 0619 	add.w	r6, r4, #25
 800329e:	e7f5      	b.n	800328c <_printf_i+0x230>
 80032a0:	08003591 	.word	0x08003591
 80032a4:	080035a2 	.word	0x080035a2

080032a8 <memchr>:
 80032a8:	4603      	mov	r3, r0
 80032aa:	b510      	push	{r4, lr}
 80032ac:	b2c9      	uxtb	r1, r1
 80032ae:	4402      	add	r2, r0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	d101      	bne.n	80032ba <memchr+0x12>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e003      	b.n	80032c2 <memchr+0x1a>
 80032ba:	7804      	ldrb	r4, [r0, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	428c      	cmp	r4, r1
 80032c0:	d1f6      	bne.n	80032b0 <memchr+0x8>
 80032c2:	bd10      	pop	{r4, pc}

080032c4 <memcpy>:
 80032c4:	440a      	add	r2, r1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032cc:	d100      	bne.n	80032d0 <memcpy+0xc>
 80032ce:	4770      	bx	lr
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d6:	4291      	cmp	r1, r2
 80032d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032dc:	d1f9      	bne.n	80032d2 <memcpy+0xe>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <memmove>:
 80032e0:	4288      	cmp	r0, r1
 80032e2:	b510      	push	{r4, lr}
 80032e4:	eb01 0402 	add.w	r4, r1, r2
 80032e8:	d902      	bls.n	80032f0 <memmove+0x10>
 80032ea:	4284      	cmp	r4, r0
 80032ec:	4623      	mov	r3, r4
 80032ee:	d807      	bhi.n	8003300 <memmove+0x20>
 80032f0:	1e43      	subs	r3, r0, #1
 80032f2:	42a1      	cmp	r1, r4
 80032f4:	d008      	beq.n	8003308 <memmove+0x28>
 80032f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032fe:	e7f8      	b.n	80032f2 <memmove+0x12>
 8003300:	4601      	mov	r1, r0
 8003302:	4402      	add	r2, r0
 8003304:	428a      	cmp	r2, r1
 8003306:	d100      	bne.n	800330a <memmove+0x2a>
 8003308:	bd10      	pop	{r4, pc}
 800330a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800330e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003312:	e7f7      	b.n	8003304 <memmove+0x24>

08003314 <_free_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4605      	mov	r5, r0
 8003318:	2900      	cmp	r1, #0
 800331a:	d043      	beq.n	80033a4 <_free_r+0x90>
 800331c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003320:	1f0c      	subs	r4, r1, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfb8      	it	lt
 8003326:	18e4      	addlt	r4, r4, r3
 8003328:	f000 f8d0 	bl	80034cc <__malloc_lock>
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <_free_r+0x94>)
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	4610      	mov	r0, r2
 8003332:	b933      	cbnz	r3, 8003342 <_free_r+0x2e>
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6014      	str	r4, [r2, #0]
 8003338:	4628      	mov	r0, r5
 800333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333e:	f000 b8cb 	b.w	80034d8 <__malloc_unlock>
 8003342:	42a3      	cmp	r3, r4
 8003344:	d90a      	bls.n	800335c <_free_r+0x48>
 8003346:	6821      	ldr	r1, [r4, #0]
 8003348:	1862      	adds	r2, r4, r1
 800334a:	4293      	cmp	r3, r2
 800334c:	bf01      	itttt	eq
 800334e:	681a      	ldreq	r2, [r3, #0]
 8003350:	685b      	ldreq	r3, [r3, #4]
 8003352:	1852      	addeq	r2, r2, r1
 8003354:	6022      	streq	r2, [r4, #0]
 8003356:	6063      	str	r3, [r4, #4]
 8003358:	6004      	str	r4, [r0, #0]
 800335a:	e7ed      	b.n	8003338 <_free_r+0x24>
 800335c:	461a      	mov	r2, r3
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	b10b      	cbz	r3, 8003366 <_free_r+0x52>
 8003362:	42a3      	cmp	r3, r4
 8003364:	d9fa      	bls.n	800335c <_free_r+0x48>
 8003366:	6811      	ldr	r1, [r2, #0]
 8003368:	1850      	adds	r0, r2, r1
 800336a:	42a0      	cmp	r0, r4
 800336c:	d10b      	bne.n	8003386 <_free_r+0x72>
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	4401      	add	r1, r0
 8003372:	1850      	adds	r0, r2, r1
 8003374:	4283      	cmp	r3, r0
 8003376:	6011      	str	r1, [r2, #0]
 8003378:	d1de      	bne.n	8003338 <_free_r+0x24>
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4401      	add	r1, r0
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	6053      	str	r3, [r2, #4]
 8003384:	e7d8      	b.n	8003338 <_free_r+0x24>
 8003386:	d902      	bls.n	800338e <_free_r+0x7a>
 8003388:	230c      	movs	r3, #12
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	e7d4      	b.n	8003338 <_free_r+0x24>
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1821      	adds	r1, r4, r0
 8003392:	428b      	cmp	r3, r1
 8003394:	bf01      	itttt	eq
 8003396:	6819      	ldreq	r1, [r3, #0]
 8003398:	685b      	ldreq	r3, [r3, #4]
 800339a:	1809      	addeq	r1, r1, r0
 800339c:	6021      	streq	r1, [r4, #0]
 800339e:	6063      	str	r3, [r4, #4]
 80033a0:	6054      	str	r4, [r2, #4]
 80033a2:	e7c9      	b.n	8003338 <_free_r+0x24>
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	bf00      	nop
 80033a8:	200000d0 	.word	0x200000d0

080033ac <_malloc_r>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	1ccd      	adds	r5, r1, #3
 80033b0:	f025 0503 	bic.w	r5, r5, #3
 80033b4:	3508      	adds	r5, #8
 80033b6:	2d0c      	cmp	r5, #12
 80033b8:	bf38      	it	cc
 80033ba:	250c      	movcc	r5, #12
 80033bc:	2d00      	cmp	r5, #0
 80033be:	4606      	mov	r6, r0
 80033c0:	db01      	blt.n	80033c6 <_malloc_r+0x1a>
 80033c2:	42a9      	cmp	r1, r5
 80033c4:	d903      	bls.n	80033ce <_malloc_r+0x22>
 80033c6:	230c      	movs	r3, #12
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	2000      	movs	r0, #0
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ce:	f000 f87d 	bl	80034cc <__malloc_lock>
 80033d2:	4921      	ldr	r1, [pc, #132]	; (8003458 <_malloc_r+0xac>)
 80033d4:	680a      	ldr	r2, [r1, #0]
 80033d6:	4614      	mov	r4, r2
 80033d8:	b99c      	cbnz	r4, 8003402 <_malloc_r+0x56>
 80033da:	4f20      	ldr	r7, [pc, #128]	; (800345c <_malloc_r+0xb0>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b923      	cbnz	r3, 80033ea <_malloc_r+0x3e>
 80033e0:	4621      	mov	r1, r4
 80033e2:	4630      	mov	r0, r6
 80033e4:	f000 f862 	bl	80034ac <_sbrk_r>
 80033e8:	6038      	str	r0, [r7, #0]
 80033ea:	4629      	mov	r1, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f85d 	bl	80034ac <_sbrk_r>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d123      	bne.n	800343e <_malloc_r+0x92>
 80033f6:	230c      	movs	r3, #12
 80033f8:	4630      	mov	r0, r6
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	f000 f86c 	bl	80034d8 <__malloc_unlock>
 8003400:	e7e3      	b.n	80033ca <_malloc_r+0x1e>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	1b5b      	subs	r3, r3, r5
 8003406:	d417      	bmi.n	8003438 <_malloc_r+0x8c>
 8003408:	2b0b      	cmp	r3, #11
 800340a:	d903      	bls.n	8003414 <_malloc_r+0x68>
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	441c      	add	r4, r3
 8003410:	6025      	str	r5, [r4, #0]
 8003412:	e004      	b.n	800341e <_malloc_r+0x72>
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	42a2      	cmp	r2, r4
 8003418:	bf0c      	ite	eq
 800341a:	600b      	streq	r3, [r1, #0]
 800341c:	6053      	strne	r3, [r2, #4]
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f85a 	bl	80034d8 <__malloc_unlock>
 8003424:	f104 000b 	add.w	r0, r4, #11
 8003428:	1d23      	adds	r3, r4, #4
 800342a:	f020 0007 	bic.w	r0, r0, #7
 800342e:	1ac2      	subs	r2, r0, r3
 8003430:	d0cc      	beq.n	80033cc <_malloc_r+0x20>
 8003432:	1a1b      	subs	r3, r3, r0
 8003434:	50a3      	str	r3, [r4, r2]
 8003436:	e7c9      	b.n	80033cc <_malloc_r+0x20>
 8003438:	4622      	mov	r2, r4
 800343a:	6864      	ldr	r4, [r4, #4]
 800343c:	e7cc      	b.n	80033d8 <_malloc_r+0x2c>
 800343e:	1cc4      	adds	r4, r0, #3
 8003440:	f024 0403 	bic.w	r4, r4, #3
 8003444:	42a0      	cmp	r0, r4
 8003446:	d0e3      	beq.n	8003410 <_malloc_r+0x64>
 8003448:	1a21      	subs	r1, r4, r0
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f82e 	bl	80034ac <_sbrk_r>
 8003450:	3001      	adds	r0, #1
 8003452:	d1dd      	bne.n	8003410 <_malloc_r+0x64>
 8003454:	e7cf      	b.n	80033f6 <_malloc_r+0x4a>
 8003456:	bf00      	nop
 8003458:	200000d0 	.word	0x200000d0
 800345c:	200000d4 	.word	0x200000d4

08003460 <_realloc_r>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	4614      	mov	r4, r2
 8003466:	460e      	mov	r6, r1
 8003468:	b921      	cbnz	r1, 8003474 <_realloc_r+0x14>
 800346a:	4611      	mov	r1, r2
 800346c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003470:	f7ff bf9c 	b.w	80033ac <_malloc_r>
 8003474:	b922      	cbnz	r2, 8003480 <_realloc_r+0x20>
 8003476:	f7ff ff4d 	bl	8003314 <_free_r>
 800347a:	4625      	mov	r5, r4
 800347c:	4628      	mov	r0, r5
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	f000 f830 	bl	80034e4 <_malloc_usable_size_r>
 8003484:	42a0      	cmp	r0, r4
 8003486:	d20f      	bcs.n	80034a8 <_realloc_r+0x48>
 8003488:	4621      	mov	r1, r4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff8e 	bl	80033ac <_malloc_r>
 8003490:	4605      	mov	r5, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d0f2      	beq.n	800347c <_realloc_r+0x1c>
 8003496:	4631      	mov	r1, r6
 8003498:	4622      	mov	r2, r4
 800349a:	f7ff ff13 	bl	80032c4 <memcpy>
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7ff ff37 	bl	8003314 <_free_r>
 80034a6:	e7e9      	b.n	800347c <_realloc_r+0x1c>
 80034a8:	4635      	mov	r5, r6
 80034aa:	e7e7      	b.n	800347c <_realloc_r+0x1c>

080034ac <_sbrk_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	2300      	movs	r3, #0
 80034b0:	4d05      	ldr	r5, [pc, #20]	; (80034c8 <_sbrk_r+0x1c>)
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd f9a8 	bl	800080c <_sbrk>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_sbrk_r+0x1a>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_sbrk_r+0x1a>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	20000188 	.word	0x20000188

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__malloc_lock+0x8>)
 80034ce:	f000 b811 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000190 	.word	0x20000190

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_unlock+0x8>)
 80034da:	f000 b80c 	b.w	80034f6 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000190 	.word	0x20000190

080034e4 <_malloc_usable_size_r>:
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f18      	subs	r0, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbc      	itt	lt
 80034ee:	580b      	ldrlt	r3, [r1, r0]
 80034f0:	18c0      	addlt	r0, r0, r3
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_acquire_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_release_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
