
F404_arduino_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b8  080030b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000074  08003134  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003134  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009007  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e6  00000000  00000000  000290ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205c3  00000000  00000000  0002b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a54  00000000  00000000  0004bd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c423f  00000000  00000000  00054757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  001189ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800301c 	.word	0x0800301c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800301c 	.word	0x0800301c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fb45 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f897 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f95f 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f933 	bl	80007f4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800058e:	f000 f8fb 	bl	8000788 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  CS_OFF;
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	483a      	ldr	r0, [pc, #232]	; (8000684 <main+0x10c>)
 800059a:	f000 fe4f 	bl	800123c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ENABLE);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	4838      	ldr	r0, [pc, #224]	; (8000688 <main+0x110>)
 80005a6:	f000 fe49 	bl	800123c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, DISABLE);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	4835      	ldr	r0, [pc, #212]	; (8000688 <main+0x110>)
 80005b2:	f000 fe43 	bl	800123c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, DISABLE);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005bc:	4832      	ldr	r0, [pc, #200]	; (8000688 <main+0x110>)
 80005be:	f000 fe3d 	bl	800123c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, DISABLE);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c8:	482f      	ldr	r0, [pc, #188]	; (8000688 <main+0x110>)
 80005ca:	f000 fe37 	bl	800123c <HAL_GPIO_WritePin>
  sprintf (UART_msg_TX, "ARDUINO_connect\r\n");
 80005ce:	492f      	ldr	r1, [pc, #188]	; (800068c <main+0x114>)
 80005d0:	482f      	ldr	r0, [pc, #188]	; (8000690 <main+0x118>)
 80005d2:	f002 f8f5 	bl	80027c0 <siprintf>
  HAL_UART_Transmit (&huart2, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX), 0xFF);
 80005d6:	482e      	ldr	r0, [pc, #184]	; (8000690 <main+0x118>)
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	23ff      	movs	r3, #255	; 0xff
 80005e2:	492b      	ldr	r1, [pc, #172]	; (8000690 <main+0x118>)
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <main+0x11c>)
 80005e6:	f001 fe14 	bl	8002212 <HAL_UART_Transmit>

		flag = 0;
	}
*/

	HAL_GPIO_TogglePin (LD4_GPIO_Port, LD3_Pin);
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4826      	ldr	r0, [pc, #152]	; (8000688 <main+0x110>)
 80005f0:	f000 fe3d 	bl	800126e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (LD4_GPIO_Port, LD4_Pin);
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <main+0x110>)
 80005fa:	f000 fe38 	bl	800126e <HAL_GPIO_TogglePin>
	CS_ON;
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	481f      	ldr	r0, [pc, #124]	; (8000684 <main+0x10c>)
 8000606:	f000 fe19 	bl	800123c <HAL_GPIO_WritePin>
	SPI_status = HAL_SPI_TransmitReceive (&hspi2, &point, (uint8_t *)SPI_msg, 1, 0xFFFF);
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	4a21      	ldr	r2, [pc, #132]	; (8000698 <main+0x120>)
 8000614:	4921      	ldr	r1, [pc, #132]	; (800069c <main+0x124>)
 8000616:	4822      	ldr	r0, [pc, #136]	; (80006a0 <main+0x128>)
 8000618:	f001 fb41 	bl	8001c9e <HAL_SPI_TransmitReceive>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <main+0x12c>)
 8000622:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive (&hspi2, &point, (uint8_t *)&SPI_temp, 1, 0xFFFF);
 8000624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <main+0x130>)
 800062e:	491b      	ldr	r1, [pc, #108]	; (800069c <main+0x124>)
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0x128>)
 8000632:	f001 fb34 	bl	8001c9e <HAL_SPI_TransmitReceive>
	CS_OFF;
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0x10c>)
 800063e:	f000 fdfd 	bl	800123c <HAL_GPIO_WritePin>

	sprintf (UART_msg_TX,  "ADC = %u, %u, temp = %d\n\r", SPI_msg [0], SPI_status,  SPI_temp);
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <main+0x120>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <main+0x12c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0x130>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	460b      	mov	r3, r1
 8000656:	4915      	ldr	r1, [pc, #84]	; (80006ac <main+0x134>)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x118>)
 800065a:	f002 f8b1 	bl	80027c0 <siprintf>
	HAL_UART_Transmit (&huart2, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX), 0xFF);
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0x118>)
 8000660:	f7ff fdb6 	bl	80001d0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	23ff      	movs	r3, #255	; 0xff
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <main+0x118>)
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <main+0x11c>)
 800066e:	f001 fdd0 	bl	8002212 <HAL_UART_Transmit>
	SPI_data = 0x1A;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <main+0x138>)
 8000674:	221a      	movs	r2, #26
 8000676:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1500);
 8000678:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800067c:	f000 fb38 	bl	8000cf0 <HAL_Delay>
	HAL_GPIO_TogglePin (LD4_GPIO_Port, LD3_Pin);
 8000680:	e7b3      	b.n	80005ea <main+0x72>
 8000682:	bf00      	nop
 8000684:	40020400 	.word	0x40020400
 8000688:	40020c00 	.word	0x40020c00
 800068c:	08003034 	.word	0x08003034
 8000690:	20000090 	.word	0x20000090
 8000694:	2000012c 	.word	0x2000012c
 8000698:	200000c4 	.word	0x200000c4
 800069c:	20000001 	.word	0x20000001
 80006a0:	200000d4 	.word	0x200000d4
 80006a4:	200000c7 	.word	0x200000c7
 80006a8:	200000c6 	.word	0x200000c6
 80006ac:	08003048 	.word	0x08003048
 80006b0:	20000000 	.word	0x20000000

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f874 	bl	80027b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fdb3 	bl	80012a4 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f908 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800075a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2103      	movs	r1, #3
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f814 	bl	8001794 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f8f1 	bl	8000958 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI2_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_SPI2_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI2_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI2_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI2_Init+0x64>)
 80007bc:	2210      	movs	r2, #16
 80007be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI2_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI2_Init+0x64>)
 80007da:	f001 f9d7 	bl	8001b8c <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8b8 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000d4 	.word	0x200000d4
 80007f0:	40003800 	.word	0x40003800

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f001 fca4 	bl	8002178 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f88f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000012c 	.word	0x2000012c
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a37      	ldr	r2, [pc, #220]	; (8000944 <MX_GPIO_Init+0xfc>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_GPIO_Init+0xfc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a30      	ldr	r2, [pc, #192]	; (8000944 <MX_GPIO_Init+0xfc>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0xfc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_GPIO_Init+0xfc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d4:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_GPIO_Init+0x100>)
 80008d6:	f000 fcb1 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <MX_GPIO_Init+0x104>)
 80008e2:	f000 fcab 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0x108>)
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0x10c>)
 80008fa:	f000 fb03 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_GPIO_Init+0x100>)
 8000918:	f000 faf4 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800091c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_GPIO_Init+0x104>)
 8000936:	f000 fae5 	bl	8000f04 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40020c00 	.word	0x40020c00
 8000950:	10110000 	.word	0x10110000
 8000954:	40020000 	.word	0x40020000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f000 fa7a 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a20:	2305      	movs	r3, #5
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_SPI_MspInit+0x8c>)
 8000a2c:	f000 fa6a 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40003800 	.word	0x40003800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000aba:	f000 fa23 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8c6 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f001 fe00 	bl	800275c <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20020000 	.word	0x20020000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	200000c8 	.word	0x200000c8
 8000b90:	20000188 	.word	0x20000188

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f001 fdbf 	bl	8002768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fcc5 	bl	8000578 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bfc:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8000c00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c04:	20000184 	.word	0x20000184

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f931 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe90 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f93b 	bl	8000eea <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f911 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000170 	.word	0x20000170

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000170 	.word	0x20000170

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43d9      	mvns	r1, r3
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	400b      	ands	r3, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e264      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4ba3      	ldr	r3, [pc, #652]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e23f      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a83      	ldr	r2, [pc, #524]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcbc 	bl	8000cd8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcb8 	bl	8000cd8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e204      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fca8 	bl	8000cd8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fca4 	bl	8000cd8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f0      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c4      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4952      	ldr	r1, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc5d 	bl	8000cd8 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc59 	bl	8000cd8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a5      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4940      	ldr	r1, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc3c 	bl	8000cd8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc38 	bl	8000cd8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e184      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc1c 	bl	8000cd8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc18 	bl	8000cd8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e164      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc05 	bl	8000cd8 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc01 	bl	8000cd8 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e14d      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a0 	beq.w	800163e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d121      	bne.n	800157e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbc7 	bl	8000cd8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x2ce>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
 800155c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001560:	f7ff fbba 	bl	8000cd8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e106      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x4e4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a80      	ldr	r2, [pc, #512]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 800159c:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 80015b6:	4b75      	ldr	r3, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a74      	ldr	r2, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb7f 	bl	8000cd8 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fb7b 	bl	8000cd8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0c5      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ee      	beq.n	80015de <HAL_RCC_OscConfig+0x33a>
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fb69 	bl	8000cd8 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fb65 	bl	8000cd8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0af      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 809b 	beq.w	800177e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d05c      	beq.n	800170e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d141      	bne.n	80016e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb39 	bl	8000cd8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb35 	bl	8000cd8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e081      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	019b      	lsls	r3, r3, #6
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb0e 	bl	8000cd8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb0a 	bl	8000cd8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e056      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x41c>
 80016de:	e04e      	b.n	800177e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff faf7 	bl	8000cd8 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff faf3 	bl	8000cd8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03f      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x44a>
 800170c:	e037      	b.n	800177e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e032      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d028      	beq.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d121      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d11a      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001752:	4293      	cmp	r3, r2
 8001754:	d111      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	3b01      	subs	r3, #1
 8001764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d107      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40007000 	.word	0x40007000
 800178c:	40023800 	.word	0x40023800
 8001790:	42470060 	.word	0x42470060

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa28 	bl	8000cd8 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa24 	bl	8000cd8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f988 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	08003064 	.word	0x08003064
 8001958:	20000004 	.word	0x20000004
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80bd 	bhi.w	8001b04 <HAL_RCC_GetSysClockFreq+0x1a4>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0b7      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001996:	60bb      	str	r3, [r7, #8]
       break;
 8001998:	e0b7      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800199c:	60bb      	str	r3, [r7, #8]
      break;
 800199e:	e0b4      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d04d      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	461a      	mov	r2, r3
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	ea02 0800 	and.w	r8, r2, r0
 80019ce:	ea03 0901 	and.w	r9, r3, r1
 80019d2:	4640      	mov	r0, r8
 80019d4:	4649      	mov	r1, r9
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	014b      	lsls	r3, r1, #5
 80019e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e4:	0142      	lsls	r2, r0, #5
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	ebb0 0008 	subs.w	r0, r0, r8
 80019ee:	eb61 0109 	sbc.w	r1, r1, r9
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	018b      	lsls	r3, r1, #6
 80019fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a00:	0182      	lsls	r2, r0, #6
 8001a02:	1a12      	subs	r2, r2, r0
 8001a04:	eb63 0301 	sbc.w	r3, r3, r1
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	00d9      	lsls	r1, r3, #3
 8001a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a16:	00d0      	lsls	r0, r2, #3
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	eb12 0208 	adds.w	r2, r2, r8
 8001a20:	eb43 0309 	adc.w	r3, r3, r9
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0259      	lsls	r1, r3, #9
 8001a2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a32:	0250      	lsls	r0, r2, #9
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f7fe fc1c 	bl	8000280 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e04a      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	ea02 0400 	and.w	r4, r2, r0
 8001a6a:	ea03 0501 	and.w	r5, r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	014b      	lsls	r3, r1, #5
 8001a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a80:	0142      	lsls	r2, r0, #5
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	1b00      	subs	r0, r0, r4
 8001a88:	eb61 0105 	sbc.w	r1, r1, r5
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	018b      	lsls	r3, r1, #6
 8001a96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a9a:	0182      	lsls	r2, r0, #6
 8001a9c:	1a12      	subs	r2, r2, r0
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	00d9      	lsls	r1, r3, #3
 8001aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab0:	00d0      	lsls	r0, r2, #3
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	1912      	adds	r2, r2, r4
 8001ab8:	eb45 0303 	adc.w	r3, r5, r3
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0299      	lsls	r1, r3, #10
 8001ac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aca:	0290      	lsls	r0, r2, #10
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f7fe fbd0 	bl	8000280 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	3301      	adds	r3, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	60bb      	str	r3, [r7, #8]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b06:	60bb      	str	r3, [r7, #8]
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	007a1200 	.word	0x007a1200

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0a9b      	lsrs	r3, r3, #10
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08003074 	.word	0x08003074

08001b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b68:	f7ff ffdc 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0b5b      	lsrs	r3, r3, #13
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08003074 	.word	0x08003074

08001b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07b      	b.n	8001c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d108      	bne.n	8001bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bae:	d009      	beq.n	8001bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
 8001bb6:	e005      	b.n	8001bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fee8 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	ea42 0103 	orr.w	r1, r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0104 	and.w	r1, r3, #4
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f003 0210 	and.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b08c      	sub	sp, #48	; 0x30
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x26>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e18a      	b.n	8001fda <HAL_SPI_TransmitReceive+0x33c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ccc:	f7ff f804 	bl	8000cd8 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d00f      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x70>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cf4:	d107      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_SPI_TransmitReceive+0x68>
 8001cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d003      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d0c:	e15b      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x82>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x82>
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d26:	e14e      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d003      	beq.n	8001d3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2205      	movs	r2, #5
 8001d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	887a      	ldrh	r2, [r7, #2]
 8001d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	2b40      	cmp	r3, #64	; 0x40
 8001d7e:	d007      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d98:	d178      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_SPI_TransmitReceive+0x10a>
 8001da2:	8b7b      	ldrh	r3, [r7, #26]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d166      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dcc:	e053      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11b      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d113      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <HAL_SPI_TransmitReceive+0x1b8>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d014      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	b292      	uxth	r2, r2
 8001e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e56:	f7fe ff3f 	bl	8000cd8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d807      	bhi.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d003      	beq.n	8001e76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e74:	e0a7      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1a6      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x130>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1a1      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x130>
 8001e8a:	e07c      	b.n	8001f86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x1fc>
 8001e94:	8b7b      	ldrh	r3, [r7, #26]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d16b      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ec0:	e057      	b.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11c      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d114      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d119      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x2ae>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d014      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f4c:	f7fe fec4 	bl	8000cd8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d803      	bhi.n	8001f64 <HAL_SPI_TransmitReceive+0x2c6>
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_TransmitReceive+0x2cc>
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f70:	e029      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a2      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x224>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d19d      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8b2 	bl	80020f4 <SPI_EndRxTxTransaction>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001fa2:	e010      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	e000      	b.n	8001fc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3730      	adds	r7, #48	; 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ff4:	f7fe fe70 	bl	8000cd8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002004:	f7fe fe68 	bl	8000cd8 <HAL_GetTick>
 8002008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201a:	e054      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d050      	beq.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002024:	f7fe fe58 	bl	8000cd8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d902      	bls.n	800203a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d13d      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d111      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d004      	beq.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002066:	d107      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d10f      	bne.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e017      	b.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d19b      	bne.n	800201c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000004 	.word	0x20000004

080020f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <SPI_EndRxTxTransaction+0x7c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <SPI_EndRxTxTransaction+0x80>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211e:	d112      	bne.n	8002146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ff5a 	bl	8001fe4 <SPI_WaitFlagStateUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3b01      	subs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d0f2      	beq.n	8002146 <SPI_EndRxTxTransaction+0x52>
 8002160:	e000      	b.n	8002164 <SPI_EndRxTxTransaction+0x70>
        break;
 8002162:	bf00      	nop
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004
 8002174:	165e9f81 	.word	0x165e9f81

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03f      	b.n	800220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fc50 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f905 	bl	80023cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d17c      	bne.n	800232c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit+0x2c>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e075      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_UART_Transmit+0x3e>
 800224c:	2302      	movs	r3, #2
 800224e:	e06e      	b.n	800232e <HAL_UART_Transmit+0x11c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fd37 	bl	8000cd8 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x82>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a4:	e02a      	b.n	80022fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f840 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e036      	b.n	800232e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cf      	bne.n	80022a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f810 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e006      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	e02c      	b.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d028      	beq.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0x30>
 8002356:	f7fe fcbf 	bl	8000cd8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	429a      	cmp	r2, r3
 8002364:	d21d      	bcs.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002374:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e00f      	b.n	80023c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d0c3      	beq.n	8002348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	b09f      	sub	sp, #124	; 0x7c
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e2:	68d9      	ldr	r1, [r3, #12]
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	ea40 0301 	orr.w	r3, r0, r1
 80023ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4313      	orrs	r3, r2
 8002404:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002410:	f021 010c 	bic.w	r1, r1, #12
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241a:	430b      	orrs	r3, r1
 800241c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	6999      	ldr	r1, [r3, #24]
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	ea40 0301 	orr.w	r3, r0, r1
 8002434:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4bc5      	ldr	r3, [pc, #788]	; (8002750 <UART_SetConfig+0x384>)
 800243c:	429a      	cmp	r2, r3
 800243e:	d004      	beq.n	800244a <UART_SetConfig+0x7e>
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4bc3      	ldr	r3, [pc, #780]	; (8002754 <UART_SetConfig+0x388>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d103      	bne.n	8002452 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800244a:	f7ff fb8b 	bl	8001b64 <HAL_RCC_GetPCLK2Freq>
 800244e:	6778      	str	r0, [r7, #116]	; 0x74
 8002450:	e002      	b.n	8002458 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002452:	f7ff fb73 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002456:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	f040 80b6 	bne.w	80025d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002466:	461c      	mov	r4, r3
 8002468:	f04f 0500 	mov.w	r5, #0
 800246c:	4622      	mov	r2, r4
 800246e:	462b      	mov	r3, r5
 8002470:	1891      	adds	r1, r2, r2
 8002472:	6439      	str	r1, [r7, #64]	; 0x40
 8002474:	415b      	adcs	r3, r3
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
 8002478:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800247c:	1912      	adds	r2, r2, r4
 800247e:	eb45 0303 	adc.w	r3, r5, r3
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	00d9      	lsls	r1, r3, #3
 800248c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002490:	00d0      	lsls	r0, r2, #3
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	1911      	adds	r1, r2, r4
 8002498:	6639      	str	r1, [r7, #96]	; 0x60
 800249a:	416b      	adcs	r3, r5
 800249c:	667b      	str	r3, [r7, #100]	; 0x64
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	1891      	adds	r1, r2, r2
 80024aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80024ac:	415b      	adcs	r3, r3
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024b8:	f7fd fee2 	bl	8000280 <__aeabi_uldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4ba5      	ldr	r3, [pc, #660]	; (8002758 <UART_SetConfig+0x38c>)
 80024c2:	fba3 2302 	umull	r2, r3, r3, r2
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	011e      	lsls	r6, r3, #4
 80024ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024cc:	461c      	mov	r4, r3
 80024ce:	f04f 0500 	mov.w	r5, #0
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	1891      	adds	r1, r2, r2
 80024d8:	6339      	str	r1, [r7, #48]	; 0x30
 80024da:	415b      	adcs	r3, r3
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
 80024de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024e2:	1912      	adds	r2, r2, r4
 80024e4:	eb45 0303 	adc.w	r3, r5, r3
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	00d9      	lsls	r1, r3, #3
 80024f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f6:	00d0      	lsls	r0, r2, #3
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	1911      	adds	r1, r2, r4
 80024fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002500:	416b      	adcs	r3, r5
 8002502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	1891      	adds	r1, r2, r2
 8002510:	62b9      	str	r1, [r7, #40]	; 0x28
 8002512:	415b      	adcs	r3, r3
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800251a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800251e:	f7fd feaf 	bl	8000280 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <UART_SetConfig+0x38c>)
 8002528:	fba3 1302 	umull	r1, r3, r3, r2
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	2164      	movs	r1, #100	; 0x64
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	3332      	adds	r3, #50	; 0x32
 800253a:	4a87      	ldr	r2, [pc, #540]	; (8002758 <UART_SetConfig+0x38c>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002548:	441e      	add	r6, r3
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	4618      	mov	r0, r3
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	1894      	adds	r4, r2, r2
 8002558:	623c      	str	r4, [r7, #32]
 800255a:	415b      	adcs	r3, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002562:	1812      	adds	r2, r2, r0
 8002564:	eb41 0303 	adc.w	r3, r1, r3
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	f04f 0500 	mov.w	r5, #0
 8002570:	00dd      	lsls	r5, r3, #3
 8002572:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002576:	00d4      	lsls	r4, r2, #3
 8002578:	4622      	mov	r2, r4
 800257a:	462b      	mov	r3, r5
 800257c:	1814      	adds	r4, r2, r0
 800257e:	653c      	str	r4, [r7, #80]	; 0x50
 8002580:	414b      	adcs	r3, r1
 8002582:	657b      	str	r3, [r7, #84]	; 0x54
 8002584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	461a      	mov	r2, r3
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	1891      	adds	r1, r2, r2
 8002590:	61b9      	str	r1, [r7, #24]
 8002592:	415b      	adcs	r3, r3
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800259e:	f7fd fe6f 	bl	8000280 <__aeabi_uldivmod>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <UART_SetConfig+0x38c>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	2164      	movs	r1, #100	; 0x64
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	3332      	adds	r3, #50	; 0x32
 80025ba:	4a67      	ldr	r2, [pc, #412]	; (8002758 <UART_SetConfig+0x38c>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4432      	add	r2, r6
 80025cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025ce:	e0b9      	b.n	8002744 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	461c      	mov	r4, r3
 80025d4:	f04f 0500 	mov.w	r5, #0
 80025d8:	4622      	mov	r2, r4
 80025da:	462b      	mov	r3, r5
 80025dc:	1891      	adds	r1, r2, r2
 80025de:	6139      	str	r1, [r7, #16]
 80025e0:	415b      	adcs	r3, r3
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025e8:	1912      	adds	r2, r2, r4
 80025ea:	eb45 0303 	adc.w	r3, r5, r3
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	00d9      	lsls	r1, r3, #3
 80025f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025fc:	00d0      	lsls	r0, r2, #3
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	eb12 0804 	adds.w	r8, r2, r4
 8002606:	eb43 0905 	adc.w	r9, r3, r5
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	008b      	lsls	r3, r1, #2
 800261e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002622:	0082      	lsls	r2, r0, #2
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fd fe2a 	bl	8000280 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <UART_SetConfig+0x38c>)
 8002632:	fba3 2302 	umull	r2, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	011e      	lsls	r6, r3, #4
 800263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263c:	4618      	mov	r0, r3
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	1894      	adds	r4, r2, r2
 8002648:	60bc      	str	r4, [r7, #8]
 800264a:	415b      	adcs	r3, r3
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002652:	1812      	adds	r2, r2, r0
 8002654:	eb41 0303 	adc.w	r3, r1, r3
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	f04f 0500 	mov.w	r5, #0
 8002660:	00dd      	lsls	r5, r3, #3
 8002662:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002666:	00d4      	lsls	r4, r2, #3
 8002668:	4622      	mov	r2, r4
 800266a:	462b      	mov	r3, r5
 800266c:	1814      	adds	r4, r2, r0
 800266e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002670:	414b      	adcs	r3, r1
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	008b      	lsls	r3, r1, #2
 8002688:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800268c:	0082      	lsls	r2, r0, #2
 800268e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002692:	f7fd fdf5 	bl	8000280 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <UART_SetConfig+0x38c>)
 800269c:	fba3 1302 	umull	r1, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	2164      	movs	r1, #100	; 0x64
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	3332      	adds	r3, #50	; 0x32
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <UART_SetConfig+0x38c>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ba:	441e      	add	r6, r3
 80026bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026be:	4618      	mov	r0, r3
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	1894      	adds	r4, r2, r2
 80026ca:	603c      	str	r4, [r7, #0]
 80026cc:	415b      	adcs	r3, r3
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d4:	1812      	adds	r2, r2, r0
 80026d6:	eb41 0303 	adc.w	r3, r1, r3
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	f04f 0500 	mov.w	r5, #0
 80026e2:	00dd      	lsls	r5, r3, #3
 80026e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026e8:	00d4      	lsls	r4, r2, #3
 80026ea:	4622      	mov	r2, r4
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb12 0a00 	adds.w	sl, r2, r0
 80026f2:	eb43 0b01 	adc.w	fp, r3, r1
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	008b      	lsls	r3, r1, #2
 800270a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800270e:	0082      	lsls	r2, r0, #2
 8002710:	4650      	mov	r0, sl
 8002712:	4659      	mov	r1, fp
 8002714:	f7fd fdb4 	bl	8000280 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <UART_SetConfig+0x38c>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2164      	movs	r1, #100	; 0x64
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	3332      	adds	r3, #50	; 0x32
 8002730:	4a09      	ldr	r2, [pc, #36]	; (8002758 <UART_SetConfig+0x38c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4432      	add	r2, r6
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	377c      	adds	r7, #124	; 0x7c
 8002748:	46bd      	mov	sp, r7
 800274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274e:	bf00      	nop
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f

0800275c <__errno>:
 800275c:	4b01      	ldr	r3, [pc, #4]	; (8002764 <__errno+0x8>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000010 	.word	0x20000010

08002768 <__libc_init_array>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	4d0d      	ldr	r5, [pc, #52]	; (80027a0 <__libc_init_array+0x38>)
 800276c:	4c0d      	ldr	r4, [pc, #52]	; (80027a4 <__libc_init_array+0x3c>)
 800276e:	1b64      	subs	r4, r4, r5
 8002770:	10a4      	asrs	r4, r4, #2
 8002772:	2600      	movs	r6, #0
 8002774:	42a6      	cmp	r6, r4
 8002776:	d109      	bne.n	800278c <__libc_init_array+0x24>
 8002778:	4d0b      	ldr	r5, [pc, #44]	; (80027a8 <__libc_init_array+0x40>)
 800277a:	4c0c      	ldr	r4, [pc, #48]	; (80027ac <__libc_init_array+0x44>)
 800277c:	f000 fc4e 	bl	800301c <_init>
 8002780:	1b64      	subs	r4, r4, r5
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	2600      	movs	r6, #0
 8002786:	42a6      	cmp	r6, r4
 8002788:	d105      	bne.n	8002796 <__libc_init_array+0x2e>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002790:	4798      	blx	r3
 8002792:	3601      	adds	r6, #1
 8002794:	e7ee      	b.n	8002774 <__libc_init_array+0xc>
 8002796:	f855 3b04 	ldr.w	r3, [r5], #4
 800279a:	4798      	blx	r3
 800279c:	3601      	adds	r6, #1
 800279e:	e7f2      	b.n	8002786 <__libc_init_array+0x1e>
 80027a0:	080030b8 	.word	0x080030b8
 80027a4:	080030b8 	.word	0x080030b8
 80027a8:	080030b8 	.word	0x080030b8
 80027ac:	080030bc 	.word	0x080030bc

080027b0 <memset>:
 80027b0:	4402      	add	r2, r0
 80027b2:	4603      	mov	r3, r0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d100      	bne.n	80027ba <memset+0xa>
 80027b8:	4770      	bx	lr
 80027ba:	f803 1b01 	strb.w	r1, [r3], #1
 80027be:	e7f9      	b.n	80027b4 <memset+0x4>

080027c0 <siprintf>:
 80027c0:	b40e      	push	{r1, r2, r3}
 80027c2:	b500      	push	{lr}
 80027c4:	b09c      	sub	sp, #112	; 0x70
 80027c6:	ab1d      	add	r3, sp, #116	; 0x74
 80027c8:	9002      	str	r0, [sp, #8]
 80027ca:	9006      	str	r0, [sp, #24]
 80027cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <siprintf+0x38>)
 80027d2:	9107      	str	r1, [sp, #28]
 80027d4:	9104      	str	r1, [sp, #16]
 80027d6:	4909      	ldr	r1, [pc, #36]	; (80027fc <siprintf+0x3c>)
 80027d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027dc:	9105      	str	r1, [sp, #20]
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	a902      	add	r1, sp, #8
 80027e4:	f000 f868 	bl	80028b8 <_svfiprintf_r>
 80027e8:	9b02      	ldr	r3, [sp, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	b01c      	add	sp, #112	; 0x70
 80027f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f4:	b003      	add	sp, #12
 80027f6:	4770      	bx	lr
 80027f8:	20000010 	.word	0x20000010
 80027fc:	ffff0208 	.word	0xffff0208

08002800 <__ssputs_r>:
 8002800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	429e      	cmp	r6, r3
 8002808:	4682      	mov	sl, r0
 800280a:	460c      	mov	r4, r1
 800280c:	4690      	mov	r8, r2
 800280e:	461f      	mov	r7, r3
 8002810:	d838      	bhi.n	8002884 <__ssputs_r+0x84>
 8002812:	898a      	ldrh	r2, [r1, #12]
 8002814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002818:	d032      	beq.n	8002880 <__ssputs_r+0x80>
 800281a:	6825      	ldr	r5, [r4, #0]
 800281c:	6909      	ldr	r1, [r1, #16]
 800281e:	eba5 0901 	sub.w	r9, r5, r1
 8002822:	6965      	ldr	r5, [r4, #20]
 8002824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800282c:	3301      	adds	r3, #1
 800282e:	444b      	add	r3, r9
 8002830:	106d      	asrs	r5, r5, #1
 8002832:	429d      	cmp	r5, r3
 8002834:	bf38      	it	cc
 8002836:	461d      	movcc	r5, r3
 8002838:	0553      	lsls	r3, r2, #21
 800283a:	d531      	bpl.n	80028a0 <__ssputs_r+0xa0>
 800283c:	4629      	mov	r1, r5
 800283e:	f000 fb47 	bl	8002ed0 <_malloc_r>
 8002842:	4606      	mov	r6, r0
 8002844:	b950      	cbnz	r0, 800285c <__ssputs_r+0x5c>
 8002846:	230c      	movs	r3, #12
 8002848:	f8ca 3000 	str.w	r3, [sl]
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002852:	81a3      	strh	r3, [r4, #12]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285c:	6921      	ldr	r1, [r4, #16]
 800285e:	464a      	mov	r2, r9
 8002860:	f000 fabe 	bl	8002de0 <memcpy>
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	81a3      	strh	r3, [r4, #12]
 8002870:	6126      	str	r6, [r4, #16]
 8002872:	6165      	str	r5, [r4, #20]
 8002874:	444e      	add	r6, r9
 8002876:	eba5 0509 	sub.w	r5, r5, r9
 800287a:	6026      	str	r6, [r4, #0]
 800287c:	60a5      	str	r5, [r4, #8]
 800287e:	463e      	mov	r6, r7
 8002880:	42be      	cmp	r6, r7
 8002882:	d900      	bls.n	8002886 <__ssputs_r+0x86>
 8002884:	463e      	mov	r6, r7
 8002886:	4632      	mov	r2, r6
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	4641      	mov	r1, r8
 800288c:	f000 fab6 	bl	8002dfc <memmove>
 8002890:	68a3      	ldr	r3, [r4, #8]
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	1b9b      	subs	r3, r3, r6
 8002896:	4432      	add	r2, r6
 8002898:	60a3      	str	r3, [r4, #8]
 800289a:	6022      	str	r2, [r4, #0]
 800289c:	2000      	movs	r0, #0
 800289e:	e7db      	b.n	8002858 <__ssputs_r+0x58>
 80028a0:	462a      	mov	r2, r5
 80028a2:	f000 fb6f 	bl	8002f84 <_realloc_r>
 80028a6:	4606      	mov	r6, r0
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d1e1      	bne.n	8002870 <__ssputs_r+0x70>
 80028ac:	6921      	ldr	r1, [r4, #16]
 80028ae:	4650      	mov	r0, sl
 80028b0:	f000 fabe 	bl	8002e30 <_free_r>
 80028b4:	e7c7      	b.n	8002846 <__ssputs_r+0x46>
	...

080028b8 <_svfiprintf_r>:
 80028b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028bc:	4698      	mov	r8, r3
 80028be:	898b      	ldrh	r3, [r1, #12]
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	b09d      	sub	sp, #116	; 0x74
 80028c4:	4607      	mov	r7, r0
 80028c6:	460d      	mov	r5, r1
 80028c8:	4614      	mov	r4, r2
 80028ca:	d50e      	bpl.n	80028ea <_svfiprintf_r+0x32>
 80028cc:	690b      	ldr	r3, [r1, #16]
 80028ce:	b963      	cbnz	r3, 80028ea <_svfiprintf_r+0x32>
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	f000 fafd 	bl	8002ed0 <_malloc_r>
 80028d6:	6028      	str	r0, [r5, #0]
 80028d8:	6128      	str	r0, [r5, #16]
 80028da:	b920      	cbnz	r0, 80028e6 <_svfiprintf_r+0x2e>
 80028dc:	230c      	movs	r3, #12
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	e0d1      	b.n	8002a8a <_svfiprintf_r+0x1d2>
 80028e6:	2340      	movs	r3, #64	; 0x40
 80028e8:	616b      	str	r3, [r5, #20]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9309      	str	r3, [sp, #36]	; 0x24
 80028ee:	2320      	movs	r3, #32
 80028f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80028f8:	2330      	movs	r3, #48	; 0x30
 80028fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002aa4 <_svfiprintf_r+0x1ec>
 80028fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002902:	f04f 0901 	mov.w	r9, #1
 8002906:	4623      	mov	r3, r4
 8002908:	469a      	mov	sl, r3
 800290a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800290e:	b10a      	cbz	r2, 8002914 <_svfiprintf_r+0x5c>
 8002910:	2a25      	cmp	r2, #37	; 0x25
 8002912:	d1f9      	bne.n	8002908 <_svfiprintf_r+0x50>
 8002914:	ebba 0b04 	subs.w	fp, sl, r4
 8002918:	d00b      	beq.n	8002932 <_svfiprintf_r+0x7a>
 800291a:	465b      	mov	r3, fp
 800291c:	4622      	mov	r2, r4
 800291e:	4629      	mov	r1, r5
 8002920:	4638      	mov	r0, r7
 8002922:	f7ff ff6d 	bl	8002800 <__ssputs_r>
 8002926:	3001      	adds	r0, #1
 8002928:	f000 80aa 	beq.w	8002a80 <_svfiprintf_r+0x1c8>
 800292c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800292e:	445a      	add	r2, fp
 8002930:	9209      	str	r2, [sp, #36]	; 0x24
 8002932:	f89a 3000 	ldrb.w	r3, [sl]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a2 	beq.w	8002a80 <_svfiprintf_r+0x1c8>
 800293c:	2300      	movs	r3, #0
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002946:	f10a 0a01 	add.w	sl, sl, #1
 800294a:	9304      	str	r3, [sp, #16]
 800294c:	9307      	str	r3, [sp, #28]
 800294e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002952:	931a      	str	r3, [sp, #104]	; 0x68
 8002954:	4654      	mov	r4, sl
 8002956:	2205      	movs	r2, #5
 8002958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295c:	4851      	ldr	r0, [pc, #324]	; (8002aa4 <_svfiprintf_r+0x1ec>)
 800295e:	f7fd fc3f 	bl	80001e0 <memchr>
 8002962:	9a04      	ldr	r2, [sp, #16]
 8002964:	b9d8      	cbnz	r0, 800299e <_svfiprintf_r+0xe6>
 8002966:	06d0      	lsls	r0, r2, #27
 8002968:	bf44      	itt	mi
 800296a:	2320      	movmi	r3, #32
 800296c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002970:	0711      	lsls	r1, r2, #28
 8002972:	bf44      	itt	mi
 8002974:	232b      	movmi	r3, #43	; 0x2b
 8002976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297a:	f89a 3000 	ldrb.w	r3, [sl]
 800297e:	2b2a      	cmp	r3, #42	; 0x2a
 8002980:	d015      	beq.n	80029ae <_svfiprintf_r+0xf6>
 8002982:	9a07      	ldr	r2, [sp, #28]
 8002984:	4654      	mov	r4, sl
 8002986:	2000      	movs	r0, #0
 8002988:	f04f 0c0a 	mov.w	ip, #10
 800298c:	4621      	mov	r1, r4
 800298e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002992:	3b30      	subs	r3, #48	; 0x30
 8002994:	2b09      	cmp	r3, #9
 8002996:	d94e      	bls.n	8002a36 <_svfiprintf_r+0x17e>
 8002998:	b1b0      	cbz	r0, 80029c8 <_svfiprintf_r+0x110>
 800299a:	9207      	str	r2, [sp, #28]
 800299c:	e014      	b.n	80029c8 <_svfiprintf_r+0x110>
 800299e:	eba0 0308 	sub.w	r3, r0, r8
 80029a2:	fa09 f303 	lsl.w	r3, r9, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	9304      	str	r3, [sp, #16]
 80029aa:	46a2      	mov	sl, r4
 80029ac:	e7d2      	b.n	8002954 <_svfiprintf_r+0x9c>
 80029ae:	9b03      	ldr	r3, [sp, #12]
 80029b0:	1d19      	adds	r1, r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	9103      	str	r1, [sp, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bfbb      	ittet	lt
 80029ba:	425b      	neglt	r3, r3
 80029bc:	f042 0202 	orrlt.w	r2, r2, #2
 80029c0:	9307      	strge	r3, [sp, #28]
 80029c2:	9307      	strlt	r3, [sp, #28]
 80029c4:	bfb8      	it	lt
 80029c6:	9204      	strlt	r2, [sp, #16]
 80029c8:	7823      	ldrb	r3, [r4, #0]
 80029ca:	2b2e      	cmp	r3, #46	; 0x2e
 80029cc:	d10c      	bne.n	80029e8 <_svfiprintf_r+0x130>
 80029ce:	7863      	ldrb	r3, [r4, #1]
 80029d0:	2b2a      	cmp	r3, #42	; 0x2a
 80029d2:	d135      	bne.n	8002a40 <_svfiprintf_r+0x188>
 80029d4:	9b03      	ldr	r3, [sp, #12]
 80029d6:	1d1a      	adds	r2, r3, #4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	9203      	str	r2, [sp, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bfb8      	it	lt
 80029e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80029e4:	3402      	adds	r4, #2
 80029e6:	9305      	str	r3, [sp, #20]
 80029e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ab4 <_svfiprintf_r+0x1fc>
 80029ec:	7821      	ldrb	r1, [r4, #0]
 80029ee:	2203      	movs	r2, #3
 80029f0:	4650      	mov	r0, sl
 80029f2:	f7fd fbf5 	bl	80001e0 <memchr>
 80029f6:	b140      	cbz	r0, 8002a0a <_svfiprintf_r+0x152>
 80029f8:	2340      	movs	r3, #64	; 0x40
 80029fa:	eba0 000a 	sub.w	r0, r0, sl
 80029fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002a02:	9b04      	ldr	r3, [sp, #16]
 8002a04:	4303      	orrs	r3, r0
 8002a06:	3401      	adds	r4, #1
 8002a08:	9304      	str	r3, [sp, #16]
 8002a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0e:	4826      	ldr	r0, [pc, #152]	; (8002aa8 <_svfiprintf_r+0x1f0>)
 8002a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a14:	2206      	movs	r2, #6
 8002a16:	f7fd fbe3 	bl	80001e0 <memchr>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d038      	beq.n	8002a90 <_svfiprintf_r+0x1d8>
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <_svfiprintf_r+0x1f4>)
 8002a20:	bb1b      	cbnz	r3, 8002a6a <_svfiprintf_r+0x1b2>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	3307      	adds	r3, #7
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	4433      	add	r3, r6
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	e767      	b.n	8002906 <_svfiprintf_r+0x4e>
 8002a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7a5      	b.n	800298c <_svfiprintf_r+0xd4>
 8002a40:	2300      	movs	r3, #0
 8002a42:	3401      	adds	r4, #1
 8002a44:	9305      	str	r3, [sp, #20]
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 0c0a 	mov.w	ip, #10
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a52:	3a30      	subs	r2, #48	; 0x30
 8002a54:	2a09      	cmp	r2, #9
 8002a56:	d903      	bls.n	8002a60 <_svfiprintf_r+0x1a8>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0c5      	beq.n	80029e8 <_svfiprintf_r+0x130>
 8002a5c:	9105      	str	r1, [sp, #20]
 8002a5e:	e7c3      	b.n	80029e8 <_svfiprintf_r+0x130>
 8002a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a64:	4604      	mov	r4, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	e7f0      	b.n	8002a4c <_svfiprintf_r+0x194>
 8002a6a:	ab03      	add	r3, sp, #12
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	462a      	mov	r2, r5
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <_svfiprintf_r+0x1f8>)
 8002a72:	a904      	add	r1, sp, #16
 8002a74:	4638      	mov	r0, r7
 8002a76:	f3af 8000 	nop.w
 8002a7a:	1c42      	adds	r2, r0, #1
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	d1d6      	bne.n	8002a2e <_svfiprintf_r+0x176>
 8002a80:	89ab      	ldrh	r3, [r5, #12]
 8002a82:	065b      	lsls	r3, r3, #25
 8002a84:	f53f af2c 	bmi.w	80028e0 <_svfiprintf_r+0x28>
 8002a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a8a:	b01d      	add	sp, #116	; 0x74
 8002a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a90:	ab03      	add	r3, sp, #12
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	462a      	mov	r2, r5
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <_svfiprintf_r+0x1f8>)
 8002a98:	a904      	add	r1, sp, #16
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f000 f87a 	bl	8002b94 <_printf_i>
 8002aa0:	e7eb      	b.n	8002a7a <_svfiprintf_r+0x1c2>
 8002aa2:	bf00      	nop
 8002aa4:	0800307c 	.word	0x0800307c
 8002aa8:	08003086 	.word	0x08003086
 8002aac:	00000000 	.word	0x00000000
 8002ab0:	08002801 	.word	0x08002801
 8002ab4:	08003082 	.word	0x08003082

08002ab8 <_printf_common>:
 8002ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002abc:	4616      	mov	r6, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	688a      	ldr	r2, [r1, #8]
 8002ac2:	690b      	ldr	r3, [r1, #16]
 8002ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bfb8      	it	lt
 8002acc:	4613      	movlt	r3, r2
 8002ace:	6033      	str	r3, [r6, #0]
 8002ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ad4:	4607      	mov	r7, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	b10a      	cbz	r2, 8002ade <_printf_common+0x26>
 8002ada:	3301      	adds	r3, #1
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	0699      	lsls	r1, r3, #26
 8002ae2:	bf42      	ittt	mi
 8002ae4:	6833      	ldrmi	r3, [r6, #0]
 8002ae6:	3302      	addmi	r3, #2
 8002ae8:	6033      	strmi	r3, [r6, #0]
 8002aea:	6825      	ldr	r5, [r4, #0]
 8002aec:	f015 0506 	ands.w	r5, r5, #6
 8002af0:	d106      	bne.n	8002b00 <_printf_common+0x48>
 8002af2:	f104 0a19 	add.w	sl, r4, #25
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	6832      	ldr	r2, [r6, #0]
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	42ab      	cmp	r3, r5
 8002afe:	dc26      	bgt.n	8002b4e <_printf_common+0x96>
 8002b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b04:	1e13      	subs	r3, r2, #0
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	bf18      	it	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	0692      	lsls	r2, r2, #26
 8002b0e:	d42b      	bmi.n	8002b68 <_printf_common+0xb0>
 8002b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b14:	4649      	mov	r1, r9
 8002b16:	4638      	mov	r0, r7
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d01e      	beq.n	8002b5c <_printf_common+0xa4>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	68e5      	ldr	r5, [r4, #12]
 8002b22:	6832      	ldr	r2, [r6, #0]
 8002b24:	f003 0306 	and.w	r3, r3, #6
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	bf08      	it	eq
 8002b2c:	1aad      	subeq	r5, r5, r2
 8002b2e:	68a3      	ldr	r3, [r4, #8]
 8002b30:	6922      	ldr	r2, [r4, #16]
 8002b32:	bf0c      	ite	eq
 8002b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b38:	2500      	movne	r5, #0
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	bfc4      	itt	gt
 8002b3e:	1a9b      	subgt	r3, r3, r2
 8002b40:	18ed      	addgt	r5, r5, r3
 8002b42:	2600      	movs	r6, #0
 8002b44:	341a      	adds	r4, #26
 8002b46:	42b5      	cmp	r5, r6
 8002b48:	d11a      	bne.n	8002b80 <_printf_common+0xc8>
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e008      	b.n	8002b60 <_printf_common+0xa8>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4652      	mov	r2, sl
 8002b52:	4649      	mov	r1, r9
 8002b54:	4638      	mov	r0, r7
 8002b56:	47c0      	blx	r8
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d103      	bne.n	8002b64 <_printf_common+0xac>
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b64:	3501      	adds	r5, #1
 8002b66:	e7c6      	b.n	8002af6 <_printf_common+0x3e>
 8002b68:	18e1      	adds	r1, r4, r3
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	2030      	movs	r0, #48	; 0x30
 8002b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b72:	4422      	add	r2, r4
 8002b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	e7c7      	b.n	8002b10 <_printf_common+0x58>
 8002b80:	2301      	movs	r3, #1
 8002b82:	4622      	mov	r2, r4
 8002b84:	4649      	mov	r1, r9
 8002b86:	4638      	mov	r0, r7
 8002b88:	47c0      	blx	r8
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d0e6      	beq.n	8002b5c <_printf_common+0xa4>
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7d9      	b.n	8002b46 <_printf_common+0x8e>
	...

08002b94 <_printf_i>:
 8002b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	460c      	mov	r4, r1
 8002b9a:	4691      	mov	r9, r2
 8002b9c:	7e27      	ldrb	r7, [r4, #24]
 8002b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ba0:	2f78      	cmp	r7, #120	; 0x78
 8002ba2:	4680      	mov	r8, r0
 8002ba4:	469a      	mov	sl, r3
 8002ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002baa:	d807      	bhi.n	8002bbc <_printf_i+0x28>
 8002bac:	2f62      	cmp	r7, #98	; 0x62
 8002bae:	d80a      	bhi.n	8002bc6 <_printf_i+0x32>
 8002bb0:	2f00      	cmp	r7, #0
 8002bb2:	f000 80d8 	beq.w	8002d66 <_printf_i+0x1d2>
 8002bb6:	2f58      	cmp	r7, #88	; 0x58
 8002bb8:	f000 80a3 	beq.w	8002d02 <_printf_i+0x16e>
 8002bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bc4:	e03a      	b.n	8002c3c <_printf_i+0xa8>
 8002bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bca:	2b15      	cmp	r3, #21
 8002bcc:	d8f6      	bhi.n	8002bbc <_printf_i+0x28>
 8002bce:	a001      	add	r0, pc, #4	; (adr r0, 8002bd4 <_printf_i+0x40>)
 8002bd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c41 	.word	0x08002c41
 8002bdc:	08002bbd 	.word	0x08002bbd
 8002be0:	08002bbd 	.word	0x08002bbd
 8002be4:	08002bbd 	.word	0x08002bbd
 8002be8:	08002bbd 	.word	0x08002bbd
 8002bec:	08002c41 	.word	0x08002c41
 8002bf0:	08002bbd 	.word	0x08002bbd
 8002bf4:	08002bbd 	.word	0x08002bbd
 8002bf8:	08002bbd 	.word	0x08002bbd
 8002bfc:	08002bbd 	.word	0x08002bbd
 8002c00:	08002d4d 	.word	0x08002d4d
 8002c04:	08002c71 	.word	0x08002c71
 8002c08:	08002d2f 	.word	0x08002d2f
 8002c0c:	08002bbd 	.word	0x08002bbd
 8002c10:	08002bbd 	.word	0x08002bbd
 8002c14:	08002d6f 	.word	0x08002d6f
 8002c18:	08002bbd 	.word	0x08002bbd
 8002c1c:	08002c71 	.word	0x08002c71
 8002c20:	08002bbd 	.word	0x08002bbd
 8002c24:	08002bbd 	.word	0x08002bbd
 8002c28:	08002d37 	.word	0x08002d37
 8002c2c:	680b      	ldr	r3, [r1, #0]
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	600a      	str	r2, [r1, #0]
 8002c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0a3      	b.n	8002d88 <_printf_i+0x1f4>
 8002c40:	6825      	ldr	r5, [r4, #0]
 8002c42:	6808      	ldr	r0, [r1, #0]
 8002c44:	062e      	lsls	r6, r5, #24
 8002c46:	f100 0304 	add.w	r3, r0, #4
 8002c4a:	d50a      	bpl.n	8002c62 <_printf_i+0xce>
 8002c4c:	6805      	ldr	r5, [r0, #0]
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	da03      	bge.n	8002c5c <_printf_i+0xc8>
 8002c54:	232d      	movs	r3, #45	; 0x2d
 8002c56:	426d      	negs	r5, r5
 8002c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c5c:	485e      	ldr	r0, [pc, #376]	; (8002dd8 <_printf_i+0x244>)
 8002c5e:	230a      	movs	r3, #10
 8002c60:	e019      	b.n	8002c96 <_printf_i+0x102>
 8002c62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c66:	6805      	ldr	r5, [r0, #0]
 8002c68:	600b      	str	r3, [r1, #0]
 8002c6a:	bf18      	it	ne
 8002c6c:	b22d      	sxthne	r5, r5
 8002c6e:	e7ef      	b.n	8002c50 <_printf_i+0xbc>
 8002c70:	680b      	ldr	r3, [r1, #0]
 8002c72:	6825      	ldr	r5, [r4, #0]
 8002c74:	1d18      	adds	r0, r3, #4
 8002c76:	6008      	str	r0, [r1, #0]
 8002c78:	0628      	lsls	r0, r5, #24
 8002c7a:	d501      	bpl.n	8002c80 <_printf_i+0xec>
 8002c7c:	681d      	ldr	r5, [r3, #0]
 8002c7e:	e002      	b.n	8002c86 <_printf_i+0xf2>
 8002c80:	0669      	lsls	r1, r5, #25
 8002c82:	d5fb      	bpl.n	8002c7c <_printf_i+0xe8>
 8002c84:	881d      	ldrh	r5, [r3, #0]
 8002c86:	4854      	ldr	r0, [pc, #336]	; (8002dd8 <_printf_i+0x244>)
 8002c88:	2f6f      	cmp	r7, #111	; 0x6f
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2308      	moveq	r3, #8
 8002c8e:	230a      	movne	r3, #10
 8002c90:	2100      	movs	r1, #0
 8002c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c96:	6866      	ldr	r6, [r4, #4]
 8002c98:	60a6      	str	r6, [r4, #8]
 8002c9a:	2e00      	cmp	r6, #0
 8002c9c:	bfa2      	ittt	ge
 8002c9e:	6821      	ldrge	r1, [r4, #0]
 8002ca0:	f021 0104 	bicge.w	r1, r1, #4
 8002ca4:	6021      	strge	r1, [r4, #0]
 8002ca6:	b90d      	cbnz	r5, 8002cac <_printf_i+0x118>
 8002ca8:	2e00      	cmp	r6, #0
 8002caa:	d04d      	beq.n	8002d48 <_printf_i+0x1b4>
 8002cac:	4616      	mov	r6, r2
 8002cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8002cb6:	5dc7      	ldrb	r7, [r0, r7]
 8002cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cbc:	462f      	mov	r7, r5
 8002cbe:	42bb      	cmp	r3, r7
 8002cc0:	460d      	mov	r5, r1
 8002cc2:	d9f4      	bls.n	8002cae <_printf_i+0x11a>
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d10b      	bne.n	8002ce0 <_printf_i+0x14c>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	07df      	lsls	r7, r3, #31
 8002ccc:	d508      	bpl.n	8002ce0 <_printf_i+0x14c>
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	6861      	ldr	r1, [r4, #4]
 8002cd2:	4299      	cmp	r1, r3
 8002cd4:	bfde      	ittt	le
 8002cd6:	2330      	movle	r3, #48	; 0x30
 8002cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ce0:	1b92      	subs	r2, r2, r6
 8002ce2:	6122      	str	r2, [r4, #16]
 8002ce4:	f8cd a000 	str.w	sl, [sp]
 8002ce8:	464b      	mov	r3, r9
 8002cea:	aa03      	add	r2, sp, #12
 8002cec:	4621      	mov	r1, r4
 8002cee:	4640      	mov	r0, r8
 8002cf0:	f7ff fee2 	bl	8002ab8 <_printf_common>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d14c      	bne.n	8002d92 <_printf_i+0x1fe>
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	b004      	add	sp, #16
 8002cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d02:	4835      	ldr	r0, [pc, #212]	; (8002dd8 <_printf_i+0x244>)
 8002d04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	680e      	ldr	r6, [r1, #0]
 8002d0c:	061f      	lsls	r7, r3, #24
 8002d0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d12:	600e      	str	r6, [r1, #0]
 8002d14:	d514      	bpl.n	8002d40 <_printf_i+0x1ac>
 8002d16:	07d9      	lsls	r1, r3, #31
 8002d18:	bf44      	itt	mi
 8002d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8002d1e:	6023      	strmi	r3, [r4, #0]
 8002d20:	b91d      	cbnz	r5, 8002d2a <_printf_i+0x196>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	f023 0320 	bic.w	r3, r3, #32
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	e7b0      	b.n	8002c90 <_printf_i+0xfc>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	f043 0320 	orr.w	r3, r3, #32
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	2378      	movs	r3, #120	; 0x78
 8002d38:	4828      	ldr	r0, [pc, #160]	; (8002ddc <_printf_i+0x248>)
 8002d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d3e:	e7e3      	b.n	8002d08 <_printf_i+0x174>
 8002d40:	065e      	lsls	r6, r3, #25
 8002d42:	bf48      	it	mi
 8002d44:	b2ad      	uxthmi	r5, r5
 8002d46:	e7e6      	b.n	8002d16 <_printf_i+0x182>
 8002d48:	4616      	mov	r6, r2
 8002d4a:	e7bb      	b.n	8002cc4 <_printf_i+0x130>
 8002d4c:	680b      	ldr	r3, [r1, #0]
 8002d4e:	6826      	ldr	r6, [r4, #0]
 8002d50:	6960      	ldr	r0, [r4, #20]
 8002d52:	1d1d      	adds	r5, r3, #4
 8002d54:	600d      	str	r5, [r1, #0]
 8002d56:	0635      	lsls	r5, r6, #24
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	d501      	bpl.n	8002d60 <_printf_i+0x1cc>
 8002d5c:	6018      	str	r0, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <_printf_i+0x1d2>
 8002d60:	0671      	lsls	r1, r6, #25
 8002d62:	d5fb      	bpl.n	8002d5c <_printf_i+0x1c8>
 8002d64:	8018      	strh	r0, [r3, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	6123      	str	r3, [r4, #16]
 8002d6a:	4616      	mov	r6, r2
 8002d6c:	e7ba      	b.n	8002ce4 <_printf_i+0x150>
 8002d6e:	680b      	ldr	r3, [r1, #0]
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	600a      	str	r2, [r1, #0]
 8002d74:	681e      	ldr	r6, [r3, #0]
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7fd fa30 	bl	80001e0 <memchr>
 8002d80:	b108      	cbz	r0, 8002d86 <_printf_i+0x1f2>
 8002d82:	1b80      	subs	r0, r0, r6
 8002d84:	6060      	str	r0, [r4, #4]
 8002d86:	6863      	ldr	r3, [r4, #4]
 8002d88:	6123      	str	r3, [r4, #16]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d90:	e7a8      	b.n	8002ce4 <_printf_i+0x150>
 8002d92:	6923      	ldr	r3, [r4, #16]
 8002d94:	4632      	mov	r2, r6
 8002d96:	4649      	mov	r1, r9
 8002d98:	4640      	mov	r0, r8
 8002d9a:	47d0      	blx	sl
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d0ab      	beq.n	8002cf8 <_printf_i+0x164>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	079b      	lsls	r3, r3, #30
 8002da4:	d413      	bmi.n	8002dce <_printf_i+0x23a>
 8002da6:	68e0      	ldr	r0, [r4, #12]
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	4298      	cmp	r0, r3
 8002dac:	bfb8      	it	lt
 8002dae:	4618      	movlt	r0, r3
 8002db0:	e7a4      	b.n	8002cfc <_printf_i+0x168>
 8002db2:	2301      	movs	r3, #1
 8002db4:	4632      	mov	r2, r6
 8002db6:	4649      	mov	r1, r9
 8002db8:	4640      	mov	r0, r8
 8002dba:	47d0      	blx	sl
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d09b      	beq.n	8002cf8 <_printf_i+0x164>
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	9903      	ldr	r1, [sp, #12]
 8002dc6:	1a5b      	subs	r3, r3, r1
 8002dc8:	42ab      	cmp	r3, r5
 8002dca:	dcf2      	bgt.n	8002db2 <_printf_i+0x21e>
 8002dcc:	e7eb      	b.n	8002da6 <_printf_i+0x212>
 8002dce:	2500      	movs	r5, #0
 8002dd0:	f104 0619 	add.w	r6, r4, #25
 8002dd4:	e7f5      	b.n	8002dc2 <_printf_i+0x22e>
 8002dd6:	bf00      	nop
 8002dd8:	0800308d 	.word	0x0800308d
 8002ddc:	0800309e 	.word	0x0800309e

08002de0 <memcpy>:
 8002de0:	440a      	add	r2, r1
 8002de2:	4291      	cmp	r1, r2
 8002de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002de8:	d100      	bne.n	8002dec <memcpy+0xc>
 8002dea:	4770      	bx	lr
 8002dec:	b510      	push	{r4, lr}
 8002dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002df6:	4291      	cmp	r1, r2
 8002df8:	d1f9      	bne.n	8002dee <memcpy+0xe>
 8002dfa:	bd10      	pop	{r4, pc}

08002dfc <memmove>:
 8002dfc:	4288      	cmp	r0, r1
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	eb01 0402 	add.w	r4, r1, r2
 8002e04:	d902      	bls.n	8002e0c <memmove+0x10>
 8002e06:	4284      	cmp	r4, r0
 8002e08:	4623      	mov	r3, r4
 8002e0a:	d807      	bhi.n	8002e1c <memmove+0x20>
 8002e0c:	1e43      	subs	r3, r0, #1
 8002e0e:	42a1      	cmp	r1, r4
 8002e10:	d008      	beq.n	8002e24 <memmove+0x28>
 8002e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e1a:	e7f8      	b.n	8002e0e <memmove+0x12>
 8002e1c:	4402      	add	r2, r0
 8002e1e:	4601      	mov	r1, r0
 8002e20:	428a      	cmp	r2, r1
 8002e22:	d100      	bne.n	8002e26 <memmove+0x2a>
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e2e:	e7f7      	b.n	8002e20 <memmove+0x24>

08002e30 <_free_r>:
 8002e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d048      	beq.n	8002ec8 <_free_r+0x98>
 8002e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e3a:	9001      	str	r0, [sp, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e42:	bfb8      	it	lt
 8002e44:	18e4      	addlt	r4, r4, r3
 8002e46:	f000 f8d3 	bl	8002ff0 <__malloc_lock>
 8002e4a:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <_free_r+0x9c>)
 8002e4c:	9801      	ldr	r0, [sp, #4]
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	4615      	mov	r5, r2
 8002e52:	b933      	cbnz	r3, 8002e62 <_free_r+0x32>
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6014      	str	r4, [r2, #0]
 8002e58:	b003      	add	sp, #12
 8002e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e5e:	f000 b8cd 	b.w	8002ffc <__malloc_unlock>
 8002e62:	42a3      	cmp	r3, r4
 8002e64:	d90b      	bls.n	8002e7e <_free_r+0x4e>
 8002e66:	6821      	ldr	r1, [r4, #0]
 8002e68:	1862      	adds	r2, r4, r1
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bf04      	itt	eq
 8002e6e:	681a      	ldreq	r2, [r3, #0]
 8002e70:	685b      	ldreq	r3, [r3, #4]
 8002e72:	6063      	str	r3, [r4, #4]
 8002e74:	bf04      	itt	eq
 8002e76:	1852      	addeq	r2, r2, r1
 8002e78:	6022      	streq	r2, [r4, #0]
 8002e7a:	602c      	str	r4, [r5, #0]
 8002e7c:	e7ec      	b.n	8002e58 <_free_r+0x28>
 8002e7e:	461a      	mov	r2, r3
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	b10b      	cbz	r3, 8002e88 <_free_r+0x58>
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	d9fa      	bls.n	8002e7e <_free_r+0x4e>
 8002e88:	6811      	ldr	r1, [r2, #0]
 8002e8a:	1855      	adds	r5, r2, r1
 8002e8c:	42a5      	cmp	r5, r4
 8002e8e:	d10b      	bne.n	8002ea8 <_free_r+0x78>
 8002e90:	6824      	ldr	r4, [r4, #0]
 8002e92:	4421      	add	r1, r4
 8002e94:	1854      	adds	r4, r2, r1
 8002e96:	42a3      	cmp	r3, r4
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	d1dd      	bne.n	8002e58 <_free_r+0x28>
 8002e9c:	681c      	ldr	r4, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	6053      	str	r3, [r2, #4]
 8002ea2:	4421      	add	r1, r4
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	e7d7      	b.n	8002e58 <_free_r+0x28>
 8002ea8:	d902      	bls.n	8002eb0 <_free_r+0x80>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	6003      	str	r3, [r0, #0]
 8002eae:	e7d3      	b.n	8002e58 <_free_r+0x28>
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	1961      	adds	r1, r4, r5
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	bf04      	itt	eq
 8002eb8:	6819      	ldreq	r1, [r3, #0]
 8002eba:	685b      	ldreq	r3, [r3, #4]
 8002ebc:	6063      	str	r3, [r4, #4]
 8002ebe:	bf04      	itt	eq
 8002ec0:	1949      	addeq	r1, r1, r5
 8002ec2:	6021      	streq	r1, [r4, #0]
 8002ec4:	6054      	str	r4, [r2, #4]
 8002ec6:	e7c7      	b.n	8002e58 <_free_r+0x28>
 8002ec8:	b003      	add	sp, #12
 8002eca:	bd30      	pop	{r4, r5, pc}
 8002ecc:	200000cc 	.word	0x200000cc

08002ed0 <_malloc_r>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	1ccd      	adds	r5, r1, #3
 8002ed4:	f025 0503 	bic.w	r5, r5, #3
 8002ed8:	3508      	adds	r5, #8
 8002eda:	2d0c      	cmp	r5, #12
 8002edc:	bf38      	it	cc
 8002ede:	250c      	movcc	r5, #12
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	db01      	blt.n	8002eea <_malloc_r+0x1a>
 8002ee6:	42a9      	cmp	r1, r5
 8002ee8:	d903      	bls.n	8002ef2 <_malloc_r+0x22>
 8002eea:	230c      	movs	r3, #12
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	2000      	movs	r0, #0
 8002ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef2:	f000 f87d 	bl	8002ff0 <__malloc_lock>
 8002ef6:	4921      	ldr	r1, [pc, #132]	; (8002f7c <_malloc_r+0xac>)
 8002ef8:	680a      	ldr	r2, [r1, #0]
 8002efa:	4614      	mov	r4, r2
 8002efc:	b99c      	cbnz	r4, 8002f26 <_malloc_r+0x56>
 8002efe:	4f20      	ldr	r7, [pc, #128]	; (8002f80 <_malloc_r+0xb0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b923      	cbnz	r3, 8002f0e <_malloc_r+0x3e>
 8002f04:	4621      	mov	r1, r4
 8002f06:	4630      	mov	r0, r6
 8002f08:	f000 f862 	bl	8002fd0 <_sbrk_r>
 8002f0c:	6038      	str	r0, [r7, #0]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 f85d 	bl	8002fd0 <_sbrk_r>
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d123      	bne.n	8002f62 <_malloc_r+0x92>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f000 f86c 	bl	8002ffc <__malloc_unlock>
 8002f24:	e7e3      	b.n	8002eee <_malloc_r+0x1e>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	1b5b      	subs	r3, r3, r5
 8002f2a:	d417      	bmi.n	8002f5c <_malloc_r+0x8c>
 8002f2c:	2b0b      	cmp	r3, #11
 8002f2e:	d903      	bls.n	8002f38 <_malloc_r+0x68>
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	441c      	add	r4, r3
 8002f34:	6025      	str	r5, [r4, #0]
 8002f36:	e004      	b.n	8002f42 <_malloc_r+0x72>
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	42a2      	cmp	r2, r4
 8002f3c:	bf0c      	ite	eq
 8002f3e:	600b      	streq	r3, [r1, #0]
 8002f40:	6053      	strne	r3, [r2, #4]
 8002f42:	4630      	mov	r0, r6
 8002f44:	f000 f85a 	bl	8002ffc <__malloc_unlock>
 8002f48:	f104 000b 	add.w	r0, r4, #11
 8002f4c:	1d23      	adds	r3, r4, #4
 8002f4e:	f020 0007 	bic.w	r0, r0, #7
 8002f52:	1ac2      	subs	r2, r0, r3
 8002f54:	d0cc      	beq.n	8002ef0 <_malloc_r+0x20>
 8002f56:	1a1b      	subs	r3, r3, r0
 8002f58:	50a3      	str	r3, [r4, r2]
 8002f5a:	e7c9      	b.n	8002ef0 <_malloc_r+0x20>
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	6864      	ldr	r4, [r4, #4]
 8002f60:	e7cc      	b.n	8002efc <_malloc_r+0x2c>
 8002f62:	1cc4      	adds	r4, r0, #3
 8002f64:	f024 0403 	bic.w	r4, r4, #3
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d0e3      	beq.n	8002f34 <_malloc_r+0x64>
 8002f6c:	1a21      	subs	r1, r4, r0
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f000 f82e 	bl	8002fd0 <_sbrk_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d1dd      	bne.n	8002f34 <_malloc_r+0x64>
 8002f78:	e7cf      	b.n	8002f1a <_malloc_r+0x4a>
 8002f7a:	bf00      	nop
 8002f7c:	200000cc 	.word	0x200000cc
 8002f80:	200000d0 	.word	0x200000d0

08002f84 <_realloc_r>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	4607      	mov	r7, r0
 8002f88:	4614      	mov	r4, r2
 8002f8a:	460e      	mov	r6, r1
 8002f8c:	b921      	cbnz	r1, 8002f98 <_realloc_r+0x14>
 8002f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f92:	4611      	mov	r1, r2
 8002f94:	f7ff bf9c 	b.w	8002ed0 <_malloc_r>
 8002f98:	b922      	cbnz	r2, 8002fa4 <_realloc_r+0x20>
 8002f9a:	f7ff ff49 	bl	8002e30 <_free_r>
 8002f9e:	4625      	mov	r5, r4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa4:	f000 f830 	bl	8003008 <_malloc_usable_size_r>
 8002fa8:	42a0      	cmp	r0, r4
 8002faa:	d20f      	bcs.n	8002fcc <_realloc_r+0x48>
 8002fac:	4621      	mov	r1, r4
 8002fae:	4638      	mov	r0, r7
 8002fb0:	f7ff ff8e 	bl	8002ed0 <_malloc_r>
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d0f2      	beq.n	8002fa0 <_realloc_r+0x1c>
 8002fba:	4631      	mov	r1, r6
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	f7ff ff0f 	bl	8002de0 <memcpy>
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	f7ff ff33 	bl	8002e30 <_free_r>
 8002fca:	e7e9      	b.n	8002fa0 <_realloc_r+0x1c>
 8002fcc:	4635      	mov	r5, r6
 8002fce:	e7e7      	b.n	8002fa0 <_realloc_r+0x1c>

08002fd0 <_sbrk_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4d06      	ldr	r5, [pc, #24]	; (8002fec <_sbrk_r+0x1c>)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	f7fd fda4 	bl	8000b28 <_sbrk>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_sbrk_r+0x1a>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_sbrk_r+0x1a>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	20000174 	.word	0x20000174

08002ff0 <__malloc_lock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	; (8002ff8 <__malloc_lock+0x8>)
 8002ff2:	f000 b811 	b.w	8003018 <__retarget_lock_acquire_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	2000017c 	.word	0x2000017c

08002ffc <__malloc_unlock>:
 8002ffc:	4801      	ldr	r0, [pc, #4]	; (8003004 <__malloc_unlock+0x8>)
 8002ffe:	f000 b80c 	b.w	800301a <__retarget_lock_release_recursive>
 8003002:	bf00      	nop
 8003004:	2000017c 	.word	0x2000017c

08003008 <_malloc_usable_size_r>:
 8003008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800300c:	1f18      	subs	r0, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	bfbc      	itt	lt
 8003012:	580b      	ldrlt	r3, [r1, r0]
 8003014:	18c0      	addlt	r0, r0, r3
 8003016:	4770      	bx	lr

08003018 <__retarget_lock_acquire_recursive>:
 8003018:	4770      	bx	lr

0800301a <__retarget_lock_release_recursive>:
 800301a:	4770      	bx	lr

0800301c <_init>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr

08003028 <_fini>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr
