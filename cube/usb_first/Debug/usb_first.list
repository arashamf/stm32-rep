
usb_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f80  08006f80  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f88  08006f88  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  200001e0  08007170  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000ba4  08007170  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013797  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd1  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  00036678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00037358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232e1  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6d8  00000000  00000000  0005b1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5c53  00000000  00000000  00068899  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e4ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  0012e568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ee8 	.word	0x08006ee8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08006ee8 	.word	0x08006ee8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fafa 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f8e8 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f97a 	bl	80007dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004e8:	f000 f94e 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f005 fef0 	bl	80062d0 <MX_USB_DEVICE_Init>
  while (1)
  	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay (PERIOD);
 80004f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f4:	f000 fb60 	bl	8000bb8 <HAL_Delay>
	if (countn > 3)
 80004f8:	4b65      	ldr	r3, [pc, #404]	; (8000690 <main+0x1b8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d902      	bls.n	8000506 <main+0x2e>
		countn = 0;
 8000500:	4b63      	ldr	r3, [pc, #396]	; (8000690 <main+0x1b8>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	if(*message_rx != '\0') //проверяем буффер приёма, приём с помощью ф-и CDC_Receive_FS в прерывании
 8000506:	4b63      	ldr	r3, [pc, #396]	; (8000694 <main+0x1bc>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00e      	beq.n	800052c <main+0x54>
		{
		//передаём хосту полученные от него же данные 	
		CDC_Transmit_FS((unsigned char*)message_rx, strlen(message_rx)); //strlen(message_rx) - количество элементов массива до знака \0;
 800050e:	4861      	ldr	r0, [pc, #388]	; (8000694 <main+0x1bc>)
 8000510:	f7ff fe5a 	bl	80001c8 <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b29b      	uxth	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	485e      	ldr	r0, [pc, #376]	; (8000694 <main+0x1bc>)
 800051c:	f005 ff9a 	bl	8006454 <CDC_Transmit_FS>
		memset(message_rx, '\0', sizeof(message_rx)); //очищаем буфер приёма
 8000520:	2214      	movs	r2, #20
 8000522:	2100      	movs	r1, #0
 8000524:	485b      	ldr	r0, [pc, #364]	; (8000694 <main+0x1bc>)
 8000526:	f006 fc1c 	bl	8006d62 <memset>
 800052a:	e7e1      	b.n	80004f0 <main+0x18>
		}
	else
		{
		switch (countn)
 800052c:	4b58      	ldr	r3, [pc, #352]	; (8000690 <main+0x1b8>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b03      	cmp	r3, #3
 8000532:	f200 80ab 	bhi.w	800068c <main+0x1b4>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <main+0x64>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	0800054d 	.word	0x0800054d
 8000540:	0800059d 	.word	0x0800059d
 8000544:	080005ed 	.word	0x080005ed
 8000548:	0800063d 	.word	0x0800063d
			{
				case 0:
					countn++;
 800054c:	4b50      	ldr	r3, [pc, #320]	; (8000690 <main+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b4e      	ldr	r3, [pc, #312]	; (8000690 <main+0x1b8>)
 8000556:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055e:	484e      	ldr	r0, [pc, #312]	; (8000698 <main+0x1c0>)
 8000560:	f000 fdf8 	bl	8001154 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	484b      	ldr	r0, [pc, #300]	; (8000698 <main+0x1c0>)
 800056c:	f000 fdf2 	bl	8001154 <HAL_GPIO_WritePin>
					sprintf (message_tx, "led_1\r\n");
 8000570:	4a4a      	ldr	r2, [pc, #296]	; (800069c <main+0x1c4>)
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <main+0x1c8>)
 8000574:	cb03      	ldmia	r3!, {r0, r1}
 8000576:	6010      	str	r0, [r2, #0]
 8000578:	6051      	str	r1, [r2, #4]
					CDC_Transmit_FS((unsigned char*)message_tx, strlen(message_tx)); //usbd_cdc_if.h
 800057a:	4848      	ldr	r0, [pc, #288]	; (800069c <main+0x1c4>)
 800057c:	f7ff fe24 	bl	80001c8 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29b      	uxth	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	4845      	ldr	r0, [pc, #276]	; (800069c <main+0x1c4>)
 8000588:	f005 ff64 	bl	8006454 <CDC_Transmit_FS>
					HAL_UART_Transmit (&huart3, (unsigned char*)message_tx, 8, 0xFFFF);
 800058c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000590:	2208      	movs	r2, #8
 8000592:	4942      	ldr	r1, [pc, #264]	; (800069c <main+0x1c4>)
 8000594:	4843      	ldr	r0, [pc, #268]	; (80006a4 <main+0x1cc>)
 8000596:	f002 fc30 	bl	8002dfa <HAL_UART_Transmit>
					break;
 800059a:	e078      	b.n	800068e <main+0x1b6>
				case 1:
					countn++;
 800059c:	4b3c      	ldr	r3, [pc, #240]	; (8000690 <main+0x1b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x1b8>)
 80005a6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	483a      	ldr	r0, [pc, #232]	; (8000698 <main+0x1c0>)
 80005b0:	f000 fdd0 	bl	8001154 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4837      	ldr	r0, [pc, #220]	; (8000698 <main+0x1c0>)
 80005bc:	f000 fdca 	bl	8001154 <HAL_GPIO_WritePin>
					sprintf (message_tx, "led_2\r\n");
 80005c0:	4a36      	ldr	r2, [pc, #216]	; (800069c <main+0x1c4>)
 80005c2:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <main+0x1d0>)
 80005c4:	cb03      	ldmia	r3!, {r0, r1}
 80005c6:	6010      	str	r0, [r2, #0]
 80005c8:	6051      	str	r1, [r2, #4]
					CDC_Transmit_FS((unsigned char*)message_tx, strlen(message_tx));
 80005ca:	4834      	ldr	r0, [pc, #208]	; (800069c <main+0x1c4>)
 80005cc:	f7ff fdfc 	bl	80001c8 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0x1c4>)
 80005d8:	f005 ff3c 	bl	8006454 <CDC_Transmit_FS>
					HAL_UART_Transmit (&huart3, (unsigned char*)message_tx, 8, 0xFFFF); //чтобы не было warningов
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	2208      	movs	r2, #8
 80005e2:	492e      	ldr	r1, [pc, #184]	; (800069c <main+0x1c4>)
 80005e4:	482f      	ldr	r0, [pc, #188]	; (80006a4 <main+0x1cc>)
 80005e6:	f002 fc08 	bl	8002dfa <HAL_UART_Transmit>
					break;
 80005ea:	e050      	b.n	800068e <main+0x1b6>
				case 2:
					countn++;
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <main+0x1b8>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <main+0x1b8>)
 80005f6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4826      	ldr	r0, [pc, #152]	; (8000698 <main+0x1c0>)
 8000600:	f000 fda8 	bl	8001154 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4823      	ldr	r0, [pc, #140]	; (8000698 <main+0x1c0>)
 800060c:	f000 fda2 	bl	8001154 <HAL_GPIO_WritePin>
					sprintf (message_tx, "led_3\r\n");
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <main+0x1c4>)
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <main+0x1d4>)
 8000614:	cb03      	ldmia	r3!, {r0, r1}
 8000616:	6010      	str	r0, [r2, #0]
 8000618:	6051      	str	r1, [r2, #4]
					CDC_Transmit_FS((unsigned char*)message_tx, strlen(message_tx));
 800061a:	4820      	ldr	r0, [pc, #128]	; (800069c <main+0x1c4>)
 800061c:	f7ff fdd4 	bl	80001c8 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <main+0x1c4>)
 8000628:	f005 ff14 	bl	8006454 <CDC_Transmit_FS>
					HAL_UART_Transmit (&huart3, (unsigned char*)message_tx, 8, 0xFFFF);
 800062c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000630:	2208      	movs	r2, #8
 8000632:	491a      	ldr	r1, [pc, #104]	; (800069c <main+0x1c4>)
 8000634:	481b      	ldr	r0, [pc, #108]	; (80006a4 <main+0x1cc>)
 8000636:	f002 fbe0 	bl	8002dfa <HAL_UART_Transmit>
					break;
 800063a:	e028      	b.n	800068e <main+0x1b6>
				case 3:
					countn++;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0x1b8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <main+0x1b8>)
 8000646:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <main+0x1c0>)
 8000650:	f000 fd80 	bl	8001154 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <main+0x1c0>)
 800065c:	f000 fd7a 	bl	8001154 <HAL_GPIO_WritePin>
					sprintf (message_tx, "led_4\r\n");
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <main+0x1c4>)
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0x1d8>)
 8000664:	cb03      	ldmia	r3!, {r0, r1}
 8000666:	6010      	str	r0, [r2, #0]
 8000668:	6051      	str	r1, [r2, #4]
					CDC_Transmit_FS((unsigned char*)message_tx, strlen(message_tx));
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x1c4>)
 800066c:	f7ff fdac 	bl	80001c8 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29b      	uxth	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <main+0x1c4>)
 8000678:	f005 feec 	bl	8006454 <CDC_Transmit_FS>
					HAL_UART_Transmit (&huart3, (unsigned char*)message_tx, 8, 0xFFFF);
 800067c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000680:	2208      	movs	r2, #8
 8000682:	4906      	ldr	r1, [pc, #24]	; (800069c <main+0x1c4>)
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x1cc>)
 8000686:	f002 fbb8 	bl	8002dfa <HAL_UART_Transmit>
					break;
 800068a:	e000      	b.n	800068e <main+0x1b6>
				default: break;
 800068c:	bf00      	nop
	HAL_Delay (PERIOD);
 800068e:	e72f      	b.n	80004f0 <main+0x18>
 8000690:	20000260 	.word	0x20000260
 8000694:	20000264 	.word	0x20000264
 8000698:	40020c00 	.word	0x40020c00
 800069c:	2000024c 	.word	0x2000024c
 80006a0:	08006f00 	.word	0x08006f00
 80006a4:	2000020c 	.word	0x2000020c
 80006a8:	08006f08 	.word	0x08006f08
 80006ac:	08006f10 	.word	0x08006f10
 80006b0:	08006f18 	.word	0x08006f18

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fb4d 	bl	8006d62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	; 0xa8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f001 feaf 	bl	800249c <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f8aa 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800075a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f908 	bl	800297c <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f893 	bl	800089c <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART3_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 8000794:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007c0:	f002 face 	bl	8002d60 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f867 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000020c 	.word	0x2000020c
 80007d8:	40004800 	.word	0x40004800

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_GPIO_Init+0xb8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a26      	ldr	r2, [pc, #152]	; (8000894 <MX_GPIO_Init+0xb8>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_GPIO_Init+0xb8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_GPIO_Init+0xb8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xbc>)
 800086a:	f000 fc73 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800086e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000888:	f000 faca 	bl	8000e20 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020c00 	.word	0x40020c00

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <HAL_MspInit+0x4c>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ea:	2007      	movs	r0, #7
 80008ec:	f000 fa56 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_UART_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12c      	bne.n	8000978 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_UART_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000956:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000968:	2307      	movs	r3, #7
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_MspInit+0x8c>)
 8000974:	f000 fa54 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004800 	.word	0x40004800
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8ca 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <OTG_FS_IRQHandler+0x10>)
 80009ee:	f000 fd1a 	bl	8001426 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000798 	.word	0x20000798

080009fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x50>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x16>
		heap_end = &end;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <_sbrk+0x50>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <_sbrk+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <_sbrk+0x50>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <_sbrk+0x50>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	466a      	mov	r2, sp
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d907      	bls.n	8000a36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a26:	f006 f957 	bl	8006cd8 <__errno>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	e006      	b.n	8000a44 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <_sbrk+0x50>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <_sbrk+0x50>)
 8000a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001fc 	.word	0x200001fc
 8000a50:	20000ba8 	.word	0x20000ba8

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x28>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x28>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0x28>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ffd3 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f006 f919 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fd11 	bl	80004d8 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000abc:	08006f90 	.word	0x08006f90
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000ac8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000acc:	20000ba4 	.word	0x20000ba4

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f94d 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fed0 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f965 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f92d 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000278 	.word	0x20000278

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000278 	.word	0x20000278

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff ffee 	bl	8000ba0 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_Delay+0x40>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffde 	bl	8000ba0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d00b      	beq.n	8000e7a <HAL_GPIO_Init+0x5a>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6e:	2b11      	cmp	r3, #17
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0xfc>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <HAL_GPIO_Init+0x308>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5e      	ldr	r2, [pc, #376]	; (8001128 <HAL_GPIO_Init+0x308>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <HAL_GPIO_Init+0x308>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a50      	ldr	r2, [pc, #320]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x31c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x320>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x324>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x328>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x32c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4934      	ldr	r1, [pc, #208]	; (800112c <HAL_GPIO_Init+0x30c>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <HAL_GPIO_Init+0x330>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b4:	4a26      	ldr	r2, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x330>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_GPIO_Init+0x330>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_GPIO_Init+0x330>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x330>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_GPIO_Init+0x330>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	3724      	adds	r7, #36	; 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40021c00 	.word	0x40021c00
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001188:	b08f      	sub	sp, #60	; 0x3c
 800118a:	af0a      	add	r7, sp, #40	; 0x28
 800118c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e10f      	b.n	80013b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f005 fa82 	bl	80066bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fb83 	bl	80038e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	687e      	ldr	r6, [r7, #4]
 80011e4:	466d      	mov	r5, sp
 80011e6:	f106 0410 	add.w	r4, r6, #16
 80011ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fa:	1d33      	adds	r3, r6, #4
 80011fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f002 fa5a 	bl	80036b8 <USB_CoreInit>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0d0      	b.n	80013b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fb71 	bl	8003904 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e04a      	b.n	80012be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	333d      	adds	r3, #61	; 0x3d
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	333c      	adds	r3, #60	; 0x3c
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	b298      	uxth	r0, r3
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3342      	adds	r3, #66	; 0x42
 8001264:	4602      	mov	r2, r0
 8001266:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	333f      	adds	r3, #63	; 0x3f
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3344      	adds	r3, #68	; 0x44
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	3348      	adds	r3, #72	; 0x48
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3350      	adds	r3, #80	; 0x50
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3af      	bcc.n	8001228 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e044      	b.n	8001358 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	3301      	adds	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d3b5      	bcc.n	80012ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	687e      	ldr	r6, [r7, #4]
 800136a:	466d      	mov	r5, sp
 800136c:	f106 0410 	add.w	r4, r6, #16
 8001370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800137c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001380:	1d33      	adds	r3, r6, #4
 8001382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001384:	6838      	ldr	r0, [r7, #0]
 8001386:	f002 fae7 	bl	8003958 <USB_DevInit>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e00d      	b.n	80013b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fadc 	bl	800496e <USB_DevDisconnect>

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_PCD_Start+0x1c>
 80013d8:	2302      	movs	r3, #2
 80013da:	e020      	b.n	800141e <HAL_PCD_Start+0x5e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d109      	bne.n	8001400 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d005      	beq.n	8001400 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fa9a 	bl	800493e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fa56 	bl	80038c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b08d      	sub	sp, #52	; 0x34
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fb41 	bl	8004ac4 <USB_GetMode>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 838e 	bne.w	8001b66 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 faa5 	bl	800499e <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8384 	beq.w	8001b64 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fa9c 	bl	800499e <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b02      	cmp	r3, #2
 800146e:	d107      	bne.n	8001480 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f002 0202 	and.w	r2, r2, #2
 800147e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fa8a 	bl	800499e <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001490:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001494:	d17b      	bne.n	800158e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fa90 	bl	80049c4 <USB_ReadDevAllOutEpInterrupt>
 80014a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014a6:	e06f      	b.n	8001588 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d064      	beq.n	800157c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fab5 	bl	8004a2c <USB_ReadDevOutEPInterrupt>
 80014c2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	2301      	movs	r3, #1
 80014de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fe0e 	bl	8002104 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 ff0d 	bl	8002314 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2308      	movs	r3, #8
 800150a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001522:	461a      	mov	r2, r3
 8001524:	2310      	movs	r3, #16
 8001526:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f003 0320 	and.w	r3, r3, #32
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001544:	461a      	mov	r2, r3
 8001546:	2101      	movs	r1, #1
 8001548:	f003 fb00 	bl	8004b4c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001558:	461a      	mov	r2, r3
 800155a:	2320      	movs	r3, #32
 800155c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3301      	adds	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	d18c      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fa03 	bl	800499e <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015a2:	f040 80c4 	bne.w	800172e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fa24 	bl	80049f8 <USB_ReadDevAllInEpInterrupt>
 80015b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015b6:	e0b6      	b.n	8001726 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80ab 	beq.w	800171a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fa4a 	bl	8004a68 <USB_ReadDevInEPInterrupt>
 80015d4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	2201      	movs	r2, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69f9      	ldr	r1, [r7, #28]
 80015fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001600:	4013      	ands	r3, r2
 8001602:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001610:	461a      	mov	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d11b      	bne.n	8001656 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3348      	adds	r3, #72	; 0x48
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4403      	add	r3, r0
 800163e:	3344      	adds	r3, #68	; 0x44
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4419      	add	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3348      	adds	r3, #72	; 0x48
 8001654:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4619      	mov	r1, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f005 f8bc 	bl	80067da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d116      	bne.n	8001698 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <HAL_PCD_IRQHandler+0x272>
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3350      	adds	r3, #80	; 0x50
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001690:	461a      	mov	r2, r3
 8001692:	2101      	movs	r1, #1
 8001694:	f003 fa5a 	bl	8004b4c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ae:	461a      	mov	r2, r3
 80016b0:	2308      	movs	r3, #8
 80016b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ca:	461a      	mov	r2, r3
 80016cc:	2310      	movs	r3, #16
 80016ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	461a      	mov	r2, r3
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001702:	461a      	mov	r2, r3
 8001704:	2302      	movs	r3, #2
 8001706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fc67 	bl	8001fe8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	3301      	adds	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f af45 	bne.w	80015b8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 f933 	bl	800499e <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800173e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001742:	d122      	bne.n	800178a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fe89 	bl	8002484 <HAL_PCDEx_LPM_Callback>
 8001772:	e002      	b.n	800177a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f005 f8a7 	bl	80068c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f905 	bl	800499e <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179e:	d112      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f005 f863 	bl	800687c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017c4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 f8e7 	bl	800499e <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017da:	f040 80a7 	bne.w	800192c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2110      	movs	r1, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fa1f 	bl	8003c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001802:	e036      	b.n	8001872 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001810:	461a      	mov	r2, r3
 8001812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001816:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001828:	0151      	lsls	r1, r2, #5
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	440a      	add	r2, r1
 800182e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001832:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001836:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001844:	461a      	mov	r2, r3
 8001846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800184a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185c:	0151      	lsls	r1, r2, #5
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	440a      	add	r2, r1
 8001862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800186a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	3301      	adds	r3, #1
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d3c3      	bcc.n	8001804 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800188e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	2b00      	cmp	r3, #0
 8001896:	d016      	beq.n	80018c6 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f043 030b 	orr.w	r3, r3, #11
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
 80018c4:	e015      	b.n	80018f2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ec:	f043 030b 	orr.w	r3, r3, #11
 80018f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001900:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001904:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001916:	461a      	mov	r2, r3
 8001918:	f003 f918 	bl	8004b4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f834 	bl	800499e <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001940:	d124      	bne.n	800198c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f8ca 	bl	8004ae0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 f9d4 	bl	8003cfe <USB_GetDevSpeed>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	f001 f9c9 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8001966:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	4620      	mov	r0, r4
 8001972:	f001 ff03 	bl	800377c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f004 ff57 	bl	800682a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f804 	bl	800499e <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b10      	cmp	r3, #16
 800199e:	d161      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0210 	bic.w	r2, r2, #16
 80019ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	0c5b      	lsrs	r3, r3, #17
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d124      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d035      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	6a38      	ldr	r0, [r7, #32]
 80019fc:	f002 fe7c 	bl	80046f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a1e:	441a      	add	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	619a      	str	r2, [r3, #24]
 8001a24:	e016      	b.n	8001a54 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	0c5b      	lsrs	r3, r3, #17
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d110      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6a38      	ldr	r0, [r7, #32]
 8001a3e:	f002 fe5b 	bl	80046f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a4e:	441a      	add	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0210 	orr.w	r2, r2, #16
 8001a62:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 ff98 	bl	800499e <USB_ReadInterrupts>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f004 fec8 	bl	800680e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 0208 	and.w	r2, r2, #8
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 ff83 	bl	800499e <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f004 ff2a 	bl	8006908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 ff68 	bl	800499e <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad8:	d10f      	bne.n	8001afa <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f004 fefd 	bl	80068e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 ff4d 	bl	800499e <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f004 ff0b 	bl	800692c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 ff37 	bl	800499e <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d115      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f004 fefb 	bl	8006948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e000      	b.n	8001b66 <HAL_PCD_IRQHandler+0x740>
      return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3734      	adds	r7, #52	; 0x34
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_SetAddress+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e013      	b.n	8001bae <HAL_PCD_SetAddress+0x42>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fea7 	bl	80048f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	70fb      	strb	r3, [r7, #3]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	803b      	strh	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0f      	bge.n	8001bfc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	3338      	adds	r3, #56	; 0x38
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	705a      	strb	r2, [r3, #1]
 8001bfa:	e00f      	b.n	8001c1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 020f 	and.w	r2, r3, #15
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c28:	883a      	ldrh	r2, [r7, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	78ba      	ldrb	r2, [r7, #2]
 8001c32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c46:	78bb      	ldrb	r3, [r7, #2]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d102      	bne.n	8001c52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_EP_Open+0xaa>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00e      	b.n	8001c7e <HAL_PCD_EP_Open+0xc8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f86a 	bl	8003d48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0f      	bge.n	8001cba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	3338      	adds	r3, #56	; 0x38
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
 8001cb8:	e00f      	b.n	8001cda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_PCD_EP_Close+0x6e>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e00e      	b.n	8001d12 <HAL_PCD_EP_Close+0x8c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 f8a8 	bl	8003e58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	460b      	mov	r3, r1
 8001d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	f003 020f 	and.w	r2, r3, #15
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	f002 fb2b 	bl	80043e8 <USB_EP0StartXfer>
 8001d92:	e008      	b.n	8001da6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6979      	ldr	r1, [r7, #20]
 8001da2:	f002 f8dd 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	3338      	adds	r3, #56	; 0x38
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	f002 fac9 	bl	80043e8 <USB_EP0StartXfer>
 8001e56:	e008      	b.n	8001e6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	f002 f87b 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 020f 	and.w	r2, r3, #15
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d901      	bls.n	8001e92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e050      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da0f      	bge.n	8001eba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 020f 	and.w	r2, r3, #15
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	3338      	adds	r3, #56	; 0x38
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	705a      	strb	r2, [r3, #1]
 8001eb8:	e00d      	b.n	8001ed6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_EP_SetStall+0x82>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e01e      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xc0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68f9      	ldr	r1, [r7, #12]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fc20 	bl	800474a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	b2d9      	uxtb	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f24:	461a      	mov	r2, r3
 8001f26:	f002 fe11 	bl	8004b4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d901      	bls.n	8001f5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e042      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da0f      	bge.n	8001f82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	3338      	adds	r3, #56	; 0x38
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	705a      	strb	r2, [r3, #1]
 8001f80:	e00f      	b.n	8001fa2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_EP_ClrStall+0x86>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e00e      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fc28 	bl	8004826 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3338      	adds	r3, #56	; 0x38
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d901      	bls.n	8002020 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e06c      	b.n	80020fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	429a      	cmp	r2, r3
 8002034:	d902      	bls.n	800203c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3303      	adds	r3, #3
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002044:	e02b      	b.n	800209e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	429a      	cmp	r2, r3
 800205a:	d902      	bls.n	8002062 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3303      	adds	r3, #3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207a:	b2db      	uxtb	r3, r3
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	6978      	ldr	r0, [r7, #20]
 8002082:	f002 fb04 	bl	800468e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	441a      	add	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	441a      	add	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d809      	bhi.n	80020c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020bc:	429a      	cmp	r2, r3
 80020be:	d203      	bcs.n	80020c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1be      	bne.n	8002046 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d811      	bhi.n	80020f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	2201      	movs	r2, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	6939      	ldr	r1, [r7, #16]
 80020f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020f4:	4013      	ands	r3, r2
 80020f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	333c      	adds	r3, #60	; 0x3c
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	f040 80b3 	bne.w	80022a2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d028      	beq.n	8002198 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a70      	ldr	r2, [pc, #448]	; (800230c <PCD_EP_OutXfrComplete_int+0x208>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d90e      	bls.n	800216c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f004 fb07 	bl	8006780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800217c:	461a      	mov	r2, r3
 800217e:	2101      	movs	r1, #1
 8002180:	f002 fce4 	bl	8004b4c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	2308      	movs	r3, #8
 8002194:	6093      	str	r3, [r2, #8]
 8002196:	e0b3      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e0a4      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 809f 	bne.w	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <PCD_EP_OutXfrComplete_int+0x208>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d90f      	bls.n	80021ea <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e6:	6093      	str	r3, [r2, #8]
 80021e8:	e08a      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021fc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	0159      	lsls	r1, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	440b      	add	r3, r1
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002210:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4403      	add	r3, r0
 8002220:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002224:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4403      	add	r3, r0
 8002248:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4419      	add	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4403      	add	r3, r0
 800225e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002262:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f004 fa9a 	bl	80067a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d144      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d138      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	f002 fc56 	bl	8004b4c <USB_EP0_OutStart>
 80022a0:	e02e      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <PCD_EP_OutXfrComplete_int+0x20c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d124      	bne.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	e01a      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	2320      	movs	r3, #32
 80022e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f004 fa59 	bl	80067a4 <HAL_PCD_DataOutStageCallback>
 80022f2:	e005      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f004 fa52 	bl	80067a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	4f54300a 	.word	0x4f54300a
 8002310:	4f54310a 	.word	0x4f54310a

08002314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	333c      	adds	r3, #60	; 0x3c
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d113      	bne.n	8002372 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <PCD_EP_OutSetupPacket_int+0xb8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d922      	bls.n	8002398 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01d      	beq.n	8002398 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002368:	461a      	mov	r2, r3
 800236a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800236e:	6093      	str	r3, [r2, #8]
 8002370:	e012      	b.n	8002398 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10e      	bne.n	8002398 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002390:	461a      	mov	r2, r3
 8002392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f004 f9f1 	bl	8006780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <PCD_EP_OutSetupPacket_int+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d90c      	bls.n	80023c0 <PCD_EP_OutSetupPacket_int+0xac>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b8:	461a      	mov	r2, r3
 80023ba:	2101      	movs	r1, #1
 80023bc:	f002 fbc6 	bl	8004b4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	4f54300a 	.word	0x4f54300a
 80023d0:	4f54310a 	.word	0x4f54310a

080023d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
 80023e0:	4613      	mov	r3, r2
 80023e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023f2:	883b      	ldrh	r3, [r7, #0]
 80023f4:	0419      	lsls	r1, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002400:	e028      	b.n	8002454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e00d      	b.n	8002432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	3b01      	subs	r3, #1
 8002438:	429a      	cmp	r2, r3
 800243a:	d3ec      	bcc.n	8002416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800243c:	883b      	ldrh	r3, [r7, #0]
 800243e:	0418      	lsls	r0, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	3b01      	subs	r3, #1
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4302      	orrs	r2, r0
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e25b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d075      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ba:	4ba3      	ldr	r3, [pc, #652]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4ba0      	ldr	r3, [pc, #640]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b9d      	ldr	r3, [pc, #628]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b99      	ldr	r3, [pc, #612]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e236      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x74>
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a90      	ldr	r2, [pc, #576]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a8a      	ldr	r2, [pc, #552]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a87      	ldr	r2, [pc, #540]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a83      	ldr	r2, [pc, #524]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b81      	ldr	r3, [pc, #516]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a80      	ldr	r2, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fb24 	bl	8000ba0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fb20 	bl	8000ba0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1fb      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xc0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fb10 	bl	8000ba0 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fb0c 	bl	8000ba0 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1e7      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1bb      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4952      	ldr	r1, [pc, #328]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCC_OscConfig+0x2b0>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fac5 	bl	8000ba0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fac1 	bl	8000ba0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e19c      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4940      	ldr	r1, [pc, #256]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_OscConfig+0x2b0>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe faa4 	bl	8000ba0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe faa0 	bl	8000ba0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e17b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d030      	beq.n	80026e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_OscConfig+0x2b4>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fa84 	bl	8000ba0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fa80 	bl	8000ba0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e15b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x200>
 80026ba:	e015      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x2b4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fa6d 	bl	8000ba0 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fa69 	bl	8000ba0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e144      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a0 	beq.w	8002836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d121      	bne.n	8002776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe fa2f 	bl	8000ba0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e011      	b.n	800276a <HAL_RCC_OscConfig+0x2ce>
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
 8002754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe fa22 	bl	8000ba0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0fd      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x2f0>
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e01c      	b.n	80027c6 <HAL_RCC_OscConfig+0x32a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 8002794:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a76      	ldr	r2, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0x32a>
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a70      	ldr	r2, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe f9e7 	bl	8000ba0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe f9e3 	bl	8000ba0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0bc      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ee      	beq.n	80027d6 <HAL_RCC_OscConfig+0x33a>
 80027f8:	e014      	b.n	8002824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe f9d1 	bl	8000ba0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f9cd 	bl	8000ba0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0a6      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ee      	bne.n	8002802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8092 	beq.w	8002964 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d05c      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d141      	bne.n	80028d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f9a1 	bl	8000ba0 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe f99d 	bl	8000ba0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e078      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	019b      	lsls	r3, r3, #6
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028aa:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f976 	bl	8000ba0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe f972 	bl	8000ba0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x41c>
 80028d6:	e045      	b.n	8002964 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f95f 	bl	8000ba0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f95b 	bl	8000ba0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e036      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x44a>
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e029      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	429a      	cmp	r2, r3
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d115      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	4293      	cmp	r3, r2
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000
 8002974:	40023800 	.word	0x40023800
 8002978:	42470060 	.word	0x42470060

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0cc      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d90c      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d044      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d119      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e067      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4934      	ldr	r1, [pc, #208]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe f898 	bl	8000ba0 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe f894 	bl	8000ba0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d20c      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f821 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fff8 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08006f68 	.word	0x08006f68
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d007      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x32>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x38>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80b4 	bne.w	8002cdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b76:	60bb      	str	r3, [r7, #8]
       break;
 8002b78:	e0b3      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b7c:	60bb      	str	r3, [r7, #8]
      break;
 8002b7e:	e0b0      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04a      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	ea03 0501 	and.w	r5, r3, r1
 8002bac:	ea04 0602 	and.w	r6, r4, r2
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0154      	lsls	r4, r2, #5
 8002bbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	1b49      	subs	r1, r1, r5
 8002bca:	eb62 0206 	sbc.w	r2, r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0194      	lsls	r4, r2, #6
 8002bd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	eb64 0402 	sbc.w	r4, r4, r2
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	00e2      	lsls	r2, r4, #3
 8002bee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	195b      	adds	r3, r3, r5
 8002bfa:	eb44 0406 	adc.w	r4, r4, r6
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	0262      	lsls	r2, r4, #9
 8002c08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c0c:	0259      	lsls	r1, r3, #9
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	4621      	mov	r1, r4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd fada 	bl	80001d8 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e049      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea03 0501 	and.w	r5, r3, r1
 8002c42:	ea04 0602 	and.w	r6, r4, r2
 8002c46:	4629      	mov	r1, r5
 8002c48:	4632      	mov	r2, r6
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	0154      	lsls	r4, r2, #5
 8002c54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c58:	014b      	lsls	r3, r1, #5
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	1b49      	subs	r1, r1, r5
 8002c60:	eb62 0206 	sbc.w	r2, r2, r6
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0194      	lsls	r4, r2, #6
 8002c6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	1a5b      	subs	r3, r3, r1
 8002c76:	eb64 0402 	sbc.w	r4, r4, r2
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c88:	00d9      	lsls	r1, r3, #3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	195b      	adds	r3, r3, r5
 8002c90:	eb44 0406 	adc.w	r4, r4, r6
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	02a2      	lsls	r2, r4, #10
 8002c9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ca2:	0299      	lsls	r1, r3, #10
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4621      	mov	r1, r4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	f7fd fa8f 	bl	80001d8 <__aeabi_uldivmod>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cde:	60bb      	str	r3, [r7, #8]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4601      	mov	r1, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08006f78 	.word	0x08006f78

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4601      	mov	r1, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4a03      	ldr	r2, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08006f78 	.word	0x08006f78

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e03f      	b.n	8002df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fdb8 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f90b 	bl	8002fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b088      	sub	sp, #32
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	f040 8083 	bne.w	8002f22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_UART_Transmit+0x2e>
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e07b      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Transmit+0x40>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e074      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2221      	movs	r2, #33	; 0x21
 8002e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e50:	f7fd fea6 	bl	8000ba0 <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e6a:	e042      	b.n	8002ef2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d122      	bne.n	8002eca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f84c 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e042      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	e017      	b.n	8002ef2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	e013      	b.n	8002ef2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f829 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e01f      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1b7      	bne.n	8002e6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f810 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e006      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3c:	e02c      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d028      	beq.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4c:	f7fd fe28 	bl	8000ba0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d21d      	bcs.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d0c3      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003002:	f023 030c 	bic.w	r3, r3, #12
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	68f9      	ldr	r1, [r7, #12]
 800300c:	430b      	orrs	r3, r1
 800300e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302e:	f040 818b 	bne.w	8003348 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4ac1      	ldr	r2, [pc, #772]	; (800333c <UART_SetConfig+0x37c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d005      	beq.n	8003048 <UART_SetConfig+0x88>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4abf      	ldr	r2, [pc, #764]	; (8003340 <UART_SetConfig+0x380>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f040 80bd 	bne.w	80031c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff fe76 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 800304c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	461d      	mov	r5, r3
 8003052:	f04f 0600 	mov.w	r6, #0
 8003056:	46a8      	mov	r8, r5
 8003058:	46b1      	mov	r9, r6
 800305a:	eb18 0308 	adds.w	r3, r8, r8
 800305e:	eb49 0409 	adc.w	r4, r9, r9
 8003062:	4698      	mov	r8, r3
 8003064:	46a1      	mov	r9, r4
 8003066:	eb18 0805 	adds.w	r8, r8, r5
 800306a:	eb49 0906 	adc.w	r9, r9, r6
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800307a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800307e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003082:	4688      	mov	r8, r1
 8003084:	4691      	mov	r9, r2
 8003086:	eb18 0005 	adds.w	r0, r8, r5
 800308a:	eb49 0106 	adc.w	r1, r9, r6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	461d      	mov	r5, r3
 8003094:	f04f 0600 	mov.w	r6, #0
 8003098:	196b      	adds	r3, r5, r5
 800309a:	eb46 0406 	adc.w	r4, r6, r6
 800309e:	461a      	mov	r2, r3
 80030a0:	4623      	mov	r3, r4
 80030a2:	f7fd f899 	bl	80001d8 <__aeabi_uldivmod>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	461a      	mov	r2, r3
 80030ac:	4ba5      	ldr	r3, [pc, #660]	; (8003344 <UART_SetConfig+0x384>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	461d      	mov	r5, r3
 80030bc:	f04f 0600 	mov.w	r6, #0
 80030c0:	46a9      	mov	r9, r5
 80030c2:	46b2      	mov	sl, r6
 80030c4:	eb19 0309 	adds.w	r3, r9, r9
 80030c8:	eb4a 040a 	adc.w	r4, sl, sl
 80030cc:	4699      	mov	r9, r3
 80030ce:	46a2      	mov	sl, r4
 80030d0:	eb19 0905 	adds.w	r9, r9, r5
 80030d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ec:	4689      	mov	r9, r1
 80030ee:	4692      	mov	sl, r2
 80030f0:	eb19 0005 	adds.w	r0, r9, r5
 80030f4:	eb4a 0106 	adc.w	r1, sl, r6
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	461d      	mov	r5, r3
 80030fe:	f04f 0600 	mov.w	r6, #0
 8003102:	196b      	adds	r3, r5, r5
 8003104:	eb46 0406 	adc.w	r4, r6, r6
 8003108:	461a      	mov	r2, r3
 800310a:	4623      	mov	r3, r4
 800310c:	f7fd f864 	bl	80001d8 <__aeabi_uldivmod>
 8003110:	4603      	mov	r3, r0
 8003112:	460c      	mov	r4, r1
 8003114:	461a      	mov	r2, r3
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <UART_SetConfig+0x384>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	; 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a86      	ldr	r2, [pc, #536]	; (8003344 <UART_SetConfig+0x384>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003138:	4498      	add	r8, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	461d      	mov	r5, r3
 800313e:	f04f 0600 	mov.w	r6, #0
 8003142:	46a9      	mov	r9, r5
 8003144:	46b2      	mov	sl, r6
 8003146:	eb19 0309 	adds.w	r3, r9, r9
 800314a:	eb4a 040a 	adc.w	r4, sl, sl
 800314e:	4699      	mov	r9, r3
 8003150:	46a2      	mov	sl, r4
 8003152:	eb19 0905 	adds.w	r9, r9, r5
 8003156:	eb4a 0a06 	adc.w	sl, sl, r6
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800316a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800316e:	4689      	mov	r9, r1
 8003170:	4692      	mov	sl, r2
 8003172:	eb19 0005 	adds.w	r0, r9, r5
 8003176:	eb4a 0106 	adc.w	r1, sl, r6
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	461d      	mov	r5, r3
 8003180:	f04f 0600 	mov.w	r6, #0
 8003184:	196b      	adds	r3, r5, r5
 8003186:	eb46 0406 	adc.w	r4, r6, r6
 800318a:	461a      	mov	r2, r3
 800318c:	4623      	mov	r3, r4
 800318e:	f7fd f823 	bl	80001d8 <__aeabi_uldivmod>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	461a      	mov	r2, r3
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <UART_SetConfig+0x384>)
 800319a:	fba3 1302 	umull	r1, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2164      	movs	r1, #100	; 0x64
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a65      	ldr	r2, [pc, #404]	; (8003344 <UART_SetConfig+0x384>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 0207 	and.w	r2, r3, #7
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4442      	add	r2, r8
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e26f      	b.n	80036a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c2:	f7ff fda5 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80031c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	461d      	mov	r5, r3
 80031cc:	f04f 0600 	mov.w	r6, #0
 80031d0:	46a8      	mov	r8, r5
 80031d2:	46b1      	mov	r9, r6
 80031d4:	eb18 0308 	adds.w	r3, r8, r8
 80031d8:	eb49 0409 	adc.w	r4, r9, r9
 80031dc:	4698      	mov	r8, r3
 80031de:	46a1      	mov	r9, r4
 80031e0:	eb18 0805 	adds.w	r8, r8, r5
 80031e4:	eb49 0906 	adc.w	r9, r9, r6
 80031e8:	f04f 0100 	mov.w	r1, #0
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031fc:	4688      	mov	r8, r1
 80031fe:	4691      	mov	r9, r2
 8003200:	eb18 0005 	adds.w	r0, r8, r5
 8003204:	eb49 0106 	adc.w	r1, r9, r6
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	461d      	mov	r5, r3
 800320e:	f04f 0600 	mov.w	r6, #0
 8003212:	196b      	adds	r3, r5, r5
 8003214:	eb46 0406 	adc.w	r4, r6, r6
 8003218:	461a      	mov	r2, r3
 800321a:	4623      	mov	r3, r4
 800321c:	f7fc ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8003220:	4603      	mov	r3, r0
 8003222:	460c      	mov	r4, r1
 8003224:	461a      	mov	r2, r3
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <UART_SetConfig+0x384>)
 8003228:	fba3 2302 	umull	r2, r3, r3, r2
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	461d      	mov	r5, r3
 8003236:	f04f 0600 	mov.w	r6, #0
 800323a:	46a9      	mov	r9, r5
 800323c:	46b2      	mov	sl, r6
 800323e:	eb19 0309 	adds.w	r3, r9, r9
 8003242:	eb4a 040a 	adc.w	r4, sl, sl
 8003246:	4699      	mov	r9, r3
 8003248:	46a2      	mov	sl, r4
 800324a:	eb19 0905 	adds.w	r9, r9, r5
 800324e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003266:	4689      	mov	r9, r1
 8003268:	4692      	mov	sl, r2
 800326a:	eb19 0005 	adds.w	r0, r9, r5
 800326e:	eb4a 0106 	adc.w	r1, sl, r6
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	461d      	mov	r5, r3
 8003278:	f04f 0600 	mov.w	r6, #0
 800327c:	196b      	adds	r3, r5, r5
 800327e:	eb46 0406 	adc.w	r4, r6, r6
 8003282:	461a      	mov	r2, r3
 8003284:	4623      	mov	r3, r4
 8003286:	f7fc ffa7 	bl	80001d8 <__aeabi_uldivmod>
 800328a:	4603      	mov	r3, r0
 800328c:	460c      	mov	r4, r1
 800328e:	461a      	mov	r2, r3
 8003290:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <UART_SetConfig+0x384>)
 8003292:	fba3 1302 	umull	r1, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2164      	movs	r1, #100	; 0x64
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	3332      	adds	r3, #50	; 0x32
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <UART_SetConfig+0x384>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b2:	4498      	add	r8, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	461d      	mov	r5, r3
 80032b8:	f04f 0600 	mov.w	r6, #0
 80032bc:	46a9      	mov	r9, r5
 80032be:	46b2      	mov	sl, r6
 80032c0:	eb19 0309 	adds.w	r3, r9, r9
 80032c4:	eb4a 040a 	adc.w	r4, sl, sl
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	eb19 0905 	adds.w	r9, r9, r5
 80032d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032e8:	4689      	mov	r9, r1
 80032ea:	4692      	mov	sl, r2
 80032ec:	eb19 0005 	adds.w	r0, r9, r5
 80032f0:	eb4a 0106 	adc.w	r1, sl, r6
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	461d      	mov	r5, r3
 80032fa:	f04f 0600 	mov.w	r6, #0
 80032fe:	196b      	adds	r3, r5, r5
 8003300:	eb46 0406 	adc.w	r4, r6, r6
 8003304:	461a      	mov	r2, r3
 8003306:	4623      	mov	r3, r4
 8003308:	f7fc ff66 	bl	80001d8 <__aeabi_uldivmod>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	461a      	mov	r2, r3
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <UART_SetConfig+0x384>)
 8003314:	fba3 1302 	umull	r1, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2164      	movs	r1, #100	; 0x64
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	3332      	adds	r3, #50	; 0x32
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <UART_SetConfig+0x384>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 0207 	and.w	r2, r3, #7
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4442      	add	r2, r8
 8003338:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800333a:	e1b2      	b.n	80036a2 <UART_SetConfig+0x6e2>
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4ad7      	ldr	r2, [pc, #860]	; (80036ac <UART_SetConfig+0x6ec>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d005      	beq.n	800335e <UART_SetConfig+0x39e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4ad6      	ldr	r2, [pc, #856]	; (80036b0 <UART_SetConfig+0x6f0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	f040 80d1 	bne.w	8003500 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800335e:	f7ff fceb 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003362:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	469a      	mov	sl, r3
 8003368:	f04f 0b00 	mov.w	fp, #0
 800336c:	46d0      	mov	r8, sl
 800336e:	46d9      	mov	r9, fp
 8003370:	eb18 0308 	adds.w	r3, r8, r8
 8003374:	eb49 0409 	adc.w	r4, r9, r9
 8003378:	4698      	mov	r8, r3
 800337a:	46a1      	mov	r9, r4
 800337c:	eb18 080a 	adds.w	r8, r8, sl
 8003380:	eb49 090b 	adc.w	r9, r9, fp
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003390:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003394:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003398:	4688      	mov	r8, r1
 800339a:	4691      	mov	r9, r2
 800339c:	eb1a 0508 	adds.w	r5, sl, r8
 80033a0:	eb4b 0609 	adc.w	r6, fp, r9
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	0094      	lsls	r4, r2, #2
 80033b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	4631      	mov	r1, r6
 80033c6:	f7fc ff07 	bl	80001d8 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	461a      	mov	r2, r3
 80033d0:	4bb8      	ldr	r3, [pc, #736]	; (80036b4 <UART_SetConfig+0x6f4>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	469b      	mov	fp, r3
 80033e0:	f04f 0c00 	mov.w	ip, #0
 80033e4:	46d9      	mov	r9, fp
 80033e6:	46e2      	mov	sl, ip
 80033e8:	eb19 0309 	adds.w	r3, r9, r9
 80033ec:	eb4a 040a 	adc.w	r4, sl, sl
 80033f0:	4699      	mov	r9, r3
 80033f2:	46a2      	mov	sl, r4
 80033f4:	eb19 090b 	adds.w	r9, r9, fp
 80033f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003408:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800340c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003410:	4689      	mov	r9, r1
 8003412:	4692      	mov	sl, r2
 8003414:	eb1b 0509 	adds.w	r5, fp, r9
 8003418:	eb4c 060a 	adc.w	r6, ip, sl
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4619      	mov	r1, r3
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	0094      	lsls	r4, r2, #2
 8003430:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003434:	008b      	lsls	r3, r1, #2
 8003436:	461a      	mov	r2, r3
 8003438:	4623      	mov	r3, r4
 800343a:	4628      	mov	r0, r5
 800343c:	4631      	mov	r1, r6
 800343e:	f7fc fecb 	bl	80001d8 <__aeabi_uldivmod>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	461a      	mov	r2, r3
 8003448:	4b9a      	ldr	r3, [pc, #616]	; (80036b4 <UART_SetConfig+0x6f4>)
 800344a:	fba3 1302 	umull	r1, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2164      	movs	r1, #100	; 0x64
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a95      	ldr	r2, [pc, #596]	; (80036b4 <UART_SetConfig+0x6f4>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	4498      	add	r8, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	469b      	mov	fp, r3
 800346e:	f04f 0c00 	mov.w	ip, #0
 8003472:	46d9      	mov	r9, fp
 8003474:	46e2      	mov	sl, ip
 8003476:	eb19 0309 	adds.w	r3, r9, r9
 800347a:	eb4a 040a 	adc.w	r4, sl, sl
 800347e:	4699      	mov	r9, r3
 8003480:	46a2      	mov	sl, r4
 8003482:	eb19 090b 	adds.w	r9, r9, fp
 8003486:	eb4a 0a0c 	adc.w	sl, sl, ip
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003496:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800349a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800349e:	4689      	mov	r9, r1
 80034a0:	4692      	mov	sl, r2
 80034a2:	eb1b 0509 	adds.w	r5, fp, r9
 80034a6:	eb4c 060a 	adc.w	r6, ip, sl
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	0094      	lsls	r4, r2, #2
 80034be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034c2:	008b      	lsls	r3, r1, #2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	4631      	mov	r1, r6
 80034cc:	f7fc fe84 	bl	80001d8 <__aeabi_uldivmod>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <UART_SetConfig+0x6f4>)
 80034d8:	fba3 1302 	umull	r1, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2164      	movs	r1, #100	; 0x64
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a72      	ldr	r2, [pc, #456]	; (80036b4 <UART_SetConfig+0x6f4>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4442      	add	r2, r8
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	e0d0      	b.n	80036a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff fc06 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003504:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	469a      	mov	sl, r3
 800350a:	f04f 0b00 	mov.w	fp, #0
 800350e:	46d0      	mov	r8, sl
 8003510:	46d9      	mov	r9, fp
 8003512:	eb18 0308 	adds.w	r3, r8, r8
 8003516:	eb49 0409 	adc.w	r4, r9, r9
 800351a:	4698      	mov	r8, r3
 800351c:	46a1      	mov	r9, r4
 800351e:	eb18 080a 	adds.w	r8, r8, sl
 8003522:	eb49 090b 	adc.w	r9, r9, fp
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003532:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003536:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800353a:	4688      	mov	r8, r1
 800353c:	4691      	mov	r9, r2
 800353e:	eb1a 0508 	adds.w	r5, sl, r8
 8003542:	eb4b 0609 	adc.w	r6, fp, r9
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0094      	lsls	r4, r2, #2
 800355a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4628      	mov	r0, r5
 8003566:	4631      	mov	r1, r6
 8003568:	f7fc fe36 	bl	80001d8 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <UART_SetConfig+0x6f4>)
 8003574:	fba3 2302 	umull	r2, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	469b      	mov	fp, r3
 8003582:	f04f 0c00 	mov.w	ip, #0
 8003586:	46d9      	mov	r9, fp
 8003588:	46e2      	mov	sl, ip
 800358a:	eb19 0309 	adds.w	r3, r9, r9
 800358e:	eb4a 040a 	adc.w	r4, sl, sl
 8003592:	4699      	mov	r9, r3
 8003594:	46a2      	mov	sl, r4
 8003596:	eb19 090b 	adds.w	r9, r9, fp
 800359a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035b2:	4689      	mov	r9, r1
 80035b4:	4692      	mov	sl, r2
 80035b6:	eb1b 0509 	adds.w	r5, fp, r9
 80035ba:	eb4c 060a 	adc.w	r6, ip, sl
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4619      	mov	r1, r3
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f04f 0400 	mov.w	r4, #0
 80035d0:	0094      	lsls	r4, r2, #2
 80035d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d6:	008b      	lsls	r3, r1, #2
 80035d8:	461a      	mov	r2, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	4631      	mov	r1, r6
 80035e0:	f7fc fdfa 	bl	80001d8 <__aeabi_uldivmod>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <UART_SetConfig+0x6f4>)
 80035ec:	fba3 1302 	umull	r1, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	3332      	adds	r3, #50	; 0x32
 80035fe:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <UART_SetConfig+0x6f4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360a:	4498      	add	r8, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	469b      	mov	fp, r3
 8003610:	f04f 0c00 	mov.w	ip, #0
 8003614:	46d9      	mov	r9, fp
 8003616:	46e2      	mov	sl, ip
 8003618:	eb19 0309 	adds.w	r3, r9, r9
 800361c:	eb4a 040a 	adc.w	r4, sl, sl
 8003620:	4699      	mov	r9, r3
 8003622:	46a2      	mov	sl, r4
 8003624:	eb19 090b 	adds.w	r9, r9, fp
 8003628:	eb4a 0a0c 	adc.w	sl, sl, ip
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800363c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003640:	4689      	mov	r9, r1
 8003642:	4692      	mov	sl, r2
 8003644:	eb1b 0509 	adds.w	r5, fp, r9
 8003648:	eb4c 060a 	adc.w	r6, ip, sl
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4619      	mov	r1, r3
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f04f 0400 	mov.w	r4, #0
 800365e:	0094      	lsls	r4, r2, #2
 8003660:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003664:	008b      	lsls	r3, r1, #2
 8003666:	461a      	mov	r2, r3
 8003668:	4623      	mov	r3, r4
 800366a:	4628      	mov	r0, r5
 800366c:	4631      	mov	r1, r6
 800366e:	f7fc fdb3 	bl	80001d8 <__aeabi_uldivmod>
 8003672:	4603      	mov	r3, r0
 8003674:	460c      	mov	r4, r1
 8003676:	461a      	mov	r2, r3
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <UART_SetConfig+0x6f4>)
 800367a:	fba3 1302 	umull	r1, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2164      	movs	r1, #100	; 0x64
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <UART_SetConfig+0x6f4>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4442      	add	r2, r8
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	e7ff      	b.n	80036a2 <UART_SetConfig+0x6e2>
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40011400 	.word	0x40011400
 80036b4:	51eb851f 	.word	0x51eb851f

080036b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036b8:	b084      	sub	sp, #16
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	f107 001c 	add.w	r0, r7, #28
 80036c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d122      	bne.n	8003716 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 fa7c 	bl	8004c08 <USB_CoreReset>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e01a      	b.n	800374c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f001 fa70 	bl	8004c08 <USB_CoreReset>
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
 800373e:	e005      	b.n	800374c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10b      	bne.n	800376a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f043 0206 	orr.w	r2, r3, #6
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003776:	b004      	add	sp, #16
 8003778:	4770      	bx	lr
	...

0800377c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d165      	bne.n	800385c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a41      	ldr	r2, [pc, #260]	; (8003898 <USB_SetTurnaroundTime+0x11c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d906      	bls.n	80037a6 <USB_SetTurnaroundTime+0x2a>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <USB_SetTurnaroundTime+0x120>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d802      	bhi.n	80037a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037a0:	230f      	movs	r3, #15
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e062      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a3c      	ldr	r2, [pc, #240]	; (800389c <USB_SetTurnaroundTime+0x120>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d906      	bls.n	80037bc <USB_SetTurnaroundTime+0x40>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <USB_SetTurnaroundTime+0x124>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037b6:	230e      	movs	r3, #14
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e057      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <USB_SetTurnaroundTime+0x124>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <USB_SetTurnaroundTime+0x56>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a37      	ldr	r2, [pc, #220]	; (80038a4 <USB_SetTurnaroundTime+0x128>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d802      	bhi.n	80037d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037cc:	230d      	movs	r3, #13
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e04c      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a33      	ldr	r2, [pc, #204]	; (80038a4 <USB_SetTurnaroundTime+0x128>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d906      	bls.n	80037e8 <USB_SetTurnaroundTime+0x6c>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <USB_SetTurnaroundTime+0x12c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d802      	bhi.n	80037e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037e2:	230c      	movs	r3, #12
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e041      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <USB_SetTurnaroundTime+0x12c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d906      	bls.n	80037fe <USB_SetTurnaroundTime+0x82>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a2e      	ldr	r2, [pc, #184]	; (80038ac <USB_SetTurnaroundTime+0x130>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d802      	bhi.n	80037fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037f8:	230b      	movs	r3, #11
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e036      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <USB_SetTurnaroundTime+0x130>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d906      	bls.n	8003814 <USB_SetTurnaroundTime+0x98>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <USB_SetTurnaroundTime+0x134>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800380e:	230a      	movs	r3, #10
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e02b      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <USB_SetTurnaroundTime+0x134>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d906      	bls.n	800382a <USB_SetTurnaroundTime+0xae>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <USB_SetTurnaroundTime+0x138>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d802      	bhi.n	800382a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003824:	2309      	movs	r3, #9
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e020      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <USB_SetTurnaroundTime+0x138>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d906      	bls.n	8003840 <USB_SetTurnaroundTime+0xc4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <USB_SetTurnaroundTime+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d802      	bhi.n	8003840 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800383a:	2308      	movs	r3, #8
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e015      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <USB_SetTurnaroundTime+0x13c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d906      	bls.n	8003856 <USB_SetTurnaroundTime+0xda>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <USB_SetTurnaroundTime+0x140>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d802      	bhi.n	8003856 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003850:	2307      	movs	r3, #7
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e00a      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003856:	2306      	movs	r3, #6
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e007      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003862:	2309      	movs	r3, #9
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e001      	b.n	800386c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003868:	2309      	movs	r3, #9
 800386a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	00d8acbf 	.word	0x00d8acbf
 800389c:	00e4e1bf 	.word	0x00e4e1bf
 80038a0:	00f423ff 	.word	0x00f423ff
 80038a4:	0106737f 	.word	0x0106737f
 80038a8:	011a499f 	.word	0x011a499f
 80038ac:	01312cff 	.word	0x01312cff
 80038b0:	014ca43f 	.word	0x014ca43f
 80038b4:	016e35ff 	.word	0x016e35ff
 80038b8:	01a6ab1f 	.word	0x01a6ab1f
 80038bc:	01e847ff 	.word	0x01e847ff

080038c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0201 	bic.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e00b      	b.n	8003948 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	e001      	b.n	8003948 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e003      	b.n	8003950 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003948:	2032      	movs	r0, #50	; 0x32
 800394a:	f7fd f935 	bl	8000bb8 <HAL_Delay>

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003958:	b084      	sub	sp, #16
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e009      	b.n	800398c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3340      	adds	r3, #64	; 0x40
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0e      	cmp	r3, #14
 8003990:	d9f2      	bls.n	8003978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d112      	bne.n	80039be <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
 80039bc:	e00b      	b.n	80039d6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039dc:	461a      	mov	r2, r3
 80039de:	2300      	movs	r3, #0
 80039e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	4619      	mov	r1, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	461a      	mov	r2, r3
 80039f2:	680b      	ldr	r3, [r1, #0]
 80039f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10c      	bne.n	8003a16 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a02:	2100      	movs	r1, #0
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f961 	bl	8003ccc <USB_SetDevSpeed>
 8003a0a:	e008      	b.n	8003a1e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f95c 	bl	8003ccc <USB_SetDevSpeed>
 8003a14:	e003      	b.n	8003a1e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a16:	2103      	movs	r1, #3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f957 	bl	8003ccc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a1e:	2110      	movs	r1, #16
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f90b 	bl	8003c3c <USB_FlushTxFifo>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f929 	bl	8003c88 <USB_FlushRxFifo>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a46:	461a      	mov	r2, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	461a      	mov	r2, r3
 8003a54:	2300      	movs	r3, #0
 8003a56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	e043      	b.n	8003af2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a80:	d118      	bne.n	8003ab4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e013      	b.n	8003ac6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e008      	b.n	8003ac6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3301      	adds	r3, #1
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d3b7      	bcc.n	8003a6a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e043      	b.n	8003b88 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b16:	d118      	bne.n	8003b4a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e013      	b.n	8003b5c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	461a      	mov	r2, r3
 8003b42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e008      	b.n	8003b5c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	3301      	adds	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3b7      	bcc.n	8003b00 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d111      	bne.n	8003bce <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <USB_DevInit+0x2dc>)
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	f043 0303 	orr.w	r3, r3, #3
 8003bcc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f043 0210 	orr.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <USB_DevInit+0x2e0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 0208 	orr.w	r2, r3, #8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c2e:	b004      	add	sp, #16
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	00800100 	.word	0x00800100
 8003c38:	803c3800 	.word	0x803c3800

08003c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <USB_FlushTxFifo+0x48>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d0f0      	beq.n	8003c56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	00030d40 	.word	0x00030d40

08003c88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2210      	movs	r2, #16
 8003c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <USB_FlushRxFifo+0x40>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e006      	b.n	8003cba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d0f0      	beq.n	8003c9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	00030d40 	.word	0x00030d40

08003ccc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0306 	and.w	r3, r3, #6
 8003d16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]
 8003d22:	e00a      	b.n	8003d3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d002      	beq.n	8003d30 <USB_GetDevSpeed+0x32>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d102      	bne.n	8003d36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d30:	2302      	movs	r3, #2
 8003d32:	75fb      	strb	r3, [r7, #23]
 8003d34:	e001      	b.n	8003d3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d36:	230f      	movs	r3, #15
 8003d38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d13a      	bne.n	8003dda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d155      	bne.n	8003e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	78db      	ldrb	r3, [r3, #3]
 8003db6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	059b      	lsls	r3, r3, #22
 8003dbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e036      	b.n	8003e48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11a      	bne.n	8003e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	78db      	ldrb	r3, [r3, #3]
 8003e2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d135      	bne.n	8003ee0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e94:	4013      	ands	r3, r2
 8003e96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	0159      	lsls	r1, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <USB_DeactivateEndpoint+0x100>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
 8003ede:	e034      	b.n	8003f4a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4013      	ands	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	4619      	mov	r1, r3
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <USB_DeactivateEndpoint+0x104>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	ec337800 	.word	0xec337800
 8003f5c:	eff37800 	.word	0xeff37800

08003f60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 815c 	bne.w	800423a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d132      	bne.n	8003ff0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	0cdb      	lsrs	r3, r3, #19
 8003fea:	04db      	lsls	r3, r3, #19
 8003fec:	6113      	str	r3, [r2, #16]
 8003fee:	e074      	b.n	80040da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	0cdb      	lsrs	r3, r3, #19
 800400c:	04db      	lsls	r3, r3, #19
 800400e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800402e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	440b      	add	r3, r1
 800404c:	1e59      	subs	r1, r3, #1
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	fbb1 f3f3 	udiv	r3, r1, r3
 8004056:	04d9      	lsls	r1, r3, #19
 8004058:	4b9d      	ldr	r3, [pc, #628]	; (80042d0 <USB_EPStartXfer+0x370>)
 800405a:	400b      	ands	r3, r1
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	0148      	lsls	r0, r1, #5
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	4401      	add	r1, r0
 800408a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800408e:	4313      	orrs	r3, r2
 8004090:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11f      	bne.n	80040da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d14b      	bne.n	8004178 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	78db      	ldrb	r3, [r3, #3]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d128      	bne.n	8004156 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e00f      	b.n	8004156 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	440a      	add	r2, r1
 800414c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e12f      	b.n	80043d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004196:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	78db      	ldrb	r3, [r3, #3]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d015      	beq.n	80041cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8117 	beq.w	80043d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	69f9      	ldr	r1, [r7, #28]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c6:	4313      	orrs	r3, r2
 80041c8:	634b      	str	r3, [r1, #52]	; 0x34
 80041ca:	e105      	b.n	80043d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d110      	bne.n	80041fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e00f      	b.n	800421e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	b298      	uxth	r0, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4603      	mov	r3, r0
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fa2b 	bl	800468e <USB_WritePacket>
 8004238:	e0ce      	b.n	80043d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	0cdb      	lsrs	r3, r3, #19
 8004256:	04db      	lsls	r3, r3, #19
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800427c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ca:	6113      	str	r3, [r2, #16]
 80042cc:	e036      	b.n	800433c <USB_EPStartXfer+0x3dc>
 80042ce:	bf00      	nop
 80042d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	8afb      	ldrh	r3, [r7, #22]
 80042fa:	04d9      	lsls	r1, r3, #19
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <USB_EPStartXfer+0x484>)
 80042fe:	400b      	ands	r3, r1
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	0148      	lsls	r0, r1, #5
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4401      	add	r1, r0
 8004308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	8af9      	ldrh	r1, [r7, #22]
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	0148      	lsls	r0, r1, #5
 8004330:	69f9      	ldr	r1, [r7, #28]
 8004332:	4401      	add	r1, r0
 8004334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10d      	bne.n	800435e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	460a      	mov	r2, r1
 800435c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	78db      	ldrb	r3, [r3, #3]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d128      	bne.n	80043b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d110      	bne.n	8004398 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00f      	b.n	80043b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	1ff80000 	.word	0x1ff80000

080043e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 80cd 	bne.w	80045a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d132      	bne.n	8004478 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	440a      	add	r2, r1
 800446c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004470:	0cdb      	lsrs	r3, r3, #19
 8004472:	04db      	lsls	r3, r3, #19
 8004474:	6113      	str	r3, [r2, #16]
 8004476:	e04e      	b.n	8004516 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	0cdb      	lsrs	r3, r3, #19
 8004494:	04db      	lsls	r3, r3, #19
 8004496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d903      	bls.n	80044d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	0148      	lsls	r0, r1, #5
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	4401      	add	r1, r0
 800450e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11e      	bne.n	800455a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e092      	b.n	8004680 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004578:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07e      	beq.n	8004680 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459e:	4313      	orrs	r3, r2
 80045a0:	634b      	str	r3, [r1, #52]	; 0x34
 80045a2:	e06d      	b.n	8004680 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045be:	0cdb      	lsrs	r3, r3, #19
 80045c0:	04db      	lsls	r3, r3, #19
 80045c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004616:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	0148      	lsls	r0, r1, #5
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	4401      	add	r1, r0
 8004636:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10d      	bne.n	8004660 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68d9      	ldr	r1, [r3, #12]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	460a      	mov	r2, r1
 800465e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800468e:	b480      	push	{r7}
 8004690:	b089      	sub	sp, #36	; 0x24
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	4611      	mov	r1, r2
 800469a:	461a      	mov	r2, r3
 800469c:	460b      	mov	r3, r1
 800469e:	71fb      	strb	r3, [r7, #7]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11a      	bne.n	80046ea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046b4:	88bb      	ldrh	r3, [r7, #4]
 80046b6:	3303      	adds	r3, #3
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00f      	b.n	80046e2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	031a      	lsls	r2, r3, #12
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ce:	461a      	mov	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	3301      	adds	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3eb      	bcc.n	80046c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3724      	adds	r7, #36	; 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	3303      	adds	r3, #3
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e00b      	b.n	8004734 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	601a      	str	r2, [r3, #0]
    pDest++;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3304      	adds	r3, #4
 800472c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3301      	adds	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d3ef      	bcc.n	800471c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800473c:	69fb      	ldr	r3, [r7, #28]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d12c      	bne.n	80047c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db12      	blt.n	800479e <USB_EPSetStall+0x54>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00f      	beq.n	800479e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800479c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e02b      	b.n	8004818 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	db12      	blt.n	80047f8 <USB_EPSetStall+0xae>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d128      	bne.n	8004894 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004860:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	78db      	ldrb	r3, [r3, #3]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d003      	beq.n	8004872 <USB_EPClearStall+0x4c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d138      	bne.n	80048e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e027      	b.n	80048e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	78db      	ldrb	r3, [r3, #3]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d003      	beq.n	80048c4 <USB_EPClearStall+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	78db      	ldrb	r3, [r3, #3]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d10f      	bne.n	80048e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004914:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004958:	f023 0302 	bic.w	r3, r3, #2
 800495c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800495e:	2003      	movs	r0, #3
 8004960:	f7fc f92a 	bl	8000bb8 <HAL_Delay>

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800498e:	2003      	movs	r0, #3
 8004990:	f7fc f912 	bl	8000bb8 <HAL_Delay>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4013      	ands	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	0c1b      	lsrs	r3, r3, #16
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	b29b      	uxth	r3, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	01db      	lsls	r3, r3, #7
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0306 	and.w	r3, r3, #6
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d109      	bne.n	8004b28 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b22:	f043 0303 	orr.w	r3, r3, #3
 8004b26:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	460b      	mov	r3, r1
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	333c      	adds	r3, #60	; 0x3c
 8004b62:	3304      	adds	r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <USB_EP0_OutStart+0xb8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d90a      	bls.n	8004b86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b80:	d101      	bne.n	8004b86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e037      	b.n	8004bf6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f043 0318 	orr.w	r3, r3, #24
 8004bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004bcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bce:	7afb      	ldrb	r3, [r7, #11]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10f      	bne.n	8004bf4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	4f54300a 	.word	0x4f54300a

08004c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <USB_CoreReset+0x64>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e01b      	b.n	8004c5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	daf2      	bge.n	8004c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <USB_CoreReset+0x64>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d0f0      	beq.n	8004c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	00030d40 	.word	0x00030d40

08004c70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7c1b      	ldrb	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d115      	bne.n	8004cb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	2181      	movs	r1, #129	; 0x81
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 fece 	bl	8006a32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fec4 	bl	8006a32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004cb2:	e012      	b.n	8004cda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	2181      	movs	r1, #129	; 0x81
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 feb9 	bl	8006a32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cc6:	2340      	movs	r3, #64	; 0x40
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2101      	movs	r1, #1
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 feb0 	bl	8006a32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cda:	2308      	movs	r3, #8
 8004cdc:	2203      	movs	r2, #3
 8004cde:	2182      	movs	r1, #130	; 0x82
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fea6 	bl	8006a32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004cec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cf0:	f002 f81c 	bl	8006d2c <malloc>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
 8004d0c:	e026      	b.n	8004d5c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004d14:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7c1b      	ldrb	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d42:	2101      	movs	r1, #1
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 ff65 	bl	8006c14 <USBD_LL_PrepareReceive>
 8004d4a:	e007      	b.n	8004d5c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d52:	2340      	movs	r3, #64	; 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f001 ff5c 	bl	8006c14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d76:	2181      	movs	r1, #129	; 0x81
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 fe80 	bl	8006a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d84:	2101      	movs	r1, #1
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fe79 	bl	8006a7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d94:	2182      	movs	r1, #130	; 0x82
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f001 fe71 	bl	8006a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 ffbd 	bl	8006d3c <free>
    pdev->pClassData = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004de4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d039      	beq.n	8004e72 <USBD_CDC_Setup+0x9e>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d17c      	bne.n	8004efc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d029      	beq.n	8004e5e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da11      	bge.n	8004e38 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8004e20:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	88d2      	ldrh	r2, [r2, #6]
 8004e26:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e28:	6939      	ldr	r1, [r7, #16]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	88db      	ldrh	r3, [r3, #6]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 f9c9 	bl	80061c8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8004e36:	e068      	b.n	8004f0a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785a      	ldrb	r2, [r3, #1]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	88db      	ldrh	r3, [r3, #6]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	88db      	ldrh	r3, [r3, #6]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 f9e4 	bl	8006224 <USBD_CtlPrepareRx>
    break;
 8004e5c:	e055      	b.n	8004f0a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	7850      	ldrb	r0, [r2, #1]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	4798      	blx	r3
    break;
 8004e70:	e04b      	b.n	8004f0a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b0a      	cmp	r3, #10
 8004e78:	d017      	beq.n	8004eaa <USBD_CDC_Setup+0xd6>
 8004e7a:	2b0b      	cmp	r3, #11
 8004e7c:	d029      	beq.n	8004ed2 <USBD_CDC_Setup+0xfe>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d133      	bne.n	8004eea <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d107      	bne.n	8004e9c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	2202      	movs	r2, #2
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 f997 	bl	80061c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004e9a:	e02e      	b.n	8004efa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 f927 	bl	80060f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea8:	e027      	b.n	8004efa <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d107      	bne.n	8004ec4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004eb4:	f107 030f 	add.w	r3, r7, #15
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 f983 	bl	80061c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004ec2:	e01a      	b.n	8004efa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 f913 	bl	80060f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed0:	e013      	b.n	8004efa <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d00d      	beq.n	8004ef8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 f907 	bl	80060f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ee8:	e006      	b.n	8004ef8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 f900 	bl	80060f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef6:	e000      	b.n	8004efa <USBD_CDC_Setup+0x126>
      break;
 8004ef8:	bf00      	nop
    }
    break;
 8004efa:	e006      	b.n	8004f0a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f001 f8f7 	bl	80060f2 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f04:	2302      	movs	r3, #2
 8004f06:	75fb      	strb	r3, [r7, #23]
    break;
 8004f08:	bf00      	nop
  }

  return ret;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f26:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8004f2e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03a      	beq.n	8004fb0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	331c      	adds	r3, #28
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d029      	beq.n	8004fa4 <USBD_CDC_DataIn+0x90>
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	331c      	adds	r3, #28
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	78f9      	ldrb	r1, [r7, #3]
 8004f64:	68b8      	ldr	r0, [r7, #8]
 8004f66:	460b      	mov	r3, r1
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	1a5b      	subs	r3, r3, r1
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4403      	add	r3, r0
 8004f70:	3344      	adds	r3, #68	; 0x44
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f78:	fb03 f301 	mul.w	r3, r3, r1
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d110      	bne.n	8004fa4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	331c      	adds	r3, #28
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004f96:	78f9      	ldrb	r1, [r7, #3]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fe16 	bl	8006bce <USBD_LL_Transmit>
 8004fa2:	e003      	b.n	8004fac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 fe41 	bl	8006c5a <USBD_LL_GetRxDataSize>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ffe:	4611      	mov	r1, r2
 8005000:	4798      	blx	r3

    return USBD_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800501e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005026:	2b00      	cmp	r3, #0
 8005028:	d015      	beq.n	8005056 <USBD_CDC_EP0_RxReady+0x46>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005030:	2bff      	cmp	r3, #255	; 0xff
 8005032:	d010      	beq.n	8005056 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005042:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800504a:	b292      	uxth	r2, r2
 800504c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	22ff      	movs	r2, #255	; 0xff
 8005052:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2243      	movs	r2, #67	; 0x43
 800506c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800506e:	4b03      	ldr	r3, [pc, #12]	; (800507c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000094 	.word	0x20000094

08005080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2243      	movs	r2, #67	; 0x43
 800508c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800508e:	4b03      	ldr	r3, [pc, #12]	; (800509c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20000050 	.word	0x20000050

080050a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2243      	movs	r2, #67	; 0x43
 80050ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80050ae:	4b03      	ldr	r3, [pc, #12]	; (80050bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	200000d8 	.word	0x200000d8

080050c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	220a      	movs	r2, #10
 80050cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80050ce:	4b03      	ldr	r3, [pc, #12]	; (80050dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000000c 	.word	0x2000000c

080050e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80050ea:	2302      	movs	r3, #2
 80050ec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005122:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005152:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005178:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800518a:	2b00      	cmp	r3, #0
 800518c:	d115      	bne.n	80051ba <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2181      	movs	r1, #129	; 0x81
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 fd0c 	bl	8006bce <USBD_LL_Transmit>

      return USBD_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e002      	b.n	80051c0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d017      	beq.n	8005212 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	7c1b      	ldrb	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f4:	2101      	movs	r1, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 fd0c 	bl	8006c14 <USBD_LL_PrepareReceive>
 80051fc:	e007      	b.n	800520e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	2101      	movs	r1, #1
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fd03 	bl	8006c14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005230:	2302      	movs	r3, #2
 8005232:	e01a      	b.n	800526a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	79fa      	ldrb	r2, [r7, #7]
 8005260:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f001 fb7e 	bl	8006964 <USBD_LL_Init>

  return USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e001      	b.n	8005298 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005294:	2302      	movs	r3, #2
 8005296:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 fba4 	bl	80069fc <USBD_LL_Start>

  return USBD_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80052e0:	2302      	movs	r3, #2
 80052e2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	4611      	mov	r1, r2
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
  return USBD_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fe94 	bl	8006078 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2b01      	cmp	r3, #1
 8005372:	d00c      	beq.n	800538e <USBD_LL_SetupStage+0x56>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d302      	bcc.n	800537e <USBD_LL_SetupStage+0x46>
 8005378:	2b02      	cmp	r3, #2
 800537a:	d010      	beq.n	800539e <USBD_LL_SetupStage+0x66>
 800537c:	e017      	b.n	80053ae <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa04 	bl	8005794 <USBD_StdDevReq>
    break;
 800538c:	e01a      	b.n	80053c4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa66 	bl	8005868 <USBD_StdItfReq>
    break;
 800539c:	e012      	b.n	80053c4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 faa4 	bl	80058f4 <USBD_StdEPReq>
    break;
 80053ac:	e00a      	b.n	80053c4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80053b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fb7d 	bl	8006abc <USBD_LL_StallEP>
    break;
 80053c2:	bf00      	nop
  }

  return USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	460b      	mov	r3, r1
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d14b      	bne.n	800547a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80053e8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d134      	bne.n	800545e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d919      	bls.n	8005434 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005416:	429a      	cmp	r2, r3
 8005418:	d203      	bcs.n	8005422 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800541e:	b29b      	uxth	r3, r3
 8005420:	e002      	b.n	8005428 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 ff17 	bl	8006260 <USBD_CtlContinueRx>
 8005432:	e038      	b.n	80054a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005446:	2b03      	cmp	r3, #3
 8005448:	d105      	bne.n	8005456 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 ff14 	bl	8006284 <USBD_CtlSendStatus>
 800545c:	e023      	b.n	80054a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005464:	2b05      	cmp	r3, #5
 8005466:	d11e      	bne.n	80054a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005470:	2100      	movs	r1, #0
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 fb22 	bl	8006abc <USBD_LL_StallEP>
 8005478:	e015      	b.n	80054a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800548c:	2b03      	cmp	r3, #3
 800548e:	d108      	bne.n	80054a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	7afa      	ldrb	r2, [r7, #11]
 800549a:	4611      	mov	r1, r2
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	4798      	blx	r3
 80054a0:	e001      	b.n	80054a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054a2:	2302      	movs	r3, #2
 80054a4:	e000      	b.n	80054a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	460b      	mov	r3, r1
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80054be:	7afb      	ldrb	r3, [r7, #11]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d17f      	bne.n	80055c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3314      	adds	r3, #20
 80054c8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d15c      	bne.n	800558e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d915      	bls.n	800550c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fe81 	bl	8006200 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80054fe:	2300      	movs	r3, #0
 8005500:	2200      	movs	r2, #0
 8005502:	2100      	movs	r1, #0
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 fb85 	bl	8006c14 <USBD_LL_PrepareReceive>
 800550a:	e04e      	b.n	80055aa <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	6912      	ldr	r2, [r2, #16]
 8005514:	fbb3 f1f2 	udiv	r1, r3, r2
 8005518:	fb02 f201 	mul.w	r2, r2, r1
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d11c      	bne.n	800555c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800552a:	429a      	cmp	r2, r3
 800552c:	d316      	bcc.n	800555c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8005538:	429a      	cmp	r2, r3
 800553a:	d20f      	bcs.n	800555c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fe5d 	bl	8006200 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800554e:	2300      	movs	r3, #0
 8005550:	2200      	movs	r2, #0
 8005552:	2100      	movs	r1, #0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f001 fb5d 	bl	8006c14 <USBD_LL_PrepareReceive>
 800555a:	e026      	b.n	80055aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800556e:	2b03      	cmp	r3, #3
 8005570:	d105      	bne.n	800557e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800557e:	2180      	movs	r1, #128	; 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f001 fa9b 	bl	8006abc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fe8f 	bl	80062aa <USBD_CtlReceiveStatus>
 800558c:	e00d      	b.n	80055aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005594:	2b04      	cmp	r3, #4
 8005596:	d004      	beq.n	80055a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f001 fa89 	bl	8006abc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d11d      	bne.n	80055f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff fe82 	bl	80052be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80055c2:	e015      	b.n	80055f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d108      	bne.n	80055ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	7afa      	ldrb	r2, [r7, #11]
 80055e4:	4611      	mov	r1, r2
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	4798      	blx	r3
 80055ea:	e001      	b.n	80055f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055ec:	2302      	movs	r3, #2
 80055ee:	e000      	b.n	80055f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	2200      	movs	r2, #0
 8005606:	2100      	movs	r1, #0
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f001 fa12 	bl	8006a32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 fa04 	bl	8006a32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6852      	ldr	r2, [r2, #4]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	4611      	mov	r1, r2
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
  }

  return USBD_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d10b      	bne.n	8005712 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6852      	ldr	r2, [r2, #4]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	4611      	mov	r1, r2
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3

  return USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d004      	beq.n	80057b8 <USBD_StdDevReq+0x24>
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d002      	beq.n	80057b8 <USBD_StdDevReq+0x24>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <USBD_StdDevReq+0x34>
 80057b6:	e04c      	b.n	8005852 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
    break;
 80057c6:	e049      	b.n	800585c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d83a      	bhi.n	8005846 <USBD_StdDevReq+0xb2>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <USBD_StdDevReq+0x44>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	08005829 	.word	0x08005829
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	08005847 	.word	0x08005847
 80057e4:	08005833 	.word	0x08005833
 80057e8:	08005847 	.word	0x08005847
 80057ec:	0800580b 	.word	0x0800580b
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005847 	.word	0x08005847
 80057f8:	0800581f 	.word	0x0800581f
 80057fc:	08005815 	.word	0x08005815
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9d2 	bl	8005bac <USBD_GetDescriptor>
      break;
 8005808:	e022      	b.n	8005850 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fac7 	bl	8005da0 <USBD_SetAddress>
      break;
 8005812:	e01d      	b.n	8005850 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb04 	bl	8005e24 <USBD_SetConfig>
      break;
 800581c:	e018      	b.n	8005850 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb8d 	bl	8005f40 <USBD_GetConfig>
      break;
 8005826:	e013      	b.n	8005850 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbbc 	bl	8005fa8 <USBD_GetStatus>
      break;
 8005830:	e00e      	b.n	8005850 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fbea 	bl	800600e <USBD_SetFeature>
      break;
 800583a:	e009      	b.n	8005850 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fbf9 	bl	8006036 <USBD_ClrFeature>
      break;
 8005844:	e004      	b.n	8005850 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fc52 	bl	80060f2 <USBD_CtlError>
      break;
 800584e:	bf00      	nop
    }
    break;
 8005850:	e004      	b.n	800585c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fc4c 	bl	80060f2 <USBD_CtlError>
    break;
 800585a:	bf00      	nop
  }

  return ret;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop

08005868 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800587e:	2b20      	cmp	r3, #32
 8005880:	d003      	beq.n	800588a <USBD_StdItfReq+0x22>
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d001      	beq.n	800588a <USBD_StdItfReq+0x22>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d12a      	bne.n	80058e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005890:	3b01      	subs	r3, #1
 8005892:	2b02      	cmp	r3, #2
 8005894:	d81d      	bhi.n	80058d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	889b      	ldrh	r3, [r3, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d813      	bhi.n	80058c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	88db      	ldrh	r3, [r3, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <USBD_StdItfReq+0x74>
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fcdf 	bl	8006284 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80058c6:	e009      	b.n	80058dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fc11 	bl	80060f2 <USBD_CtlError>
      break;
 80058d0:	e004      	b.n	80058dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc0c 	bl	80060f2 <USBD_CtlError>
      break;
 80058da:	e000      	b.n	80058de <USBD_StdItfReq+0x76>
      break;
 80058dc:	bf00      	nop
    }
    break;
 80058de:	e004      	b.n	80058ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fc05 	bl	80060f2 <USBD_CtlError>
    break;
 80058e8:	bf00      	nop
  }

  return USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	889b      	ldrh	r3, [r3, #4]
 8005906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005910:	2b20      	cmp	r3, #32
 8005912:	d004      	beq.n	800591e <USBD_StdEPReq+0x2a>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d002      	beq.n	800591e <USBD_StdEPReq+0x2a>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <USBD_StdEPReq+0x3a>
 800591c:	e13b      	b.n	8005b96 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
    break;
 800592c:	e138      	b.n	8005ba0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005936:	2b20      	cmp	r3, #32
 8005938:	d10a      	bne.n	8005950 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	e128      	b.n	8005ba2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d03e      	beq.n	80059d6 <USBD_StdEPReq+0xe2>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d002      	beq.n	8005962 <USBD_StdEPReq+0x6e>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d070      	beq.n	8005a42 <USBD_StdEPReq+0x14e>
 8005960:	e113      	b.n	8005b8a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005968:	2b02      	cmp	r3, #2
 800596a:	d002      	beq.n	8005972 <USBD_StdEPReq+0x7e>
 800596c:	2b03      	cmp	r3, #3
 800596e:	d015      	beq.n	800599c <USBD_StdEPReq+0xa8>
 8005970:	e02b      	b.n	80059ca <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <USBD_StdEPReq+0x9e>
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	2b80      	cmp	r3, #128	; 0x80
 800597c:	d009      	beq.n	8005992 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f89a 	bl	8006abc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 f896 	bl	8006abc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005990:	e020      	b.n	80059d4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fbac 	bl	80060f2 <USBD_CtlError>
        break;
 800599a:	e01b      	b.n	80059d4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	885b      	ldrh	r3, [r3, #2]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10e      	bne.n	80059c2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <USBD_StdEPReq+0xce>
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d008      	beq.n	80059c2 <USBD_StdEPReq+0xce>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	88db      	ldrh	r3, [r3, #6]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f87d 	bl	8006abc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fc5e 	bl	8006284 <USBD_CtlSendStatus>

        break;
 80059c8:	e004      	b.n	80059d4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb90 	bl	80060f2 <USBD_CtlError>
        break;
 80059d2:	bf00      	nop
      }
      break;
 80059d4:	e0de      	b.n	8005b94 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d002      	beq.n	80059e6 <USBD_StdEPReq+0xf2>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d015      	beq.n	8005a10 <USBD_StdEPReq+0x11c>
 80059e4:	e026      	b.n	8005a34 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <USBD_StdEPReq+0x112>
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d009      	beq.n	8005a06 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80059f2:	7bbb      	ldrb	r3, [r7, #14]
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 f860 	bl	8006abc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 f85c 	bl	8006abc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a04:	e01c      	b.n	8005a40 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fb72 	bl	80060f2 <USBD_CtlError>
        break;
 8005a0e:	e017      	b.n	8005a40 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	885b      	ldrh	r3, [r3, #2]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d112      	bne.n	8005a3e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f867 	bl	8006afa <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fc29 	bl	8006284 <USBD_CtlSendStatus>
        }
        break;
 8005a32:	e004      	b.n	8005a3e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb5b 	bl	80060f2 <USBD_CtlError>
        break;
 8005a3c:	e000      	b.n	8005a40 <USBD_StdEPReq+0x14c>
        break;
 8005a3e:	bf00      	nop
      }
      break;
 8005a40:	e0a8      	b.n	8005b94 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d002      	beq.n	8005a52 <USBD_StdEPReq+0x15e>
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d031      	beq.n	8005ab4 <USBD_StdEPReq+0x1c0>
 8005a50:	e095      	b.n	8005b7e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <USBD_StdEPReq+0x174>
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d004      	beq.n	8005a68 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb46 	bl	80060f2 <USBD_CtlError>
          break;
 8005a66:	e08f      	b.n	8005b88 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da0b      	bge.n	8005a88 <USBD_StdEPReq+0x194>
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	3310      	adds	r3, #16
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	e00a      	b.n	8005a9e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb8b 	bl	80061c8 <USBD_CtlSendData>
          break;
 8005ab2:	e069      	b.n	8005b88 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da11      	bge.n	8005ae0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	f003 020f 	and.w	r2, r3, #15
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	3318      	adds	r3, #24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d117      	bne.n	8005b06 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb0a 	bl	80060f2 <USBD_CtlError>
            break;
 8005ade:	e053      	b.n	8005b88 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	f003 020f 	and.w	r2, r3, #15
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faf7 	bl	80060f2 <USBD_CtlError>
            break;
 8005b04:	e040      	b.n	8005b88 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da0b      	bge.n	8005b26 <USBD_StdEPReq+0x232>
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	e00a      	b.n	8005b3c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <USBD_StdEPReq+0x256>
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d103      	bne.n	8005b52 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e00e      	b.n	8005b70 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 ffee 	bl	8006b38 <USBD_LL_IsStallEP>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2201      	movs	r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e002      	b.n	8005b70 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2202      	movs	r2, #2
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb26 	bl	80061c8 <USBD_CtlSendData>
          break;
 8005b7c:	e004      	b.n	8005b88 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fab6 	bl	80060f2 <USBD_CtlError>
        break;
 8005b86:	bf00      	nop
      }
      break;
 8005b88:	e004      	b.n	8005b94 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fab0 	bl	80060f2 <USBD_CtlError>
      break;
 8005b92:	bf00      	nop
    }
    break;
 8005b94:	e004      	b.n	8005ba0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 faaa 	bl	80060f2 <USBD_CtlError>
    break;
 8005b9e:	bf00      	nop
  }

  return ret;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	f200 80c9 	bhi.w	8005d58 <USBD_GetDescriptor+0x1ac>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <USBD_GetDescriptor+0x20>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005c01 	.word	0x08005c01
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005d59 	.word	0x08005d59
 8005bdc:	08005d59 	.word	0x08005d59
 8005be0:	08005d05 	.word	0x08005d05
 8005be4:	08005d2b 	.word	0x08005d2b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	7c12      	ldrb	r2, [r2, #16]
 8005bf4:	f107 010a 	add.w	r1, r7, #10
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	60f8      	str	r0, [r7, #12]
    break;
 8005bfe:	e0b0      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7c1b      	ldrb	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10d      	bne.n	8005c24 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f107 020a 	add.w	r2, r7, #10
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005c22:	e09e      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f107 020a 	add.w	r2, r7, #10
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
    break;
 8005c3e:	e090      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d856      	bhi.n	8005cf8 <USBD_GetDescriptor+0x14c>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <USBD_GetDescriptor+0xa4>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c69 	.word	0x08005c69
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c99 	.word	0x08005c99
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005ce1 	.word	0x08005ce1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	7c12      	ldrb	r2, [r2, #16]
 8005c74:	f107 010a 	add.w	r1, r7, #10
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4798      	blx	r3
 8005c7c:	60f8      	str	r0, [r7, #12]
      break;
 8005c7e:	e040      	b.n	8005d02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	7c12      	ldrb	r2, [r2, #16]
 8005c8c:	f107 010a 	add.w	r1, r7, #10
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	60f8      	str	r0, [r7, #12]
      break;
 8005c96:	e034      	b.n	8005d02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	7c12      	ldrb	r2, [r2, #16]
 8005ca4:	f107 010a 	add.w	r1, r7, #10
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
      break;
 8005cae:	e028      	b.n	8005d02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7c12      	ldrb	r2, [r2, #16]
 8005cbc:	f107 010a 	add.w	r1, r7, #10
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
      break;
 8005cc6:	e01c      	b.n	8005d02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7c12      	ldrb	r2, [r2, #16]
 8005cd4:	f107 010a 	add.w	r1, r7, #10
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	60f8      	str	r0, [r7, #12]
      break;
 8005cde:	e010      	b.n	8005d02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	7c12      	ldrb	r2, [r2, #16]
 8005cec:	f107 010a 	add.w	r1, r7, #10
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	60f8      	str	r0, [r7, #12]
      break;
 8005cf6:	e004      	b.n	8005d02 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9f9 	bl	80060f2 <USBD_CtlError>
      return;
 8005d00:	e04b      	b.n	8005d9a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005d02:	e02e      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7c1b      	ldrb	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	f107 020a 	add.w	r2, r7, #10
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
      break;
 8005d1e:	e020      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9e5 	bl	80060f2 <USBD_CtlError>
      return;
 8005d28:	e037      	b.n	8005d9a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7c1b      	ldrb	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f107 020a 	add.w	r2, r7, #10
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4798      	blx	r3
 8005d42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	2207      	movs	r2, #7
 8005d4a:	701a      	strb	r2, [r3, #0]
      break;
 8005d4c:	e009      	b.n	8005d62 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9ce 	bl	80060f2 <USBD_CtlError>
      return;
 8005d56:	e020      	b.n	8005d9a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9c9 	bl	80060f2 <USBD_CtlError>
    return;
 8005d60:	e01b      	b.n	8005d9a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <USBD_GetDescriptor+0x1e0>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	88db      	ldrh	r3, [r3, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	88da      	ldrh	r2, [r3, #6]
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bf28      	it	cs
 8005d7a:	4613      	movcs	r3, r2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68f9      	ldr	r1, [r7, #12]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa1e 	bl	80061c8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	88db      	ldrh	r3, [r3, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fa75 	bl	8006284 <USBD_CtlSendStatus>
  }
}
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	889b      	ldrh	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d130      	bne.n	8005e14 <USBD_SetAddress+0x74>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	88db      	ldrh	r3, [r3, #6]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12c      	bne.n	8005e14 <USBD_SetAddress+0x74>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d828      	bhi.n	8005e14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d104      	bne.n	8005de2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f989 	bl	80060f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de0:	e01c      	b.n	8005e1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7bfa      	ldrb	r2, [r7, #15]
 8005de6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fece 	bl	8006b90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa45 	bl	8006284 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e08:	e008      	b.n	8005e1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	e003      	b.n	8005e1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f96b 	bl	80060f2 <USBD_CtlError>
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	885b      	ldrh	r3, [r3, #2]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d904      	bls.n	8005e4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f955 	bl	80060f2 <USBD_CtlError>
 8005e48:	e075      	b.n	8005f36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d002      	beq.n	8005e5a <USBD_SetConfig+0x36>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d023      	beq.n	8005ea0 <USBD_SetConfig+0x7c>
 8005e58:	e062      	b.n	8005f20 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005e5a:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01a      	beq.n	8005e98 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005e62:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <USBD_SetConfig+0x118>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fa2a 	bl	80052d4 <USBD_SetClassConfig>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d104      	bne.n	8005e90 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f932 	bl	80060f2 <USBD_CtlError>
          return;
 8005e8e:	e052      	b.n	8005f36 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9f7 	bl	8006284 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005e96:	e04e      	b.n	8005f36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f9f3 	bl	8006284 <USBD_CtlSendStatus>
      break;
 8005e9e:	e04a      	b.n	8005f36 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d112      	bne.n	8005ece <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005eb0:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <USBD_SetConfig+0x118>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005eba:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fa26 	bl	8005312 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9dc 	bl	8006284 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005ecc:	e033      	b.n	8005f36 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d01d      	beq.n	8005f18 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fa14 	bl	8005312 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <USBD_SetConfig+0x118>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <USBD_SetConfig+0x118>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff f9ea 	bl	80052d4 <USBD_SetClassConfig>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d104      	bne.n	8005f10 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8f2 	bl	80060f2 <USBD_CtlError>
          return;
 8005f0e:	e012      	b.n	8005f36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f9b7 	bl	8006284 <USBD_CtlSendStatus>
      break;
 8005f16:	e00e      	b.n	8005f36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9b3 	bl	8006284 <USBD_CtlSendStatus>
      break;
 8005f1e:	e00a      	b.n	8005f36 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f8e5 	bl	80060f2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <USBD_SetConfig+0x118>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff f9ef 	bl	8005312 <USBD_ClrClassConfig>
      break;
 8005f34:	bf00      	nop
    }
  }
}
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000200 	.word	0x20000200

08005f40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d004      	beq.n	8005f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8cc 	bl	80060f2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005f5a:	e021      	b.n	8005fa0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	db17      	blt.n	8005f96 <USBD_GetConfig+0x56>
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dd02      	ble.n	8005f70 <USBD_GetConfig+0x30>
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d00b      	beq.n	8005f86 <USBD_GetConfig+0x46>
 8005f6e:	e012      	b.n	8005f96 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f922 	bl	80061c8 <USBD_CtlSendData>
      break;
 8005f84:	e00c      	b.n	8005fa0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f91a 	bl	80061c8 <USBD_CtlSendData>
      break;
 8005f94:	e004      	b.n	8005fa0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8aa 	bl	80060f2 <USBD_CtlError>
      break;
 8005f9e:	bf00      	nop
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d81e      	bhi.n	8005ffc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	88db      	ldrh	r3, [r3, #6]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d004      	beq.n	8005fd0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f892 	bl	80060f2 <USBD_CtlError>
      break;
 8005fce:	e01a      	b.n	8006006 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f043 0202 	orr.w	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f8e7 	bl	80061c8 <USBD_CtlSendData>
    break;
 8005ffa:	e004      	b.n	8006006 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f877 	bl	80060f2 <USBD_CtlError>
    break;
 8006004:	bf00      	nop
  }
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	885b      	ldrh	r3, [r3, #2]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d106      	bne.n	800602e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f92b 	bl	8006284 <USBD_CtlSendStatus>
  }

}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006046:	3b01      	subs	r3, #1
 8006048:	2b02      	cmp	r3, #2
 800604a:	d80b      	bhi.n	8006064 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	885b      	ldrh	r3, [r3, #2]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d10c      	bne.n	800606e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f911 	bl	8006284 <USBD_CtlSendStatus>
    }
    break;
 8006062:	e004      	b.n	800606e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f843 	bl	80060f2 <USBD_CtlError>
    break;
 800606c:	e000      	b.n	8006070 <USBD_ClrFeature+0x3a>
    break;
 800606e:	bf00      	nop
  }
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785a      	ldrb	r2, [r3, #1]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	3302      	adds	r3, #2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	b29a      	uxth	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	3303      	adds	r3, #3
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	3304      	adds	r3, #4
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3305      	adds	r3, #5
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	3306      	adds	r3, #6
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	3307      	adds	r3, #7
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4413      	add	r3, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	80da      	strh	r2, [r3, #6]

}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fcdc 	bl	8006abc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006104:	2100      	movs	r1, #0
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fcd8 	bl	8006abc <USBD_LL_StallEP>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d032      	beq.n	8006190 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f834 	bl	8006198 <USBD_GetLen>
 8006130:	4603      	mov	r3, r0
 8006132:	3301      	adds	r3, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	75fa      	strb	r2, [r7, #23]
 8006144:	461a      	mov	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4413      	add	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	75fa      	strb	r2, [r7, #23]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4413      	add	r3, r2
 800615c:	2203      	movs	r2, #3
 800615e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006160:	e012      	b.n	8006188 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	60fa      	str	r2, [r7, #12]
 8006168:	7dfa      	ldrb	r2, [r7, #23]
 800616a:	1c51      	adds	r1, r2, #1
 800616c:	75f9      	strb	r1, [r7, #23]
 800616e:	4611      	mov	r1, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	440a      	add	r2, r1
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	75fa      	strb	r2, [r7, #23]
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4413      	add	r3, r2
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e8      	bne.n	8006162 <USBD_GetString+0x4e>
    }
  }
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80061a4:	e005      	b.n	80061b2 <USBD_GetLen+0x1a>
    {
        len++;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	3301      	adds	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f5      	bne.n	80061a6 <USBD_GetLen+0xe>
    }

    return len;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	2100      	movs	r1, #0
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fcec 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	2100      	movs	r1, #0
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fcda 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2203      	movs	r2, #3
 8006236:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	2100      	movs	r1, #0
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fcdf 	bl	8006c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fccd 	bl	8006c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2204      	movs	r2, #4
 8006290:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006294:	2300      	movs	r3, #0
 8006296:	2200      	movs	r2, #0
 8006298:	2100      	movs	r1, #0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fc97 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2205      	movs	r2, #5
 80062b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80062ba:	2300      	movs	r3, #0
 80062bc:	2200      	movs	r2, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fca7 	bl	8006c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062d4:	2200      	movs	r2, #0
 80062d6:	4912      	ldr	r1, [pc, #72]	; (8006320 <MX_USB_DEVICE_Init+0x50>)
 80062d8:	4812      	ldr	r0, [pc, #72]	; (8006324 <MX_USB_DEVICE_Init+0x54>)
 80062da:	f7fe ff9f 	bl	800521c <USBD_Init>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062e4:	f7fa fada 	bl	800089c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062e8:	490f      	ldr	r1, [pc, #60]	; (8006328 <MX_USB_DEVICE_Init+0x58>)
 80062ea:	480e      	ldr	r0, [pc, #56]	; (8006324 <MX_USB_DEVICE_Init+0x54>)
 80062ec:	f7fe ffc1 	bl	8005272 <USBD_RegisterClass>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062f6:	f7fa fad1 	bl	800089c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062fa:	490c      	ldr	r1, [pc, #48]	; (800632c <MX_USB_DEVICE_Init+0x5c>)
 80062fc:	4809      	ldr	r0, [pc, #36]	; (8006324 <MX_USB_DEVICE_Init+0x54>)
 80062fe:	f7fe feef 	bl	80050e0 <USBD_CDC_RegisterInterface>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006308:	f7fa fac8 	bl	800089c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <MX_USB_DEVICE_Init+0x54>)
 800630e:	f7fe ffca 	bl	80052a6 <USBD_Start>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006318:	f7fa fac0 	bl	800089c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800631c:	bf00      	nop
 800631e:	bd80      	pop	{r7, pc}
 8006320:	2000012c 	.word	0x2000012c
 8006324:	2000027c 	.word	0x2000027c
 8006328:	20000018 	.word	0x20000018
 800632c:	2000011c 	.word	0x2000011c

08006330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006334:	2200      	movs	r2, #0
 8006336:	4905      	ldr	r1, [pc, #20]	; (800634c <CDC_Init_FS+0x1c>)
 8006338:	4805      	ldr	r0, [pc, #20]	; (8006350 <CDC_Init_FS+0x20>)
 800633a:	f7fe fee8 	bl	800510e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800633e:	4905      	ldr	r1, [pc, #20]	; (8006354 <CDC_Init_FS+0x24>)
 8006340:	4803      	ldr	r0, [pc, #12]	; (8006350 <CDC_Init_FS+0x20>)
 8006342:	f7fe fefe 	bl	8005142 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006348:	4618      	mov	r0, r3
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000558 	.word	0x20000558
 8006350:	2000027c 	.word	0x2000027c
 8006354:	20000518 	.word	0x20000518

08006358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800635c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800635e:	4618      	mov	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	4613      	mov	r3, r2
 8006376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	2b23      	cmp	r3, #35	; 0x23
 800637c:	d84a      	bhi.n	8006414 <CDC_Control_FS+0xac>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <CDC_Control_FS+0x1c>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	08006415 	.word	0x08006415
 8006388:	08006415 	.word	0x08006415
 800638c:	08006415 	.word	0x08006415
 8006390:	08006415 	.word	0x08006415
 8006394:	08006415 	.word	0x08006415
 8006398:	08006415 	.word	0x08006415
 800639c:	08006415 	.word	0x08006415
 80063a0:	08006415 	.word	0x08006415
 80063a4:	08006415 	.word	0x08006415
 80063a8:	08006415 	.word	0x08006415
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006415 	.word	0x08006415
 80063b4:	08006415 	.word	0x08006415
 80063b8:	08006415 	.word	0x08006415
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
 80063e0:	08006415 	.word	0x08006415
 80063e4:	08006415 	.word	0x08006415
 80063e8:	08006415 	.word	0x08006415
 80063ec:	08006415 	.word	0x08006415
 80063f0:	08006415 	.word	0x08006415
 80063f4:	08006415 	.word	0x08006415
 80063f8:	08006415 	.word	0x08006415
 80063fc:	08006415 	.word	0x08006415
 8006400:	08006415 	.word	0x08006415
 8006404:	08006415 	.word	0x08006415
 8006408:	08006415 	.word	0x08006415
 800640c:	08006415 	.word	0x08006415
 8006410:	08006415 	.word	0x08006415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006414:	bf00      	nop
  }

  return (USBD_OK);
 8006416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
	memcpy (message_rx, Buf, *Len);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4805      	ldr	r0, [pc, #20]	; (800644c <CDC_Receive_FS+0x28>)
 8006438:	f000 fc88 	bl	8006d4c <memcpy>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS); // ф-я сообщает, что данные приняты
 800643c:	4804      	ldr	r0, [pc, #16]	; (8006450 <CDC_Receive_FS+0x2c>)
 800643e:	f7fe fec3 	bl	80051c8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8006442:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000264 	.word	0x20000264
 8006450:	2000027c 	.word	0x2000027c

08006454 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006464:	4b0d      	ldr	r3, [pc, #52]	; (800649c <CDC_Transmit_FS+0x48>)
 8006466:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800646a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006476:	2301      	movs	r3, #1
 8006478:	e00b      	b.n	8006492 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800647a:	887b      	ldrh	r3, [r7, #2]
 800647c:	461a      	mov	r2, r3
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4806      	ldr	r0, [pc, #24]	; (800649c <CDC_Transmit_FS+0x48>)
 8006482:	f7fe fe44 	bl	800510e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006486:	4805      	ldr	r0, [pc, #20]	; (800649c <CDC_Transmit_FS+0x48>)
 8006488:	f7fe fe6f 	bl	800516a <USBD_CDC_TransmitPacket>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	2000027c 	.word	0x2000027c

080064a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2212      	movs	r2, #18
 80064b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80064b2:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000148 	.word	0x20000148

080064c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2204      	movs	r2, #4
 80064d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	2000015c 	.word	0x2000015c

080064e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <USBD_FS_ProductStrDescriptor+0x34>)
 80064fe:	4808      	ldr	r0, [pc, #32]	; (8006520 <USBD_FS_ProductStrDescriptor+0x38>)
 8006500:	f7ff fe08 	bl	8006114 <USBD_GetString>
 8006504:	e004      	b.n	8006510 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <USBD_FS_ProductStrDescriptor+0x34>)
 800650a:	4805      	ldr	r0, [pc, #20]	; (8006520 <USBD_FS_ProductStrDescriptor+0x38>)
 800650c:	f7ff fe02 	bl	8006114 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006510:	4b02      	ldr	r3, [pc, #8]	; (800651c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000598 	.word	0x20000598
 8006520:	08006f20 	.word	0x08006f20

08006524 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	4904      	ldr	r1, [pc, #16]	; (8006544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006534:	4804      	ldr	r0, [pc, #16]	; (8006548 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006536:	f7ff fded 	bl	8006114 <USBD_GetString>
  return USBD_StrDesc;
 800653a:	4b02      	ldr	r3, [pc, #8]	; (8006544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000598 	.word	0x20000598
 8006548:	08006f38 	.word	0x08006f38

0800654c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	221a      	movs	r2, #26
 800655c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800655e:	f000 f843 	bl	80065e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006562:	4b02      	ldr	r3, [pc, #8]	; (800656c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000160 	.word	0x20000160

08006570 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	6039      	str	r1, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d105      	bne.n	800658e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4907      	ldr	r1, [pc, #28]	; (80065a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006586:	4808      	ldr	r0, [pc, #32]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006588:	f7ff fdc4 	bl	8006114 <USBD_GetString>
 800658c:	e004      	b.n	8006598 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	4904      	ldr	r1, [pc, #16]	; (80065a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006592:	4805      	ldr	r0, [pc, #20]	; (80065a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006594:	f7ff fdbe 	bl	8006114 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000598 	.word	0x20000598
 80065a8:	08006f4c 	.word	0x08006f4c

080065ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d105      	bne.n	80065ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4907      	ldr	r1, [pc, #28]	; (80065e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065c2:	4808      	ldr	r0, [pc, #32]	; (80065e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065c4:	f7ff fda6 	bl	8006114 <USBD_GetString>
 80065c8:	e004      	b.n	80065d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4904      	ldr	r1, [pc, #16]	; (80065e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065ce:	4805      	ldr	r0, [pc, #20]	; (80065e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065d0:	f7ff fda0 	bl	8006114 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000598 	.word	0x20000598
 80065e4:	08006f58 	.word	0x08006f58

080065e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <Get_SerialNum+0x44>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <Get_SerialNum+0x48>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80065fa:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <Get_SerialNum+0x4c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800660e:	2208      	movs	r2, #8
 8006610:	4909      	ldr	r1, [pc, #36]	; (8006638 <Get_SerialNum+0x50>)
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f814 	bl	8006640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006618:	2204      	movs	r2, #4
 800661a:	4908      	ldr	r1, [pc, #32]	; (800663c <Get_SerialNum+0x54>)
 800661c:	68b8      	ldr	r0, [r7, #8]
 800661e:	f000 f80f 	bl	8006640 <IntToUnicode>
  }
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	1fff7a10 	.word	0x1fff7a10
 8006630:	1fff7a14 	.word	0x1fff7a14
 8006634:	1fff7a18 	.word	0x1fff7a18
 8006638:	20000162 	.word	0x20000162
 800663c:	20000172 	.word	0x20000172

08006640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]
 8006656:	e027      	b.n	80066a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0f1b      	lsrs	r3, r3, #28
 800665c:	2b09      	cmp	r3, #9
 800665e:	d80b      	bhi.n	8006678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	0f1b      	lsrs	r3, r3, #28
 8006664:	b2da      	uxtb	r2, r3
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4619      	mov	r1, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	440b      	add	r3, r1
 8006670:	3230      	adds	r2, #48	; 0x30
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e00a      	b.n	800668e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	0f1b      	lsrs	r3, r3, #28
 800667c:	b2da      	uxtb	r2, r3
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4619      	mov	r1, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	440b      	add	r3, r1
 8006688:	3237      	adds	r2, #55	; 0x37
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	3301      	adds	r3, #1
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	3301      	adds	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
 80066a8:	7dfa      	ldrb	r2, [r7, #23]
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d3d3      	bcc.n	8006658 <IntToUnicode+0x18>
  }
}
 80066b0:	bf00      	nop
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c4:	f107 0314 	add.w	r3, r7, #20
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	60da      	str	r2, [r3, #12]
 80066d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066dc:	d147      	bne.n	800676e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	4a24      	ldr	r2, [pc, #144]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6313      	str	r3, [r2, #48]	; 0x30
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4619      	mov	r1, r3
 800670e:	481b      	ldr	r0, [pc, #108]	; (800677c <HAL_PCD_MspInit+0xc0>)
 8006710:	f7fa fb86 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006714:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671a:	2302      	movs	r3, #2
 800671c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006722:	2300      	movs	r3, #0
 8006724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006726:	230a      	movs	r3, #10
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800672a:	f107 0314 	add.w	r3, r7, #20
 800672e:	4619      	mov	r1, r3
 8006730:	4812      	ldr	r0, [pc, #72]	; (800677c <HAL_PCD_MspInit+0xc0>)
 8006732:	f7fa fb75 	bl	8000e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	6353      	str	r3, [r2, #52]	; 0x34
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 800674c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006750:	6453      	str	r3, [r2, #68]	; 0x44
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_PCD_MspInit+0xbc>)
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	2043      	movs	r0, #67	; 0x43
 8006764:	f7fa fb25 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006768:	2043      	movs	r0, #67	; 0x43
 800676a:	f7fa fb3e 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800676e:	bf00      	nop
 8006770:	3728      	adds	r7, #40	; 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	40020000 	.word	0x40020000

08006780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe fdce 	bl	8005338 <USBD_LL_SetupStage>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fe fdfe 	bl	80053ce <USBD_LL_DataOutStage>
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	3348      	adds	r3, #72	; 0x48
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	4619      	mov	r1, r3
 8006802:	f7fe fe55 	bl	80054b0 <USBD_LL_DataInStage>
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe ff63 	bl	80056e8 <USBD_LL_SOF>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	e008      	b.n	8006856 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d102      	bne.n	8006852 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	e001      	b.n	8006856 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006852:	f7fa f823 	bl	800089c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800685c:	7bfa      	ldrb	r2, [r7, #15]
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe ff0b 	bl	800567c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fec4 	bl	80055fa <USBD_LL_Reset>
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe ff06 	bl	800569c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <HAL_PCD_SuspendCallback+0x48>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	4a03      	ldr	r2, [pc, #12]	; (80068c4 <HAL_PCD_SuspendCallback+0x48>)
 80068b6:	f043 0306 	orr.w	r3, r3, #6
 80068ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	e000ed00 	.word	0xe000ed00

080068c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fef5 	bl	80056c6 <USBD_LL_Resume>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe ff1b 	bl	8005736 <USBD_LL_IsoOUTIncomplete>
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fefc 	bl	800571c <USBD_LL_IsoINIncomplete>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ff08 	bl	8005750 <USBD_LL_DevConnected>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ff05 	bl	8005766 <USBD_LL_DevDisconnected>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d13c      	bne.n	80069ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006974:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <USBD_LL_Init+0x94>)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <USBD_LL_Init+0x94>)
 8006980:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <USBD_LL_Init+0x94>)
 8006986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800698a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800698c:	4b1a      	ldr	r3, [pc, #104]	; (80069f8 <USBD_LL_Init+0x94>)
 800698e:	2204      	movs	r2, #4
 8006990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006992:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <USBD_LL_Init+0x94>)
 8006994:	2202      	movs	r2, #2
 8006996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006998:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <USBD_LL_Init+0x94>)
 800699a:	2200      	movs	r2, #0
 800699c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800699e:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <USBD_LL_Init+0x94>)
 80069a0:	2202      	movs	r2, #2
 80069a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <USBD_LL_Init+0x94>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <USBD_LL_Init+0x94>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069b0:	4b11      	ldr	r3, [pc, #68]	; (80069f8 <USBD_LL_Init+0x94>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <USBD_LL_Init+0x94>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <USBD_LL_Init+0x94>)
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80069c2:	480d      	ldr	r0, [pc, #52]	; (80069f8 <USBD_LL_Init+0x94>)
 80069c4:	f7fa fbdf 	bl	8001186 <HAL_PCD_Init>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80069ce:	f7f9 ff65 	bl	800089c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80069d2:	2180      	movs	r1, #128	; 0x80
 80069d4:	4808      	ldr	r0, [pc, #32]	; (80069f8 <USBD_LL_Init+0x94>)
 80069d6:	f7fb fd44 	bl	8002462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80069da:	2240      	movs	r2, #64	; 0x40
 80069dc:	2100      	movs	r1, #0
 80069de:	4806      	ldr	r0, [pc, #24]	; (80069f8 <USBD_LL_Init+0x94>)
 80069e0:	f7fb fcf8 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	2101      	movs	r1, #1
 80069e8:	4803      	ldr	r0, [pc, #12]	; (80069f8 <USBD_LL_Init+0x94>)
 80069ea:	f7fb fcf3 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000798 	.word	0x20000798

080069fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fa fcd4 	bl	80013c0 <HAL_PCD_Start>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f92e 	bl	8006c80 <USBD_Get_USB_Status>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	70fb      	strb	r3, [r7, #3]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70bb      	strb	r3, [r7, #2]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006a5a:	78bb      	ldrb	r3, [r7, #2]
 8006a5c:	883a      	ldrh	r2, [r7, #0]
 8006a5e:	78f9      	ldrb	r1, [r7, #3]
 8006a60:	f7fb f8a9 	bl	8001bb6 <HAL_PCD_EP_Open>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f908 	bl	8006c80 <USBD_Get_USB_Status>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a98:	78fa      	ldrb	r2, [r7, #3]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fb f8f2 	bl	8001c86 <HAL_PCD_EP_Close>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 f8e9 	bl	8006c80 <USBD_Get_USB_Status>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fb f9ca 	bl	8001e74 <HAL_PCD_EP_SetStall>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f8ca 	bl	8006c80 <USBD_Get_USB_Status>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006b14:	78fa      	ldrb	r2, [r7, #3]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fb fa0f 	bl	8001f3c <HAL_PCD_EP_ClrStall>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f8ab 	bl	8006c80 <USBD_Get_USB_Status>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006b4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da0b      	bge.n	8006b6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	333e      	adds	r3, #62	; 0x3e
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	e00b      	b.n	8006b84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b72:	68f9      	ldr	r1, [r7, #12]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fa ffdc 	bl	8001b6c <HAL_PCD_SetAddress>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f860 	bl	8006c80 <USBD_Get_USB_Status>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	460b      	mov	r3, r1
 8006bdc:	72fb      	strb	r3, [r7, #11]
 8006bde:	4613      	mov	r3, r2
 8006be0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006bf0:	893b      	ldrh	r3, [r7, #8]
 8006bf2:	7af9      	ldrb	r1, [r7, #11]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f7fb f8f3 	bl	8001de0 <HAL_PCD_EP_Transmit>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f83d 	bl	8006c80 <USBD_Get_USB_Status>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006c0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	460b      	mov	r3, r1
 8006c22:	72fb      	strb	r3, [r7, #11]
 8006c24:	4613      	mov	r3, r2
 8006c26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	7af9      	ldrb	r1, [r7, #11]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	f7fb f86d 	bl	8001d1a <HAL_PCD_EP_Receive>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f81a 	bl	8006c80 <USBD_Get_USB_Status>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fb f89d 	bl	8001db0 <HAL_PCD_EP_GetRxCount>
 8006c76:	4603      	mov	r3, r0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d817      	bhi.n	8006cc4 <USBD_Get_USB_Status+0x44>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBD_Get_USB_Status+0x1c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cb3 	.word	0x08006cb3
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cbf 	.word	0x08006cbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e00b      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb6:	e008      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	e005      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc2:	e002      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc8:	bf00      	nop
  }
  return usb_status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	2000017c 	.word	0x2000017c

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4e0d      	ldr	r6, [pc, #52]	; (8006d1c <__libc_init_array+0x38>)
 8006ce8:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cea:	1ba4      	subs	r4, r4, r6
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	2500      	movs	r5, #0
 8006cf0:	42a5      	cmp	r5, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	4e0b      	ldr	r6, [pc, #44]	; (8006d24 <__libc_init_array+0x40>)
 8006cf6:	4c0c      	ldr	r4, [pc, #48]	; (8006d28 <__libc_init_array+0x44>)
 8006cf8:	f000 f8f6 	bl	8006ee8 <_init>
 8006cfc:	1ba4      	subs	r4, r4, r6
 8006cfe:	10a4      	asrs	r4, r4, #2
 8006d00:	2500      	movs	r5, #0
 8006d02:	42a5      	cmp	r5, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d0c:	4798      	blx	r3
 8006d0e:	3501      	adds	r5, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d16:	4798      	blx	r3
 8006d18:	3501      	adds	r5, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08006f88 	.word	0x08006f88
 8006d20:	08006f88 	.word	0x08006f88
 8006d24:	08006f88 	.word	0x08006f88
 8006d28:	08006f8c 	.word	0x08006f8c

08006d2c <malloc>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <malloc+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f000 b86d 	b.w	8006e10 <_malloc_r>
 8006d36:	bf00      	nop
 8006d38:	2000017c 	.word	0x2000017c

08006d3c <free>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <free+0xc>)
 8006d3e:	4601      	mov	r1, r0
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f000 b817 	b.w	8006d74 <_free_r>
 8006d46:	bf00      	nop
 8006d48:	2000017c 	.word	0x2000017c

08006d4c <memcpy>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	1e43      	subs	r3, r0, #1
 8006d50:	440a      	add	r2, r1
 8006d52:	4291      	cmp	r1, r2
 8006d54:	d100      	bne.n	8006d58 <memcpy+0xc>
 8006d56:	bd10      	pop	{r4, pc}
 8006d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d60:	e7f7      	b.n	8006d52 <memcpy+0x6>

08006d62 <memset>:
 8006d62:	4402      	add	r2, r0
 8006d64:	4603      	mov	r3, r0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d100      	bne.n	8006d6c <memset+0xa>
 8006d6a:	4770      	bx	lr
 8006d6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d70:	e7f9      	b.n	8006d66 <memset+0x4>
	...

08006d74 <_free_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4605      	mov	r5, r0
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	d045      	beq.n	8006e08 <_free_r+0x94>
 8006d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d80:	1f0c      	subs	r4, r1, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfb8      	it	lt
 8006d86:	18e4      	addlt	r4, r4, r3
 8006d88:	f000 f8ac 	bl	8006ee4 <__malloc_lock>
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <_free_r+0x98>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	4610      	mov	r0, r2
 8006d92:	b933      	cbnz	r3, 8006da2 <_free_r+0x2e>
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6014      	str	r4, [r2, #0]
 8006d98:	4628      	mov	r0, r5
 8006d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d9e:	f000 b8a2 	b.w	8006ee6 <__malloc_unlock>
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	d90c      	bls.n	8006dc0 <_free_r+0x4c>
 8006da6:	6821      	ldr	r1, [r4, #0]
 8006da8:	1862      	adds	r2, r4, r1
 8006daa:	4293      	cmp	r3, r2
 8006dac:	bf04      	itt	eq
 8006dae:	681a      	ldreq	r2, [r3, #0]
 8006db0:	685b      	ldreq	r3, [r3, #4]
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	bf04      	itt	eq
 8006db6:	1852      	addeq	r2, r2, r1
 8006db8:	6022      	streq	r2, [r4, #0]
 8006dba:	6004      	str	r4, [r0, #0]
 8006dbc:	e7ec      	b.n	8006d98 <_free_r+0x24>
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	b10a      	cbz	r2, 8006dc8 <_free_r+0x54>
 8006dc4:	42a2      	cmp	r2, r4
 8006dc6:	d9fa      	bls.n	8006dbe <_free_r+0x4a>
 8006dc8:	6819      	ldr	r1, [r3, #0]
 8006dca:	1858      	adds	r0, r3, r1
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d10b      	bne.n	8006de8 <_free_r+0x74>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	4401      	add	r1, r0
 8006dd4:	1858      	adds	r0, r3, r1
 8006dd6:	4282      	cmp	r2, r0
 8006dd8:	6019      	str	r1, [r3, #0]
 8006dda:	d1dd      	bne.n	8006d98 <_free_r+0x24>
 8006ddc:	6810      	ldr	r0, [r2, #0]
 8006dde:	6852      	ldr	r2, [r2, #4]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	4401      	add	r1, r0
 8006de4:	6019      	str	r1, [r3, #0]
 8006de6:	e7d7      	b.n	8006d98 <_free_r+0x24>
 8006de8:	d902      	bls.n	8006df0 <_free_r+0x7c>
 8006dea:	230c      	movs	r3, #12
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	e7d3      	b.n	8006d98 <_free_r+0x24>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	1821      	adds	r1, r4, r0
 8006df4:	428a      	cmp	r2, r1
 8006df6:	bf04      	itt	eq
 8006df8:	6811      	ldreq	r1, [r2, #0]
 8006dfa:	6852      	ldreq	r2, [r2, #4]
 8006dfc:	6062      	str	r2, [r4, #4]
 8006dfe:	bf04      	itt	eq
 8006e00:	1809      	addeq	r1, r1, r0
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	605c      	str	r4, [r3, #4]
 8006e06:	e7c7      	b.n	8006d98 <_free_r+0x24>
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000204 	.word	0x20000204

08006e10 <_malloc_r>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	1ccd      	adds	r5, r1, #3
 8006e14:	f025 0503 	bic.w	r5, r5, #3
 8006e18:	3508      	adds	r5, #8
 8006e1a:	2d0c      	cmp	r5, #12
 8006e1c:	bf38      	it	cc
 8006e1e:	250c      	movcc	r5, #12
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	4606      	mov	r6, r0
 8006e24:	db01      	blt.n	8006e2a <_malloc_r+0x1a>
 8006e26:	42a9      	cmp	r1, r5
 8006e28:	d903      	bls.n	8006e32 <_malloc_r+0x22>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	2000      	movs	r0, #0
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	f000 f857 	bl	8006ee4 <__malloc_lock>
 8006e36:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <_malloc_r+0xac>)
 8006e38:	6814      	ldr	r4, [r2, #0]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	b991      	cbnz	r1, 8006e64 <_malloc_r+0x54>
 8006e3e:	4c20      	ldr	r4, [pc, #128]	; (8006ec0 <_malloc_r+0xb0>)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	b91b      	cbnz	r3, 8006e4c <_malloc_r+0x3c>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 f83d 	bl	8006ec4 <_sbrk_r>
 8006e4a:	6020      	str	r0, [r4, #0]
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f838 	bl	8006ec4 <_sbrk_r>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d124      	bne.n	8006ea2 <_malloc_r+0x92>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f842 	bl	8006ee6 <__malloc_unlock>
 8006e62:	e7e4      	b.n	8006e2e <_malloc_r+0x1e>
 8006e64:	680b      	ldr	r3, [r1, #0]
 8006e66:	1b5b      	subs	r3, r3, r5
 8006e68:	d418      	bmi.n	8006e9c <_malloc_r+0x8c>
 8006e6a:	2b0b      	cmp	r3, #11
 8006e6c:	d90f      	bls.n	8006e8e <_malloc_r+0x7e>
 8006e6e:	600b      	str	r3, [r1, #0]
 8006e70:	50cd      	str	r5, [r1, r3]
 8006e72:	18cc      	adds	r4, r1, r3
 8006e74:	4630      	mov	r0, r6
 8006e76:	f000 f836 	bl	8006ee6 <__malloc_unlock>
 8006e7a:	f104 000b 	add.w	r0, r4, #11
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	f020 0007 	bic.w	r0, r0, #7
 8006e84:	1ac3      	subs	r3, r0, r3
 8006e86:	d0d3      	beq.n	8006e30 <_malloc_r+0x20>
 8006e88:	425a      	negs	r2, r3
 8006e8a:	50e2      	str	r2, [r4, r3]
 8006e8c:	e7d0      	b.n	8006e30 <_malloc_r+0x20>
 8006e8e:	428c      	cmp	r4, r1
 8006e90:	684b      	ldr	r3, [r1, #4]
 8006e92:	bf16      	itet	ne
 8006e94:	6063      	strne	r3, [r4, #4]
 8006e96:	6013      	streq	r3, [r2, #0]
 8006e98:	460c      	movne	r4, r1
 8006e9a:	e7eb      	b.n	8006e74 <_malloc_r+0x64>
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	6849      	ldr	r1, [r1, #4]
 8006ea0:	e7cc      	b.n	8006e3c <_malloc_r+0x2c>
 8006ea2:	1cc4      	adds	r4, r0, #3
 8006ea4:	f024 0403 	bic.w	r4, r4, #3
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d005      	beq.n	8006eb8 <_malloc_r+0xa8>
 8006eac:	1a21      	subs	r1, r4, r0
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f000 f808 	bl	8006ec4 <_sbrk_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d0cf      	beq.n	8006e58 <_malloc_r+0x48>
 8006eb8:	6025      	str	r5, [r4, #0]
 8006eba:	e7db      	b.n	8006e74 <_malloc_r+0x64>
 8006ebc:	20000204 	.word	0x20000204
 8006ec0:	20000208 	.word	0x20000208

08006ec4 <_sbrk_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4c06      	ldr	r4, [pc, #24]	; (8006ee0 <_sbrk_r+0x1c>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4605      	mov	r5, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	f7f9 fd94 	bl	80009fc <_sbrk>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_sbrk_r+0x1a>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_sbrk_r+0x1a>
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20000ba0 	.word	0x20000ba0

08006ee4 <__malloc_lock>:
 8006ee4:	4770      	bx	lr

08006ee6 <__malloc_unlock>:
 8006ee6:	4770      	bx	lr

08006ee8 <_init>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr

08006ef4 <_fini>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr
