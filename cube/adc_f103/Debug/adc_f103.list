
adc_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003520  08003520  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003520  08003520  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003520  08003520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08003598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003598  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009252  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce9  00000000  00000000  000292eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7c  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dd2  00000000  00000000  00043a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ab6  00000000  00000000  0004d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d52e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002494  00000000  00000000  000d5338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003444 	.word	0x08003444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003444 	.word	0x08003444

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb95 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f89b 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f98b 	bl	8000484 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f96b 	bl	8000448 <MX_DMA_Init>
  MX_ADC1_Init();
 8000172:	f000 f8f1 	bl	8000358 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f93d 	bl	80003f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ENABLE);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	483d      	ldr	r0, [pc, #244]	; (8000278 <main+0x11c>)
 8000182:	f001 fd75 	bl	8001c70 <HAL_GPIO_WritePin>
  sprintf (msg_UART_TX, "%lu, %lu, %lu, %lu\r\n", HAL_RCC_GetSysClockFreq(), HAL_RCC_GetHCLKFreq(), HAL_RCC_GetPCLK1Freq(), HAL_RCC_GetPCLK2Freq());
 8000186:	f002 f90f 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800018a:	4605      	mov	r5, r0
 800018c:	f002 f96c 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8000190:	4606      	mov	r6, r0
 8000192:	f002 f973 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8000196:	4604      	mov	r4, r0
 8000198:	f002 f984 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 800019c:	4603      	mov	r3, r0
 800019e:	9301      	str	r3, [sp, #4]
 80001a0:	9400      	str	r4, [sp, #0]
 80001a2:	4633      	mov	r3, r6
 80001a4:	462a      	mov	r2, r5
 80001a6:	4935      	ldr	r1, [pc, #212]	; (800027c <main+0x120>)
 80001a8:	4835      	ldr	r0, [pc, #212]	; (8000280 <main+0x124>)
 80001aa:	f002 fd11 	bl	8002bd0 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF);
 80001ae:	4834      	ldr	r0, [pc, #208]	; (8000280 <main+0x124>)
 80001b0:	f7ff ffcc 	bl	800014c <strlen>
 80001b4:	4603      	mov	r3, r0
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	23ff      	movs	r3, #255	; 0xff
 80001ba:	4931      	ldr	r1, [pc, #196]	; (8000280 <main+0x124>)
 80001bc:	4831      	ldr	r0, [pc, #196]	; (8000284 <main+0x128>)
 80001be:	f002 fb6a 	bl	8002896 <HAL_UART_Transmit>
  sprintf (msg_UART_TX, "adc_DMA_start\r\n");
 80001c2:	4931      	ldr	r1, [pc, #196]	; (8000288 <main+0x12c>)
 80001c4:	482e      	ldr	r0, [pc, #184]	; (8000280 <main+0x124>)
 80001c6:	f002 fd03 	bl	8002bd0 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF);
 80001ca:	482d      	ldr	r0, [pc, #180]	; (8000280 <main+0x124>)
 80001cc:	f7ff ffbe 	bl	800014c <strlen>
 80001d0:	4603      	mov	r3, r0
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	23ff      	movs	r3, #255	; 0xff
 80001d6:	492a      	ldr	r1, [pc, #168]	; (8000280 <main+0x124>)
 80001d8:	482a      	ldr	r0, [pc, #168]	; (8000284 <main+0x128>)
 80001da:	f002 fb5c 	bl	8002896 <HAL_UART_Transmit>
  HAL_ADCEx_Calibration_Start(&hadc1); //калибровка adc1
 80001de:	482b      	ldr	r0, [pc, #172]	; (800028c <main+0x130>)
 80001e0:	f000 ffe0 	bl	80011a4 <HAL_ADCEx_Calibration_Start>
  sprintf (msg_UART_TX, "adc_calibrate\r\n");
 80001e4:	492a      	ldr	r1, [pc, #168]	; (8000290 <main+0x134>)
 80001e6:	4826      	ldr	r0, [pc, #152]	; (8000280 <main+0x124>)
 80001e8:	f002 fcf2 	bl	8002bd0 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF);
 80001ec:	4824      	ldr	r0, [pc, #144]	; (8000280 <main+0x124>)
 80001ee:	f7ff ffad 	bl	800014c <strlen>
 80001f2:	4603      	mov	r3, r0
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	23ff      	movs	r3, #255	; 0xff
 80001f8:	4921      	ldr	r1, [pc, #132]	; (8000280 <main+0x124>)
 80001fa:	4822      	ldr	r0, [pc, #136]	; (8000284 <main+0x128>)
 80001fc:	f002 fb4b 	bl	8002896 <HAL_UART_Transmit>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 2); // стартуем АЦП с DMA
 8000200:	2202      	movs	r2, #2
 8000202:	4924      	ldr	r1, [pc, #144]	; (8000294 <main+0x138>)
 8000204:	4821      	ldr	r0, [pc, #132]	; (800028c <main+0x130>)
 8000206:	f000 fca1 	bl	8000b4c <HAL_ADC_Start_DMA>
	HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
	sprintf(msg_UART_TX,  "ADC=%hd\n", (uint16_t)value_adc);
	HAL_UART_Transmit(&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 1000);
	HAL_Delay(1000);*/

 if (flag)
 800020a:	4b23      	ldr	r3, [pc, #140]	; (8000298 <main+0x13c>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2db      	uxtb	r3, r3
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0fa      	beq.n	800020a <main+0xae>
 {
	 flag = 0;
 8000214:	4b20      	ldr	r3, [pc, #128]	; (8000298 <main+0x13c>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 800021a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021e:	4816      	ldr	r0, [pc, #88]	; (8000278 <main+0x11c>)
 8000220:	f001 fd3e 	bl	8001ca0 <HAL_GPIO_TogglePin>
	 HAL_ADC_Stop_DMA(&hadc1); // останавливаем АЦП1
 8000224:	4819      	ldr	r0, [pc, #100]	; (800028c <main+0x130>)
 8000226:	f000 fd6f 	bl	8000d08 <HAL_ADC_Stop_DMA>
	 sprintf(msg_UART_TX,  "ADC %hd %hd\n", (uint16_t)adc[0], (uint16_t)adc[1]);
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <main+0x138>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <main+0x138>)
 8000234:	885b      	ldrh	r3, [r3, #2]
 8000236:	b29b      	uxth	r3, r3
 8000238:	4918      	ldr	r1, [pc, #96]	; (800029c <main+0x140>)
 800023a:	4811      	ldr	r0, [pc, #68]	; (8000280 <main+0x124>)
 800023c:	f002 fcc8 	bl	8002bd0 <siprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 1000);
 8000240:	480f      	ldr	r0, [pc, #60]	; (8000280 <main+0x124>)
 8000242:	f7ff ff83 	bl	800014c <strlen>
 8000246:	4603      	mov	r3, r0
 8000248:	b29a      	uxth	r2, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	490c      	ldr	r1, [pc, #48]	; (8000280 <main+0x124>)
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0x128>)
 8000252:	f002 fb20 	bl	8002896 <HAL_UART_Transmit>
	 adc[0] = 0;
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0x138>)
 8000258:	2200      	movs	r2, #0
 800025a:	801a      	strh	r2, [r3, #0]
	 adc[1] = 0;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x138>)
 800025e:	2200      	movs	r2, #0
 8000260:	805a      	strh	r2, [r3, #2]
	 HAL_Delay(500);
 8000262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000266:	f000 fb75 	bl	8000954 <HAL_Delay>
	 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 2); // запускаем преобразование сигнала АЦП1
 800026a:	2202      	movs	r2, #2
 800026c:	4909      	ldr	r1, [pc, #36]	; (8000294 <main+0x138>)
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <main+0x130>)
 8000270:	f000 fc6c 	bl	8000b4c <HAL_ADC_Start_DMA>
 if (flag)
 8000274:	e7c9      	b.n	800020a <main+0xae>
 8000276:	bf00      	nop
 8000278:	40011000 	.word	0x40011000
 800027c:	0800345c 	.word	0x0800345c
 8000280:	20000158 	.word	0x20000158
 8000284:	200000d0 	.word	0x200000d0
 8000288:	08003474 	.word	0x08003474
 800028c:	200000a0 	.word	0x200000a0
 8000290:	08003484 	.word	0x08003484
 8000294:	20000090 	.word	0x20000090
 8000298:	2000008c 	.word	0x2000008c
 800029c:	08003494 	.word	0x08003494

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	; 0x50
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc86 	bl	8002bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d0:	2301      	movs	r3, #1
 80002d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fcec 	bl	8001cd4 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000302:	f000 f945 	bl	8000590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000316:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2101      	movs	r1, #1
 8000324:	4618      	mov	r0, r3
 8000326:	f001 ff55 	bl	80021d4 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000330:	f000 f92e 	bl	8000590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000334:	2302      	movs	r3, #2
 8000336:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f002 f8e2 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800034a:	f000 f921 	bl	8000590 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3750      	adds	r7, #80	; 0x50
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_ADC1_Init+0x94>)
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <MX_ADC1_Init+0x98>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MX_ADC1_Init+0x94>)
 8000370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_ADC1_Init+0x94>)
 8000378:	2200      	movs	r2, #0
 800037a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_ADC1_Init+0x94>)
 800037e:	2200      	movs	r2, #0
 8000380:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_ADC1_Init+0x94>)
 8000384:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_ADC1_Init+0x94>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_ADC1_Init+0x94>)
 8000392:	2202      	movs	r2, #2
 8000394:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000396:	4815      	ldr	r0, [pc, #84]	; (80003ec <MX_ADC1_Init+0x94>)
 8000398:	f000 fb00 	bl	800099c <HAL_ADC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003a2:	f000 f8f5 	bl	8000590 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	480d      	ldr	r0, [pc, #52]	; (80003ec <MX_ADC1_Init+0x94>)
 80003b8:	f000 fcfa 	bl	8000db0 <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f8e5 	bl	8000590 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_ADC1_Init+0x94>)
 80003d4:	f000 fcec 	bl	8000db0 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003de:	f000 f8d7 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200000a0 	.word	0x200000a0
 80003f0:	40012400 	.word	0x40012400

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART1_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800042c:	f002 f9e6 	bl	80027fc <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f8ab 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200000d0 	.word	0x200000d0
 8000444:	40013800 	.word	0x40013800

08000448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <MX_DMA_Init+0x38>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_DMA_Init+0x38>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	200b      	movs	r0, #11
 800046c:	f001 f81d 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000470:	200b      	movs	r0, #11
 8000472:	f001 f836 	bl	80014e2 <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <MX_GPIO_Init+0x90>)
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0310 	and.w	r3, r3, #16
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a17      	ldr	r2, [pc, #92]	; (8000514 <MX_GPIO_Init+0x90>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <MX_GPIO_Init+0x90>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <MX_GPIO_Init+0x94>)
 80004e8:	f001 fbc2 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_GPIO_Init+0x94>)
 8000506:	f001 fa2f 	bl	8001968 <HAL_GPIO_Init>

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40011000 	.word	0x40011000

0800051c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_ADC_ConvCpltCallback+0x24>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d102      	bne.n	8000534 <HAL_ADC_ConvCpltCallback+0x18>
    {
    	flag = 1;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_ADC_ConvCpltCallback+0x28>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
    }
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40012400 	.word	0x40012400
 8000544:	2000008c 	.word	0x2000008c

08000548 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_ADC_ErrorCallback+0x38>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d10e      	bne.n	8000578 <HAL_ADC_ErrorCallback+0x30>
	    {
		sprintf (msg_UART_TX, "ADC1_error\n\r");
 800055a:	490a      	ldr	r1, [pc, #40]	; (8000584 <HAL_ADC_ErrorCallback+0x3c>)
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <HAL_ADC_ErrorCallback+0x40>)
 800055e:	f002 fb37 	bl	8002bd0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 1000);
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <HAL_ADC_ErrorCallback+0x40>)
 8000564:	f7ff fdf2 	bl	800014c <strlen>
 8000568:	4603      	mov	r3, r0
 800056a:	b29a      	uxth	r2, r3
 800056c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000570:	4905      	ldr	r1, [pc, #20]	; (8000588 <HAL_ADC_ErrorCallback+0x40>)
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <HAL_ADC_ErrorCallback+0x44>)
 8000574:	f002 f98f 	bl	8002896 <HAL_UART_Transmit>
	    }
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40012400 	.word	0x40012400
 8000584:	080034a4 	.word	0x080034a4
 8000588:	20000158 	.word	0x20000158
 800058c:	200000d0 	.word	0x200000d0

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>
	...

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_MspInit+0x5c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <HAL_MspInit+0x5c>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x5c>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_MspInit+0x5c>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_MspInit+0x60>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_MspInit+0x60>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010000 	.word	0x40010000

08000600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <HAL_ADC_MspInit+0xbc>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d149      	bne.n	80006b4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 8000626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <HAL_ADC_MspInit+0xc0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000650:	2303      	movs	r3, #3
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000654:	2303      	movs	r3, #3
 8000656:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4819      	ldr	r0, [pc, #100]	; (80006c4 <HAL_ADC_MspInit+0xc4>)
 8000660:	f001 f982 	bl	8001968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <HAL_ADC_MspInit+0xcc>)
 8000668:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 800067e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000682:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 8000686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800068a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 800069a:	f000 ff3d 	bl	8001518 <HAL_DMA_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006a4:	f7ff ff74 	bl	8000590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 80006ac:	621a      	str	r2, [r3, #32]
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_ADC_MspInit+0xc8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40012400 	.word	0x40012400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	20000114 	.word	0x20000114
 80006cc:	40020008 	.word	0x40020008

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_UART_MspInit+0x8c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d131      	bne.n	8000754 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <HAL_UART_MspInit+0x90>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_UART_MspInit+0x90>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_UART_MspInit+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <HAL_UART_MspInit+0x94>)
 8000736:	f001 f917 	bl	8001968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <HAL_UART_MspInit+0x94>)
 8000750:	f001 f90a 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013800 	.word	0x40013800
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ae:	f000 f8b5 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <DMA1_Channel1_IRQHandler+0x10>)
 80007be:	f000 ff9f 	bl	8001700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000114 	.word	0x20000114

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f002 f9b6 	bl	8002b6c <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <_sbrk+0x64>)
 800081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20005000 	.word	0x20005000
 800082c:	00000400 	.word	0x00000400
 8000830:	20000094 	.word	0x20000094
 8000834:	200001a8 	.word	0x200001a8

08000838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <Reset_Handler>:
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopFillZerobss+0x16>)
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopFillZerobss+0x1a>)
 800084a:	2300      	movs	r3, #0
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:
 800084e:	58d4      	ldr	r4, [r2, r3]
 8000850:	50c4      	str	r4, [r0, r3]
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:
 8000854:	18c4      	adds	r4, r0, r3
 8000856:	428c      	cmp	r4, r1
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopFillZerobss+0x1e>)
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopFillZerobss+0x22>)
 800085e:	2300      	movs	r3, #0
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:
 8000866:	42a2      	cmp	r2, r4
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>
 800086a:	f7ff ffe5 	bl	8000838 <SystemInit>
 800086e:	f002 f983 	bl	8002b78 <__libc_init_array>
 8000872:	f7ff fc73 	bl	800015c <main>
 8000876:	4770      	bx	lr
 8000878:	20000000 	.word	0x20000000
 800087c:	20000070 	.word	0x20000070
 8000880:	08003528 	.word	0x08003528
 8000884:	20000070 	.word	0x20000070
 8000888:	200001a4 	.word	0x200001a4

0800088c <ADC1_2_IRQHandler>:
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 fdf7 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff fe76 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fe0f 	bl	80014fe <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f8:	f000 fdd7 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	20000190 	.word	0x20000190

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000190 	.word	0x20000190

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e0be      	b.n	8000b3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe10 	bl	8000600 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fb37 	bl	8001054 <ADC_ConversionStop_Disable>
 80009e6:	4603      	mov	r3, r0
 80009e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8099 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 8095 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a08:	f023 0302 	bic.w	r3, r3, #2
 8000a0c:	f043 0202 	orr.w	r2, r3, #2
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7b1b      	ldrb	r3, [r3, #12]
 8000a22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a34:	d003      	beq.n	8000a3e <HAL_ADC_Init+0xa2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <HAL_ADC_Init+0xa8>
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	e000      	b.n	8000a46 <HAL_ADC_Init+0xaa>
 8000a44:	2300      	movs	r3, #0
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7d1b      	ldrb	r3, [r3, #20]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d119      	bne.n	8000a88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	035a      	lsls	r2, r3, #13
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e00b      	b.n	8000a88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f043 0220 	orr.w	r2, r3, #32
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	f043 0201 	orr.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_ADC_Init+0x1a8>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab8:	d003      	beq.n	8000ac2 <HAL_ADC_Init+0x126>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d104      	bne.n	8000acc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	051b      	lsls	r3, r3, #20
 8000aca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_Init+0x1ac>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d10b      	bne.n	8000b08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afa:	f023 0303 	bic.w	r3, r3, #3
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b06:	e018      	b.n	8000b3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	f023 0312 	bic.w	r3, r3, #18
 8000b10:	f043 0210 	orr.w	r2, r3, #16
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	f043 0201 	orr.w	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b28:	e007      	b.n	8000b3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	ffe1f7fd 	.word	0xffe1f7fd
 8000b48:	ff1f0efe 	.word	0xff1f0efe

08000b4c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d004      	beq.n	8000b70 <HAL_ADC_Start_DMA+0x24>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <HAL_ADC_Start_DMA+0x32>
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f040 80b3 	bne.w	8000ce4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d101      	bne.n	8000b8c <HAL_ADC_Start_DMA+0x40>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e0ae      	b.n	8000cea <HAL_ADC_Start_DMA+0x19e>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 fa03 	bl	8000fa0 <ADC_Enable>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 809a 	bne.w	8000cda <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_Start_DMA+0x84>
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d115      	bne.n	8000bfc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d026      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bfa:	e01d      	b.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d004      	beq.n	8000c1c <HAL_ADC_Start_DMA+0xd0>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a38      	ldr	r2, [pc, #224]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d10d      	bne.n	8000c38 <HAL_ADC_Start_DMA+0xec>
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	f023 0206 	bic.w	r2, r3, #6
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c50:	e002      	b.n	8000c58 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_ADC_Start_DMA+0x1b0>)
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_ADC_Start_DMA+0x1b4>)
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <HAL_ADC_Start_DMA+0x1b8>)
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f06f 0202 	mvn.w	r2, #2
 8000c80:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c90:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a18      	ldr	r0, [r3, #32]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	334c      	adds	r3, #76	; 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f000 fc93 	bl	80015cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cb4:	d108      	bne.n	8000cc8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cc4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cc6:	e00f      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cd6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cd8:	e006      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000ce2:	e001      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012400 	.word	0x40012400
 8000cf8:	40012800 	.word	0x40012800
 8000cfc:	080010d7 	.word	0x080010d7
 8000d00:	08001153 	.word	0x08001153
 8000d04:	0800116f 	.word	0x0800116f

08000d08 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_ADC_Stop_DMA+0x1a>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e039      	b.n	8000d96 <HAL_ADC_Stop_DMA+0x8e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f992 	bl	8001054 <ADC_ConversionStop_Disable>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d128      	bne.n	8000d8c <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d48:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d11a      	bne.n	8000d8c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fc95 	bl	800168a <HAL_DMA_Abort>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d72:	f023 0301 	bic.w	r3, r3, #1
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8000d7e:	e005      	b.n	8000d8c <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x20>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e0dc      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x1da>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d81c      	bhi.n	8000e1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	3b05      	subs	r3, #5
 8000df2:	221f      	movs	r2, #31
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	3b05      	subs	r3, #5
 8000e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
 8000e18:	e03c      	b.n	8000e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b0c      	cmp	r3, #12
 8000e20:	d81c      	bhi.n	8000e5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	3b23      	subs	r3, #35	; 0x23
 8000e34:	221f      	movs	r2, #31
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4019      	ands	r1, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b23      	subs	r3, #35	; 0x23
 8000e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5a:	e01b      	b.n	8000e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b41      	subs	r3, #65	; 0x41
 8000e6e:	221f      	movs	r2, #31
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3b41      	subs	r3, #65	; 0x41
 8000e88:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	d91c      	bls.n	8000ed6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68d9      	ldr	r1, [r3, #12]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b1e      	subs	r3, #30
 8000eae:	2207      	movs	r2, #7
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b1e      	subs	r3, #30
 8000ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	e019      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6919      	ldr	r1, [r3, #16]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	fa00 f203 	lsl.w	r2, r0, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b10      	cmp	r3, #16
 8000f10:	d003      	beq.n	8000f1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f16:	2b11      	cmp	r3, #17
 8000f18:	d132      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d125      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d126      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d11a      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	0c9a      	lsrs	r2, r3, #18
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f9      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x1b2>
 8000f6e:	e007      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f043 0220 	orr.w	r2, r3, #32
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40012400 	.word	0x40012400
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d040      	beq.n	8001040 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <ADC_Enable+0xac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <ADC_Enable+0xb0>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	0c9b      	lsrs	r3, r3, #18
 8000fda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fdc:	e002      	b.n	8000fe4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f9      	bne.n	8000fde <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fea:	f7ff fca9 	bl	8000940 <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff0:	e01f      	b.n	8001032 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ff2:	f7ff fca5 	bl	8000940 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d918      	bls.n	8001032 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d011      	beq.n	8001032 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e007      	b.n	8001042 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b01      	cmp	r3, #1
 800103e:	d1d8      	bne.n	8000ff2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000
 8001050:	431bde83 	.word	0x431bde83

08001054 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b01      	cmp	r3, #1
 800106c:	d12e      	bne.n	80010cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800107e:	f7ff fc5f 	bl	8000940 <HAL_GetTick>
 8001082:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001084:	e01b      	b.n	80010be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001086:	f7ff fc5b 	bl	8000940 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d914      	bls.n	80010be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10d      	bne.n	80010be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e007      	b.n	80010ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d0dc      	beq.n	8001086 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d127      	bne.n	8001140 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001106:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800110a:	d115      	bne.n	8001138 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff f9ef 	bl	800051c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800113e:	e004      	b.n	800114a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff fe1c 	bl	8000d9e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	f043 0204 	orr.w	r2, r3, #4
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff f9d7 	bl	8000548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80011be:	2302      	movs	r3, #2
 80011c0:	e095      	b.n	80012ee <HAL_ADCEx_Calibration_Start+0x14a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff42 	bl	8001054 <ADC_ConversionStop_Disable>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 8084 	bne.w	80012e4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_ADCEx_Calibration_Start+0x154>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	2002      	movs	r0, #2
 80011f6:	f001 fa3d 	bl	8002674 <HAL_RCCEx_GetPeriphCLKFreq>
 80011fa:	4603      	mov	r3, r0
 80011fc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001200:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001202:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001204:	e002      	b.n	800120c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3b01      	subs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f9      	bne.n	8001206 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fec4 	bl	8000fa0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001228:	f7ff fb8a 	bl	8000940 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800122e:	e01b      	b.n	8001268 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001230:	f7ff fb86 	bl	8000940 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d914      	bls.n	8001268 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f023 0312 	bic.w	r3, r3, #18
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e042      	b.n	80012ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1dc      	bne.n	8001230 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0204 	orr.w	r2, r2, #4
 8001284:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001286:	f7ff fb5b 	bl	8000940 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800128c:	e01b      	b.n	80012c6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800128e:	f7ff fb57 	bl	8000940 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b0a      	cmp	r3, #10
 800129a:	d914      	bls.n	80012c6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00d      	beq.n	80012c6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f023 0312 	bic.w	r3, r3, #18
 80012b2:	f043 0210 	orr.w	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e013      	b.n	80012ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1dc      	bne.n	800128e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f023 0303 	bic.w	r3, r3, #3
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000000 	.word	0x20000000

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4906      	ldr	r1, [pc, #24]	; (8001394 <__NVIC_EnableIRQ+0x34>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001474:	f7ff ff90 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff2d 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff42 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff35 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e043      	b.n	80015b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_DMA_Init+0xa8>)
 8001536:	4413      	add	r3, r2
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_DMA_Init+0xac>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	009a      	lsls	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_DMA_Init+0xb0>)
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001562:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	bffdfff8 	.word	0xbffdfff8
 80015c4:	cccccccd 	.word	0xcccccccd
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_DMA_Start_IT+0x20>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e04a      	b.n	8001682 <HAL_DMA_Start_IT+0xb6>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d13a      	bne.n	8001674 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2202      	movs	r2, #2
 8001602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f972 	bl	800190c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 020e 	orr.w	r2, r2, #14
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e00f      	b.n	8001662 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0204 	bic.w	r2, r2, #4
 8001650:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 020a 	orr.w	r2, r2, #10
 8001660:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e005      	b.n	8001680 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800167c:	2302      	movs	r3, #2
 800167e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169c:	2b02      	cmp	r3, #2
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e020      	b.n	80016f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 020e 	bic.w	r2, r2, #14
 80016c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2204      	movs	r2, #4
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d04f      	beq.n	80017c8 <HAL_DMA_IRQHandler+0xc8>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <HAL_DMA_IRQHandler+0x1f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d029      	beq.n	80017ae <HAL_DMA_IRQHandler+0xae>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_DMA_IRQHandler+0x1f4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d022      	beq.n	80017aa <HAL_DMA_IRQHandler+0xaa>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_DMA_IRQHandler+0x1f8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01a      	beq.n	80017a4 <HAL_DMA_IRQHandler+0xa4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a62      	ldr	r2, [pc, #392]	; (80018fc <HAL_DMA_IRQHandler+0x1fc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d012      	beq.n	800179e <HAL_DMA_IRQHandler+0x9e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a60      	ldr	r2, [pc, #384]	; (8001900 <HAL_DMA_IRQHandler+0x200>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00a      	beq.n	8001798 <HAL_DMA_IRQHandler+0x98>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <HAL_DMA_IRQHandler+0x204>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d102      	bne.n	8001792 <HAL_DMA_IRQHandler+0x92>
 800178c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001790:	e00e      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 8001792:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001796:	e00b      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 8001798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800179c:	e008      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 800179e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017a2:	e005      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 80017a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a8:	e002      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	e000      	b.n	80017b0 <HAL_DMA_IRQHandler+0xb0>
 80017ae:	2304      	movs	r3, #4
 80017b0:	4a55      	ldr	r2, [pc, #340]	; (8001908 <HAL_DMA_IRQHandler+0x208>)
 80017b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8094 	beq.w	80018e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017c6:	e08e      	b.n	80018e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2202      	movs	r2, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d056      	beq.n	8001886 <HAL_DMA_IRQHandler+0x186>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d051      	beq.n	8001886 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10b      	bne.n	8001808 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020a 	bic.w	r2, r2, #10
 80017fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_DMA_IRQHandler+0x1f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d029      	beq.n	8001866 <HAL_DMA_IRQHandler+0x166>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <HAL_DMA_IRQHandler+0x1f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_IRQHandler+0x162>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a35      	ldr	r2, [pc, #212]	; (80018f8 <HAL_DMA_IRQHandler+0x1f8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01a      	beq.n	800185c <HAL_DMA_IRQHandler+0x15c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_DMA_IRQHandler+0x1fc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d012      	beq.n	8001856 <HAL_DMA_IRQHandler+0x156>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a32      	ldr	r2, [pc, #200]	; (8001900 <HAL_DMA_IRQHandler+0x200>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00a      	beq.n	8001850 <HAL_DMA_IRQHandler+0x150>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_DMA_IRQHandler+0x204>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <HAL_DMA_IRQHandler+0x14a>
 8001844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001848:	e00e      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 800184a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184e:	e00b      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	e008      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	e005      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	e002      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 8001862:	2320      	movs	r3, #32
 8001864:	e000      	b.n	8001868 <HAL_DMA_IRQHandler+0x168>
 8001866:	2302      	movs	r3, #2
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_DMA_IRQHandler+0x208>)
 800186a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d034      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001884:	e02f      	b.n	80018e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2208      	movs	r2, #8
 800188c:	409a      	lsls	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d028      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x1e8>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 020e 	bic.w	r2, r2, #14
 80018ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
    }
  }
  return;
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
}
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020008 	.word	0x40020008
 80018f4:	4002001c 	.word	0x4002001c
 80018f8:	40020030 	.word	0x40020030
 80018fc:	40020044 	.word	0x40020044
 8001900:	40020058 	.word	0x40020058
 8001904:	4002006c 	.word	0x4002006c
 8001908:	40020000 	.word	0x40020000

0800190c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d108      	bne.n	800194c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800194a:	e007      	b.n	800195c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	e169      	b.n	8001c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800197c:	2201      	movs	r2, #1
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 8158 	bne.w	8001c4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a9a      	ldr	r2, [pc, #616]	; (8001c08 <HAL_GPIO_Init+0x2a0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d05e      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019a4:	4a98      	ldr	r2, [pc, #608]	; (8001c08 <HAL_GPIO_Init+0x2a0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d875      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019aa:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <HAL_GPIO_Init+0x2a4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d058      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019b0:	4a96      	ldr	r2, [pc, #600]	; (8001c0c <HAL_GPIO_Init+0x2a4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d86f      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019b6:	4a96      	ldr	r2, [pc, #600]	; (8001c10 <HAL_GPIO_Init+0x2a8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d052      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019bc:	4a94      	ldr	r2, [pc, #592]	; (8001c10 <HAL_GPIO_Init+0x2a8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d869      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019c2:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <HAL_GPIO_Init+0x2ac>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04c      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019c8:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <HAL_GPIO_Init+0x2ac>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d863      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019ce:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <HAL_GPIO_Init+0x2b0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d046      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019d4:	4a90      	ldr	r2, [pc, #576]	; (8001c18 <HAL_GPIO_Init+0x2b0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d85d      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d82a      	bhi.n	8001a34 <HAL_GPIO_Init+0xcc>
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d859      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_GPIO_Init+0x80>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a3d 	.word	0x08001a3d
 80019f0:	08001a4f 	.word	0x08001a4f
 80019f4:	08001a91 	.word	0x08001a91
 80019f8:	08001a97 	.word	0x08001a97
 80019fc:	08001a97 	.word	0x08001a97
 8001a00:	08001a97 	.word	0x08001a97
 8001a04:	08001a97 	.word	0x08001a97
 8001a08:	08001a97 	.word	0x08001a97
 8001a0c:	08001a97 	.word	0x08001a97
 8001a10:	08001a97 	.word	0x08001a97
 8001a14:	08001a97 	.word	0x08001a97
 8001a18:	08001a97 	.word	0x08001a97
 8001a1c:	08001a97 	.word	0x08001a97
 8001a20:	08001a97 	.word	0x08001a97
 8001a24:	08001a97 	.word	0x08001a97
 8001a28:	08001a97 	.word	0x08001a97
 8001a2c:	08001a45 	.word	0x08001a45
 8001a30:	08001a59 	.word	0x08001a59
 8001a34:	4a79      	ldr	r2, [pc, #484]	; (8001c1c <HAL_GPIO_Init+0x2b4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a3a:	e02c      	b.n	8001a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e029      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e024      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	3308      	adds	r3, #8
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e01f      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e01a      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e013      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	611a      	str	r2, [r3, #16]
          break;
 8001a82:	e009      	b.n	8001a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	615a      	str	r2, [r3, #20]
          break;
 8001a8e:	e003      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          break;
 8001a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d801      	bhi.n	8001aa2 <HAL_GPIO_Init+0x13a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	e001      	b.n	8001aa6 <HAL_GPIO_Init+0x13e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d802      	bhi.n	8001ab4 <HAL_GPIO_Init+0x14c>
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x152>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	6a39      	ldr	r1, [r7, #32]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80b1 	beq.w	8001c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_GPIO_Init+0x2b8>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b00:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <HAL_GPIO_Init+0x2bc>)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a40      	ldr	r2, [pc, #256]	; (8001c28 <HAL_GPIO_Init+0x2c0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_GPIO_Init+0x1ec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	; (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1e8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3e      	ldr	r2, [pc, #248]	; (8001c30 <HAL_GPIO_Init+0x2c8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1e4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <HAL_GPIO_Init+0x2cc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1e0>
 8001b44:	2303      	movs	r3, #3
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	e004      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_GPIO_Init+0x1ee>
 8001b54:	2300      	movs	r3, #0
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b66:	492f      	ldr	r1, [pc, #188]	; (8001c24 <HAL_GPIO_Init+0x2bc>)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	492c      	ldr	r1, [pc, #176]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4928      	ldr	r1, [pc, #160]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	491e      	ldr	r1, [pc, #120]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4918      	ldr	r1, [pc, #96]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4914      	ldr	r1, [pc, #80]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d021      	beq.n	8001c3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	e021      	b.n	8001c4a <HAL_GPIO_Init+0x2e2>
 8001c06:	bf00      	nop
 8001c08:	10320000 	.word	0x10320000
 8001c0c:	10310000 	.word	0x10310000
 8001c10:	10220000 	.word	0x10220000
 8001c14:	10210000 	.word	0x10210000
 8001c18:	10120000 	.word	0x10120000
 8001c1c:	10110000 	.word	0x10110000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	40010c00 	.word	0x40010c00
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40011400 	.word	0x40011400
 8001c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_GPIO_Init+0x304>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	4909      	ldr	r1, [pc, #36]	; (8001c6c <HAL_GPIO_Init+0x304>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f47f ae8e 	bne.w	800197c <HAL_GPIO_Init+0x14>
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	372c      	adds	r7, #44	; 0x2c
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43d9      	mvns	r1, r3
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e26c      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf4:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d00:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d112      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e>
 8001d0c:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1a:	4b89      	ldr	r3, [pc, #548]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d06c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x12c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d168      	bne.n	8001e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e246      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x76>
 8001d3c:	4b80      	ldr	r3, [pc, #512]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e02e      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x98>
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7a      	ldr	r2, [pc, #488]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a77      	ldr	r2, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0xbc>
 8001d76:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a71      	ldr	r2, [pc, #452]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xd4>
 8001d90:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6a      	ldr	r2, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a67      	ldr	r2, [pc, #412]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fdc6 	bl	8000940 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7fe fdc2 	bl	8000940 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1fa      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe4>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fdb2 	bl	8000940 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7fe fdae 	bl	8000940 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1e6      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x10c>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e1a:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x18c>
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1ba      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4939      	ldr	r1, [pc, #228]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fd67 	bl	8000940 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe fd63 	bl	8000940 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e19b      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4927      	ldr	r1, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fd46 	bl	8000940 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7fe fd42 	bl	8000940 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e17a      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d03a      	beq.n	8001f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d019      	beq.n	8001f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7fe fd26 	bl	8000940 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe fd22 	bl	8000940 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e15a      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 fad8 	bl	80024cc <RCC_Delay>
 8001f1c:	e01c      	b.n	8001f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe fd0c 	bl	8000940 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	e00f      	b.n	8001f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fd08 	bl	8000940 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d908      	bls.n	8001f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e140      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	42420000 	.word	0x42420000
 8001f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e9      	bne.n	8001f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a6 	beq.w	80020b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10d      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b94      	ldr	r3, [pc, #592]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a93      	ldr	r2, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b8e      	ldr	r3, [pc, #568]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d118      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8a      	ldr	r2, [pc, #552]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7fe fcc9 	bl	8000940 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7fe fcc5 	bl	8000940 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b64      	cmp	r3, #100	; 0x64
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0fd      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x312>
 8001fd8:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a7a      	ldr	r2, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e02d      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x334>
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a72      	ldr	r2, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	e01c      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x356>
 8002010:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x36e>
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d015      	beq.n	8002076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe fc79 	bl	8000940 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fc75 	bl	8000940 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0ab      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ee      	beq.n	8002052 <HAL_RCC_OscConfig+0x37e>
 8002074:	e014      	b.n	80020a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe fc63 	bl	8000940 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe fc5f 	bl	8000940 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e095      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ee      	bne.n	800207e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8081 	beq.w	80021be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d061      	beq.n	800218c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d146      	bne.n	800215e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fc33 	bl	8000940 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7fe fc2f 	bl	8000940 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e067      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d108      	bne.n	8002118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002106:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	492d      	ldr	r1, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a19      	ldr	r1, [r3, #32]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	430b      	orrs	r3, r1
 800212a:	4927      	ldr	r1, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fc03 	bl	8000940 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fbff 	bl	8000940 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e037      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x46a>
 800215c:	e02f      	b.n	80021be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_OscConfig+0x4fc>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fbec 	bl	8000940 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fbe8 	bl	8000940 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e020      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x498>
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e013      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42420060 	.word	0x42420060

080021d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d0      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4965      	ldr	r1, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800223a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e073      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4936      	ldr	r1, [pc, #216]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fb3c 	bl	8000940 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fb38 	bl	8000940 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e053      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d210      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4922      	ldr	r1, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1cc>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fa9a 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
 800239c:	080034d4 	.word	0x080034d4
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b490      	push	{r4, r7}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023b0:	1d3c      	adds	r4, r7, #4
 80023b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b8:	f240 2301 	movw	r3, #513	; 0x201
 80023bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x40>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x46>
 80023e6:	e02d      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	623b      	str	r3, [r7, #32]
      break;
 80023ec:	e02d      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023fa:	4413      	add	r3, r2
 80023fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002400:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_GetSysClockFreq+0xb4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0c5b      	lsrs	r3, r3, #17
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800241a:	4413      	add	r3, r2
 800241c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	fb02 f203 	mul.w	r2, r2, r3
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	e004      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	623b      	str	r3, [r7, #32]
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002446:	623b      	str	r3, [r7, #32]
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	6a3b      	ldr	r3, [r7, #32]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc90      	pop	{r4, r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	080034b4 	.word	0x080034b4
 800245c:	40021000 	.word	0x40021000
 8002460:	007a1200 	.word	0x007a1200
 8002464:	003d0900 	.word	0x003d0900

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <HAL_RCC_GetHCLKFreq+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000000 	.word	0x20000000

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002480:	f7ff fff2 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	080034e4 	.word	0x080034e4

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a8:	f7ff ffde 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	080034e4 	.word	0x080034e4

080024cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <RCC_Delay+0x34>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <RCC_Delay+0x38>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e8:	bf00      	nop
  }
  while (Delay --);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f9      	bne.n	80024e8 <RCC_Delay+0x1c>
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000000 	.word	0x20000000
 8002504:	10624dd3 	.word	0x10624dd3

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d07d      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	61d3      	str	r3, [r2, #28]
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254c:	2301      	movs	r3, #1
 800254e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d118      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a42      	ldr	r2, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002568:	f7fe f9ea 	bl	8000940 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	e008      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002570:	f7fe f9e6 	bl	8000940 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e06d      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d02e      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d027      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b6:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c2:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe f9b5 	bl	8000940 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe f9b1 	bl	8000940 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e036      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ee      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4917      	ldr	r1, [pc, #92]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	4313      	orrs	r3, r2
 800260c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	490b      	ldr	r1, [pc, #44]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420440 	.word	0x42420440

08002674 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08d      	sub	sp, #52	; 0x34
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800267c:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800267e:	f107 040c 	add.w	r4, r7, #12
 8002682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002688:	f240 2301 	movw	r3, #513	; 0x201
 800268c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	2300      	movs	r3, #0
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	f200 8091 	bhi.w	80027d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d04c      	beq.n	8002750 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d07c      	beq.n	80027b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80026bc:	e089      	b.n	80027d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80026be:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80026c4:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8082 	beq.w	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	0c9b      	lsrs	r3, r3, #18
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026de:	4413      	add	r3, r2
 80026e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026e4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d018      	beq.n	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026f0:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c5b      	lsrs	r3, r3, #17
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026fe:	4413      	add	r3, r2
 8002700:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002710:	4a37      	ldr	r2, [pc, #220]	; (80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	fbb2 f2f3 	udiv	r2, r2, r3
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002720:	e004      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002738:	d102      	bne.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800273e:	e04a      	b.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800274e:	e042      	b.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002760:	d108      	bne.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800276c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
 8002772:	e01f      	b.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277e:	d109      	bne.n	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800278c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	e00f      	b.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279e:	d11c      	bne.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80027ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027b2:	e012      	b.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80027b4:	e011      	b.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027b6:	f7ff fe75 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0b9b      	lsrs	r3, r3, #14
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	3301      	adds	r3, #1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027d0:	e004      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80027da:	bf00      	nop
    }
  }
  return (frequency);
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3734      	adds	r7, #52	; 0x34
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	080034c4 	.word	0x080034c4
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	003d0900 	.word	0x003d0900
 80027f8:	aaaaaaab 	.word	0xaaaaaaab

080027fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e03f      	b.n	800288e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd ff54 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	; 0x24
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800283e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f905 	bl	8002a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	; 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d17c      	bne.n	80029b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Transmit+0x2c>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e075      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_UART_Transmit+0x3e>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e06e      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2221      	movs	r2, #33	; 0x21
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ea:	f7fe f829 	bl	8000940 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d108      	bne.n	8002918 <HAL_UART_Transmit+0x82>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e003      	b.n	8002920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002928:	e02a      	b.n	8002980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f840 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e036      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	3302      	adds	r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e007      	b.n	8002972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cf      	bne.n	800292a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f810 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e006      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ca:	e02c      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d2:	d028      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <UART_WaitOnFlagUntilTimeout+0x30>
 80029da:	f7fd ffb1 	bl	8000940 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d21d      	bcs.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0c3      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a8a:	f023 030c 	bic.w	r3, r3, #12
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	; (8002b64 <UART_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff fcf4 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	e002      	b.n	8002ac6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff fcdc 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	0119      	lsls	r1, r3, #4
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <UART_SetConfig+0x118>)
 8002afe:	fba3 0302 	umull	r0, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	4419      	add	r1, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <UART_SetConfig+0x118>)
 8002b36:	fba3 0302 	umull	r0, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2064      	movs	r0, #100	; 0x64
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <UART_SetConfig+0x118>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	440a      	add	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013800 	.word	0x40013800
 8002b68:	51eb851f 	.word	0x51eb851f

08002b6c <__errno>:
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <__errno+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4d0c      	ldr	r5, [pc, #48]	; (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	; (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	f000 fc5c 	bl	8003444 <_init>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	4d0a      	ldr	r5, [pc, #40]	; (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08003520 	.word	0x08003520
 8002bb4:	08003520 	.word	0x08003520
 8002bb8:	08003520 	.word	0x08003520
 8002bbc:	08003524 	.word	0x08003524

08002bc0 <memset>:
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4402      	add	r2, r0
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d100      	bne.n	8002bca <memset+0xa>
 8002bc8:	4770      	bx	lr
 8002bca:	f803 1b01 	strb.w	r1, [r3], #1
 8002bce:	e7f9      	b.n	8002bc4 <memset+0x4>

08002bd0 <siprintf>:
 8002bd0:	b40e      	push	{r1, r2, r3}
 8002bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bd6:	b500      	push	{lr}
 8002bd8:	b09c      	sub	sp, #112	; 0x70
 8002bda:	ab1d      	add	r3, sp, #116	; 0x74
 8002bdc:	9002      	str	r0, [sp, #8]
 8002bde:	9006      	str	r0, [sp, #24]
 8002be0:	9107      	str	r1, [sp, #28]
 8002be2:	9104      	str	r1, [sp, #16]
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <siprintf+0x38>)
 8002be6:	4909      	ldr	r1, [pc, #36]	; (8002c0c <siprintf+0x3c>)
 8002be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bec:	9105      	str	r1, [sp, #20]
 8002bee:	6800      	ldr	r0, [r0, #0]
 8002bf0:	a902      	add	r1, sp, #8
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	f000 f868 	bl	8002cc8 <_svfiprintf_r>
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	9b02      	ldr	r3, [sp, #8]
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	b01c      	add	sp, #112	; 0x70
 8002c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c04:	b003      	add	sp, #12
 8002c06:	4770      	bx	lr
 8002c08:	2000000c 	.word	0x2000000c
 8002c0c:	ffff0208 	.word	0xffff0208

08002c10 <__ssputs_r>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	688e      	ldr	r6, [r1, #8]
 8002c16:	4682      	mov	sl, r0
 8002c18:	429e      	cmp	r6, r3
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4690      	mov	r8, r2
 8002c1e:	461f      	mov	r7, r3
 8002c20:	d838      	bhi.n	8002c94 <__ssputs_r+0x84>
 8002c22:	898a      	ldrh	r2, [r1, #12]
 8002c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c28:	d032      	beq.n	8002c90 <__ssputs_r+0x80>
 8002c2a:	6825      	ldr	r5, [r4, #0]
 8002c2c:	6909      	ldr	r1, [r1, #16]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	eba5 0901 	sub.w	r9, r5, r1
 8002c34:	6965      	ldr	r5, [r4, #20]
 8002c36:	444b      	add	r3, r9
 8002c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c40:	106d      	asrs	r5, r5, #1
 8002c42:	429d      	cmp	r5, r3
 8002c44:	bf38      	it	cc
 8002c46:	461d      	movcc	r5, r3
 8002c48:	0553      	lsls	r3, r2, #21
 8002c4a:	d531      	bpl.n	8002cb0 <__ssputs_r+0xa0>
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f000 fb53 	bl	80032f8 <_malloc_r>
 8002c52:	4606      	mov	r6, r0
 8002c54:	b950      	cbnz	r0, 8002c6c <__ssputs_r+0x5c>
 8002c56:	230c      	movs	r3, #12
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c5c:	f8ca 3000 	str.w	r3, [sl]
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c66:	81a3      	strh	r3, [r4, #12]
 8002c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6c:	464a      	mov	r2, r9
 8002c6e:	6921      	ldr	r1, [r4, #16]
 8002c70:	f000 face 	bl	8003210 <memcpy>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	6126      	str	r6, [r4, #16]
 8002c82:	444e      	add	r6, r9
 8002c84:	6026      	str	r6, [r4, #0]
 8002c86:	463e      	mov	r6, r7
 8002c88:	6165      	str	r5, [r4, #20]
 8002c8a:	eba5 0509 	sub.w	r5, r5, r9
 8002c8e:	60a5      	str	r5, [r4, #8]
 8002c90:	42be      	cmp	r6, r7
 8002c92:	d900      	bls.n	8002c96 <__ssputs_r+0x86>
 8002c94:	463e      	mov	r6, r7
 8002c96:	4632      	mov	r2, r6
 8002c98:	4641      	mov	r1, r8
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f000 fac6 	bl	800322c <memmove>
 8002ca0:	68a3      	ldr	r3, [r4, #8]
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	1b9b      	subs	r3, r3, r6
 8002ca6:	4432      	add	r2, r6
 8002ca8:	2000      	movs	r0, #0
 8002caa:	60a3      	str	r3, [r4, #8]
 8002cac:	6022      	str	r2, [r4, #0]
 8002cae:	e7db      	b.n	8002c68 <__ssputs_r+0x58>
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	f000 fb7b 	bl	80033ac <_realloc_r>
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d1e1      	bne.n	8002c80 <__ssputs_r+0x70>
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	6921      	ldr	r1, [r4, #16]
 8002cc0:	f000 face 	bl	8003260 <_free_r>
 8002cc4:	e7c7      	b.n	8002c56 <__ssputs_r+0x46>
	...

08002cc8 <_svfiprintf_r>:
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	4698      	mov	r8, r3
 8002cce:	898b      	ldrh	r3, [r1, #12]
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	b09d      	sub	sp, #116	; 0x74
 8002cda:	d50e      	bpl.n	8002cfa <_svfiprintf_r+0x32>
 8002cdc:	690b      	ldr	r3, [r1, #16]
 8002cde:	b963      	cbnz	r3, 8002cfa <_svfiprintf_r+0x32>
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	f000 fb09 	bl	80032f8 <_malloc_r>
 8002ce6:	6028      	str	r0, [r5, #0]
 8002ce8:	6128      	str	r0, [r5, #16]
 8002cea:	b920      	cbnz	r0, 8002cf6 <_svfiprintf_r+0x2e>
 8002cec:	230c      	movs	r3, #12
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf4:	e0d1      	b.n	8002e9a <_svfiprintf_r+0x1d2>
 8002cf6:	2340      	movs	r3, #64	; 0x40
 8002cf8:	616b      	str	r3, [r5, #20]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cfe:	2320      	movs	r3, #32
 8002d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d04:	2330      	movs	r3, #48	; 0x30
 8002d06:	f04f 0901 	mov.w	r9, #1
 8002d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002eb4 <_svfiprintf_r+0x1ec>
 8002d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d16:	4623      	mov	r3, r4
 8002d18:	469a      	mov	sl, r3
 8002d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d1e:	b10a      	cbz	r2, 8002d24 <_svfiprintf_r+0x5c>
 8002d20:	2a25      	cmp	r2, #37	; 0x25
 8002d22:	d1f9      	bne.n	8002d18 <_svfiprintf_r+0x50>
 8002d24:	ebba 0b04 	subs.w	fp, sl, r4
 8002d28:	d00b      	beq.n	8002d42 <_svfiprintf_r+0x7a>
 8002d2a:	465b      	mov	r3, fp
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	4638      	mov	r0, r7
 8002d32:	f7ff ff6d 	bl	8002c10 <__ssputs_r>
 8002d36:	3001      	adds	r0, #1
 8002d38:	f000 80aa 	beq.w	8002e90 <_svfiprintf_r+0x1c8>
 8002d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d3e:	445a      	add	r2, fp
 8002d40:	9209      	str	r2, [sp, #36]	; 0x24
 8002d42:	f89a 3000 	ldrb.w	r3, [sl]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80a2 	beq.w	8002e90 <_svfiprintf_r+0x1c8>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d56:	f10a 0a01 	add.w	sl, sl, #1
 8002d5a:	9304      	str	r3, [sp, #16]
 8002d5c:	9307      	str	r3, [sp, #28]
 8002d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d62:	931a      	str	r3, [sp, #104]	; 0x68
 8002d64:	4654      	mov	r4, sl
 8002d66:	2205      	movs	r2, #5
 8002d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6c:	4851      	ldr	r0, [pc, #324]	; (8002eb4 <_svfiprintf_r+0x1ec>)
 8002d6e:	f000 fa41 	bl	80031f4 <memchr>
 8002d72:	9a04      	ldr	r2, [sp, #16]
 8002d74:	b9d8      	cbnz	r0, 8002dae <_svfiprintf_r+0xe6>
 8002d76:	06d0      	lsls	r0, r2, #27
 8002d78:	bf44      	itt	mi
 8002d7a:	2320      	movmi	r3, #32
 8002d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d80:	0711      	lsls	r1, r2, #28
 8002d82:	bf44      	itt	mi
 8002d84:	232b      	movmi	r3, #43	; 0x2b
 8002d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d90:	d015      	beq.n	8002dbe <_svfiprintf_r+0xf6>
 8002d92:	4654      	mov	r4, sl
 8002d94:	2000      	movs	r0, #0
 8002d96:	f04f 0c0a 	mov.w	ip, #10
 8002d9a:	9a07      	ldr	r2, [sp, #28]
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002da2:	3b30      	subs	r3, #48	; 0x30
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d94e      	bls.n	8002e46 <_svfiprintf_r+0x17e>
 8002da8:	b1b0      	cbz	r0, 8002dd8 <_svfiprintf_r+0x110>
 8002daa:	9207      	str	r2, [sp, #28]
 8002dac:	e014      	b.n	8002dd8 <_svfiprintf_r+0x110>
 8002dae:	eba0 0308 	sub.w	r3, r0, r8
 8002db2:	fa09 f303 	lsl.w	r3, r9, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	46a2      	mov	sl, r4
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	e7d2      	b.n	8002d64 <_svfiprintf_r+0x9c>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	1d19      	adds	r1, r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	9103      	str	r1, [sp, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bfbb      	ittet	lt
 8002dca:	425b      	neglt	r3, r3
 8002dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8002dd0:	9307      	strge	r3, [sp, #28]
 8002dd2:	9307      	strlt	r3, [sp, #28]
 8002dd4:	bfb8      	it	lt
 8002dd6:	9204      	strlt	r2, [sp, #16]
 8002dd8:	7823      	ldrb	r3, [r4, #0]
 8002dda:	2b2e      	cmp	r3, #46	; 0x2e
 8002ddc:	d10c      	bne.n	8002df8 <_svfiprintf_r+0x130>
 8002dde:	7863      	ldrb	r3, [r4, #1]
 8002de0:	2b2a      	cmp	r3, #42	; 0x2a
 8002de2:	d135      	bne.n	8002e50 <_svfiprintf_r+0x188>
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	3402      	adds	r4, #2
 8002de8:	1d1a      	adds	r2, r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfb8      	it	lt
 8002df2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002df6:	9305      	str	r3, [sp, #20]
 8002df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ec4 <_svfiprintf_r+0x1fc>
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4650      	mov	r0, sl
 8002e00:	7821      	ldrb	r1, [r4, #0]
 8002e02:	f000 f9f7 	bl	80031f4 <memchr>
 8002e06:	b140      	cbz	r0, 8002e1a <_svfiprintf_r+0x152>
 8002e08:	2340      	movs	r3, #64	; 0x40
 8002e0a:	eba0 000a 	sub.w	r0, r0, sl
 8002e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e12:	9b04      	ldr	r3, [sp, #16]
 8002e14:	3401      	adds	r4, #1
 8002e16:	4303      	orrs	r3, r0
 8002e18:	9304      	str	r3, [sp, #16]
 8002e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1e:	2206      	movs	r2, #6
 8002e20:	4825      	ldr	r0, [pc, #148]	; (8002eb8 <_svfiprintf_r+0x1f0>)
 8002e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e26:	f000 f9e5 	bl	80031f4 <memchr>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d038      	beq.n	8002ea0 <_svfiprintf_r+0x1d8>
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <_svfiprintf_r+0x1f4>)
 8002e30:	bb1b      	cbnz	r3, 8002e7a <_svfiprintf_r+0x1b2>
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	3307      	adds	r3, #7
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e40:	4433      	add	r3, r6
 8002e42:	9309      	str	r3, [sp, #36]	; 0x24
 8002e44:	e767      	b.n	8002d16 <_svfiprintf_r+0x4e>
 8002e46:	460c      	mov	r4, r1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e4e:	e7a5      	b.n	8002d9c <_svfiprintf_r+0xd4>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f04f 0c0a 	mov.w	ip, #10
 8002e56:	4619      	mov	r1, r3
 8002e58:	3401      	adds	r4, #1
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e62:	3a30      	subs	r2, #48	; 0x30
 8002e64:	2a09      	cmp	r2, #9
 8002e66:	d903      	bls.n	8002e70 <_svfiprintf_r+0x1a8>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0c5      	beq.n	8002df8 <_svfiprintf_r+0x130>
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	e7c3      	b.n	8002df8 <_svfiprintf_r+0x130>
 8002e70:	4604      	mov	r4, r0
 8002e72:	2301      	movs	r3, #1
 8002e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e78:	e7f0      	b.n	8002e5c <_svfiprintf_r+0x194>
 8002e7a:	ab03      	add	r3, sp, #12
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462a      	mov	r2, r5
 8002e80:	4638      	mov	r0, r7
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <_svfiprintf_r+0x1f8>)
 8002e84:	a904      	add	r1, sp, #16
 8002e86:	f3af 8000 	nop.w
 8002e8a:	1c42      	adds	r2, r0, #1
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	d1d6      	bne.n	8002e3e <_svfiprintf_r+0x176>
 8002e90:	89ab      	ldrh	r3, [r5, #12]
 8002e92:	065b      	lsls	r3, r3, #25
 8002e94:	f53f af2c 	bmi.w	8002cf0 <_svfiprintf_r+0x28>
 8002e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e9a:	b01d      	add	sp, #116	; 0x74
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea0:	ab03      	add	r3, sp, #12
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	462a      	mov	r2, r5
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <_svfiprintf_r+0x1f8>)
 8002eaa:	a904      	add	r1, sp, #16
 8002eac:	f000 f87c 	bl	8002fa8 <_printf_i>
 8002eb0:	e7eb      	b.n	8002e8a <_svfiprintf_r+0x1c2>
 8002eb2:	bf00      	nop
 8002eb4:	080034ec 	.word	0x080034ec
 8002eb8:	080034f6 	.word	0x080034f6
 8002ebc:	00000000 	.word	0x00000000
 8002ec0:	08002c11 	.word	0x08002c11
 8002ec4:	080034f2 	.word	0x080034f2

08002ec8 <_printf_common>:
 8002ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	4616      	mov	r6, r2
 8002ece:	4699      	mov	r9, r3
 8002ed0:	688a      	ldr	r2, [r1, #8]
 8002ed2:	690b      	ldr	r3, [r1, #16]
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bfb8      	it	lt
 8002eda:	4613      	movlt	r3, r2
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ee8:	b10a      	cbz	r2, 8002eee <_printf_common+0x26>
 8002eea:	3301      	adds	r3, #1
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	0699      	lsls	r1, r3, #26
 8002ef2:	bf42      	ittt	mi
 8002ef4:	6833      	ldrmi	r3, [r6, #0]
 8002ef6:	3302      	addmi	r3, #2
 8002ef8:	6033      	strmi	r3, [r6, #0]
 8002efa:	6825      	ldr	r5, [r4, #0]
 8002efc:	f015 0506 	ands.w	r5, r5, #6
 8002f00:	d106      	bne.n	8002f10 <_printf_common+0x48>
 8002f02:	f104 0a19 	add.w	sl, r4, #25
 8002f06:	68e3      	ldr	r3, [r4, #12]
 8002f08:	6832      	ldr	r2, [r6, #0]
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	42ab      	cmp	r3, r5
 8002f0e:	dc28      	bgt.n	8002f62 <_printf_common+0x9a>
 8002f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f14:	1e13      	subs	r3, r2, #0
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	bf18      	it	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	0692      	lsls	r2, r2, #26
 8002f1e:	d42d      	bmi.n	8002f7c <_printf_common+0xb4>
 8002f20:	4649      	mov	r1, r9
 8002f22:	4638      	mov	r0, r7
 8002f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d020      	beq.n	8002f70 <_printf_common+0xa8>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	68e5      	ldr	r5, [r4, #12]
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf18      	it	ne
 8002f3a:	2500      	movne	r5, #0
 8002f3c:	6832      	ldr	r2, [r6, #0]
 8002f3e:	f04f 0600 	mov.w	r6, #0
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	bf08      	it	eq
 8002f46:	1aad      	subeq	r5, r5, r2
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	bf08      	it	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bfc4      	itt	gt
 8002f54:	1a9b      	subgt	r3, r3, r2
 8002f56:	18ed      	addgt	r5, r5, r3
 8002f58:	341a      	adds	r4, #26
 8002f5a:	42b5      	cmp	r5, r6
 8002f5c:	d11a      	bne.n	8002f94 <_printf_common+0xcc>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e008      	b.n	8002f74 <_printf_common+0xac>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4652      	mov	r2, sl
 8002f66:	4649      	mov	r1, r9
 8002f68:	4638      	mov	r0, r7
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d103      	bne.n	8002f78 <_printf_common+0xb0>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7c4      	b.n	8002f06 <_printf_common+0x3e>
 8002f7c:	2030      	movs	r0, #48	; 0x30
 8002f7e:	18e1      	adds	r1, r4, r3
 8002f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8a:	4422      	add	r2, r4
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f92:	e7c5      	b.n	8002f20 <_printf_common+0x58>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4622      	mov	r2, r4
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0e6      	beq.n	8002f70 <_printf_common+0xa8>
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7d9      	b.n	8002f5a <_printf_common+0x92>
	...

08002fa8 <_printf_i>:
 8002fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	460c      	mov	r4, r1
 8002fae:	7e27      	ldrb	r7, [r4, #24]
 8002fb0:	4691      	mov	r9, r2
 8002fb2:	2f78      	cmp	r7, #120	; 0x78
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	469a      	mov	sl, r3
 8002fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fbe:	d807      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fc0:	2f62      	cmp	r7, #98	; 0x62
 8002fc2:	d80a      	bhi.n	8002fda <_printf_i+0x32>
 8002fc4:	2f00      	cmp	r7, #0
 8002fc6:	f000 80d9 	beq.w	800317c <_printf_i+0x1d4>
 8002fca:	2f58      	cmp	r7, #88	; 0x58
 8002fcc:	f000 80a4 	beq.w	8003118 <_printf_i+0x170>
 8002fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fd8:	e03a      	b.n	8003050 <_printf_i+0xa8>
 8002fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fde:	2b15      	cmp	r3, #21
 8002fe0:	d8f6      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fe2:	a001      	add	r0, pc, #4	; (adr r0, 8002fe8 <_printf_i+0x40>)
 8002fe4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fe8:	08003041 	.word	0x08003041
 8002fec:	08003055 	.word	0x08003055
 8002ff0:	08002fd1 	.word	0x08002fd1
 8002ff4:	08002fd1 	.word	0x08002fd1
 8002ff8:	08002fd1 	.word	0x08002fd1
 8002ffc:	08002fd1 	.word	0x08002fd1
 8003000:	08003055 	.word	0x08003055
 8003004:	08002fd1 	.word	0x08002fd1
 8003008:	08002fd1 	.word	0x08002fd1
 800300c:	08002fd1 	.word	0x08002fd1
 8003010:	08002fd1 	.word	0x08002fd1
 8003014:	08003163 	.word	0x08003163
 8003018:	08003085 	.word	0x08003085
 800301c:	08003145 	.word	0x08003145
 8003020:	08002fd1 	.word	0x08002fd1
 8003024:	08002fd1 	.word	0x08002fd1
 8003028:	08003185 	.word	0x08003185
 800302c:	08002fd1 	.word	0x08002fd1
 8003030:	08003085 	.word	0x08003085
 8003034:	08002fd1 	.word	0x08002fd1
 8003038:	08002fd1 	.word	0x08002fd1
 800303c:	0800314d 	.word	0x0800314d
 8003040:	680b      	ldr	r3, [r1, #0]
 8003042:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	600a      	str	r2, [r1, #0]
 800304c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003050:	2301      	movs	r3, #1
 8003052:	e0a4      	b.n	800319e <_printf_i+0x1f6>
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	6808      	ldr	r0, [r1, #0]
 8003058:	062e      	lsls	r6, r5, #24
 800305a:	f100 0304 	add.w	r3, r0, #4
 800305e:	d50a      	bpl.n	8003076 <_printf_i+0xce>
 8003060:	6805      	ldr	r5, [r0, #0]
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	2d00      	cmp	r5, #0
 8003066:	da03      	bge.n	8003070 <_printf_i+0xc8>
 8003068:	232d      	movs	r3, #45	; 0x2d
 800306a:	426d      	negs	r5, r5
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003070:	230a      	movs	r3, #10
 8003072:	485e      	ldr	r0, [pc, #376]	; (80031ec <_printf_i+0x244>)
 8003074:	e019      	b.n	80030aa <_printf_i+0x102>
 8003076:	f015 0f40 	tst.w	r5, #64	; 0x40
 800307a:	6805      	ldr	r5, [r0, #0]
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	bf18      	it	ne
 8003080:	b22d      	sxthne	r5, r5
 8003082:	e7ef      	b.n	8003064 <_printf_i+0xbc>
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	1d18      	adds	r0, r3, #4
 800308a:	6008      	str	r0, [r1, #0]
 800308c:	0628      	lsls	r0, r5, #24
 800308e:	d501      	bpl.n	8003094 <_printf_i+0xec>
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	e002      	b.n	800309a <_printf_i+0xf2>
 8003094:	0669      	lsls	r1, r5, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0xe8>
 8003098:	881d      	ldrh	r5, [r3, #0]
 800309a:	2f6f      	cmp	r7, #111	; 0x6f
 800309c:	bf0c      	ite	eq
 800309e:	2308      	moveq	r3, #8
 80030a0:	230a      	movne	r3, #10
 80030a2:	4852      	ldr	r0, [pc, #328]	; (80031ec <_printf_i+0x244>)
 80030a4:	2100      	movs	r1, #0
 80030a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030aa:	6866      	ldr	r6, [r4, #4]
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	bfa8      	it	ge
 80030b0:	6821      	ldrge	r1, [r4, #0]
 80030b2:	60a6      	str	r6, [r4, #8]
 80030b4:	bfa4      	itt	ge
 80030b6:	f021 0104 	bicge.w	r1, r1, #4
 80030ba:	6021      	strge	r1, [r4, #0]
 80030bc:	b90d      	cbnz	r5, 80030c2 <_printf_i+0x11a>
 80030be:	2e00      	cmp	r6, #0
 80030c0:	d04d      	beq.n	800315e <_printf_i+0x1b6>
 80030c2:	4616      	mov	r6, r2
 80030c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80030c8:	fb03 5711 	mls	r7, r3, r1, r5
 80030cc:	5dc7      	ldrb	r7, [r0, r7]
 80030ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030d2:	462f      	mov	r7, r5
 80030d4:	42bb      	cmp	r3, r7
 80030d6:	460d      	mov	r5, r1
 80030d8:	d9f4      	bls.n	80030c4 <_printf_i+0x11c>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10b      	bne.n	80030f6 <_printf_i+0x14e>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	07df      	lsls	r7, r3, #31
 80030e2:	d508      	bpl.n	80030f6 <_printf_i+0x14e>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	6861      	ldr	r1, [r4, #4]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	bfde      	ittt	le
 80030ec:	2330      	movle	r3, #48	; 0x30
 80030ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030f2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80030f6:	1b92      	subs	r2, r2, r6
 80030f8:	6122      	str	r2, [r4, #16]
 80030fa:	464b      	mov	r3, r9
 80030fc:	4621      	mov	r1, r4
 80030fe:	4640      	mov	r0, r8
 8003100:	f8cd a000 	str.w	sl, [sp]
 8003104:	aa03      	add	r2, sp, #12
 8003106:	f7ff fedf 	bl	8002ec8 <_printf_common>
 800310a:	3001      	adds	r0, #1
 800310c:	d14c      	bne.n	80031a8 <_printf_i+0x200>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003112:	b004      	add	sp, #16
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	4834      	ldr	r0, [pc, #208]	; (80031ec <_printf_i+0x244>)
 800311a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800311e:	680e      	ldr	r6, [r1, #0]
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f856 5b04 	ldr.w	r5, [r6], #4
 8003126:	061f      	lsls	r7, r3, #24
 8003128:	600e      	str	r6, [r1, #0]
 800312a:	d514      	bpl.n	8003156 <_printf_i+0x1ae>
 800312c:	07d9      	lsls	r1, r3, #31
 800312e:	bf44      	itt	mi
 8003130:	f043 0320 	orrmi.w	r3, r3, #32
 8003134:	6023      	strmi	r3, [r4, #0]
 8003136:	b91d      	cbnz	r5, 8003140 <_printf_i+0x198>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f023 0320 	bic.w	r3, r3, #32
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	2310      	movs	r3, #16
 8003142:	e7af      	b.n	80030a4 <_printf_i+0xfc>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	2378      	movs	r3, #120	; 0x78
 800314e:	4828      	ldr	r0, [pc, #160]	; (80031f0 <_printf_i+0x248>)
 8003150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003154:	e7e3      	b.n	800311e <_printf_i+0x176>
 8003156:	065e      	lsls	r6, r3, #25
 8003158:	bf48      	it	mi
 800315a:	b2ad      	uxthmi	r5, r5
 800315c:	e7e6      	b.n	800312c <_printf_i+0x184>
 800315e:	4616      	mov	r6, r2
 8003160:	e7bb      	b.n	80030da <_printf_i+0x132>
 8003162:	680b      	ldr	r3, [r1, #0]
 8003164:	6826      	ldr	r6, [r4, #0]
 8003166:	1d1d      	adds	r5, r3, #4
 8003168:	6960      	ldr	r0, [r4, #20]
 800316a:	600d      	str	r5, [r1, #0]
 800316c:	0635      	lsls	r5, r6, #24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	d501      	bpl.n	8003176 <_printf_i+0x1ce>
 8003172:	6018      	str	r0, [r3, #0]
 8003174:	e002      	b.n	800317c <_printf_i+0x1d4>
 8003176:	0671      	lsls	r1, r6, #25
 8003178:	d5fb      	bpl.n	8003172 <_printf_i+0x1ca>
 800317a:	8018      	strh	r0, [r3, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4616      	mov	r6, r2
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	e7ba      	b.n	80030fa <_printf_i+0x152>
 8003184:	680b      	ldr	r3, [r1, #0]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	600a      	str	r2, [r1, #0]
 800318a:	681e      	ldr	r6, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4630      	mov	r0, r6
 8003190:	6862      	ldr	r2, [r4, #4]
 8003192:	f000 f82f 	bl	80031f4 <memchr>
 8003196:	b108      	cbz	r0, 800319c <_printf_i+0x1f4>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	6060      	str	r0, [r4, #4]
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a6:	e7a8      	b.n	80030fa <_printf_i+0x152>
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	47d0      	blx	sl
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0ab      	beq.n	800310e <_printf_i+0x166>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	079b      	lsls	r3, r3, #30
 80031ba:	d413      	bmi.n	80031e4 <_printf_i+0x23c>
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	4298      	cmp	r0, r3
 80031c2:	bfb8      	it	lt
 80031c4:	4618      	movlt	r0, r3
 80031c6:	e7a4      	b.n	8003112 <_printf_i+0x16a>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4632      	mov	r2, r6
 80031cc:	4649      	mov	r1, r9
 80031ce:	4640      	mov	r0, r8
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d09b      	beq.n	800310e <_printf_i+0x166>
 80031d6:	3501      	adds	r5, #1
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	9903      	ldr	r1, [sp, #12]
 80031dc:	1a5b      	subs	r3, r3, r1
 80031de:	42ab      	cmp	r3, r5
 80031e0:	dcf2      	bgt.n	80031c8 <_printf_i+0x220>
 80031e2:	e7eb      	b.n	80031bc <_printf_i+0x214>
 80031e4:	2500      	movs	r5, #0
 80031e6:	f104 0619 	add.w	r6, r4, #25
 80031ea:	e7f5      	b.n	80031d8 <_printf_i+0x230>
 80031ec:	080034fd 	.word	0x080034fd
 80031f0:	0800350e 	.word	0x0800350e

080031f4 <memchr>:
 80031f4:	4603      	mov	r3, r0
 80031f6:	b510      	push	{r4, lr}
 80031f8:	b2c9      	uxtb	r1, r1
 80031fa:	4402      	add	r2, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	d101      	bne.n	8003206 <memchr+0x12>
 8003202:	2000      	movs	r0, #0
 8003204:	e003      	b.n	800320e <memchr+0x1a>
 8003206:	7804      	ldrb	r4, [r0, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	428c      	cmp	r4, r1
 800320c:	d1f6      	bne.n	80031fc <memchr+0x8>
 800320e:	bd10      	pop	{r4, pc}

08003210 <memcpy>:
 8003210:	440a      	add	r2, r1
 8003212:	4291      	cmp	r1, r2
 8003214:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003218:	d100      	bne.n	800321c <memcpy+0xc>
 800321a:	4770      	bx	lr
 800321c:	b510      	push	{r4, lr}
 800321e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003222:	4291      	cmp	r1, r2
 8003224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003228:	d1f9      	bne.n	800321e <memcpy+0xe>
 800322a:	bd10      	pop	{r4, pc}

0800322c <memmove>:
 800322c:	4288      	cmp	r0, r1
 800322e:	b510      	push	{r4, lr}
 8003230:	eb01 0402 	add.w	r4, r1, r2
 8003234:	d902      	bls.n	800323c <memmove+0x10>
 8003236:	4284      	cmp	r4, r0
 8003238:	4623      	mov	r3, r4
 800323a:	d807      	bhi.n	800324c <memmove+0x20>
 800323c:	1e43      	subs	r3, r0, #1
 800323e:	42a1      	cmp	r1, r4
 8003240:	d008      	beq.n	8003254 <memmove+0x28>
 8003242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800324a:	e7f8      	b.n	800323e <memmove+0x12>
 800324c:	4601      	mov	r1, r0
 800324e:	4402      	add	r2, r0
 8003250:	428a      	cmp	r2, r1
 8003252:	d100      	bne.n	8003256 <memmove+0x2a>
 8003254:	bd10      	pop	{r4, pc}
 8003256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800325a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800325e:	e7f7      	b.n	8003250 <memmove+0x24>

08003260 <_free_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4605      	mov	r5, r0
 8003264:	2900      	cmp	r1, #0
 8003266:	d043      	beq.n	80032f0 <_free_r+0x90>
 8003268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800326c:	1f0c      	subs	r4, r1, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfb8      	it	lt
 8003272:	18e4      	addlt	r4, r4, r3
 8003274:	f000 f8d0 	bl	8003418 <__malloc_lock>
 8003278:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <_free_r+0x94>)
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	4610      	mov	r0, r2
 800327e:	b933      	cbnz	r3, 800328e <_free_r+0x2e>
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	6014      	str	r4, [r2, #0]
 8003284:	4628      	mov	r0, r5
 8003286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800328a:	f000 b8cb 	b.w	8003424 <__malloc_unlock>
 800328e:	42a3      	cmp	r3, r4
 8003290:	d90a      	bls.n	80032a8 <_free_r+0x48>
 8003292:	6821      	ldr	r1, [r4, #0]
 8003294:	1862      	adds	r2, r4, r1
 8003296:	4293      	cmp	r3, r2
 8003298:	bf01      	itttt	eq
 800329a:	681a      	ldreq	r2, [r3, #0]
 800329c:	685b      	ldreq	r3, [r3, #4]
 800329e:	1852      	addeq	r2, r2, r1
 80032a0:	6022      	streq	r2, [r4, #0]
 80032a2:	6063      	str	r3, [r4, #4]
 80032a4:	6004      	str	r4, [r0, #0]
 80032a6:	e7ed      	b.n	8003284 <_free_r+0x24>
 80032a8:	461a      	mov	r2, r3
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b10b      	cbz	r3, 80032b2 <_free_r+0x52>
 80032ae:	42a3      	cmp	r3, r4
 80032b0:	d9fa      	bls.n	80032a8 <_free_r+0x48>
 80032b2:	6811      	ldr	r1, [r2, #0]
 80032b4:	1850      	adds	r0, r2, r1
 80032b6:	42a0      	cmp	r0, r4
 80032b8:	d10b      	bne.n	80032d2 <_free_r+0x72>
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	4401      	add	r1, r0
 80032be:	1850      	adds	r0, r2, r1
 80032c0:	4283      	cmp	r3, r0
 80032c2:	6011      	str	r1, [r2, #0]
 80032c4:	d1de      	bne.n	8003284 <_free_r+0x24>
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4401      	add	r1, r0
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	6053      	str	r3, [r2, #4]
 80032d0:	e7d8      	b.n	8003284 <_free_r+0x24>
 80032d2:	d902      	bls.n	80032da <_free_r+0x7a>
 80032d4:	230c      	movs	r3, #12
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	e7d4      	b.n	8003284 <_free_r+0x24>
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	1821      	adds	r1, r4, r0
 80032de:	428b      	cmp	r3, r1
 80032e0:	bf01      	itttt	eq
 80032e2:	6819      	ldreq	r1, [r3, #0]
 80032e4:	685b      	ldreq	r3, [r3, #4]
 80032e6:	1809      	addeq	r1, r1, r0
 80032e8:	6021      	streq	r1, [r4, #0]
 80032ea:	6063      	str	r3, [r4, #4]
 80032ec:	6054      	str	r4, [r2, #4]
 80032ee:	e7c9      	b.n	8003284 <_free_r+0x24>
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	20000098 	.word	0x20000098

080032f8 <_malloc_r>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	1ccd      	adds	r5, r1, #3
 80032fc:	f025 0503 	bic.w	r5, r5, #3
 8003300:	3508      	adds	r5, #8
 8003302:	2d0c      	cmp	r5, #12
 8003304:	bf38      	it	cc
 8003306:	250c      	movcc	r5, #12
 8003308:	2d00      	cmp	r5, #0
 800330a:	4606      	mov	r6, r0
 800330c:	db01      	blt.n	8003312 <_malloc_r+0x1a>
 800330e:	42a9      	cmp	r1, r5
 8003310:	d903      	bls.n	800331a <_malloc_r+0x22>
 8003312:	230c      	movs	r3, #12
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	2000      	movs	r0, #0
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331a:	f000 f87d 	bl	8003418 <__malloc_lock>
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <_malloc_r+0xac>)
 8003320:	680a      	ldr	r2, [r1, #0]
 8003322:	4614      	mov	r4, r2
 8003324:	b99c      	cbnz	r4, 800334e <_malloc_r+0x56>
 8003326:	4f20      	ldr	r7, [pc, #128]	; (80033a8 <_malloc_r+0xb0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b923      	cbnz	r3, 8003336 <_malloc_r+0x3e>
 800332c:	4621      	mov	r1, r4
 800332e:	4630      	mov	r0, r6
 8003330:	f000 f862 	bl	80033f8 <_sbrk_r>
 8003334:	6038      	str	r0, [r7, #0]
 8003336:	4629      	mov	r1, r5
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f85d 	bl	80033f8 <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d123      	bne.n	800338a <_malloc_r+0x92>
 8003342:	230c      	movs	r3, #12
 8003344:	4630      	mov	r0, r6
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	f000 f86c 	bl	8003424 <__malloc_unlock>
 800334c:	e7e3      	b.n	8003316 <_malloc_r+0x1e>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	1b5b      	subs	r3, r3, r5
 8003352:	d417      	bmi.n	8003384 <_malloc_r+0x8c>
 8003354:	2b0b      	cmp	r3, #11
 8003356:	d903      	bls.n	8003360 <_malloc_r+0x68>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	441c      	add	r4, r3
 800335c:	6025      	str	r5, [r4, #0]
 800335e:	e004      	b.n	800336a <_malloc_r+0x72>
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	42a2      	cmp	r2, r4
 8003364:	bf0c      	ite	eq
 8003366:	600b      	streq	r3, [r1, #0]
 8003368:	6053      	strne	r3, [r2, #4]
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f85a 	bl	8003424 <__malloc_unlock>
 8003370:	f104 000b 	add.w	r0, r4, #11
 8003374:	1d23      	adds	r3, r4, #4
 8003376:	f020 0007 	bic.w	r0, r0, #7
 800337a:	1ac2      	subs	r2, r0, r3
 800337c:	d0cc      	beq.n	8003318 <_malloc_r+0x20>
 800337e:	1a1b      	subs	r3, r3, r0
 8003380:	50a3      	str	r3, [r4, r2]
 8003382:	e7c9      	b.n	8003318 <_malloc_r+0x20>
 8003384:	4622      	mov	r2, r4
 8003386:	6864      	ldr	r4, [r4, #4]
 8003388:	e7cc      	b.n	8003324 <_malloc_r+0x2c>
 800338a:	1cc4      	adds	r4, r0, #3
 800338c:	f024 0403 	bic.w	r4, r4, #3
 8003390:	42a0      	cmp	r0, r4
 8003392:	d0e3      	beq.n	800335c <_malloc_r+0x64>
 8003394:	1a21      	subs	r1, r4, r0
 8003396:	4630      	mov	r0, r6
 8003398:	f000 f82e 	bl	80033f8 <_sbrk_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d1dd      	bne.n	800335c <_malloc_r+0x64>
 80033a0:	e7cf      	b.n	8003342 <_malloc_r+0x4a>
 80033a2:	bf00      	nop
 80033a4:	20000098 	.word	0x20000098
 80033a8:	2000009c 	.word	0x2000009c

080033ac <_realloc_r>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	4607      	mov	r7, r0
 80033b0:	4614      	mov	r4, r2
 80033b2:	460e      	mov	r6, r1
 80033b4:	b921      	cbnz	r1, 80033c0 <_realloc_r+0x14>
 80033b6:	4611      	mov	r1, r2
 80033b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033bc:	f7ff bf9c 	b.w	80032f8 <_malloc_r>
 80033c0:	b922      	cbnz	r2, 80033cc <_realloc_r+0x20>
 80033c2:	f7ff ff4d 	bl	8003260 <_free_r>
 80033c6:	4625      	mov	r5, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	f000 f830 	bl	8003430 <_malloc_usable_size_r>
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d20f      	bcs.n	80033f4 <_realloc_r+0x48>
 80033d4:	4621      	mov	r1, r4
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ff8e 	bl	80032f8 <_malloc_r>
 80033dc:	4605      	mov	r5, r0
 80033de:	2800      	cmp	r0, #0
 80033e0:	d0f2      	beq.n	80033c8 <_realloc_r+0x1c>
 80033e2:	4631      	mov	r1, r6
 80033e4:	4622      	mov	r2, r4
 80033e6:	f7ff ff13 	bl	8003210 <memcpy>
 80033ea:	4631      	mov	r1, r6
 80033ec:	4638      	mov	r0, r7
 80033ee:	f7ff ff37 	bl	8003260 <_free_r>
 80033f2:	e7e9      	b.n	80033c8 <_realloc_r+0x1c>
 80033f4:	4635      	mov	r5, r6
 80033f6:	e7e7      	b.n	80033c8 <_realloc_r+0x1c>

080033f8 <_sbrk_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4d05      	ldr	r5, [pc, #20]	; (8003414 <_sbrk_r+0x1c>)
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd f9e2 	bl	80007cc <_sbrk>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_sbrk_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_sbrk_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000194 	.word	0x20000194

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_lock+0x8>)
 800341a:	f000 b811 	b.w	8003440 <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	2000019c 	.word	0x2000019c

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__malloc_unlock+0x8>)
 8003426:	f000 b80c 	b.w	8003442 <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	2000019c 	.word	0x2000019c

08003430 <_malloc_usable_size_r>:
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f18      	subs	r0, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbc      	itt	lt
 800343a:	580b      	ldrlt	r3, [r1, r0]
 800343c:	18c0      	addlt	r0, r0, r3
 800343e:	4770      	bx	lr

08003440 <__retarget_lock_acquire_recursive>:
 8003440:	4770      	bx	lr

08003442 <__retarget_lock_release_recursive>:
 8003442:	4770      	bx	lr

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
