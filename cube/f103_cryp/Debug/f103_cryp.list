
f103_cryp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c1c  08002c1c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c1c  08002c1c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000002c  08002c50  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002c50  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e20  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143d  00000000  00000000  00026e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  000282b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  000288b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001750e  00000000  00000000  00028e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ce9  00000000  00000000  0004035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000837fa  00000000  00000000  00048047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  000cb841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000172c  00000000  00000000  000cb918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002134 	.word	0x08002134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002134 	.word	0x08002134

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int32_t status = AES_SUCCESS;
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fad7 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f84f 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f8bd 	bl	80002dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f891 	bl	8000288 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Enable CRC clock */
   __CRC_CLK_ENABLE();
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <main+0x98>)
 8000168:	695b      	ldr	r3, [r3, #20]
 800016a:	4a1e      	ldr	r2, [pc, #120]	; (80001e4 <main+0x98>)
 800016c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000170:	6153      	str	r3, [r2, #20]
 8000172:	4b1c      	ldr	r3, [pc, #112]	; (80001e4 <main+0x98>)
 8000174:	695b      	ldr	r3, [r3, #20]
 8000176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800017a:	603b      	str	r3, [r7, #0]
 800017c:	683b      	ldr	r3, [r7, #0]

  status = STM32_AES_ECB_Encrypt( (uint8_t *) Plaintext, PLAINTEXT_LENGTH, Key, OutputMessage,
 800017e:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <main+0x9c>)
 8000180:	9300      	str	r3, [sp, #0]
 8000182:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0xa0>)
 8000184:	4a1a      	ldr	r2, [pc, #104]	; (80001f0 <main+0xa4>)
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	481a      	ldr	r0, [pc, #104]	; (80001f4 <main+0xa8>)
 800018a:	f000 f8f3 	bl	8000374 <STM32_AES_ECB_Encrypt>
 800018e:	6078      	str	r0, [r7, #4]
                                  &OutputMessageLength);
  if (status == AES_SUCCESS)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d10a      	bne.n	80001ac <main+0x60>
  {
    if (Buffercmp(Expected_Ciphertext, OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 8000196:	2240      	movs	r2, #64	; 0x40
 8000198:	4914      	ldr	r1, [pc, #80]	; (80001ec <main+0xa0>)
 800019a:	4817      	ldr	r0, [pc, #92]	; (80001f8 <main+0xac>)
 800019c:	f000 f9bc 	bl	8000518 <Buffercmp>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d004      	beq.n	80001b0 <main+0x64>

      /* add application traitment in case of AES ECB encryption is passed */
    }
    else
    {
      Error_Handler();
 80001a6:	f000 f9d8 	bl	800055a <Error_Handler>
 80001aa:	e001      	b.n	80001b0 <main+0x64>
  {

    /* In case of encryption/decryption not success the possible values of status:
     * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_INPUT_SIZE, AES_ERR_BAD_OPERATION
     */
    Error_Handler();
 80001ac:	f000 f9d5 	bl	800055a <Error_Handler>
  }
  /* Decrypt DATA with AES in ECB mode */
  status = STM32_AES_ECB_Decrypt( (uint8_t *) Expected_Ciphertext, PLAINTEXT_LENGTH, Key, OutputMessage,
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <main+0x9c>)
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <main+0xa0>)
 80001b6:	4a0e      	ldr	r2, [pc, #56]	; (80001f0 <main+0xa4>)
 80001b8:	2140      	movs	r1, #64	; 0x40
 80001ba:	480f      	ldr	r0, [pc, #60]	; (80001f8 <main+0xac>)
 80001bc:	f000 f943 	bl	8000446 <STM32_AES_ECB_Decrypt>
 80001c0:	6078      	str	r0, [r7, #4]
                                  &OutputMessageLength);
  if (status == AES_SUCCESS)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d10a      	bne.n	80001de <main+0x92>
  {
    if (Buffercmp(Plaintext, OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 80001c8:	2240      	movs	r2, #64	; 0x40
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <main+0xa0>)
 80001cc:	4809      	ldr	r0, [pc, #36]	; (80001f4 <main+0xa8>)
 80001ce:	f000 f9a3 	bl	8000518 <Buffercmp>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d004      	beq.n	80001e2 <main+0x96>
    {
      /* add application traitment in case of AES ECB encryption is passed */
    }
    else
    {
      Error_Handler();
 80001d8:	f000 f9bf 	bl	800055a <Error_Handler>
 80001dc:	e001      	b.n	80001e2 <main+0x96>
  {
    /* In case of encryption/decryption not success the possible values of status:
     * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_INPUT_SIZE, AES_ERR_BAD_OPERATION
     */

    Error_Handler();
 80001de:	f000 f9bc 	bl	800055a <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x96>
 80001e4:	40021000 	.word	0x40021000
 80001e8:	20000048 	.word	0x20000048
 80001ec:	20000090 	.word	0x20000090
 80001f0:	20000000 	.word	0x20000000
 80001f4:	0800215c 	.word	0x0800215c
 80001f8:	0800219c 	.word	0x0800219c

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 ff8a 	bl	8002124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800023a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fd41 	bl	8000ccc <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f983 	bl	800055a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2102      	movs	r1, #2
 8000270:	4618      	mov	r0, r3
 8000272:	f000 ffab 	bl	80011cc <HAL_RCC_ClockConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800027c:	f000 f96d 	bl	800055a <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3740      	adds	r7, #64	; 0x40
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800028e:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_USART1_UART_Init+0x50>)
 8000290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 8000294:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f001 f91e 	bl	8001500 <HAL_UART_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ca:	f000 f946 	bl	800055a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000004c 	.word	0x2000004c
 80002d8:	40013800 	.word	0x40013800

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a1d      	ldr	r2, [pc, #116]	; (800036c <MX_GPIO_Init+0x90>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a17      	ldr	r2, [pc, #92]	; (800036c <MX_GPIO_Init+0x90>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0320 	and.w	r3, r3, #32
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a11      	ldr	r2, [pc, #68]	; (800036c <MX_GPIO_Init+0x90>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <MX_GPIO_Init+0x94>)
 8000340:	f000 fcac 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2302      	movs	r3, #2
 8000354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	4619      	mov	r1, r3
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_GPIO_Init+0x94>)
 800035e:	f000 fb19 	bl	8000994 <HAL_GPIO_Init>

}
 8000362:	bf00      	nop
 8000364:	3720      	adds	r7, #32
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40011000 	.word	0x40011000

08000374 <STM32_AES_ECB_Encrypt>:
int32_t STM32_AES_ECB_Encrypt(uint8_t* InputMessage,
                              uint32_t InputMessageLength,
                              uint8_t  *AES256_Key,
                              uint8_t  *OutputMessage,
                              uint32_t *OutputMessageLength)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b0cf      	sub	sp, #316	; 0x13c
 8000378:	af02      	add	r7, sp, #8
 800037a:	f107 040c 	add.w	r4, r7, #12
 800037e:	6020      	str	r0, [r4, #0]
 8000380:	f107 0008 	add.w	r0, r7, #8
 8000384:	6001      	str	r1, [r0, #0]
 8000386:	1d39      	adds	r1, r7, #4
 8000388:	600a      	str	r2, [r1, #0]
 800038a:	463a      	mov	r2, r7
 800038c:	6013      	str	r3, [r2, #0]
  AESECBctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 800038e:	2300      	movs	r3, #0
 8000390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  int32_t outputLength = 0;
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	2200      	movs	r2, #0
 80003a2:	711a      	strb	r2, [r3, #4]

  /* Set key size to 32 (corresponding to AES-256) */
  AESctx.mKeySize = 32;
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2220      	movs	r2, #32
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the operation, by passing the key.
   * Third parameter is NULL because ECB doesn't use any IV */
  error_status = AES_ECB_Encrypt_Init (&AESctx, AES256_Key, NULL );
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	f107 0014 	add.w	r0, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	f001 fde9 	bl	8001f8c <AES_ECB_Encrypt_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 80003c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d137      	bne.n	8000438 <STM32_AES_ECB_Encrypt+0xc4>
  {
    /* Encrypt Data */
    error_status = AES_ECB_Encrypt_Append(&AESctx,
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	681c      	ldr	r4, [r3, #0]
 80003ce:	463b      	mov	r3, r7
 80003d0:	f107 010c 	add.w	r1, r7, #12
 80003d4:	f107 0014 	add.w	r0, r7, #20
 80003d8:	f107 0210 	add.w	r2, r7, #16
 80003dc:	9200      	str	r2, [sp, #0]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4622      	mov	r2, r4
 80003e2:	6809      	ldr	r1, [r1, #0]
 80003e4:	f001 fdd5 	bl	8001f92 <AES_ECB_Encrypt_Append>
 80003e8:	4603      	mov	r3, r0
 80003ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                                          InputMessage,
                                          InputMessageLength,
                                          OutputMessage,
                                          &outputLength);

    if (error_status == AES_SUCCESS)
 80003ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d120      	bne.n	8000438 <STM32_AES_ECB_Encrypt+0xc4>
    {
      /* Write the number of data written*/
      *OutputMessageLength = outputLength;
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000402:	601a      	str	r2, [r3, #0]
      /* Do the Finalization */
      error_status = AES_ECB_Encrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, &outputLength);
 8000404:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	463a      	mov	r2, r7
 800040c:	6812      	ldr	r2, [r2, #0]
 800040e:	18d1      	adds	r1, r2, r3
 8000410:	f107 0210 	add.w	r2, r7, #16
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fe01 	bl	8002020 <AES_ECB_Encrypt_Finish>
 800041e:	4603      	mov	r3, r0
 8000420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      /* Add data written to the information to be returned */
      *OutputMessageLength += outputLength;
 8000424:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f107 0210 	add.w	r2, r7, #16
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	441a      	add	r2, r3
 8000432:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000436:	601a      	str	r2, [r3, #0]
    }
  }

  return error_status;
 8000438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 800043c:	4618      	mov	r0, r3
 800043e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000442:	46bd      	mov	sp, r7
 8000444:	bd90      	pop	{r4, r7, pc}

08000446 <STM32_AES_ECB_Decrypt>:
int32_t STM32_AES_ECB_Decrypt(uint8_t* InputMessage,
                              uint32_t InputMessageLength,
                              uint8_t  *AES256_Key,
                              uint8_t  *OutputMessage,
                              uint32_t *OutputMessageLength)
{
 8000446:	b590      	push	{r4, r7, lr}
 8000448:	b0cf      	sub	sp, #316	; 0x13c
 800044a:	af02      	add	r7, sp, #8
 800044c:	f107 040c 	add.w	r4, r7, #12
 8000450:	6020      	str	r0, [r4, #0]
 8000452:	f107 0008 	add.w	r0, r7, #8
 8000456:	6001      	str	r1, [r0, #0]
 8000458:	1d39      	adds	r1, r7, #4
 800045a:	600a      	str	r2, [r1, #0]
 800045c:	463a      	mov	r2, r7
 800045e:	6013      	str	r3, [r2, #0]
  AESECBctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 8000460:	2300      	movs	r3, #0
 8000462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  int32_t outputLength = 0;
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	711a      	strb	r2, [r3, #4]

  /* Set key size to 32 (corresponding to AES-256) */
  AESctx.mKeySize = 32;
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	2220      	movs	r2, #32
 800047c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the operation, by passing the key.
   * Third parameter is NULL because ECB doesn't use any IV */
  error_status = AES_ECB_Decrypt_Init (&AESctx, AES256_Key, NULL );
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	f107 0014 	add.w	r0, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	f001 fdd6 	bl	8002038 <AES_ECB_Decrypt_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 8000492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000496:	2b00      	cmp	r3, #0
 8000498:	d137      	bne.n	800050a <STM32_AES_ECB_Decrypt+0xc4>
  {
    /* Decrypt Data */
    error_status = AES_ECB_Decrypt_Append(&AESctx,
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	681c      	ldr	r4, [r3, #0]
 80004a0:	463b      	mov	r3, r7
 80004a2:	f107 010c 	add.w	r1, r7, #12
 80004a6:	f107 0014 	add.w	r0, r7, #20
 80004aa:	f107 0210 	add.w	r2, r7, #16
 80004ae:	9200      	str	r2, [sp, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4622      	mov	r2, r4
 80004b4:	6809      	ldr	r1, [r1, #0]
 80004b6:	f001 fdc2 	bl	800203e <AES_ECB_Decrypt_Append>
 80004ba:	4603      	mov	r3, r0
 80004bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                                          InputMessage,
                                          InputMessageLength,
                                          OutputMessage,
                                          &outputLength);

    if (error_status == AES_SUCCESS)
 80004c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d120      	bne.n	800050a <STM32_AES_ECB_Decrypt+0xc4>
    {
      /* Write the number of data written*/
      *OutputMessageLength = outputLength;
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80004d4:	601a      	str	r2, [r3, #0]
      /* Do the Finalization */
      error_status = AES_ECB_Decrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, &outputLength);
 80004d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	463a      	mov	r2, r7
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	18d1      	adds	r1, r2, r3
 80004e2:	f107 0210 	add.w	r2, r7, #16
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fdea 	bl	80020c4 <AES_ECB_Decrypt_Finish>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      /* Add data written to the information to be returned */
      *OutputMessageLength += outputLength;
 80004f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f107 0210 	add.w	r2, r7, #16
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	441a      	add	r2, r3
 8000504:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000508:	601a      	str	r2, [r3, #0]
    }
  }

  return error_status;
 800050a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 800050e:	4618      	mov	r0, r3
 8000510:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000514:	46bd      	mov	sp, r7
 8000516:	bd90      	pop	{r4, r7, pc}

08000518 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */
TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000526:	e00d      	b.n	8000544 <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d001      	beq.n	8000538 <Buffercmp+0x20>
    {
      return FAILED;
 8000534:	2300      	movs	r3, #0
 8000536:	e00b      	b.n	8000550 <Buffercmp+0x38>
    }

    pBuffer++;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	3301      	adds	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	80fa      	strh	r2, [r7, #6]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ec      	bne.n	8000528 <Buffercmp+0x10>
  }

  return PASSED;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055e:	b672      	cpsid	i
}
 8000560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000562:	e7fe      	b.n	8000562 <Error_Handler+0x8>

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <HAL_UART_MspInit+0x8c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d131      	bne.n	800064c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_UART_MspInit+0x94>)
 800062e:	f000 f9b1 	bl	8000994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_UART_MspInit+0x94>)
 8000648:	f000 f9a4 	bl	8000994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013800 	.word	0x40013800
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f875 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
	...

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	; (8000700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff ffe4 	bl	80006ae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f001 fcf9 	bl	80020dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd2f 	bl	800014c <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80006f8:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 80006fc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000700:	200000d4 	.word	0x200000d4

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f907 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f808 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff ff1e 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x54>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f911 	bl	800097a <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f8e7 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x5c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000020 	.word	0x20000020
 800078c:	20000028 	.word	0x20000028
 8000790:	20000024 	.word	0x20000024

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000028 	.word	0x20000028
 80007b4:	200000d0 	.word	0x200000d0

080007b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	200000d0 	.word	0x200000d0

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff90 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff49 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff5e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff90 	bl	8000884 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5f 	bl	8000830 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffb0 	bl	80008e8 <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e169      	b.n	8000c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a8:	2201      	movs	r2, #1
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 8158 	bne.w	8000c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	4a9a      	ldr	r2, [pc, #616]	; (8000c34 <HAL_GPIO_Init+0x2a0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d05e      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009d0:	4a98      	ldr	r2, [pc, #608]	; (8000c34 <HAL_GPIO_Init+0x2a0>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d875      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009d6:	4a98      	ldr	r2, [pc, #608]	; (8000c38 <HAL_GPIO_Init+0x2a4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d058      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009dc:	4a96      	ldr	r2, [pc, #600]	; (8000c38 <HAL_GPIO_Init+0x2a4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d86f      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009e2:	4a96      	ldr	r2, [pc, #600]	; (8000c3c <HAL_GPIO_Init+0x2a8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d052      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009e8:	4a94      	ldr	r2, [pc, #592]	; (8000c3c <HAL_GPIO_Init+0x2a8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d869      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009ee:	4a94      	ldr	r2, [pc, #592]	; (8000c40 <HAL_GPIO_Init+0x2ac>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d04c      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009f4:	4a92      	ldr	r2, [pc, #584]	; (8000c40 <HAL_GPIO_Init+0x2ac>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d863      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009fa:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d046      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 8000a00:	4a90      	ldr	r2, [pc, #576]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d85d      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d82a      	bhi.n	8000a60 <HAL_GPIO_Init+0xcc>
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d859      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <HAL_GPIO_Init+0x80>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a69 	.word	0x08000a69
 8000a1c:	08000a7b 	.word	0x08000a7b
 8000a20:	08000abd 	.word	0x08000abd
 8000a24:	08000ac3 	.word	0x08000ac3
 8000a28:	08000ac3 	.word	0x08000ac3
 8000a2c:	08000ac3 	.word	0x08000ac3
 8000a30:	08000ac3 	.word	0x08000ac3
 8000a34:	08000ac3 	.word	0x08000ac3
 8000a38:	08000ac3 	.word	0x08000ac3
 8000a3c:	08000ac3 	.word	0x08000ac3
 8000a40:	08000ac3 	.word	0x08000ac3
 8000a44:	08000ac3 	.word	0x08000ac3
 8000a48:	08000ac3 	.word	0x08000ac3
 8000a4c:	08000ac3 	.word	0x08000ac3
 8000a50:	08000ac3 	.word	0x08000ac3
 8000a54:	08000ac3 	.word	0x08000ac3
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a85 	.word	0x08000a85
 8000a60:	4a79      	ldr	r2, [pc, #484]	; (8000c48 <HAL_GPIO_Init+0x2b4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d013      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a66:	e02c      	b.n	8000ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e029      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	3304      	adds	r3, #4
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e024      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	3308      	adds	r3, #8
 8000a80:	623b      	str	r3, [r7, #32]
          break;
 8000a82:	e01f      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	330c      	adds	r3, #12
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e01a      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a96:	2304      	movs	r3, #4
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e013      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d105      	bne.n	8000ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	611a      	str	r2, [r3, #16]
          break;
 8000aae:	e009      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	615a      	str	r2, [r3, #20]
          break;
 8000aba:	e003      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          break;
 8000ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2bff      	cmp	r3, #255	; 0xff
 8000ac8:	d801      	bhi.n	8000ace <HAL_GPIO_Init+0x13a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	e001      	b.n	8000ad2 <HAL_GPIO_Init+0x13e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	2bff      	cmp	r3, #255	; 0xff
 8000ad8:	d802      	bhi.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x152>
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	3b08      	subs	r3, #8
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	210f      	movs	r1, #15
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	401a      	ands	r2, r3
 8000af8:	6a39      	ldr	r1, [r7, #32]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b14:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a4c      	ldr	r2, [pc, #304]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b2c:	4a48      	ldr	r2, [pc, #288]	; (8000c50 <HAL_GPIO_Init+0x2bc>)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <HAL_GPIO_Init+0x2c0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d013      	beq.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	; (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00d      	beq.n	8000b7c <HAL_GPIO_Init+0x1e8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3e      	ldr	r2, [pc, #248]	; (8000c5c <HAL_GPIO_Init+0x2c8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x1e4>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <HAL_GPIO_Init+0x2cc>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <HAL_GPIO_Init+0x1e0>
 8000b70:	2303      	movs	r3, #3
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <HAL_GPIO_Init+0x2bc>)
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	492c      	ldr	r1, [pc, #176]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4928      	ldr	r1, [pc, #160]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	4922      	ldr	r1, [pc, #136]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	491e      	ldr	r1, [pc, #120]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	4918      	ldr	r1, [pc, #96]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4914      	ldr	r1, [pc, #80]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d021      	beq.n	8000c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60cb      	str	r3, [r1, #12]
 8000c30:	e021      	b.n	8000c76 <HAL_GPIO_Init+0x2e2>
 8000c32:	bf00      	nop
 8000c34:	10320000 	.word	0x10320000
 8000c38:	10310000 	.word	0x10310000
 8000c3c:	10220000 	.word	0x10220000
 8000c40:	10210000 	.word	0x10210000
 8000c44:	10120000 	.word	0x10120000
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40011400 	.word	0x40011400
 8000c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_GPIO_Init+0x304>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <HAL_GPIO_Init+0x304>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f ae8e 	bne.w	80009a8 <HAL_GPIO_Init+0x14>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	372c      	adds	r7, #44	; 0x2c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	611a      	str	r2, [r3, #16]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e26c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8087 	beq.w	8000dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cec:	4b92      	ldr	r3, [pc, #584]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d00c      	beq.n	8000d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf8:	4b8f      	ldr	r3, [pc, #572]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d112      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
 8000d04:	4b8c      	ldr	r3, [pc, #560]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d10b      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d06c      	beq.n	8000df8 <HAL_RCC_OscConfig+0x12c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d168      	bne.n	8000df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e246      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x76>
 8000d34:	4b80      	ldr	r3, [pc, #512]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7f      	ldr	r2, [pc, #508]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e02e      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x98>
 8000d4a:	4b7b      	ldr	r3, [pc, #492]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7a      	ldr	r2, [pc, #488]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a77      	ldr	r2, [pc, #476]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e01d      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0xbc>
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a6e      	ldr	r2, [pc, #440]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e00b      	b.n	8000da0 <HAL_RCC_OscConfig+0xd4>
 8000d88:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a67      	ldr	r2, [pc, #412]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fd06 	bl	80007b8 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fd02 	bl	80007b8 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	; 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e1fa      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe4>
 8000dce:	e014      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcf2 	bl	80007b8 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fcee 	bl	80007b8 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e1e6      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x10c>
 8000df6:	e000      	b.n	8000dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d063      	beq.n	8000ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e06:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00b      	beq.n	8000e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e12:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d11c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d116      	bne.n	8000e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e1ba      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4939      	ldr	r1, [pc, #228]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e56:	e03a      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d020      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fca7 	bl	80007b8 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fca3 	bl	80007b8 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e19b      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4927      	ldr	r1, [pc, #156]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e015      	b.n	8000ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc86 	bl	80007b8 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fc82 	bl	80007b8 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e17a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d03a      	beq.n	8000f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fc66 	bl	80007b8 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fc62 	bl	80007b8 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e15a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fad8 	bl	80014c4 <RCC_Delay>
 8000f14:	e01c      	b.n	8000f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc4c 	bl	80007b8 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f22:	e00f      	b.n	8000f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc48 	bl	80007b8 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d908      	bls.n	8000f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e140      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42420000 	.word	0x42420000
 8000f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b9e      	ldr	r3, [pc, #632]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e9      	bne.n	8000f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a6 	beq.w	80010aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f62:	4b97      	ldr	r3, [pc, #604]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10d      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b94      	ldr	r3, [pc, #592]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a93      	ldr	r2, [pc, #588]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b91      	ldr	r3, [pc, #580]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f86:	2301      	movs	r3, #1
 8000f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a8a      	ldr	r2, [pc, #552]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fc09 	bl	80007b8 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000faa:	f7ff fc05 	bl	80007b8 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b64      	cmp	r3, #100	; 0x64
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e0fd      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x312>
 8000fd0:	4b7b      	ldr	r3, [pc, #492]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a7a      	ldr	r2, [pc, #488]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	e02d      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x334>
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a72      	ldr	r2, [pc, #456]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	e01c      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d10c      	bne.n	8001022 <HAL_RCC_OscConfig+0x356>
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a6c      	ldr	r2, [pc, #432]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a69      	ldr	r2, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e00b      	b.n	800103a <HAL_RCC_OscConfig+0x36e>
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a66      	ldr	r2, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d015      	beq.n	800106e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fbb9 	bl	80007b8 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fbb5 	bl	80007b8 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0ab      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0ee      	beq.n	800104a <HAL_RCC_OscConfig+0x37e>
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fba3 	bl	80007b8 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fb9f 	bl	80007b8 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e095      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ee      	bne.n	8001076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d105      	bne.n	80010aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8081 	beq.w	80011b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d061      	beq.n	8001184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d146      	bne.n	8001156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb73 	bl	80007b8 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fb6f 	bl	80007b8 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e067      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	492d      	ldr	r1, [pc, #180]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a19      	ldr	r1, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	430b      	orrs	r3, r1
 8001122:	4927      	ldr	r1, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fb43 	bl	80007b8 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fb3f 	bl	80007b8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e037      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x46a>
 8001154:	e02f      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_RCC_OscConfig+0x4fc>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fb2c 	bl	80007b8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fb28 	bl	80007b8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e020      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x498>
 8001182:	e018      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e013      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	42420060 	.word	0x42420060

080011cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0d0      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d910      	bls.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4965      	ldr	r1, [pc, #404]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800124a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d040      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e073      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06b      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4936      	ldr	r1, [pc, #216]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa7c 	bl	80007b8 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fa78 	bl	80007b8 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e053      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d210      	bcs.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0207 	bic.w	r2, r3, #7
 8001302:	4922      	ldr	r1, [pc, #136]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f821 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1cc>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1d0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f9da 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000
 8001390:	40021000 	.word	0x40021000
 8001394:	080021dc 	.word	0x080021dc
 8001398:	20000020 	.word	0x20000020
 800139c:	20000024 	.word	0x20000024

080013a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013a8:	1d3c      	adds	r4, r7, #4
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b0:	f240 2301 	movw	r3, #513	; 0x201
 80013b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d002      	beq.n	80013e0 <HAL_RCC_GetSysClockFreq+0x40>
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x46>
 80013de:	e02d      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e2:	623b      	str	r3, [r7, #32]
      break;
 80013e4:	e02d      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f2:	4413      	add	r3, r2
 80013f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0c5b      	lsrs	r3, r3, #17
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001412:	4413      	add	r3, r2
 8001414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800141e:	fb02 f203 	mul.w	r2, r2, r3
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	e004      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	623b      	str	r3, [r7, #32]
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800143e:	623b      	str	r3, [r7, #32]
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	6a3b      	ldr	r3, [r7, #32]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc90      	pop	{r4, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	0800214c 	.word	0x0800214c
 8001454:	40021000 	.word	0x40021000
 8001458:	007a1200 	.word	0x007a1200
 800145c:	003d0900 	.word	0x003d0900

08001460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_RCC_GetHCLKFreq+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000020 	.word	0x20000020

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001478:	f7ff fff2 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	080021ec 	.word	0x080021ec

0800149c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a0:	f7ff ffde 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0adb      	lsrs	r3, r3, #11
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4903      	ldr	r1, [pc, #12]	; (80014c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	080021ec 	.word	0x080021ec

080014c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <RCC_Delay+0x34>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <RCC_Delay+0x38>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0a5b      	lsrs	r3, r3, #9
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e0:	bf00      	nop
  }
  while (Delay --);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	60fa      	str	r2, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <RCC_Delay+0x1c>
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000020 	.word	0x20000020
 80014fc:	10624dd3 	.word	0x10624dd3

08001500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e03f      	b.n	8001592 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff f84e 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f829 	bl	800159c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015d6:	f023 030c 	bic.w	r3, r3, #12
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <UART_SetConfig+0x114>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d103      	bne.n	800160c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001604:	f7ff ff4a 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	e002      	b.n	8001612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800160c:	f7ff ff32 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8001610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	009a      	lsls	r2, r3, #2
 800161c:	441a      	add	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <UART_SetConfig+0x118>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	0119      	lsls	r1, r3, #4
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009a      	lsls	r2, r3, #2
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fbb2 f2f3 	udiv	r2, r2, r3
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <UART_SetConfig+0x118>)
 800164a:	fba3 0302 	umull	r0, r3, r3, r2
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2064      	movs	r0, #100	; 0x64
 8001652:	fb00 f303 	mul.w	r3, r0, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	3332      	adds	r3, #50	; 0x32
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <UART_SetConfig+0x118>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	4419      	add	r1, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	441a      	add	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <UART_SetConfig+0x118>)
 8001682:	fba3 0302 	umull	r0, r3, r3, r2
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2064      	movs	r0, #100	; 0x64
 800168a:	fb00 f303 	mul.w	r3, r0, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	3332      	adds	r3, #50	; 0x32
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <UART_SetConfig+0x118>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	f003 020f 	and.w	r2, r3, #15
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	440a      	add	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40013800 	.word	0x40013800
 80016b4:	51eb851f 	.word	0x51eb851f

080016b8 <AES_keyschedule_enc_LL>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	1092      	asrs	r2, r2, #2
 80016bc:	2300      	movs	r3, #0
 80016be:	4293      	cmp	r3, r2
 80016c0:	da05      	bge.n	80016ce <AES_keyschedule_enc_LL+0x16>
 80016c2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80016c6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 80016ca:	3301      	adds	r3, #1
 80016cc:	e7f7      	b.n	80016be <AES_keyschedule_enc_LL+0x6>
 80016ce:	2a06      	cmp	r2, #6
 80016d0:	d02e      	beq.n	8001730 <AES_keyschedule_enc_LL+0x78>
 80016d2:	2a08      	cmp	r2, #8
 80016d4:	d05c      	beq.n	8001790 <AES_keyschedule_enc_LL+0xd8>
 80016d6:	2a04      	cmp	r2, #4
 80016d8:	f040 80a3 	bne.w	8001822 <AES_keyschedule_enc_LL+0x16a>
 80016dc:	2200      	movs	r2, #0
 80016de:	4851      	ldr	r0, [pc, #324]	; (8001824 <AES_keyschedule_enc_LL+0x16c>)
 80016e0:	68cb      	ldr	r3, [r1, #12]
 80016e2:	5815      	ldr	r5, [r2, r0]
 80016e4:	6808      	ldr	r0, [r1, #0]
 80016e6:	b2dc      	uxtb	r4, r3
 80016e8:	4045      	eors	r5, r0
 80016ea:	484f      	ldr	r0, [pc, #316]	; (8001828 <AES_keyschedule_enc_LL+0x170>)
 80016ec:	3204      	adds	r2, #4
 80016ee:	5d06      	ldrb	r6, [r0, r4]
 80016f0:	0e1c      	lsrs	r4, r3, #24
 80016f2:	5d04      	ldrb	r4, [r0, r4]
 80016f4:	2a28      	cmp	r2, #40	; 0x28
 80016f6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80016fa:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80016fe:	5d86      	ldrb	r6, [r0, r6]
 8001700:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 8001704:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8001708:	5d80      	ldrb	r0, [r0, r6]
 800170a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800170e:	ea85 0004 	eor.w	r0, r5, r4
 8001712:	684c      	ldr	r4, [r1, #4]
 8001714:	6108      	str	r0, [r1, #16]
 8001716:	ea80 0004 	eor.w	r0, r0, r4
 800171a:	688c      	ldr	r4, [r1, #8]
 800171c:	6148      	str	r0, [r1, #20]
 800171e:	ea80 0004 	eor.w	r0, r0, r4
 8001722:	ea80 0303 	eor.w	r3, r0, r3
 8001726:	6188      	str	r0, [r1, #24]
 8001728:	61cb      	str	r3, [r1, #28]
 800172a:	d07a      	beq.n	8001822 <AES_keyschedule_enc_LL+0x16a>
 800172c:	3110      	adds	r1, #16
 800172e:	e7d6      	b.n	80016de <AES_keyschedule_enc_LL+0x26>
 8001730:	2200      	movs	r2, #0
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <AES_keyschedule_enc_LL+0x16c>)
 8001734:	3201      	adds	r2, #1
 8001736:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800173a:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800173e:	680b      	ldr	r3, [r1, #0]
 8001740:	6948      	ldr	r0, [r1, #20]
 8001742:	405c      	eors	r4, r3
 8001744:	4b38      	ldr	r3, [pc, #224]	; (8001828 <AES_keyschedule_enc_LL+0x170>)
 8001746:	b2c5      	uxtb	r5, r0
 8001748:	5d5e      	ldrb	r6, [r3, r5]
 800174a:	0e05      	lsrs	r5, r0, #24
 800174c:	5d5d      	ldrb	r5, [r3, r5]
 800174e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001752:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8001756:	5d9e      	ldrb	r6, [r3, r6]
 8001758:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800175c:	5c18      	ldrb	r0, [r3, r0]
 800175e:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001762:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8001766:	ea84 0300 	eor.w	r3, r4, r0
 800176a:	618b      	str	r3, [r1, #24]
 800176c:	2001      	movs	r0, #1
 800176e:	460b      	mov	r3, r1
 8001770:	685d      	ldr	r5, [r3, #4]
 8001772:	699c      	ldr	r4, [r3, #24]
 8001774:	2803      	cmp	r0, #3
 8001776:	ea85 0404 	eor.w	r4, r5, r4
 800177a:	61dc      	str	r4, [r3, #28]
 800177c:	d101      	bne.n	8001782 <AES_keyschedule_enc_LL+0xca>
 800177e:	2a07      	cmp	r2, #7
 8001780:	dc4f      	bgt.n	8001822 <AES_keyschedule_enc_LL+0x16a>
 8001782:	3001      	adds	r0, #1
 8001784:	2806      	cmp	r0, #6
 8001786:	f103 0304 	add.w	r3, r3, #4
 800178a:	d1f1      	bne.n	8001770 <AES_keyschedule_enc_LL+0xb8>
 800178c:	3118      	adds	r1, #24
 800178e:	e7d0      	b.n	8001732 <AES_keyschedule_enc_LL+0x7a>
 8001790:	2400      	movs	r4, #0
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <AES_keyschedule_enc_LL+0x16c>)
 8001794:	69ca      	ldr	r2, [r1, #28]
 8001796:	58e5      	ldr	r5, [r4, r3]
 8001798:	680b      	ldr	r3, [r1, #0]
 800179a:	b2d0      	uxtb	r0, r2
 800179c:	405d      	eors	r5, r3
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <AES_keyschedule_enc_LL+0x170>)
 80017a0:	3404      	adds	r4, #4
 80017a2:	5c1e      	ldrb	r6, [r3, r0]
 80017a4:	0e10      	lsrs	r0, r2, #24
 80017a6:	5c18      	ldrb	r0, [r3, r0]
 80017a8:	2c1c      	cmp	r4, #28
 80017aa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80017ae:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80017b2:	5d9e      	ldrb	r6, [r3, r6]
 80017b4:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80017b8:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80017bc:	5d9e      	ldrb	r6, [r3, r6]
 80017be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80017c2:	ea85 0000 	eor.w	r0, r5, r0
 80017c6:	684d      	ldr	r5, [r1, #4]
 80017c8:	6208      	str	r0, [r1, #32]
 80017ca:	ea80 0005 	eor.w	r0, r0, r5
 80017ce:	688d      	ldr	r5, [r1, #8]
 80017d0:	6248      	str	r0, [r1, #36]	; 0x24
 80017d2:	ea80 0005 	eor.w	r0, r0, r5
 80017d6:	68cd      	ldr	r5, [r1, #12]
 80017d8:	6288      	str	r0, [r1, #40]	; 0x28
 80017da:	ea80 0005 	eor.w	r0, r0, r5
 80017de:	62c8      	str	r0, [r1, #44]	; 0x2c
 80017e0:	d01f      	beq.n	8001822 <AES_keyschedule_enc_LL+0x16a>
 80017e2:	0e05      	lsrs	r5, r0, #24
 80017e4:	5d5e      	ldrb	r6, [r3, r5]
 80017e6:	b2c5      	uxtb	r5, r0
 80017e8:	5d5d      	ldrb	r5, [r3, r5]
 80017ea:	3120      	adds	r1, #32
 80017ec:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 80017f0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80017f4:	5d9e      	ldrb	r6, [r3, r6]
 80017f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80017fa:	5c1b      	ldrb	r3, [r3, r0]
 80017fc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001800:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8001804:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
 8001808:	4043      	eors	r3, r0
 800180a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800180e:	610b      	str	r3, [r1, #16]
 8001810:	4043      	eors	r3, r0
 8001812:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8001816:	614b      	str	r3, [r1, #20]
 8001818:	4043      	eors	r3, r0
 800181a:	405a      	eors	r2, r3
 800181c:	618b      	str	r3, [r1, #24]
 800181e:	61ca      	str	r2, [r1, #28]
 8001820:	e7b7      	b.n	8001792 <AES_keyschedule_enc_LL+0xda>
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	080021f4 	.word	0x080021f4
 8001828:	08002b1c 	.word	0x08002b1c

0800182c <AES_keyschedule_enc>:
 800182c:	b530      	push	{r4, r5, lr}
 800182e:	2300      	movs	r3, #0
 8001830:	1095      	asrs	r5, r2, #2
 8001832:	42ab      	cmp	r3, r5
 8001834:	da06      	bge.n	8001844 <AES_keyschedule_enc+0x18>
 8001836:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800183a:	ba24      	rev	r4, r4
 800183c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8001840:	3301      	adds	r3, #1
 8001842:	e7f6      	b.n	8001832 <AES_keyschedule_enc+0x6>
 8001844:	4608      	mov	r0, r1
 8001846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800184a:	f7ff bf35 	b.w	80016b8 <AES_keyschedule_enc_LL>
	...

08001850 <AES_general_SW_enc>:
 8001850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001854:	10db      	asrs	r3, r3, #3
 8001856:	f103 0903 	add.w	r9, r3, #3
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	4ba5      	ldr	r3, [pc, #660]	; (8001af4 <AES_general_SW_enc+0x2a4>)
 8001860:	2401      	movs	r4, #1
 8001862:	601c      	str	r4, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	468b      	mov	fp, r1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	4ba3      	ldr	r3, [pc, #652]	; (8001af8 <AES_general_SW_enc+0x2a8>)
 800186c:	681c      	ldr	r4, [r3, #0]
 800186e:	9401      	str	r4, [sp, #4]
 8001870:	9c01      	ldr	r4, [sp, #4]
 8001872:	3401      	adds	r4, #1
 8001874:	d117      	bne.n	80018a6 <AES_general_SW_enc+0x56>
 8001876:	9c01      	ldr	r4, [sp, #4]
 8001878:	601c      	str	r4, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6814      	ldr	r4, [r2, #0]
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	9e01      	ldr	r6, [sp, #4]
 8001882:	6803      	ldr	r3, [r0, #0]
 8001884:	6857      	ldr	r7, [r2, #4]
 8001886:	6845      	ldr	r5, [r0, #4]
 8001888:	b956      	cbnz	r6, 80018a0 <AES_general_SW_enc+0x50>
 800188a:	ea84 0c03 	eor.w	ip, r4, r3
 800188e:	6883      	ldr	r3, [r0, #8]
 8001890:	6894      	ldr	r4, [r2, #8]
 8001892:	68c0      	ldr	r0, [r0, #12]
 8001894:	405c      	eors	r4, r3
 8001896:	68d3      	ldr	r3, [r2, #12]
 8001898:	406f      	eors	r7, r5
 800189a:	ea83 0800 	eor.w	r8, r3, r0
 800189e:	e00b      	b.n	80018b8 <AES_general_SW_enc+0x68>
 80018a0:	ea87 0c05 	eor.w	ip, r7, r5
 80018a4:	e005      	b.n	80018b2 <AES_general_SW_enc+0x62>
 80018a6:	6854      	ldr	r4, [r2, #4]
 80018a8:	6843      	ldr	r3, [r0, #4]
 80018aa:	ea84 0c03 	eor.w	ip, r4, r3
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	6804      	ldr	r4, [r0, #0]
 80018b2:	405c      	eors	r4, r3
 80018b4:	46a0      	mov	r8, r4
 80018b6:	4627      	mov	r7, r4
 80018b8:	4b90      	ldr	r3, [pc, #576]	; (8001afc <AES_general_SW_enc+0x2ac>)
 80018ba:	ea4f 601c 	mov.w	r0, ip, lsr #24
 80018be:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80018c2:	6910      	ldr	r0, [r2, #16]
 80018c4:	fa5f f588 	uxtb.w	r5, r8
 80018c8:	4070      	eors	r0, r6
 80018ca:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80018ce:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80018d2:	ea80 6036 	eor.w	r0, r0, r6, ror #24
 80018d6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80018da:	fa5f fa87 	uxtb.w	sl, r7
 80018de:	ea80 2636 	eor.w	r6, r0, r6, ror #8
 80018e2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80018e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80018ea:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80018ee:	ea86 4630 	eor.w	r6, r6, r0, ror #16
 80018f2:	0e38      	lsrs	r0, r7, #24
 80018f4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80018f8:	6950      	ldr	r0, [r2, #20]
 80018fa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80018fe:	4068      	eors	r0, r5
 8001900:	fa5f f58c 	uxtb.w	r5, ip
 8001904:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001908:	f109 39ff 	add.w	r9, r9, #4294967295
 800190c:	ea80 6035 	eor.w	r0, r0, r5, ror #24
 8001910:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001914:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001918:	f1b9 0f00 	cmp.w	r9, #0
 800191c:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8001920:	f3c8 2507 	ubfx	r5, r8, #8, #8
 8001924:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001928:	f102 0220 	add.w	r2, r2, #32
 800192c:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8001930:	ea4f 6514 	mov.w	r5, r4, lsr #24
 8001934:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001938:	f852 5c08 	ldr.w	r5, [r2, #-8]
 800193c:	b2e4      	uxtb	r4, r4
 800193e:	ea81 0105 	eor.w	r1, r1, r5
 8001942:	ea81 653a 	eor.w	r5, r1, sl, ror #24
 8001946:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 800194a:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800194e:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001952:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8001956:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800195a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800195e:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8001962:	ea88 0801 	eor.w	r8, r8, r1
 8001966:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 800196a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800196e:	ea88 6834 	eor.w	r8, r8, r4, ror #24
 8001972:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
 8001976:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800197a:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 800197e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8001982:	ea85 453a 	eor.w	r5, r5, sl, ror #16
 8001986:	ea88 4834 	eor.w	r8, r8, r4, ror #16
 800198a:	ea4f 6416 	mov.w	r4, r6, lsr #24
 800198e:	dd5b      	ble.n	8001a48 <AES_general_SW_enc+0x1f8>
 8001990:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 8001994:	6814      	ldr	r4, [r2, #0]
 8001996:	6891      	ldr	r1, [r2, #8]
 8001998:	407c      	eors	r4, r7
 800199a:	fa5f f788 	uxtb.w	r7, r8
 800199e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80019a2:	fa5f fa80 	uxtb.w	sl, r0
 80019a6:	ea84 6437 	eor.w	r4, r4, r7, ror #24
 80019aa:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80019ae:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80019b2:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80019b6:	ea84 2c37 	eor.w	ip, r4, r7, ror #8
 80019ba:	f3c5 2407 	ubfx	r4, r5, #8, #8
 80019be:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80019c2:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 80019c6:	0e04      	lsrs	r4, r0, #24
 80019c8:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80019cc:	6854      	ldr	r4, [r2, #4]
 80019ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80019d2:	407c      	eors	r4, r7
 80019d4:	b2f7      	uxtb	r7, r6
 80019d6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80019da:	ea84 6437 	eor.w	r4, r4, r7, ror #24
 80019de:	f3c5 4707 	ubfx	r7, r5, #16, #8
 80019e2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80019e6:	ea84 2737 	eor.w	r7, r4, r7, ror #8
 80019ea:	f3c8 2407 	ubfx	r4, r8, #8, #8
 80019ee:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80019f2:	ea87 4734 	eor.w	r7, r7, r4, ror #16
 80019f6:	0e2c      	lsrs	r4, r5, #24
 80019f8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80019fc:	b2ed      	uxtb	r5, r5
 80019fe:	404c      	eors	r4, r1
 8001a00:	ea84 643a 	eor.w	r4, r4, sl, ror #24
 8001a04:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 8001a08:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001a0c:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001a10:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001a14:	68d1      	ldr	r1, [r2, #12]
 8001a16:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001a1a:	ea84 243a 	eor.w	r4, r4, sl, ror #8
 8001a1e:	ea88 0801 	eor.w	r8, r8, r1
 8001a22:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8001a26:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8001a2a:	ea88 6835 	eor.w	r8, r8, r5, ror #24
 8001a2e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8001a32:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001a36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001a3a:	ea88 2835 	eor.w	r8, r8, r5, ror #8
 8001a3e:	ea84 443a 	eor.w	r4, r4, sl, ror #16
 8001a42:	ea88 4833 	eor.w	r8, r8, r3, ror #16
 8001a46:	e737      	b.n	80018b8 <AES_general_SW_enc+0x68>
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <AES_general_SW_enc+0x2b0>)
 8001a4a:	5d1f      	ldrb	r7, [r3, r4]
 8001a4c:	fa5f f488 	uxtb.w	r4, r8
 8001a50:	5d1c      	ldrb	r4, [r3, r4]
 8001a52:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 8001a56:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8001a5a:	5d1c      	ldrb	r4, [r3, r4]
 8001a5c:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 8001a60:	f3c5 2407 	ubfx	r4, r5, #8, #8
 8001a64:	5d1c      	ldrb	r4, [r3, r4]
 8001a66:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 8001a6a:	6814      	ldr	r4, [r2, #0]
 8001a6c:	407c      	eors	r4, r7
 8001a6e:	f8cb 4000 	str.w	r4, [fp]
 8001a72:	0e04      	lsrs	r4, r0, #24
 8001a74:	5d1f      	ldrb	r7, [r3, r4]
 8001a76:	b2f4      	uxtb	r4, r6
 8001a78:	5d1c      	ldrb	r4, [r3, r4]
 8001a7a:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 8001a7e:	f3c5 4407 	ubfx	r4, r5, #16, #8
 8001a82:	5d1c      	ldrb	r4, [r3, r4]
 8001a84:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 8001a88:	f3c8 2407 	ubfx	r4, r8, #8, #8
 8001a8c:	5d1c      	ldrb	r4, [r3, r4]
 8001a8e:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 8001a92:	6854      	ldr	r4, [r2, #4]
 8001a94:	407c      	eors	r4, r7
 8001a96:	f8cb 4004 	str.w	r4, [fp, #4]
 8001a9a:	0e2c      	lsrs	r4, r5, #24
 8001a9c:	5d1f      	ldrb	r7, [r3, r4]
 8001a9e:	b2c4      	uxtb	r4, r0
 8001aa0:	5d1c      	ldrb	r4, [r3, r4]
 8001aa2:	b2ed      	uxtb	r5, r5
 8001aa4:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 8001aa8:	f3c8 4407 	ubfx	r4, r8, #16, #8
 8001aac:	5d1c      	ldrb	r4, [r3, r4]
 8001aae:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001ab2:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 8001ab6:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8001aba:	5d1c      	ldrb	r4, [r3, r4]
 8001abc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8001ac0:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 8001ac4:	6894      	ldr	r4, [r2, #8]
 8001ac6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001aca:	407c      	eors	r4, r7
 8001acc:	f8cb 4008 	str.w	r4, [fp, #8]
 8001ad0:	f813 7008 	ldrb.w	r7, [r3, r8]
 8001ad4:	5d5c      	ldrb	r4, [r3, r5]
 8001ad6:	5d9d      	ldrb	r5, [r3, r6]
 8001ad8:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8001adc:	5c1b      	ldrb	r3, [r3, r0]
 8001ade:	68d2      	ldr	r2, [r2, #12]
 8001ae0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001ae4:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8001ae8:	4053      	eors	r3, r2
 8001aea:	f8cb 300c 	str.w	r3, [fp, #12]
 8001aee:	b003      	add	sp, #12
 8001af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af4:	40023008 	.word	0x40023008
 8001af8:	40023000 	.word	0x40023000
 8001afc:	0800261c 	.word	0x0800261c
 8001b00:	08002b1c 	.word	0x08002b1c

08001b04 <AES_keyschedule_dec>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4615      	mov	r5, r2
 8001b08:	460c      	mov	r4, r1
 8001b0a:	f7ff fe8f 	bl	800182c <AES_keyschedule_enc>
 8001b0e:	10ea      	asrs	r2, r5, #3
 8001b10:	3203      	adds	r2, #3
 8001b12:	0052      	lsls	r2, r2, #1
 8001b14:	2501      	movs	r5, #1
 8001b16:	4295      	cmp	r5, r2
 8001b18:	da6c      	bge.n	8001bf4 <AES_keyschedule_dec+0xf0>
 8001b1a:	f854 1f10 	ldr.w	r1, [r4, #16]!
 8001b1e:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <AES_keyschedule_dec+0xf4>)
 8001b20:	b2ce      	uxtb	r6, r1
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <AES_keyschedule_dec+0xf8>)
 8001b24:	5d86      	ldrb	r6, [r0, r6]
 8001b26:	3501      	adds	r5, #1
 8001b28:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001b2c:	0e0e      	lsrs	r6, r1, #24
 8001b2e:	5d86      	ldrb	r6, [r0, r6]
 8001b30:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001b34:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001b38:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001b3c:	5dc7      	ldrb	r7, [r0, r7]
 8001b3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001b42:	5c41      	ldrb	r1, [r0, r1]
 8001b44:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001b48:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b4c:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001b50:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001b54:	6021      	str	r1, [r4, #0]
 8001b56:	6861      	ldr	r1, [r4, #4]
 8001b58:	b2ce      	uxtb	r6, r1
 8001b5a:	5d86      	ldrb	r6, [r0, r6]
 8001b5c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001b60:	0e0e      	lsrs	r6, r1, #24
 8001b62:	5d86      	ldrb	r6, [r0, r6]
 8001b64:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001b68:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001b6c:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001b70:	5dc7      	ldrb	r7, [r0, r7]
 8001b72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001b76:	5c41      	ldrb	r1, [r0, r1]
 8001b78:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001b7c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b80:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001b84:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001b88:	6061      	str	r1, [r4, #4]
 8001b8a:	68a1      	ldr	r1, [r4, #8]
 8001b8c:	b2ce      	uxtb	r6, r1
 8001b8e:	5d86      	ldrb	r6, [r0, r6]
 8001b90:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001b94:	0e0e      	lsrs	r6, r1, #24
 8001b96:	5d86      	ldrb	r6, [r0, r6]
 8001b98:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001b9c:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001ba0:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001ba4:	5dc7      	ldrb	r7, [r0, r7]
 8001ba6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001baa:	5c41      	ldrb	r1, [r0, r1]
 8001bac:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001bb0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001bb4:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001bb8:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001bbc:	60a1      	str	r1, [r4, #8]
 8001bbe:	68e1      	ldr	r1, [r4, #12]
 8001bc0:	b2ce      	uxtb	r6, r1
 8001bc2:	5d86      	ldrb	r6, [r0, r6]
 8001bc4:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001bc8:	0e0e      	lsrs	r6, r1, #24
 8001bca:	5d86      	ldrb	r6, [r0, r6]
 8001bcc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001bd0:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001bd4:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001bd8:	5dc7      	ldrb	r7, [r0, r7]
 8001bda:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001bde:	5c41      	ldrb	r1, [r0, r1]
 8001be0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001be8:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001bec:	ea86 4333 	eor.w	r3, r6, r3, ror #16
 8001bf0:	60e3      	str	r3, [r4, #12]
 8001bf2:	e790      	b.n	8001b16 <AES_keyschedule_dec+0x12>
 8001bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08002b1c 	.word	0x08002b1c
 8001bfc:	0800221c 	.word	0x0800221c

08001c00 <AESstdInit>:
 8001c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c04:	460f      	mov	r7, r1
 8001c06:	4604      	mov	r4, r0
 8001c08:	4611      	mov	r1, r2
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d05e      	beq.n	8001ccc <AESstdInit+0xcc>
 8001c0e:	2f00      	cmp	r7, #0
 8001c10:	d05c      	beq.n	8001ccc <AESstdInit+0xcc>
 8001c12:	b91a      	cbnz	r2, 8001c1c <AESstdInit+0x1c>
 8001c14:	f003 0206 	and.w	r2, r3, #6
 8001c18:	2a02      	cmp	r2, #2
 8001c1a:	d157      	bne.n	8001ccc <AESstdInit+0xcc>
 8001c1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c1e:	f022 0008 	bic.w	r0, r2, #8
 8001c22:	2810      	cmp	r0, #16
 8001c24:	d001      	beq.n	8001c2a <AESstdInit+0x2a>
 8001c26:	2a20      	cmp	r2, #32
 8001c28:	d14c      	bne.n	8001cc4 <AESstdInit+0xc4>
 8001c2a:	f003 0c06 	and.w	ip, r3, #6
 8001c2e:	f1bc 0f02 	cmp.w	ip, #2
 8001c32:	d003      	beq.n	8001c3c <AESstdInit+0x3c>
 8001c34:	6920      	ldr	r0, [r4, #16]
 8001c36:	3801      	subs	r0, #1
 8001c38:	280f      	cmp	r0, #15
 8001c3a:	d843      	bhi.n	8001cc4 <AESstdInit+0xc4>
 8001c3c:	7920      	ldrb	r0, [r4, #4]
 8001c3e:	f1bc 0f02 	cmp.w	ip, #2
 8001c42:	f020 0506 	bic.w	r5, r0, #6
 8001c46:	60e1      	str	r1, [r4, #12]
 8001c48:	7125      	strb	r5, [r4, #4]
 8001c4a:	d103      	bne.n	8001c54 <AESstdInit+0x54>
 8001c4c:	f010 0501 	ands.w	r5, r0, #1
 8001c50:	d026      	beq.n	8001ca0 <AESstdInit+0xa0>
 8001c52:	e031      	b.n	8001cb8 <AESstdInit+0xb8>
 8001c54:	2600      	movs	r6, #0
 8001c56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8001c5a:	6166      	str	r6, [r4, #20]
 8001c5c:	61a6      	str	r6, [r4, #24]
 8001c5e:	61e6      	str	r6, [r4, #28]
 8001c60:	6226      	str	r6, [r4, #32]
 8001c62:	454e      	cmp	r6, r9
 8001c64:	daf2      	bge.n	8001c4c <AESstdInit+0x4c>
 8001c66:	4d1b      	ldr	r5, [pc, #108]	; (8001cd4 <AESstdInit+0xd4>)
 8001c68:	f04f 0804 	mov.w	r8, #4
 8001c6c:	4035      	ands	r5, r6
 8001c6e:	fb96 f8f8 	sdiv	r8, r6, r8
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8001c78:	f811 a006 	ldrb.w	sl, [r1, r6]
 8001c7c:	da03      	bge.n	8001c86 <AESstdInit+0x86>
 8001c7e:	3d01      	subs	r5, #1
 8001c80:	f065 0503 	orn	r5, r5, #3
 8001c84:	3501      	adds	r5, #1
 8001c86:	f1c5 0503 	rsb	r5, r5, #3
 8001c8a:	00ed      	lsls	r5, r5, #3
 8001c8c:	fa0a fa05 	lsl.w	sl, sl, r5
 8001c90:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8001c94:	3601      	adds	r6, #1
 8001c96:	ea45 0a0a 	orr.w	sl, r5, sl
 8001c9a:	f8c8 a014 	str.w	sl, [r8, #20]
 8001c9e:	e7e0      	b.n	8001c62 <AESstdInit+0x62>
 8001ca0:	f013 0f01 	tst.w	r3, #1
 8001ca4:	60a7      	str	r7, [r4, #8]
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001cac:	d002      	beq.n	8001cb4 <AESstdInit+0xb4>
 8001cae:	f1bc 0f06 	cmp.w	ip, #6
 8001cb2:	d104      	bne.n	8001cbe <AESstdInit+0xbe>
 8001cb4:	f7ff fdba 	bl	800182c <AES_keyschedule_enc>
 8001cb8:	2000      	movs	r0, #0
 8001cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cbe:	f7ff ff21 	bl	8001b04 <AES_keyschedule_dec>
 8001cc2:	e7f9      	b.n	8001cb8 <AESstdInit+0xb8>
 8001cc4:	f640 401f 	movw	r0, #3103	; 0xc1f
 8001cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ccc:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8001cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd4:	80000003 	.word	0x80000003

08001cd8 <AES_general_SW_dec>:
 8001cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cdc:	2500      	movs	r5, #0
 8001cde:	9501      	str	r5, [sp, #4]
 8001ce0:	4da6      	ldr	r5, [pc, #664]	; (8001f7c <AES_general_SW_dec+0x2a4>)
 8001ce2:	2601      	movs	r6, #1
 8001ce4:	602e      	str	r6, [r5, #0]
 8001ce6:	682d      	ldr	r5, [r5, #0]
 8001ce8:	10db      	asrs	r3, r3, #3
 8001cea:	9501      	str	r5, [sp, #4]
 8001cec:	4da4      	ldr	r5, [pc, #656]	; (8001f80 <AES_general_SW_dec+0x2a8>)
 8001cee:	f103 0903 	add.w	r9, r3, #3
 8001cf2:	682e      	ldr	r6, [r5, #0]
 8001cf4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001cf8:	9601      	str	r6, [sp, #4]
 8001cfa:	9e01      	ldr	r6, [sp, #4]
 8001cfc:	468b      	mov	fp, r1
 8001cfe:	3601      	adds	r6, #1
 8001d00:	eb02 0403 	add.w	r4, r2, r3
 8001d04:	d117      	bne.n	8001d36 <AES_general_SW_dec+0x5e>
 8001d06:	9e01      	ldr	r6, [sp, #4]
 8001d08:	602e      	str	r6, [r5, #0]
 8001d0a:	682d      	ldr	r5, [r5, #0]
 8001d0c:	58d2      	ldr	r2, [r2, r3]
 8001d0e:	9501      	str	r5, [sp, #4]
 8001d10:	9e01      	ldr	r6, [sp, #4]
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	6867      	ldr	r7, [r4, #4]
 8001d16:	6845      	ldr	r5, [r0, #4]
 8001d18:	b956      	cbnz	r6, 8001d30 <AES_general_SW_dec+0x58>
 8001d1a:	ea82 0c03 	eor.w	ip, r2, r3
 8001d1e:	6883      	ldr	r3, [r0, #8]
 8001d20:	68a2      	ldr	r2, [r4, #8]
 8001d22:	68c0      	ldr	r0, [r0, #12]
 8001d24:	405a      	eors	r2, r3
 8001d26:	68e3      	ldr	r3, [r4, #12]
 8001d28:	406f      	eors	r7, r5
 8001d2a:	ea83 0800 	eor.w	r8, r3, r0
 8001d2e:	e00b      	b.n	8001d48 <AES_general_SW_dec+0x70>
 8001d30:	ea87 0c05 	eor.w	ip, r7, r5
 8001d34:	e005      	b.n	8001d42 <AES_general_SW_dec+0x6a>
 8001d36:	6866      	ldr	r6, [r4, #4]
 8001d38:	6845      	ldr	r5, [r0, #4]
 8001d3a:	58d2      	ldr	r2, [r2, r3]
 8001d3c:	6803      	ldr	r3, [r0, #0]
 8001d3e:	ea86 0c05 	eor.w	ip, r6, r5
 8001d42:	405a      	eors	r2, r3
 8001d44:	4690      	mov	r8, r2
 8001d46:	4617      	mov	r7, r2
 8001d48:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <AES_general_SW_dec+0x2ac>)
 8001d4a:	3c20      	subs	r4, #32
 8001d4c:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8001d50:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001d54:	6920      	ldr	r0, [r4, #16]
 8001d56:	b2fd      	uxtb	r5, r7
 8001d58:	4070      	eors	r0, r6
 8001d5a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001d5e:	f3c8 4507 	ubfx	r5, r8, #16, #8
 8001d62:	ea80 6036 	eor.w	r0, r0, r6, ror #24
 8001d66:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001d6a:	fa5f fa88 	uxtb.w	sl, r8
 8001d6e:	ea80 2636 	eor.w	r6, r0, r6, ror #8
 8001d72:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8001d76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d7a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001d7e:	ea86 4630 	eor.w	r6, r6, r0, ror #16
 8001d82:	0e38      	lsrs	r0, r7, #24
 8001d84:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8001d88:	6960      	ldr	r0, [r4, #20]
 8001d8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8001d8e:	4068      	eors	r0, r5
 8001d90:	b2d5      	uxtb	r5, r2
 8001d92:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001d96:	f1b9 0f00 	cmp.w	r9, #0
 8001d9a:	ea80 6035 	eor.w	r0, r0, r5, ror #24
 8001d9e:	f3cc 4507 	ubfx	r5, ip, #16, #8
 8001da2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001da6:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8001daa:	f3c8 2507 	ubfx	r5, r8, #8, #8
 8001dae:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001db2:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001db6:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8001dba:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8001dbe:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001dc2:	69a5      	ldr	r5, [r4, #24]
 8001dc4:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001dc8:	ea81 0105 	eor.w	r1, r1, r5
 8001dcc:	ea81 653a 	eor.w	r5, r1, sl, ror #24
 8001dd0:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 8001dd4:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001dd8:	69e1      	ldr	r1, [r4, #28]
 8001dda:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8001dde:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8001de2:	fa5f fc8c 	uxtb.w	ip, ip
 8001de6:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8001dea:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001df2:	ea88 0801 	eor.w	r8, r8, r1
 8001df6:	ea88 683c 	eor.w	r8, r8, ip, ror #24
 8001dfa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001dfe:	ea88 2832 	eor.w	r8, r8, r2, ror #8
 8001e02:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001e06:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8001e0a:	ea85 453a 	eor.w	r5, r5, sl, ror #16
 8001e0e:	ea88 4832 	eor.w	r8, r8, r2, ror #16
 8001e12:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8001e16:	dd5a      	ble.n	8001ece <AES_general_SW_dec+0x1f6>
 8001e18:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8001e1c:	6822      	ldr	r2, [r4, #0]
 8001e1e:	68a1      	ldr	r1, [r4, #8]
 8001e20:	407a      	eors	r2, r7
 8001e22:	b2c7      	uxtb	r7, r0
 8001e24:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001e28:	fa5f fa88 	uxtb.w	sl, r8
 8001e2c:	ea82 6237 	eor.w	r2, r2, r7, ror #24
 8001e30:	f3c8 4707 	ubfx	r7, r8, #16, #8
 8001e34:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001e38:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001e3c:	ea82 2c37 	eor.w	ip, r2, r7, ror #8
 8001e40:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001e44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e48:	ea8c 4c32 	eor.w	ip, ip, r2, ror #16
 8001e4c:	0e02      	lsrs	r2, r0, #24
 8001e4e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8001e52:	6862      	ldr	r2, [r4, #4]
 8001e54:	407a      	eors	r2, r7
 8001e56:	b2ef      	uxtb	r7, r5
 8001e58:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001e5c:	ea82 6237 	eor.w	r2, r2, r7, ror #24
 8001e60:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001e64:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001e68:	ea82 2737 	eor.w	r7, r2, r7, ror #8
 8001e6c:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8001e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e74:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001e78:	ea87 4732 	eor.w	r7, r7, r2, ror #16
 8001e7c:	0e2a      	lsrs	r2, r5, #24
 8001e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e82:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001e86:	404a      	eors	r2, r1
 8001e88:	ea82 623a 	eor.w	r2, r2, sl, ror #24
 8001e8c:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 8001e90:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001e94:	68e1      	ldr	r1, [r4, #12]
 8001e96:	ea82 223a 	eor.w	r2, r2, sl, ror #8
 8001e9a:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8001e9e:	b2f6      	uxtb	r6, r6
 8001ea0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001ea4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001ea8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001eac:	ea88 0801 	eor.w	r8, r8, r1
 8001eb0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001eb4:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001eb8:	ea88 6836 	eor.w	r8, r8, r6, ror #24
 8001ebc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ec0:	ea88 2835 	eor.w	r8, r8, r5, ror #8
 8001ec4:	ea82 423a 	eor.w	r2, r2, sl, ror #16
 8001ec8:	ea88 4833 	eor.w	r8, r8, r3, ror #16
 8001ecc:	e73c      	b.n	8001d48 <AES_general_SW_dec+0x70>
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <AES_general_SW_dec+0x2b0>)
 8001ed0:	5c9f      	ldrb	r7, [r3, r2]
 8001ed2:	b2c2      	uxtb	r2, r0
 8001ed4:	5c9a      	ldrb	r2, [r3, r2]
 8001ed6:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001eda:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8001ede:	5c9a      	ldrb	r2, [r3, r2]
 8001ee0:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001ee4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001ee8:	5c9a      	ldrb	r2, [r3, r2]
 8001eea:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	407a      	eors	r2, r7
 8001ef2:	f8cb 2000 	str.w	r2, [fp]
 8001ef6:	0e02      	lsrs	r2, r0, #24
 8001ef8:	5c9f      	ldrb	r7, [r3, r2]
 8001efa:	b2ea      	uxtb	r2, r5
 8001efc:	5c9a      	ldrb	r2, [r3, r2]
 8001efe:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001f02:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8001f06:	5c9a      	ldrb	r2, [r3, r2]
 8001f08:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001f0c:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8001f10:	5c9a      	ldrb	r2, [r3, r2]
 8001f12:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001f16:	6862      	ldr	r2, [r4, #4]
 8001f18:	407a      	eors	r2, r7
 8001f1a:	f8cb 2004 	str.w	r2, [fp, #4]
 8001f1e:	0e2a      	lsrs	r2, r5, #24
 8001f20:	5c9f      	ldrb	r7, [r3, r2]
 8001f22:	fa5f f288 	uxtb.w	r2, r8
 8001f26:	5c9a      	ldrb	r2, [r3, r2]
 8001f28:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001f2c:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001f30:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8001f34:	5c9a      	ldrb	r2, [r3, r2]
 8001f36:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001f3a:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001f3e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001f42:	5c9a      	ldrb	r2, [r3, r2]
 8001f44:	b2f6      	uxtb	r6, r6
 8001f46:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001f4a:	68a2      	ldr	r2, [r4, #8]
 8001f4c:	5d5d      	ldrb	r5, [r3, r5]
 8001f4e:	407a      	eors	r2, r7
 8001f50:	f8cb 2008 	str.w	r2, [fp, #8]
 8001f54:	f813 7008 	ldrb.w	r7, [r3, r8]
 8001f58:	5d9a      	ldrb	r2, [r3, r6]
 8001f5a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001f5e:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8001f62:	5c1b      	ldrb	r3, [r3, r0]
 8001f64:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001f68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f6c:	68e2      	ldr	r2, [r4, #12]
 8001f6e:	4053      	eors	r3, r2
 8001f70:	f8cb 300c 	str.w	r3, [fp, #12]
 8001f74:	b003      	add	sp, #12
 8001f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023008 	.word	0x40023008
 8001f80:	40023000 	.word	0x40023000
 8001f84:	0800221c 	.word	0x0800221c
 8001f88:	08002a1c 	.word	0x08002a1c

08001f8c <AES_ECB_Encrypt_Init>:
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f7ff be37 	b.w	8001c00 <AESstdInit>

08001f92 <AES_ECB_Encrypt_Append>:
 8001f92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	4689      	mov	r9, r1
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8001fa0:	4607      	mov	r7, r0
 8001fa2:	b388      	cbz	r0, 8002008 <AES_ECB_Encrypt_Append+0x76>
 8001fa4:	b381      	cbz	r1, 8002008 <AES_ECB_Encrypt_Append+0x76>
 8001fa6:	b37b      	cbz	r3, 8002008 <AES_ECB_Encrypt_Append+0x76>
 8001fa8:	f1b8 0f00 	cmp.w	r8, #0
 8001fac:	d02c      	beq.n	8002008 <AES_ECB_Encrypt_Append+0x76>
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	db2d      	blt.n	800200e <AES_ECB_Encrypt_Append+0x7c>
 8001fb2:	f012 040f 	ands.w	r4, r2, #15
 8001fb6:	d12a      	bne.n	800200e <AES_ECB_Encrypt_Append+0x7c>
 8001fb8:	7903      	ldrb	r3, [r0, #4]
 8001fba:	079b      	lsls	r3, r3, #30
 8001fbc:	d42a      	bmi.n	8002014 <AES_ECB_Encrypt_Append+0x82>
 8001fbe:	f022 0b0f 	bic.w	fp, r2, #15
 8001fc2:	4625      	mov	r5, r4
 8001fc4:	455d      	cmp	r5, fp
 8001fc6:	d01c      	beq.n	8002002 <AES_ECB_Encrypt_Append+0x70>
 8001fc8:	2600      	movs	r6, #0
 8001fca:	eb09 0305 	add.w	r3, r9, r5
 8001fce:	599b      	ldr	r3, [r3, r6]
 8001fd0:	ba1b      	rev	r3, r3
 8001fd2:	f84d 3006 	str.w	r3, [sp, r6]
 8001fd6:	3604      	adds	r6, #4
 8001fd8:	2e10      	cmp	r6, #16
 8001fda:	d1f6      	bne.n	8001fca <AES_ECB_Encrypt_Append+0x38>
 8001fdc:	4668      	mov	r0, sp
 8001fde:	4669      	mov	r1, sp
 8001fe0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f7ff fc33 	bl	8001850 <AES_general_SW_enc>
 8001fea:	2600      	movs	r6, #0
 8001fec:	f85d 3006 	ldr.w	r3, [sp, r6]
 8001ff0:	eb0a 0205 	add.w	r2, sl, r5
 8001ff4:	ba1b      	rev	r3, r3
 8001ff6:	5193      	str	r3, [r2, r6]
 8001ff8:	3604      	adds	r6, #4
 8001ffa:	2e10      	cmp	r6, #16
 8001ffc:	d1f6      	bne.n	8001fec <AES_ECB_Encrypt_Append+0x5a>
 8001ffe:	3510      	adds	r5, #16
 8002000:	e7e0      	b.n	8001fc4 <AES_ECB_Encrypt_Append+0x32>
 8002002:	f8c8 5000 	str.w	r5, [r8]
 8002006:	e007      	b.n	8002018 <AES_ECB_Encrypt_Append+0x86>
 8002008:	f44f 6442 	mov.w	r4, #3104	; 0xc20
 800200c:	e004      	b.n	8002018 <AES_ECB_Encrypt_Append+0x86>
 800200e:	f640 441d 	movw	r4, #3101	; 0xc1d
 8002012:	e001      	b.n	8002018 <AES_ECB_Encrypt_Append+0x86>
 8002014:	f640 441e 	movw	r4, #3102	; 0xc1e
 8002018:	4620      	mov	r0, r4
 800201a:	b005      	add	sp, #20
 800201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002020 <AES_ECB_Encrypt_Finish>:
 8002020:	b138      	cbz	r0, 8002032 <AES_ECB_Encrypt_Finish+0x12>
 8002022:	b132      	cbz	r2, 8002032 <AES_ECB_Encrypt_Finish+0x12>
 8002024:	7903      	ldrb	r3, [r0, #4]
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	7103      	strb	r3, [r0, #4]
 800202c:	2000      	movs	r0, #0
 800202e:	6010      	str	r0, [r2, #0]
 8002030:	4770      	bx	lr
 8002032:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002036:	4770      	bx	lr

08002038 <AES_ECB_Decrypt_Init>:
 8002038:	2303      	movs	r3, #3
 800203a:	f7ff bde1 	b.w	8001c00 <AESstdInit>

0800203e <AES_ECB_Decrypt_Append>:
 800203e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002042:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002044:	4688      	mov	r8, r1
 8002046:	4699      	mov	r9, r3
 8002048:	4606      	mov	r6, r0
 800204a:	b380      	cbz	r0, 80020ae <AES_ECB_Decrypt_Append+0x70>
 800204c:	b379      	cbz	r1, 80020ae <AES_ECB_Decrypt_Append+0x70>
 800204e:	b373      	cbz	r3, 80020ae <AES_ECB_Decrypt_Append+0x70>
 8002050:	b36f      	cbz	r7, 80020ae <AES_ECB_Decrypt_Append+0x70>
 8002052:	2a00      	cmp	r2, #0
 8002054:	db2e      	blt.n	80020b4 <AES_ECB_Decrypt_Append+0x76>
 8002056:	0713      	lsls	r3, r2, #28
 8002058:	d12c      	bne.n	80020b4 <AES_ECB_Decrypt_Append+0x76>
 800205a:	7903      	ldrb	r3, [r0, #4]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002064:	bb4b      	cbnz	r3, 80020ba <AES_ECB_Decrypt_Append+0x7c>
 8002066:	f022 0a0f 	bic.w	sl, r2, #15
 800206a:	4554      	cmp	r4, sl
 800206c:	d01c      	beq.n	80020a8 <AES_ECB_Decrypt_Append+0x6a>
 800206e:	2500      	movs	r5, #0
 8002070:	eb08 0304 	add.w	r3, r8, r4
 8002074:	595b      	ldr	r3, [r3, r5]
 8002076:	ba1b      	rev	r3, r3
 8002078:	f84d 3005 	str.w	r3, [sp, r5]
 800207c:	3504      	adds	r5, #4
 800207e:	2d10      	cmp	r5, #16
 8002080:	d1f6      	bne.n	8002070 <AES_ECB_Decrypt_Append+0x32>
 8002082:	4668      	mov	r0, sp
 8002084:	4669      	mov	r1, sp
 8002086:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800208a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800208c:	f7ff fe24 	bl	8001cd8 <AES_general_SW_dec>
 8002090:	2500      	movs	r5, #0
 8002092:	f85d 3005 	ldr.w	r3, [sp, r5]
 8002096:	eb09 0204 	add.w	r2, r9, r4
 800209a:	ba1b      	rev	r3, r3
 800209c:	5153      	str	r3, [r2, r5]
 800209e:	3504      	adds	r5, #4
 80020a0:	2d10      	cmp	r5, #16
 80020a2:	d1f6      	bne.n	8002092 <AES_ECB_Decrypt_Append+0x54>
 80020a4:	3410      	adds	r4, #16
 80020a6:	e7e0      	b.n	800206a <AES_ECB_Decrypt_Append+0x2c>
 80020a8:	603c      	str	r4, [r7, #0]
 80020aa:	2000      	movs	r0, #0
 80020ac:	e007      	b.n	80020be <AES_ECB_Decrypt_Append+0x80>
 80020ae:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80020b2:	e004      	b.n	80020be <AES_ECB_Decrypt_Append+0x80>
 80020b4:	f640 401d 	movw	r0, #3101	; 0xc1d
 80020b8:	e001      	b.n	80020be <AES_ECB_Decrypt_Append+0x80>
 80020ba:	f640 401e 	movw	r0, #3102	; 0xc1e
 80020be:	b004      	add	sp, #16
 80020c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020c4 <AES_ECB_Decrypt_Finish>:
 80020c4:	b138      	cbz	r0, 80020d6 <AES_ECB_Decrypt_Finish+0x12>
 80020c6:	b132      	cbz	r2, 80020d6 <AES_ECB_Decrypt_Finish+0x12>
 80020c8:	7903      	ldrb	r3, [r0, #4]
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	7103      	strb	r3, [r0, #4]
 80020d0:	2000      	movs	r0, #0
 80020d2:	6010      	str	r0, [r2, #0]
 80020d4:	4770      	bx	lr
 80020d6:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80020da:	4770      	bx	lr

080020dc <__libc_init_array>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	2600      	movs	r6, #0
 80020e0:	4d0c      	ldr	r5, [pc, #48]	; (8002114 <__libc_init_array+0x38>)
 80020e2:	4c0d      	ldr	r4, [pc, #52]	; (8002118 <__libc_init_array+0x3c>)
 80020e4:	1b64      	subs	r4, r4, r5
 80020e6:	10a4      	asrs	r4, r4, #2
 80020e8:	42a6      	cmp	r6, r4
 80020ea:	d109      	bne.n	8002100 <__libc_init_array+0x24>
 80020ec:	f000 f822 	bl	8002134 <_init>
 80020f0:	2600      	movs	r6, #0
 80020f2:	4d0a      	ldr	r5, [pc, #40]	; (800211c <__libc_init_array+0x40>)
 80020f4:	4c0a      	ldr	r4, [pc, #40]	; (8002120 <__libc_init_array+0x44>)
 80020f6:	1b64      	subs	r4, r4, r5
 80020f8:	10a4      	asrs	r4, r4, #2
 80020fa:	42a6      	cmp	r6, r4
 80020fc:	d105      	bne.n	800210a <__libc_init_array+0x2e>
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	f855 3b04 	ldr.w	r3, [r5], #4
 8002104:	4798      	blx	r3
 8002106:	3601      	adds	r6, #1
 8002108:	e7ee      	b.n	80020e8 <__libc_init_array+0xc>
 800210a:	f855 3b04 	ldr.w	r3, [r5], #4
 800210e:	4798      	blx	r3
 8002110:	3601      	adds	r6, #1
 8002112:	e7f2      	b.n	80020fa <__libc_init_array+0x1e>
 8002114:	08002c1c 	.word	0x08002c1c
 8002118:	08002c1c 	.word	0x08002c1c
 800211c:	08002c1c 	.word	0x08002c1c
 8002120:	08002c20 	.word	0x08002c20

08002124 <memset>:
 8002124:	4603      	mov	r3, r0
 8002126:	4402      	add	r2, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	d100      	bne.n	800212e <memset+0xa>
 800212c:	4770      	bx	lr
 800212e:	f803 1b01 	strb.w	r1, [r3], #1
 8002132:	e7f9      	b.n	8002128 <memset+0x4>

08002134 <_init>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr

08002140 <_fini>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr
