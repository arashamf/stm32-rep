
usb_custom_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800691c  0800691c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08006924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000200  08006b24  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  08006b24  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cb5  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ece  00000000  00000000  00035ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00038db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00039da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c60  00000000  00000000  0003ac30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef9b  00000000  00000000  0005e890  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb345  00000000  00000000  0006d82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e4  00000000  00000000  00138bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000200 	.word	0x20000200
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800688c 	.word	0x0800688c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000204 	.word	0x20000204
 80001c4:	0800688c 	.word	0x0800688c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fae6 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80c 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8aa 	bl	800062c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f005 fc0a 	bl	8005cf0 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80004dc:	f000 f870 	bl	80005c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //разрешим прерывания по обновления таймера 6
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <main+0x20>)
 80004e2:	f002 fc0c 	bl	8002cfe <HAL_TIM_Base_Start_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x1e>
 80004e8:	20000238 	.word	0x20000238

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 f904 	bl	8006708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800055c:	2308      	movs	r3, #8
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000560:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4618      	mov	r0, r3
 8000574:	f001 ff5e 	bl	8002434 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057e:	f000 f987 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2102      	movs	r1, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f9b7 	bl	8002914 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f970 	bl	8000890 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_TIM6_Init+0x64>)
 80005d0:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_TIM6_Init+0x68>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20999;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_TIM6_Init+0x64>)
 80005d6:	f245 2207 	movw	r2, #20999	; 0x5207
 80005da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_TIM6_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_TIM6_Init+0x64>)
 80005e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_TIM6_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_TIM6_Init+0x64>)
 80005f2:	f002 fb59 	bl	8002ca8 <HAL_TIM_Base_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005fc:	f000 f948 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000600:	2320      	movs	r3, #32
 8000602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_TIM6_Init+0x64>)
 800060e:	f002 fd6b 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f93a 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000238 	.word	0x20000238
 8000628:	40001000 	.word	0x40001000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
 8000646:	4b5f      	ldr	r3, [pc, #380]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a5e      	ldr	r2, [pc, #376]	; (80007c4 <MX_GPIO_Init+0x198>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b5c      	ldr	r3, [pc, #368]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	4b58      	ldr	r3, [pc, #352]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a57      	ldr	r2, [pc, #348]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b51      	ldr	r3, [pc, #324]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a50      	ldr	r2, [pc, #320]	; (80007c4 <MX_GPIO_Init+0x198>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <MX_GPIO_Init+0x198>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <MX_GPIO_Init+0x198>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a49      	ldr	r2, [pc, #292]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b43      	ldr	r3, [pc, #268]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a42      	ldr	r2, [pc, #264]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b3c      	ldr	r3, [pc, #240]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a3b      	ldr	r2, [pc, #236]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <MX_GPIO_Init+0x198>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	4836      	ldr	r0, [pc, #216]	; (80007c8 <MX_GPIO_Init+0x19c>)
 80006f0:	f000 fd14 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2101      	movs	r1, #1
 80006f8:	4834      	ldr	r0, [pc, #208]	; (80007cc <MX_GPIO_Init+0x1a0>)
 80006fa:	f000 fd0f 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000704:	4832      	ldr	r0, [pc, #200]	; (80007d0 <MX_GPIO_Init+0x1a4>)
 8000706:	f000 fd09 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800070a:	2308      	movs	r3, #8
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4829      	ldr	r0, [pc, #164]	; (80007c8 <MX_GPIO_Init+0x19c>)
 8000722:	f000 fb61 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <MX_GPIO_Init+0x1a0>)
 800073e:	f000 fb53 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000742:	2308      	movs	r3, #8
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000752:	2305      	movs	r3, #5
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0x1a0>)
 800075e:	f000 fb43 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_GPIO_Init+0x1a8>)
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x1ac>)
 8000776:	f000 fb37 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800078c:	2305      	movs	r3, #5
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_GPIO_Init+0x1b0>)
 8000798:	f000 fb26 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800079c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x1a4>)
 80007b6:	f000 fb17 	bl	8000de8 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	10120000 	.word	0x10120000
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020400 	.word	0x40020400

080007e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim6) //ф-я обработки прерывания таймера

{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
       if(count==0)        {dataToSend[0] = 5;dataToSend[1] = 1;} //адресуем на адрес 0х5h, 1 - зажечь светодиод
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d106      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x1e>
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	705a      	strb	r2, [r3, #1]
 80007fc:	e01f      	b.n	800083e <HAL_TIM_PeriodElapsedCallback+0x5e>
       else
    	   if(count==1)        {dataToSend[0] = 5;dataToSend[1] = 0;} //адресуем на адрес 0х5h, 0 - погасить светодиод
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d106      	bne.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000808:	2205      	movs	r2, #5
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800080e:	2200      	movs	r2, #0
 8000810:	705a      	strb	r2, [r3, #1]
 8000812:	e014      	b.n	800083e <HAL_TIM_PeriodElapsedCallback+0x5e>
       else
    	   if(count==2)        {dataToSend[0] = 6;dataToSend[1] = 1;}
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d106      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800081e:	2206      	movs	r2, #6
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000824:	2201      	movs	r2, #1
 8000826:	705a      	strb	r2, [r3, #1]
 8000828:	e009      	b.n	800083e <HAL_TIM_PeriodElapsedCallback+0x5e>
       else
    	   if(count==3)        {dataToSend[0] = 6;dataToSend[1] = 0;}
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d105      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000834:	2206      	movs	r2, #6
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800083a:	2200      	movs	r2, #0
 800083c:	705a      	strb	r2, [r3, #1]
       dataToSend[2] = 'H';
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000840:	2248      	movs	r2, #72	; 0x48
 8000842:	709a      	strb	r2, [r3, #2]
       dataToSend[3] = 'I';
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000846:	2249      	movs	r2, #73	; 0x49
 8000848:	70da      	strb	r2, [r3, #3]
       dataToSend[4] = 'D';
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800084c:	2244      	movs	r2, #68	; 0x44
 800084e:	711a      	strb	r2, [r3, #4]
       dataToSend[5] = '!';
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000852:	2221      	movs	r2, #33	; 0x21
 8000854:	715a      	strb	r2, [r3, #5]
 USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 6);
 8000856:	2206      	movs	r2, #6
 8000858:	490b      	ldr	r1, [pc, #44]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800085c:	f004 f920 	bl	8004aa0 <USBD_CUSTOM_HID_SendReport>
 count++;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800086a:	701a      	strb	r2, [r3, #0]
     if(count>3)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d902      	bls.n	800087a <HAL_TIM_PeriodElapsedCallback+0x9a>
    	 count=0;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000021c 	.word	0x2000021c
 8000888:	20000230 	.word	0x20000230
 800088c:	2000027c 	.word	0x2000027c

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fa40 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_TIM_Base_MspInit+0x48>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d115      	bne.n	800092e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_TIM_Base_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <HAL_TIM_Base_MspInit+0x4c>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_TIM_Base_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2036      	movs	r0, #54	; 0x36
 8000924:	f000 fa29 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000928:	2036      	movs	r0, #54	; 0x36
 800092a:	f000 fa42 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000
 800093c:	40023800 	.word	0x40023800

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f8d4 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM6_DAC_IRQHandler+0x10>)
 80009a2:	f002 f9d0 	bl	8002d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000238 	.word	0x20000238

080009b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <OTG_FS_IRQHandler+0x10>)
 80009b6:	f000 fd1a 	bl	80013ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000720 	.word	0x20000720

080009c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x50>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x16>
		heap_end = &end;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <_sbrk+0x50>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <_sbrk+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <_sbrk+0x50>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <_sbrk+0x50>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	466a      	mov	r2, sp
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d907      	bls.n	80009fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009ee:	f005 fe51 	bl	8006694 <__errno>
 80009f2:	4602      	mov	r2, r0
 80009f4:	230c      	movs	r3, #12
 80009f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	e006      	b.n	8000a0c <_sbrk+0x48>
	}

	heap_end += incr;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <_sbrk+0x50>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <_sbrk+0x50>)
 8000a08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000220 	.word	0x20000220
 8000a18:	20000b30 	.word	0x20000b30

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <SystemInit+0x28>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <SystemInit+0x28>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x28>)
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr  r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a72:	f7ff ffd3 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 fe13 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fd25 	bl	80004c8 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a84:	08006924 	.word	0x08006924
  ldr  r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a8c:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8000a90:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8000a94:	20000b2c 	.word	0x20000b2c

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f94d 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fee6 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f965 	bl	8000dce <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f92d 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000278 	.word	0x20000278

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000278 	.word	0x20000278

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e16b      	b.n	80010dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 815a 	bne.w	80010d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00b      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	2b11      	cmp	r3, #17
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0xfc>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80b4 	beq.w	80010d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a5e      	ldr	r2, [pc, #376]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x324>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x328>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x20a>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00e      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	e00c      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00a      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4934      	ldr	r1, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x330>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_GPIO_Init+0x330>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f ae90 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	3724      	adds	r7, #36	; 0x24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021c00 	.word	0x40021c00
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001150:	b08f      	sub	sp, #60	; 0x3c
 8001152:	af0a      	add	r7, sp, #40	; 0x28
 8001154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e10f      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f004 ff9c 	bl	80060b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f947 	bl	8003432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	687e      	ldr	r6, [r7, #4]
 80011ac:	466d      	mov	r5, sp
 80011ae:	f106 0410 	add.w	r4, r6, #16
 80011b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011be:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c2:	1d33      	adds	r3, r6, #4
 80011c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f002 f81e 	bl	8003208 <USB_CoreInit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0d0      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 f935 	bl	8003454 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e04a      	b.n	8001286 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	333d      	adds	r3, #61	; 0x3d
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	333c      	adds	r3, #60	; 0x3c
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	b298      	uxth	r0, r3
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3342      	adds	r3, #66	; 0x42
 800122c:	4602      	mov	r2, r0
 800122e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	333f      	adds	r3, #63	; 0x3f
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3344      	adds	r3, #68	; 0x44
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3348      	adds	r3, #72	; 0x48
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3350      	adds	r3, #80	; 0x50
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	3301      	adds	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3af      	bcc.n	80011f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e044      	b.n	8001320 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3b5      	bcc.n	8001296 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	687e      	ldr	r6, [r7, #4]
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001344:	e885 0003 	stmia.w	r5, {r0, r1}
 8001348:	1d33      	adds	r3, r6, #4
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f002 f8ab 	bl	80034a8 <USB_DevInit>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00d      	b.n	8001380 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 f8a0 	bl	80044be <USB_DevDisconnect>

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001388 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_PCD_Start+0x1c>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e020      	b.n	80013e6 <HAL_PCD_Start+0x5e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d109      	bne.n	80013c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 f85e 	bl	800448e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 f81a 	bl	8003410 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b590      	push	{r4, r7, lr}
 80013f0:	b08d      	sub	sp, #52	; 0x34
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 f905 	bl	8004614 <USB_GetMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 838e 	bne.w	8001b2e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f869 	bl	80044ee <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8384 	beq.w	8001b2c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f860 	bl	80044ee <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b02      	cmp	r3, #2
 8001436:	d107      	bne.n	8001448 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f002 0202 	and.w	r2, r2, #2
 8001446:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 f84e 	bl	80044ee <USB_ReadInterrupts>
 8001452:	4603      	mov	r3, r0
 8001454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800145c:	d17b      	bne.n	8001556 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f854 	bl	8004514 <USB_ReadDevAllOutEpInterrupt>
 800146c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800146e:	e06f      	b.n	8001550 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d064      	beq.n	8001544 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f879 	bl	800457c <USB_ReadDevOutEPInterrupt>
 800148a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00c      	beq.n	80014b0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fdf6 	bl	800209c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00c      	beq.n	80014d4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fef5 	bl	80022ac <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ce:	461a      	mov	r2, r3
 80014d0:	2308      	movs	r3, #8
 80014d2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ea:	461a      	mov	r2, r3
 80014ec:	2310      	movs	r3, #16
 80014ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d015      	beq.n	8001526 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800150c:	461a      	mov	r2, r3
 800150e:	2101      	movs	r1, #1
 8001510:	f003 f8c4 	bl	800469c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001520:	461a      	mov	r2, r3
 8001522:	2320      	movs	r3, #32
 8001524:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153c:	461a      	mov	r2, r3
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	3301      	adds	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	2b00      	cmp	r3, #0
 8001554:	d18c      	bne.n	8001470 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ffc7 	bl	80044ee <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800156a:	f040 80c4 	bne.w	80016f6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 ffe8 	bl	8004548 <USB_ReadDevAllInEpInterrupt>
 8001578:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800157e:	e0b6      	b.n	80016ee <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80ab 	beq.w	80016e2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f003 f80e 	bl	80045b8 <USB_ReadDevInEPInterrupt>
 800159c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05b      	beq.n	8001660 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	2201      	movs	r2, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69f9      	ldr	r1, [r7, #28]
 80015c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015c8:	4013      	ands	r3, r2
 80015ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d11b      	bne.n	800161e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3348      	adds	r3, #72	; 0x48
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4403      	add	r3, r0
 8001606:	3344      	adds	r3, #68	; 0x44
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4419      	add	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4403      	add	r3, r0
 800161a:	3348      	adds	r3, #72	; 0x48
 800161c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f004 fdc8 	bl	80061ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d116      	bne.n	8001660 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d113      	bne.n	8001660 <HAL_PCD_IRQHandler+0x272>
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3350      	adds	r3, #80	; 0x50
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001658:	461a      	mov	r2, r3
 800165a:	2101      	movs	r1, #1
 800165c:	f003 f81e 	bl	800469c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001676:	461a      	mov	r2, r3
 8001678:	2308      	movs	r3, #8
 800167a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001692:	461a      	mov	r2, r3
 8001694:	2310      	movs	r3, #16
 8001696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ae:	461a      	mov	r2, r3
 80016b0:	2340      	movs	r3, #64	; 0x40
 80016b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ca:	461a      	mov	r2, r3
 80016cc:	2302      	movs	r3, #2
 80016ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fc4f 	bl	8001f80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f47f af45 	bne.w	8001580 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fef7 	bl	80044ee <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800170a:	d122      	bne.n	8001752 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fe71 	bl	800241c <HAL_PCDEx_LPM_Callback>
 800173a:	e002      	b.n	8001742 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f004 fdb3 	bl	80062a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fec9 	bl	80044ee <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001766:	d112      	bne.n	800178e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f004 fd6f 	bl	800625c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800178c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 feab 	bl	80044ee <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a2:	f040 80a7 	bne.w	80018f4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2110      	movs	r1, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 ffe3 	bl	800378c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ca:	e036      	b.n	800183a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d8:	461a      	mov	r2, r3
 80017da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f0:	0151      	lsls	r1, r2, #5
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	440a      	add	r2, r1
 80017f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180c:	461a      	mov	r2, r3
 800180e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001812:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001824:	0151      	lsls	r1, r2, #5
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	440a      	add	r2, r1
 800182a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800182e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001832:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	3301      	adds	r3, #1
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001840:	429a      	cmp	r2, r3
 8001842:	d3c3      	bcc.n	80017cc <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001852:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001856:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001870:	f043 030b 	orr.w	r3, r3, #11
 8001874:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001886:	f043 030b 	orr.w	r3, r3, #11
 800188a:	6453      	str	r3, [r2, #68]	; 0x44
 800188c:	e015      	b.n	80018ba <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f043 030b 	orr.w	r3, r3, #11
 80018b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018de:	461a      	mov	r2, r3
 80018e0:	f002 fedc 	bl	800469c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fdf8 	bl	80044ee <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001908:	d124      	bne.n	8001954 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fe8e 	bl	8004630 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f001 ff98 	bl	800384e <USB_GetDevSpeed>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681c      	ldr	r4, [r3, #0]
 800192a:	f001 f9b1 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 800192e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4620      	mov	r0, r4
 800193a:	f001 fcc7 	bl	80032cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f004 fc63 	bl	800620a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fdc8 	bl	80044ee <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b10      	cmp	r3, #16
 8001966:	d161      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0210 	bic.w	r2, r2, #16
 8001976:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f003 020f 	and.w	r2, r3, #15
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	0c5b      	lsrs	r3, r3, #17
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d124      	bne.n	80019ee <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d035      	beq.n	8001a1c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019be:	b29b      	uxth	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	6a38      	ldr	r0, [r7, #32]
 80019c4:	f002 fc40 	bl	8004248 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019d4:	441a      	add	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e6:	441a      	add	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	e016      	b.n	8001a1c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	0c5b      	lsrs	r3, r3, #17
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d110      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a00:	2208      	movs	r2, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	6a38      	ldr	r0, [r7, #32]
 8001a06:	f002 fc1f 	bl	8004248 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a16:	441a      	add	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0210 	orr.w	r2, r2, #16
 8001a2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fd5c 	bl	80044ee <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d10a      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f004 fbd4 	bl	80061ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f002 0208 	and.w	r2, r2, #8
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fd47 	bl	80044ee <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d10f      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f004 fc36 	bl	80062e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fd2c 	bl	80044ee <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f004 fc09 	bl	80062c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fd11 	bl	80044ee <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d10a      	bne.n	8001aee <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f004 fc17 	bl	800630c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fcfb 	bl	80044ee <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d115      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f004 fc07 	bl	8006328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	e000      	b.n	8001b2e <HAL_PCD_IRQHandler+0x740>
      return;
 8001b2c:	bf00      	nop
    }
  }
}
 8001b2e:	3734      	adds	r7, #52	; 0x34
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_SetAddress+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e013      	b.n	8001b76 <HAL_PCD_SetAddress+0x42>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fc6b 	bl	8004442 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	4608      	mov	r0, r1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
 8001b90:	460b      	mov	r3, r1
 8001b92:	803b      	strh	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da0f      	bge.n	8001bc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3338      	adds	r3, #56	; 0x38
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	705a      	strb	r2, [r3, #1]
 8001bc2:	e00f      	b.n	8001be4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	3304      	adds	r3, #4
 8001bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bf0:	883a      	ldrh	r2, [r7, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	78ba      	ldrb	r2, [r7, #2]
 8001bfa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c0e:	78bb      	ldrb	r3, [r7, #2]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d102      	bne.n	8001c1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_PCD_EP_Open+0xaa>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e00e      	b.n	8001c46 <HAL_PCD_EP_Open+0xc8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fe2e 	bl	8003898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c44:	7afb      	ldrb	r3, [r7, #11]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da0f      	bge.n	8001c82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3338      	adds	r3, #56	; 0x38
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	705a      	strb	r2, [r3, #1]
 8001c80:	e00f      	b.n	8001ca2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_PCD_EP_Close+0x6e>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e00e      	b.n	8001cda <HAL_PCD_EP_Close+0x8c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fe6c 	bl	80039a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	f002 f8ef 	bl	8003f38 <USB_EP0StartXfer>
 8001d5a:	e008      	b.n	8001d6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	6979      	ldr	r1, [r7, #20]
 8001d6a:	f001 fea1 	bl	8003ab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	460b      	mov	r3, r1
 8001d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	f003 020f 	and.w	r2, r3, #15
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	3338      	adds	r3, #56	; 0x38
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2201      	movs	r2, #1
 8001db6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	f002 f8a5 	bl	8003f38 <USB_EP0StartXfer>
 8001dee:	e008      	b.n	8001e02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	f001 fe57 	bl	8003ab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e050      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0f      	bge.n	8001e52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3338      	adds	r3, #56	; 0x38
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
 8001e50:	e00d      	b.n	8001e6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_SetStall+0x82>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e01e      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xc0>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 f9fc 	bl	800429a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10a      	bne.n	8001ec2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	b2d9      	uxtb	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f002 fbed 	bl	800469c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d901      	bls.n	8001ef2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da0f      	bge.n	8001f1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3338      	adds	r3, #56	; 0x38
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00f      	b.n	8001f3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_EP_ClrStall+0x86>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e00e      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fa04 	bl	8004376 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d901      	bls.n	8001fb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e06c      	b.n	8002092 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d902      	bls.n	8001fd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3303      	adds	r3, #3
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fdc:	e02b      	b.n	8002036 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d902      	bls.n	8001ffa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002012:	b2db      	uxtb	r3, r3
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4603      	mov	r3, r0
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f002 f8e0 	bl	80041de <USB_WritePacket>

    ep->xfer_buff  += len;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	441a      	add	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	441a      	add	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	b29b      	uxth	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d809      	bhi.n	8002060 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002054:	429a      	cmp	r2, r3
 8002056:	d203      	bcs.n	8002060 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1be      	bne.n	8001fde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	429a      	cmp	r2, r3
 800206a:	d811      	bhi.n	8002090 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2201      	movs	r2, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	43db      	mvns	r3, r3
 8002086:	6939      	ldr	r1, [r7, #16]
 8002088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800208c:	4013      	ands	r3, r2
 800208e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	333c      	adds	r3, #60	; 0x3c
 80020b4:	3304      	adds	r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	f040 80b3 	bne.w	800223a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <PCD_EP_OutXfrComplete_int+0x208>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d90e      	bls.n	8002104 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	461a      	mov	r2, r3
 80020fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002102:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f004 f82b 	bl	8006160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002114:	461a      	mov	r2, r3
 8002116:	2101      	movs	r1, #1
 8002118:	f002 fac0 	bl	800469c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	2308      	movs	r3, #8
 800212c:	6093      	str	r3, [r2, #8]
 800212e:	e0b3      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	461a      	mov	r2, r3
 8002148:	2320      	movs	r3, #32
 800214a:	6093      	str	r3, [r2, #8]
 800214c:	e0a4      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 809f 	bne.w	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <PCD_EP_OutXfrComplete_int+0x208>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d90f      	bls.n	8002182 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e08a      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002194:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	0159      	lsls	r1, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	440b      	add	r3, r1
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021a8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4403      	add	r3, r0
 80021b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021bc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4403      	add	r3, r0
 80021e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4419      	add	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021fa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f003 ffbe 	bl	8006184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d144      	bne.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d138      	bne.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	f002 fa32 	bl	800469c <USB_EP0_OutStart>
 8002238:	e02e      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d124      	bne.n	800228c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225e:	6093      	str	r3, [r2, #8]
 8002260:	e01a      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002278:	461a      	mov	r2, r3
 800227a:	2320      	movs	r3, #32
 800227c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f003 ff7d 	bl	8006184 <HAL_PCD_DataOutStageCallback>
 800228a:	e005      	b.n	8002298 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f003 ff76 	bl	8006184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	4f54300a 	.word	0x4f54300a
 80022a8:	4f54310a 	.word	0x4f54310a

080022ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	333c      	adds	r3, #60	; 0x3c
 80022c4:	3304      	adds	r3, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d113      	bne.n	800230a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <PCD_EP_OutSetupPacket_int+0xb8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d922      	bls.n	8002330 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01d      	beq.n	8002330 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e012      	b.n	8002330 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <PCD_EP_OutSetupPacket_int+0xbc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10e      	bne.n	8002330 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f003 ff15 	bl	8006160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <PCD_EP_OutSetupPacket_int+0xb8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d90c      	bls.n	8002358 <PCD_EP_OutSetupPacket_int+0xac>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002350:	461a      	mov	r2, r3
 8002352:	2101      	movs	r1, #1
 8002354:	f002 f9a2 	bl	800469c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	4f54300a 	.word	0x4f54300a
 8002368:	4f54310a 	.word	0x4f54310a

0800236c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	4613      	mov	r3, r2
 800237a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800238a:	883b      	ldrh	r3, [r7, #0]
 800238c:	0419      	lsls	r1, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	430a      	orrs	r2, r1
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
 8002398:	e028      	b.n	80023ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e00d      	b.n	80023ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	3340      	adds	r3, #64	; 0x40
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3301      	adds	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3ec      	bcc.n	80023ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023d4:	883b      	ldrh	r3, [r7, #0]
 80023d6:	0418      	lsls	r0, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	3b01      	subs	r3, #1
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4302      	orrs	r2, r0
 80023e4:	3340      	adds	r3, #64	; 0x40
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e25b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	4ba3      	ldr	r3, [pc, #652]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e236      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a83      	ldr	r2, [pc, #524]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb3c 	bl	8000b68 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fb38 	bl	8000b68 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1fb      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fb28 	bl	8000b68 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fb24 	bl	8000b68 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1e7      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1bb      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4952      	ldr	r1, [pc, #328]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fadd 	bl	8000b68 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fad9 	bl	8000b68 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e19c      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fabc 	bl	8000b68 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fab8 	bl	8000b68 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e17b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fa9c 	bl	8000b68 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fa98 	bl	8000b68 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e15b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fa85 	bl	8000b68 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fa81 	bl	8000b68 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e144      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a0 	beq.w	80027ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d121      	bne.n	800270e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fa47 	bl	8000b68 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e011      	b.n	8002702 <HAL_RCC_OscConfig+0x2ce>
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
 80026ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fa3a 	bl	8000b68 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0fd      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x4d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x2f0>
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x312>
 800272c:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b74      	ldr	r3, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002746:	4b71      	ldr	r3, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a70      	ldr	r2, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b6e      	ldr	r3, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe f9ff 	bl	8000b68 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe f9fb 	bl	8000b68 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0bc      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x33a>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe f9e9 	bl	8000b68 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe f9e5 	bl	8000b68 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0a6      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b56      	ldr	r3, [pc, #344]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a51      	ldr	r2, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8092 	beq.w	80028fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d05c      	beq.n	800289e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d141      	bne.n	8002870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe f9b9 	bl	8000b68 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe f9b5 	bl	8000b68 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e078      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	019b      	lsls	r3, r3, #6
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4933      	ldr	r1, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe f98e 	bl	8000b68 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe f98a 	bl	8000b68 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04d      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x41c>
 800286e:	e045      	b.n	80028fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe f977 	bl	8000b68 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe f973 	bl	8000b68 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e036      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x44a>
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e029      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d115      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000
 800290c:	40023800 	.word	0x40023800
 8002910:	42470060 	.word	0x42470060

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cc      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d90c      	bls.n	8002950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d044      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe f8b0 	bl	8000b68 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe f8ac 	bl	8000b68 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20c      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f810 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08006904 	.word	0x08006904
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d007      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d008      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x38>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80b4 	bne.w	8002c74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b5e      	ldr	r3, [pc, #376]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b0e:	60bb      	str	r3, [r7, #8]
       break;
 8002b10:	e0b3      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b14:	60bb      	str	r3, [r7, #8]
      break;
 8002b16:	e0b0      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	ea03 0501 	and.w	r5, r3, r1
 8002b44:	ea04 0602 	and.w	r6, r4, r2
 8002b48:	4629      	mov	r1, r5
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	0154      	lsls	r4, r2, #5
 8002b56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5a:	014b      	lsls	r3, r1, #5
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4622      	mov	r2, r4
 8002b60:	1b49      	subs	r1, r1, r5
 8002b62:	eb62 0206 	sbc.w	r2, r2, r6
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	0194      	lsls	r4, r2, #6
 8002b70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b74:	018b      	lsls	r3, r1, #6
 8002b76:	1a5b      	subs	r3, r3, r1
 8002b78:	eb64 0402 	sbc.w	r4, r4, r2
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	00e2      	lsls	r2, r4, #3
 8002b86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b8a:	00d9      	lsls	r1, r3, #3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4614      	mov	r4, r2
 8002b90:	195b      	adds	r3, r3, r5
 8002b92:	eb44 0406 	adc.w	r4, r4, r6
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	0262      	lsls	r2, r4, #9
 8002ba0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ba4:	0259      	lsls	r1, r3, #9
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f7fd fb06 	bl	80001c8 <__aeabi_uldivmod>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e049      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	ea03 0501 	and.w	r5, r3, r1
 8002bda:	ea04 0602 	and.w	r6, r4, r2
 8002bde:	4629      	mov	r1, r5
 8002be0:	4632      	mov	r2, r6
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	0154      	lsls	r4, r2, #5
 8002bec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf0:	014b      	lsls	r3, r1, #5
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	1b49      	subs	r1, r1, r5
 8002bf8:	eb62 0206 	sbc.w	r2, r2, r6
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0194      	lsls	r4, r2, #6
 8002c06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c0a:	018b      	lsls	r3, r1, #6
 8002c0c:	1a5b      	subs	r3, r3, r1
 8002c0e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c20:	00d9      	lsls	r1, r3, #3
 8002c22:	460b      	mov	r3, r1
 8002c24:	4614      	mov	r4, r2
 8002c26:	195b      	adds	r3, r3, r5
 8002c28:	eb44 0406 	adc.w	r4, r4, r6
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	02a2      	lsls	r2, r4, #10
 8002c36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c3a:	0299      	lsls	r1, r3, #10
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4614      	mov	r4, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	4621      	mov	r1, r4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	f7fd fabb 	bl	80001c8 <__aeabi_uldivmod>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01d      	b.n	8002cf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fe0e 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f95e 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d007      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d122      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d11b      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0202 	mvn.w	r2, #2
 8002d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8ee 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002d8e:	e005      	b.n	8002d9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8e0 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8f1 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d122      	bne.n	8002df6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d11b      	bne.n	8002df6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0204 	mvn.w	r2, #4
 8002dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8c4 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002de2:	e005      	b.n	8002df0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8b6 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8c7 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d122      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0208 	mvn.w	r2, #8
 8002e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f89a 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002e36:	e005      	b.n	8002e44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f88c 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f89d 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d122      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0210 	mvn.w	r2, #16
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2208      	movs	r2, #8
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f870 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f862 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f873 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10e      	bne.n	8002eca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0201 	mvn.w	r2, #1
 8002ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fd fc8b 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f97f 	bl	80031f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d10e      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f838 	bl	8002f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d10e      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0220 	mvn.w	r2, #32
 8002f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f949 	bl	80031e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a40      	ldr	r2, [pc, #256]	; (80030bc <TIM_Base_SetConfig+0x114>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d00f      	beq.n	8002fe8 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3d      	ldr	r2, [pc, #244]	; (80030c0 <TIM_Base_SetConfig+0x118>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x40>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3c      	ldr	r2, [pc, #240]	; (80030c4 <TIM_Base_SetConfig+0x11c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3b      	ldr	r2, [pc, #236]	; (80030c8 <TIM_Base_SetConfig+0x120>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <TIM_Base_SetConfig+0x124>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <TIM_Base_SetConfig+0x114>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d02b      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d027      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <TIM_Base_SetConfig+0x118>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d023      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <TIM_Base_SetConfig+0x11c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01f      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <TIM_Base_SetConfig+0x120>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01b      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a29      	ldr	r2, [pc, #164]	; (80030cc <TIM_Base_SetConfig+0x124>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d017      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <TIM_Base_SetConfig+0x128>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <TIM_Base_SetConfig+0x12c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00f      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <TIM_Base_SetConfig+0x130>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00b      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a25      	ldr	r2, [pc, #148]	; (80030dc <TIM_Base_SetConfig+0x134>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <TIM_Base_SetConfig+0x138>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d003      	beq.n	800305a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <TIM_Base_SetConfig+0x13c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d108      	bne.n	800306c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <TIM_Base_SetConfig+0x114>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0xf8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <TIM_Base_SetConfig+0x124>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d103      	bne.n	80030a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	615a      	str	r2, [r3, #20]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40010400 	.word	0x40010400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800
 80030dc:	40001800 	.word	0x40001800
 80030e0:	40001c00 	.word	0x40001c00
 80030e4:	40002000 	.word	0x40002000

080030e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e05a      	b.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d01d      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10c      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40010400 	.word	0x40010400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40001800 	.word	0x40001800

080031e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003208:	b084      	sub	sp, #16
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	f107 001c 	add.w	r0, r7, #28
 8003216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2b01      	cmp	r3, #1
 800321e:	d122      	bne.n	8003266 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 fa7c 	bl	8004758 <USB_CoreReset>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e01a      	b.n	800329c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 fa70 	bl	8004758 <USB_CoreReset>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
 800328e:	e005      	b.n	800329c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10b      	bne.n	80032ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f043 0206 	orr.w	r2, r3, #6
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c6:	b004      	add	sp, #16
 80032c8:	4770      	bx	lr
	...

080032cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d165      	bne.n	80033ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <USB_SetTurnaroundTime+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d906      	bls.n	80032f6 <USB_SetTurnaroundTime+0x2a>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <USB_SetTurnaroundTime+0x120>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d802      	bhi.n	80032f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032f0:	230f      	movs	r3, #15
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e062      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <USB_SetTurnaroundTime+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d906      	bls.n	800330c <USB_SetTurnaroundTime+0x40>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <USB_SetTurnaroundTime+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d802      	bhi.n	800330c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003306:	230e      	movs	r3, #14
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e057      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <USB_SetTurnaroundTime+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d906      	bls.n	8003322 <USB_SetTurnaroundTime+0x56>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <USB_SetTurnaroundTime+0x128>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d802      	bhi.n	8003322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800331c:	230d      	movs	r3, #13
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e04c      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <USB_SetTurnaroundTime+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d906      	bls.n	8003338 <USB_SetTurnaroundTime+0x6c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <USB_SetTurnaroundTime+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003332:	230c      	movs	r3, #12
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e041      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <USB_SetTurnaroundTime+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d906      	bls.n	800334e <USB_SetTurnaroundTime+0x82>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <USB_SetTurnaroundTime+0x130>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d802      	bhi.n	800334e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003348:	230b      	movs	r3, #11
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e036      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <USB_SetTurnaroundTime+0x130>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d906      	bls.n	8003364 <USB_SetTurnaroundTime+0x98>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <USB_SetTurnaroundTime+0x134>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d802      	bhi.n	8003364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800335e:	230a      	movs	r3, #10
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e02b      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4a26      	ldr	r2, [pc, #152]	; (8003400 <USB_SetTurnaroundTime+0x134>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d906      	bls.n	800337a <USB_SetTurnaroundTime+0xae>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a25      	ldr	r2, [pc, #148]	; (8003404 <USB_SetTurnaroundTime+0x138>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d802      	bhi.n	800337a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003374:	2309      	movs	r3, #9
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e020      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <USB_SetTurnaroundTime+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d906      	bls.n	8003390 <USB_SetTurnaroundTime+0xc4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <USB_SetTurnaroundTime+0x13c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800338a:	2308      	movs	r3, #8
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e015      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <USB_SetTurnaroundTime+0x13c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d906      	bls.n	80033a6 <USB_SetTurnaroundTime+0xda>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <USB_SetTurnaroundTime+0x140>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d802      	bhi.n	80033a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033a0:	2307      	movs	r3, #7
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033a6:	2306      	movs	r3, #6
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e007      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033b2:	2309      	movs	r3, #9
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e001      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033b8:	2309      	movs	r3, #9
 80033ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	00d8acbf 	.word	0x00d8acbf
 80033ec:	00e4e1bf 	.word	0x00e4e1bf
 80033f0:	00f423ff 	.word	0x00f423ff
 80033f4:	0106737f 	.word	0x0106737f
 80033f8:	011a499f 	.word	0x011a499f
 80033fc:	01312cff 	.word	0x01312cff
 8003400:	014ca43f 	.word	0x014ca43f
 8003404:	016e35ff 	.word	0x016e35ff
 8003408:	01a6ab1f 	.word	0x01a6ab1f
 800340c:	01e847ff 	.word	0x01e847ff

08003410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e00b      	b.n	8003498 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e001      	b.n	8003498 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e003      	b.n	80034a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003498:	2032      	movs	r0, #50	; 0x32
 800349a:	f7fd fb71 	bl	8000b80 <HAL_Delay>

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034a8:	b084      	sub	sp, #16
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	e009      	b.n	80034dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3340      	adds	r3, #64	; 0x40
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	3301      	adds	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0e      	cmp	r3, #14
 80034e0:	d9f2      	bls.n	80034c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
 800350c:	e00b      	b.n	8003526 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800352c:	461a      	mov	r2, r3
 800352e:	2300      	movs	r3, #0
 8003530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	4619      	mov	r1, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003540:	461a      	mov	r2, r3
 8003542:	680b      	ldr	r3, [r1, #0]
 8003544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10c      	bne.n	8003566 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003552:	2100      	movs	r1, #0
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f961 	bl	800381c <USB_SetDevSpeed>
 800355a:	e008      	b.n	800356e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800355c:	2101      	movs	r1, #1
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f95c 	bl	800381c <USB_SetDevSpeed>
 8003564:	e003      	b.n	800356e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003566:	2103      	movs	r1, #3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f957 	bl	800381c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800356e:	2110      	movs	r1, #16
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f90b 	bl	800378c <USB_FlushTxFifo>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f929 	bl	80037d8 <USB_FlushRxFifo>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	461a      	mov	r2, r3
 8003598:	2300      	movs	r3, #0
 800359a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	461a      	mov	r2, r3
 80035a4:	2300      	movs	r3, #0
 80035a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ae:	461a      	mov	r2, r3
 80035b0:	2300      	movs	r3, #0
 80035b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e043      	b.n	8003642 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035d0:	d118      	bne.n	8003604 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e013      	b.n	8003616 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	461a      	mov	r2, r3
 80035fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e008      	b.n	8003616 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003634:	461a      	mov	r2, r3
 8003636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800363a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3301      	adds	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3b7      	bcc.n	80035ba <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e043      	b.n	80036d8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003666:	d118      	bne.n	800369a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e013      	b.n	80036ac <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e008      	b.n	80036ac <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	2300      	movs	r3, #0
 80036aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ca:	461a      	mov	r2, r3
 80036cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3b7      	bcc.n	8003650 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d111      	bne.n	800371e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	461a      	mov	r2, r3
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <USB_DevInit+0x2dc>)
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f043 0303 	orr.w	r3, r3, #3
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800372a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <USB_DevInit+0x2e0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f043 0208 	orr.w	r2, r3, #8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800375c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377e:	b004      	add	sp, #16
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	00800100 	.word	0x00800100
 8003788:	803c3800 	.word	0x803c3800

0800378c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <USB_FlushTxFifo+0x48>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d0f0      	beq.n	80037a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	00030d40 	.word	0x00030d40

080037d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2210      	movs	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <USB_FlushRxFifo+0x40>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e006      	b.n	800380a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b10      	cmp	r3, #16
 8003806:	d0f0      	beq.n	80037ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	00030d40 	.word	0x00030d40

0800381c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0306 	and.w	r3, r3, #6
 8003866:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
 8003872:	e00a      	b.n	800388a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d002      	beq.n	8003880 <USB_GetDevSpeed+0x32>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d102      	bne.n	8003886 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003880:	2302      	movs	r3, #2
 8003882:	75fb      	strb	r3, [r7, #23]
 8003884:	e001      	b.n	800388a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003886:	230f      	movs	r3, #15
 8003888:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d13a      	bne.n	800392a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d155      	bne.n	8003998 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003908:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	059b      	lsls	r3, r3, #22
 800390e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003910:	4313      	orrs	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e036      	b.n	8003998 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003948:	4313      	orrs	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11a      	bne.n	8003998 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800397e:	430b      	orrs	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d135      	bne.n	8003a30 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e4:	4013      	ands	r3, r2
 80039e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	0159      	lsls	r1, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	440b      	add	r3, r1
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	4619      	mov	r1, r3
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <USB_DeactivateEndpoint+0x100>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
 8003a2e:	e034      	b.n	8003a9a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a50:	4013      	ands	r3, r2
 8003a52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a74:	4013      	ands	r3, r2
 8003a76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	0159      	lsls	r1, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	4619      	mov	r1, r3
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <USB_DeactivateEndpoint+0x104>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	ec337800 	.word	0xec337800
 8003aac:	eff37800 	.word	0xeff37800

08003ab0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 815c 	bne.w	8003d8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d132      	bne.n	8003b40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003afc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b38:	0cdb      	lsrs	r3, r3, #19
 8003b3a:	04db      	lsls	r3, r3, #19
 8003b3c:	6113      	str	r3, [r2, #16]
 8003b3e:	e074      	b.n	8003c2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	0cdb      	lsrs	r3, r3, #19
 8003b5c:	04db      	lsls	r3, r3, #19
 8003b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6959      	ldr	r1, [r3, #20]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	440b      	add	r3, r1
 8003b9c:	1e59      	subs	r1, r3, #1
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	04d9      	lsls	r1, r3, #19
 8003ba8:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <USB_EPStartXfer+0x370>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	0148      	lsls	r0, r1, #5
 8003bb0:	69f9      	ldr	r1, [r7, #28]
 8003bb2:	4401      	add	r1, r0
 8003bb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	0148      	lsls	r0, r1, #5
 8003bd6:	69f9      	ldr	r1, [r7, #28]
 8003bd8:	4401      	add	r1, r0
 8003bda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11f      	bne.n	8003c2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d14b      	bne.n	8003cc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	78db      	ldrb	r3, [r3, #3]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d128      	bne.n	8003ca6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d110      	bne.n	8003c86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	e00f      	b.n	8003ca6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e12f      	b.n	8003f28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ce6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d015      	beq.n	8003d1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8117 	beq.w	8003f28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	69f9      	ldr	r1, [r7, #28]
 8003d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d16:	4313      	orrs	r3, r2
 8003d18:	634b      	str	r3, [r1, #52]	; 0x34
 8003d1a:	e105      	b.n	8003f28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d110      	bne.n	8003d4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e00f      	b.n	8003d6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68d9      	ldr	r1, [r3, #12]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	b298      	uxth	r0, r3
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4603      	mov	r3, r0
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fa2b 	bl	80041de <USB_WritePacket>
 8003d88:	e0ce      	b.n	8003f28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da4:	0cdb      	lsrs	r3, r3, #19
 8003da6:	04db      	lsls	r3, r3, #19
 8003da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d126      	bne.n	8003e24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	0148      	lsls	r0, r1, #5
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	4401      	add	r1, r0
 8003df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e1a:	6113      	str	r3, [r2, #16]
 8003e1c:	e036      	b.n	8003e8c <USB_EPStartXfer+0x3dc>
 8003e1e:	bf00      	nop
 8003e20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	8afb      	ldrh	r3, [r7, #22]
 8003e4a:	04d9      	lsls	r1, r3, #19
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <USB_EPStartXfer+0x484>)
 8003e4e:	400b      	ands	r3, r1
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	0148      	lsls	r0, r1, #5
 8003e54:	69f9      	ldr	r1, [r7, #28]
 8003e56:	4401      	add	r1, r0
 8003e58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	8af9      	ldrh	r1, [r7, #22]
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	0148      	lsls	r0, r1, #5
 8003e80:	69f9      	ldr	r1, [r7, #28]
 8003e82:	4401      	add	r1, r0
 8003e84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10d      	bne.n	8003eae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	68d9      	ldr	r1, [r3, #12]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	460a      	mov	r2, r1
 8003eac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d128      	bne.n	8003f08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d110      	bne.n	8003ee8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00f      	b.n	8003f08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	1ff80000 	.word	0x1ff80000

08003f38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 80cd 	bne.w	80040f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d132      	bne.n	8003fc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc0:	0cdb      	lsrs	r3, r3, #19
 8003fc2:	04db      	lsls	r3, r3, #19
 8003fc4:	6113      	str	r3, [r2, #16]
 8003fc6:	e04e      	b.n	8004066 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe2:	0cdb      	lsrs	r3, r3, #19
 8003fe4:	04db      	lsls	r3, r3, #19
 8003fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800400a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d903      	bls.n	8004020 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	0148      	lsls	r0, r1, #5
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	4401      	add	r1, r0
 800405e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d11e      	bne.n	80040aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e092      	b.n	80041d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d07e      	beq.n	80041d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ee:	4313      	orrs	r3, r2
 80040f0:	634b      	str	r3, [r1, #52]	; 0x34
 80040f2:	e06d      	b.n	80041d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	0cdb      	lsrs	r3, r3, #19
 8004110:	04db      	lsls	r3, r3, #19
 8004112:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004132:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004136:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	440a      	add	r2, r1
 800415e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417e:	6939      	ldr	r1, [r7, #16]
 8004180:	0148      	lsls	r0, r1, #5
 8004182:	6979      	ldr	r1, [r7, #20]
 8004184:	4401      	add	r1, r0
 8004186:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	460a      	mov	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80041de:	b480      	push	{r7}
 80041e0:	b089      	sub	sp, #36	; 0x24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	4611      	mov	r1, r2
 80041ea:	461a      	mov	r2, r3
 80041ec:	460b      	mov	r3, r1
 80041ee:	71fb      	strb	r3, [r7, #7]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80041fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11a      	bne.n	800423a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	3303      	adds	r3, #3
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e00f      	b.n	8004232 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	031a      	lsls	r2, r3, #12
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	461a      	mov	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3304      	adds	r3, #4
 800422a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	3301      	adds	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d3eb      	bcc.n	8004212 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3724      	adds	r7, #36	; 0x24
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	3303      	adds	r3, #3
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e00b      	b.n	8004284 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	601a      	str	r2, [r3, #0]
    pDest++;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3304      	adds	r3, #4
 800427c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3301      	adds	r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d3ef      	bcc.n	800426c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800428c:	69fb      	ldr	r3, [r7, #28]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d12c      	bne.n	8004310 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db12      	blt.n	80042ee <USB_EPSetStall+0x54>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e02b      	b.n	8004368 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db12      	blt.n	8004348 <USB_EPSetStall+0xae>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00f      	beq.n	8004348 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004346:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d128      	bne.n	80043e4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d003      	beq.n	80043c2 <USB_EPClearStall+0x4c>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d138      	bne.n	8004434 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e027      	b.n	8004434 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	0151      	lsls	r1, r2, #5
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	440a      	add	r2, r1
 80043fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004402:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	78db      	ldrb	r3, [r3, #3]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <USB_EPClearStall+0x9e>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	78db      	ldrb	r3, [r3, #3]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d10f      	bne.n	8004434 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004460:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004464:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a8:	f023 0302 	bic.w	r3, r3, #2
 80044ac:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044ae:	2003      	movs	r0, #3
 80044b0:	f7fc fb66 	bl	8000b80 <HAL_Delay>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044de:	2003      	movs	r0, #3
 80044e0:	f7fc fb4e 	bl	8000b80 <HAL_Delay>

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	0c1b      	lsrs	r3, r3, #16
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4013      	ands	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	b29b      	uxth	r3, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045aa:	68bb      	ldr	r3, [r7, #8]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	01db      	lsls	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004606:	68bb      	ldr	r3, [r7, #8]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0301 	and.w	r3, r3, #1
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0306 	and.w	r3, r3, #6
 8004660:	2b04      	cmp	r3, #4
 8004662:	d109      	bne.n	8004678 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004672:	f043 0303 	orr.w	r3, r3, #3
 8004676:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	460b      	mov	r3, r1
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	333c      	adds	r3, #60	; 0x3c
 80046b2:	3304      	adds	r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4a26      	ldr	r2, [pc, #152]	; (8004754 <USB_EP0_OutStart+0xb8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d90a      	bls.n	80046d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d0:	d101      	bne.n	80046d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e037      	b.n	8004746 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	2300      	movs	r3, #0
 80046e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004704:	f043 0318 	orr.w	r3, r3, #24
 8004708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004718:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800471c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10f      	bne.n	8004744 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	4f54300a 	.word	0x4f54300a

08004758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <USB_CoreReset+0x64>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e01b      	b.n	80047ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	daf2      	bge.n	8004764 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <USB_CoreReset+0x64>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d0f0      	beq.n	800478e <USB_CoreReset+0x36>

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	00030d40 	.word	0x00030d40

080047c0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80047d0:	2305      	movs	r3, #5
 80047d2:	2203      	movs	r2, #3
 80047d4:	2181      	movs	r1, #129	; 0x81
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 fe1b 	bl	8006412 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80047e2:	2305      	movs	r3, #5
 80047e4:	2203      	movs	r2, #3
 80047e6:	2101      	movs	r1, #1
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fe12 	bl	8006412 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80047f6:	201c      	movs	r0, #28
 80047f8:	f001 ff76 	bl	80066e8 <malloc>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <USBD_CUSTOM_HID_Init+0x56>
  {
    ret = 1U;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e011      	b.n	800483a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800481c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	761a      	strb	r2, [r3, #24]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	2305      	movs	r3, #5
 8004832:	2101      	movs	r1, #1
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fedd 	bl	80065f4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004850:	2181      	movs	r1, #129	; 0x81
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 fe03 	bl	800645e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800485e:	2101      	movs	r1, #1
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 fdfc 	bl	800645e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004888:	4618      	mov	r0, r3
 800488a:	f001 ff35 	bl	80066f8 <free>
    pdev->pClassData = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80048b0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d051      	beq.n	8004972 <USBD_CUSTOM_HID_Setup+0xd2>
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 80d8 	bne.w	8004a84 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	3b02      	subs	r3, #2
 80048da:	2b09      	cmp	r3, #9
 80048dc:	d841      	bhi.n	8004962 <USBD_CUSTOM_HID_Setup+0xc2>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <USBD_CUSTOM_HID_Setup+0x44>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	0800493d 	.word	0x0800493d
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	08004963 	.word	0x08004963
 80048f0:	08004963 	.word	0x08004963
 80048f4:	08004963 	.word	0x08004963
 80048f8:	08004963 	.word	0x08004963
 80048fc:	08004963 	.word	0x08004963
 8004900:	0800494d 	.word	0x0800494d
 8004904:	0800492b 	.word	0x0800492b
 8004908:	0800490d 	.word	0x0800490d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	885b      	ldrh	r3, [r3, #2]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	609a      	str	r2, [r3, #8]
      break;
 8004918:	e02a      	b.n	8004970 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3308      	adds	r3, #8
 800491e:	2201      	movs	r2, #1
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 f960 	bl	8005be8 <USBD_CtlSendData>
      break;
 8004928:	e022      	b.n	8004970 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	885b      	ldrh	r3, [r3, #2]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	60da      	str	r2, [r3, #12]
      break;
 800493a:	e019      	b.n	8004970 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	330c      	adds	r3, #12
 8004940:	2201      	movs	r2, #1
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f94f 	bl	8005be8 <USBD_CtlSendData>
      break;
 800494a:	e011      	b.n	8004970 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8004952:	6939      	ldr	r1, [r7, #16]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	88db      	ldrh	r3, [r3, #6]
 8004958:	461a      	mov	r2, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 f972 	bl	8005c44 <USBD_CtlPrepareRx>
      break;
 8004960:	e006      	b.n	8004970 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 f8d4 	bl	8005b12 <USBD_CtlError>
      ret = USBD_FAIL;
 800496a:	2302      	movs	r3, #2
 800496c:	75fb      	strb	r3, [r7, #23]
      break;
 800496e:	bf00      	nop
    }
    break;
 8004970:	e08f      	b.n	8004a92 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b0b      	cmp	r3, #11
 8004978:	d87c      	bhi.n	8004a74 <USBD_CUSTOM_HID_Setup+0x1d4>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <USBD_CUSTOM_HID_Setup+0xe0>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049b1 	.word	0x080049b1
 8004984:	08004a75 	.word	0x08004a75
 8004988:	08004a75 	.word	0x08004a75
 800498c:	08004a75 	.word	0x08004a75
 8004990:	08004a75 	.word	0x08004a75
 8004994:	08004a75 	.word	0x08004a75
 8004998:	080049d9 	.word	0x080049d9
 800499c:	08004a75 	.word	0x08004a75
 80049a0:	08004a75 	.word	0x08004a75
 80049a4:	08004a75 	.word	0x08004a75
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a4f 	.word	0x08004a4f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80049ba:	f107 030e 	add.w	r3, r7, #14
 80049be:	2202      	movs	r2, #2
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 f910 	bl	8005be8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80049c8:	e05b      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f8a0 	bl	8005b12 <USBD_CtlError>
			  ret = USBD_FAIL;
 80049d2:	2302      	movs	r3, #2
 80049d4:	75fb      	strb	r3, [r7, #23]
      break;
 80049d6:	e054      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	885b      	ldrh	r3, [r3, #2]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b22      	cmp	r3, #34	; 0x22
 80049e2:	d10b      	bne.n	80049fc <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	88db      	ldrh	r3, [r3, #6]
 80049e8:	2b5c      	cmp	r3, #92	; 0x5c
 80049ea:	bf28      	it	cs
 80049ec:	235c      	movcs	r3, #92	; 0x5c
 80049ee:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e00d      	b.n	8004a18 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	885b      	ldrh	r3, [r3, #2]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b21      	cmp	r3, #33	; 0x21
 8004a06:	d107      	bne.n	8004a18 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8004a08:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <USBD_CUSTOM_HID_Setup+0x1fc>)
 8004a0a:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	88db      	ldrh	r3, [r3, #6]
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	bf28      	it	cs
 8004a14:	2309      	movcs	r3, #9
 8004a16:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8004a18:	8bfb      	ldrh	r3, [r7, #30]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f8e2 	bl	8005be8 <USBD_CtlSendData>
      break;
 8004a24:	e02d      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d107      	bne.n	8004a40 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3310      	adds	r3, #16
 8004a34:	2201      	movs	r2, #1
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 f8d5 	bl	8005be8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004a3e:	e020      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f865 	bl	8005b12 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	e019      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d106      	bne.n	8004a66 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	885b      	ldrh	r3, [r3, #2]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	611a      	str	r2, [r3, #16]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004a64:	e00d      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 f852 	bl	8005b12 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	e006      	b.n	8004a82 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 f84b 	bl	8005b12 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a80:	bf00      	nop
    }
    break;
 8004a82:	e006      	b.n	8004a92 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f843 	bl	8005b12 <USBD_CtlError>
    ret = USBD_FAIL;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	75fb      	strb	r3, [r7, #23]
    break;
 8004a90:	bf00      	nop
  }
  return ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200000c8 	.word	0x200000c8

08004aa0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ab4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10f      	bne.n	8004ae0 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	7e1b      	ldrb	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2201      	movs	r2, #1
 8004acc:	761a      	strb	r2, [r3, #24]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	2181      	movs	r1, #129	; 0x81
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f001 fd6a 	bl	80065ae <USBD_LL_Transmit>
 8004ada:	e001      	b.n	8004ae0 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2229      	movs	r2, #41	; 0x29
 8004af8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8004afa:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000044 	.word	0x20000044

08004b0c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2229      	movs	r2, #41	; 0x29
 8004b18:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8004b1a:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000070 	.word	0x20000070

08004b2c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2229      	movs	r2, #41	; 0x29
 8004b38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004b3a:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	2000009c 	.word	0x2000009c

08004b4c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b5e:	2200      	movs	r2, #0
 8004b60:	761a      	strb	r2, [r3, #24]

  return USBD_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b82:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	7810      	ldrb	r0, [r2, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	7852      	ldrb	r2, [r2, #1]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 fd28 	bl	80065f4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004bbc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10c      	bne.n	8004be0 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	7810      	ldrb	r0, [r2, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	7852      	ldrb	r2, [r2, #1]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
  }

  return USBD_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	220a      	movs	r2, #10
 8004bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004bfa:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	200000d4 	.word	0x200000d4

08004c0c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004c16:	2302      	movs	r3, #2
 8004c18:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e01a      	b.n	8004c88 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	79fa      	ldrb	r2, [r7, #7]
 8004c7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 fb5f 	bl	8006344 <USBD_LL_Init>

  return USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e001      	b.n	8004cb6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 fb85 	bl	80063dc <USBD_LL_Start>

  return USBD_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	4611      	mov	r1, r2
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
  return USBD_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fe95 	bl	8005a98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d00c      	beq.n	8004dac <USBD_LL_SetupStage+0x56>
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d302      	bcc.n	8004d9c <USBD_LL_SetupStage+0x46>
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d010      	beq.n	8004dbc <USBD_LL_SetupStage+0x66>
 8004d9a:	e017      	b.n	8004dcc <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa05 	bl	80051b4 <USBD_StdDevReq>
    break;
 8004daa:	e01a      	b.n	8004de2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fa67 	bl	8005288 <USBD_StdItfReq>
    break;
 8004dba:	e012      	b.n	8004de2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 faa5 	bl	8005314 <USBD_StdEPReq>
    break;
 8004dca:	e00a      	b.n	8004de2 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fb5e 	bl	800649c <USBD_LL_StallEP>
    break;
 8004de0:	bf00      	nop
  }

  return USBD_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	460b      	mov	r3, r1
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d14b      	bne.n	8004e98 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004e06:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d134      	bne.n	8004e7c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d919      	bls.n	8004e52 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d203      	bcs.n	8004e40 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	e002      	b.n	8004e46 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 ff18 	bl	8005c80 <USBD_CtlContinueRx>
 8004e50:	e038      	b.n	8004ec4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d105      	bne.n	8004e74 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 ff15 	bl	8005ca4 <USBD_CtlSendStatus>
 8004e7a:	e023      	b.n	8004ec4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d11e      	bne.n	8004ec4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f001 fb03 	bl	800649c <USBD_LL_StallEP>
 8004e96:	e015      	b.n	8004ec4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d108      	bne.n	8004ec0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	7afa      	ldrb	r2, [r7, #11]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	4798      	blx	r3
 8004ebe:	e001      	b.n	8004ec4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e000      	b.n	8004ec6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004edc:	7afb      	ldrb	r3, [r7, #11]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d17f      	bne.n	8004fe2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d15c      	bne.n	8004fac <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d915      	bls.n	8004f2a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fe82 	bl	8005c20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2100      	movs	r1, #0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f001 fb66 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004f28:	e04e      	b.n	8004fc8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	6912      	ldr	r2, [r2, #16]
 8004f32:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f36:	fb02 f201 	mul.w	r2, r2, r1
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11c      	bne.n	8004f7a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d316      	bcc.n	8004f7a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d20f      	bcs.n	8004f7a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fe5e 	bl	8005c20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f001 fb3e 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004f78:	e026      	b.n	8004fc8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d105      	bne.n	8004f9c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f001 fa7c 	bl	800649c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fe90 	bl	8005cca <USBD_CtlReceiveStatus>
 8004faa:	e00d      	b.n	8004fc8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d004      	beq.n	8004fc0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004fc0:	2180      	movs	r1, #128	; 0x80
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f001 fa6a 	bl	800649c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11d      	bne.n	800500e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fe82 	bl	8004cdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004fe0:	e015      	b.n	800500e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d108      	bne.n	800500a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	7afa      	ldrb	r2, [r7, #11]
 8005002:	4611      	mov	r1, r2
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	4798      	blx	r3
 8005008:	e001      	b.n	800500e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800500a:	2302      	movs	r3, #2
 800500c:	e000      	b.n	8005010 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f9f3 	bl	8006412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2240      	movs	r2, #64	; 0x40
 8005038:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	2200      	movs	r2, #0
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 f9e5 	bl	8006412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6852      	ldr	r2, [r2, #4]
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	4611      	mov	r1, r2
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
  }

  return USBD_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2204      	movs	r2, #4
 80050d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005114:	2b03      	cmp	r3, #3
 8005116:	d10b      	bne.n	8005130 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6852      	ldr	r2, [r2, #4]
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	4611      	mov	r1, r2
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3

  return USBD_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d004      	beq.n	80051d8 <USBD_StdDevReq+0x24>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d002      	beq.n	80051d8 <USBD_StdDevReq+0x24>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <USBD_StdDevReq+0x34>
 80051d6:	e04c      	b.n	8005272 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
    break;
 80051e6:	e049      	b.n	800527c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d83a      	bhi.n	8005266 <USBD_StdDevReq+0xb2>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <USBD_StdDevReq+0x44>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005249 	.word	0x08005249
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	08005267 	.word	0x08005267
 8005204:	08005253 	.word	0x08005253
 8005208:	08005267 	.word	0x08005267
 800520c:	0800522b 	.word	0x0800522b
 8005210:	08005221 	.word	0x08005221
 8005214:	08005267 	.word	0x08005267
 8005218:	0800523f 	.word	0x0800523f
 800521c:	08005235 	.word	0x08005235
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9d2 	bl	80055cc <USBD_GetDescriptor>
      break;
 8005228:	e022      	b.n	8005270 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fac7 	bl	80057c0 <USBD_SetAddress>
      break;
 8005232:	e01d      	b.n	8005270 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb04 	bl	8005844 <USBD_SetConfig>
      break;
 800523c:	e018      	b.n	8005270 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb8d 	bl	8005960 <USBD_GetConfig>
      break;
 8005246:	e013      	b.n	8005270 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fbbc 	bl	80059c8 <USBD_GetStatus>
      break;
 8005250:	e00e      	b.n	8005270 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fbea 	bl	8005a2e <USBD_SetFeature>
      break;
 800525a:	e009      	b.n	8005270 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fbf9 	bl	8005a56 <USBD_ClrFeature>
      break;
 8005264:	e004      	b.n	8005270 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fc52 	bl	8005b12 <USBD_CtlError>
      break;
 800526e:	bf00      	nop
    }
    break;
 8005270:	e004      	b.n	800527c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fc4c 	bl	8005b12 <USBD_CtlError>
    break;
 800527a:	bf00      	nop
  }

  return ret;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d003      	beq.n	80052aa <USBD_StdItfReq+0x22>
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d001      	beq.n	80052aa <USBD_StdItfReq+0x22>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12a      	bne.n	8005300 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80052b0:	3b01      	subs	r3, #1
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d81d      	bhi.n	80052f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	889b      	ldrh	r3, [r3, #4]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d813      	bhi.n	80052e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	88db      	ldrh	r3, [r3, #6]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d110      	bne.n	80052fc <USBD_StdItfReq+0x74>
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10d      	bne.n	80052fc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fcdf 	bl	8005ca4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80052e6:	e009      	b.n	80052fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fc11 	bl	8005b12 <USBD_CtlError>
      break;
 80052f0:	e004      	b.n	80052fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fc0c 	bl	8005b12 <USBD_CtlError>
      break;
 80052fa:	e000      	b.n	80052fe <USBD_StdItfReq+0x76>
      break;
 80052fc:	bf00      	nop
    }
    break;
 80052fe:	e004      	b.n	800530a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fc05 	bl	8005b12 <USBD_CtlError>
    break;
 8005308:	bf00      	nop
  }

  return USBD_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	889b      	ldrh	r3, [r3, #4]
 8005326:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005330:	2b20      	cmp	r3, #32
 8005332:	d004      	beq.n	800533e <USBD_StdEPReq+0x2a>
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d002      	beq.n	800533e <USBD_StdEPReq+0x2a>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <USBD_StdEPReq+0x3a>
 800533c:	e13b      	b.n	80055b6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
    break;
 800534c:	e138      	b.n	80055c0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005356:	2b20      	cmp	r3, #32
 8005358:	d10a      	bne.n	8005370 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	e128      	b.n	80055c2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d03e      	beq.n	80053f6 <USBD_StdEPReq+0xe2>
 8005378:	2b03      	cmp	r3, #3
 800537a:	d002      	beq.n	8005382 <USBD_StdEPReq+0x6e>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d070      	beq.n	8005462 <USBD_StdEPReq+0x14e>
 8005380:	e113      	b.n	80055aa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005388:	2b02      	cmp	r3, #2
 800538a:	d002      	beq.n	8005392 <USBD_StdEPReq+0x7e>
 800538c:	2b03      	cmp	r3, #3
 800538e:	d015      	beq.n	80053bc <USBD_StdEPReq+0xa8>
 8005390:	e02b      	b.n	80053ea <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <USBD_StdEPReq+0x9e>
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d009      	beq.n	80053b2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 f87a 	bl	800649c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f876 	bl	800649c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80053b0:	e020      	b.n	80053f4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fbac 	bl	8005b12 <USBD_CtlError>
        break;
 80053ba:	e01b      	b.n	80053f4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	885b      	ldrh	r3, [r3, #2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10e      	bne.n	80053e2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <USBD_StdEPReq+0xce>
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d008      	beq.n	80053e2 <USBD_StdEPReq+0xce>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	88db      	ldrh	r3, [r3, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 f85d 	bl	800649c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc5e 	bl	8005ca4 <USBD_CtlSendStatus>

        break;
 80053e8:	e004      	b.n	80053f4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fb90 	bl	8005b12 <USBD_CtlError>
        break;
 80053f2:	bf00      	nop
      }
      break;
 80053f4:	e0de      	b.n	80055b4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d002      	beq.n	8005406 <USBD_StdEPReq+0xf2>
 8005400:	2b03      	cmp	r3, #3
 8005402:	d015      	beq.n	8005430 <USBD_StdEPReq+0x11c>
 8005404:	e026      	b.n	8005454 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <USBD_StdEPReq+0x112>
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d009      	beq.n	8005426 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f840 	bl	800649c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 f83c 	bl	800649c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005424:	e01c      	b.n	8005460 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fb72 	bl	8005b12 <USBD_CtlError>
        break;
 800542e:	e017      	b.n	8005460 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	885b      	ldrh	r3, [r3, #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d112      	bne.n	800545e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 f847 	bl	80064da <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fc29 	bl	8005ca4 <USBD_CtlSendStatus>
        }
        break;
 8005452:	e004      	b.n	800545e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fb5b 	bl	8005b12 <USBD_CtlError>
        break;
 800545c:	e000      	b.n	8005460 <USBD_StdEPReq+0x14c>
        break;
 800545e:	bf00      	nop
      }
      break;
 8005460:	e0a8      	b.n	80055b4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005468:	2b02      	cmp	r3, #2
 800546a:	d002      	beq.n	8005472 <USBD_StdEPReq+0x15e>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d031      	beq.n	80054d4 <USBD_StdEPReq+0x1c0>
 8005470:	e095      	b.n	800559e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <USBD_StdEPReq+0x174>
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d004      	beq.n	8005488 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb46 	bl	8005b12 <USBD_CtlError>
          break;
 8005486:	e08f      	b.n	80055a8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da0b      	bge.n	80054a8 <USBD_StdEPReq+0x194>
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	3310      	adds	r3, #16
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	3304      	adds	r3, #4
 80054a6:	e00a      	b.n	80054be <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2202      	movs	r2, #2
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fb8b 	bl	8005be8 <USBD_CtlSendData>
          break;
 80054d2:	e069      	b.n	80055a8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80054d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da11      	bge.n	8005500 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	3318      	adds	r3, #24
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d117      	bne.n	8005526 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fb0a 	bl	8005b12 <USBD_CtlError>
            break;
 80054fe:	e053      	b.n	80055a8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 faf7 	bl	8005b12 <USBD_CtlError>
            break;
 8005524:	e040      	b.n	80055a8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800552a:	2b00      	cmp	r3, #0
 800552c:	da0b      	bge.n	8005546 <USBD_StdEPReq+0x232>
 800552e:	7bbb      	ldrb	r3, [r7, #14]
 8005530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3310      	adds	r3, #16
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	e00a      	b.n	800555c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	4413      	add	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <USBD_StdEPReq+0x256>
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d103      	bne.n	8005572 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e00e      	b.n	8005590 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 ffce 	bl	8006518 <USBD_LL_IsStallEP>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e002      	b.n	8005590 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2202      	movs	r2, #2
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb26 	bl	8005be8 <USBD_CtlSendData>
          break;
 800559c:	e004      	b.n	80055a8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fab6 	bl	8005b12 <USBD_CtlError>
        break;
 80055a6:	bf00      	nop
      }
      break;
 80055a8:	e004      	b.n	80055b4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fab0 	bl	8005b12 <USBD_CtlError>
      break;
 80055b2:	bf00      	nop
    }
    break;
 80055b4:	e004      	b.n	80055c0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 faaa 	bl	8005b12 <USBD_CtlError>
    break;
 80055be:	bf00      	nop
  }

  return ret;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	885b      	ldrh	r3, [r3, #2]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	f200 80c9 	bhi.w	8005778 <USBD_GetDescriptor+0x1ac>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <USBD_GetDescriptor+0x20>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005609 	.word	0x08005609
 80055f0:	08005621 	.word	0x08005621
 80055f4:	08005661 	.word	0x08005661
 80055f8:	08005779 	.word	0x08005779
 80055fc:	08005779 	.word	0x08005779
 8005600:	08005725 	.word	0x08005725
 8005604:	0800574b 	.word	0x0800574b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	7c12      	ldrb	r2, [r2, #16]
 8005614:	f107 010a 	add.w	r1, r7, #10
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	60f8      	str	r0, [r7, #12]
    break;
 800561e:	e0b0      	b.n	8005782 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7c1b      	ldrb	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f107 020a 	add.w	r2, r7, #10
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
 8005638:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005642:	e09e      	b.n	8005782 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	f107 020a 	add.w	r2, r7, #10
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	2202      	movs	r2, #2
 800565c:	701a      	strb	r2, [r3, #0]
    break;
 800565e:	e090      	b.n	8005782 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	885b      	ldrh	r3, [r3, #2]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b05      	cmp	r3, #5
 8005668:	d856      	bhi.n	8005718 <USBD_GetDescriptor+0x14c>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <USBD_GetDescriptor+0xa4>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005689 	.word	0x08005689
 8005674:	080056a1 	.word	0x080056a1
 8005678:	080056b9 	.word	0x080056b9
 800567c:	080056d1 	.word	0x080056d1
 8005680:	080056e9 	.word	0x080056e9
 8005684:	08005701 	.word	0x08005701
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	7c12      	ldrb	r2, [r2, #16]
 8005694:	f107 010a 	add.w	r1, r7, #10
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
 800569c:	60f8      	str	r0, [r7, #12]
      break;
 800569e:	e040      	b.n	8005722 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	7c12      	ldrb	r2, [r2, #16]
 80056ac:	f107 010a 	add.w	r1, r7, #10
 80056b0:	4610      	mov	r0, r2
 80056b2:	4798      	blx	r3
 80056b4:	60f8      	str	r0, [r7, #12]
      break;
 80056b6:	e034      	b.n	8005722 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	7c12      	ldrb	r2, [r2, #16]
 80056c4:	f107 010a 	add.w	r1, r7, #10
 80056c8:	4610      	mov	r0, r2
 80056ca:	4798      	blx	r3
 80056cc:	60f8      	str	r0, [r7, #12]
      break;
 80056ce:	e028      	b.n	8005722 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7c12      	ldrb	r2, [r2, #16]
 80056dc:	f107 010a 	add.w	r1, r7, #10
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	60f8      	str	r0, [r7, #12]
      break;
 80056e6:	e01c      	b.n	8005722 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	7c12      	ldrb	r2, [r2, #16]
 80056f4:	f107 010a 	add.w	r1, r7, #10
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
 80056fc:	60f8      	str	r0, [r7, #12]
      break;
 80056fe:	e010      	b.n	8005722 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 010a 	add.w	r1, r7, #10
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
      break;
 8005716:	e004      	b.n	8005722 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9f9 	bl	8005b12 <USBD_CtlError>
      return;
 8005720:	e04b      	b.n	80057ba <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005722:	e02e      	b.n	8005782 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	7c1b      	ldrb	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d109      	bne.n	8005740 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	f107 020a 	add.w	r2, r7, #10
 8005738:	4610      	mov	r0, r2
 800573a:	4798      	blx	r3
 800573c:	60f8      	str	r0, [r7, #12]
      break;
 800573e:	e020      	b.n	8005782 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9e5 	bl	8005b12 <USBD_CtlError>
      return;
 8005748:	e037      	b.n	80057ba <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7c1b      	ldrb	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	f107 020a 	add.w	r2, r7, #10
 800575e:	4610      	mov	r0, r2
 8005760:	4798      	blx	r3
 8005762:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	2207      	movs	r2, #7
 800576a:	701a      	strb	r2, [r3, #0]
      break;
 800576c:	e009      	b.n	8005782 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f9ce 	bl	8005b12 <USBD_CtlError>
      return;
 8005776:	e020      	b.n	80057ba <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9c9 	bl	8005b12 <USBD_CtlError>
    return;
 8005780:	e01b      	b.n	80057ba <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005782:	897b      	ldrh	r3, [r7, #10]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <USBD_GetDescriptor+0x1e0>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	88db      	ldrh	r3, [r3, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	88da      	ldrh	r2, [r3, #6]
 8005794:	897b      	ldrh	r3, [r7, #10]
 8005796:	4293      	cmp	r3, r2
 8005798:	bf28      	it	cs
 800579a:	4613      	movcs	r3, r2
 800579c:	b29b      	uxth	r3, r3
 800579e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa1e 	bl	8005be8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	88db      	ldrh	r3, [r3, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa75 	bl	8005ca4 <USBD_CtlSendStatus>
  }
}
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	889b      	ldrh	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d130      	bne.n	8005834 <USBD_SetAddress+0x74>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	88db      	ldrh	r3, [r3, #6]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d12c      	bne.n	8005834 <USBD_SetAddress+0x74>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	885b      	ldrh	r3, [r3, #2]
 80057de:	2b7f      	cmp	r3, #127	; 0x7f
 80057e0:	d828      	bhi.n	8005834 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	885b      	ldrh	r3, [r3, #2]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d104      	bne.n	8005802 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f989 	bl	8005b12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005800:	e01c      	b.n	800583c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 feae 	bl	8006570 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa45 	bl	8005ca4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005828:	e008      	b.n	800583c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	e003      	b.n	800583c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f96b 	bl	8005b12 <USBD_CtlError>
  }
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	885b      	ldrh	r3, [r3, #2]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <USBD_SetConfig+0x118>)
 8005856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <USBD_SetConfig+0x118>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d904      	bls.n	800586a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f955 	bl	8005b12 <USBD_CtlError>
 8005868:	e075      	b.n	8005956 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005870:	2b02      	cmp	r3, #2
 8005872:	d002      	beq.n	800587a <USBD_SetConfig+0x36>
 8005874:	2b03      	cmp	r3, #3
 8005876:	d023      	beq.n	80058c0 <USBD_SetConfig+0x7c>
 8005878:	e062      	b.n	8005940 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <USBD_SetConfig+0x118>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01a      	beq.n	80058b8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <USBD_SetConfig+0x118>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2203      	movs	r2, #3
 8005890:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005894:	4b31      	ldr	r3, [pc, #196]	; (800595c <USBD_SetConfig+0x118>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fa29 	bl	8004cf2 <USBD_SetClassConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d104      	bne.n	80058b0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f932 	bl	8005b12 <USBD_CtlError>
          return;
 80058ae:	e052      	b.n	8005956 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9f7 	bl	8005ca4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80058b6:	e04e      	b.n	8005956 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f9f3 	bl	8005ca4 <USBD_CtlSendStatus>
      break;
 80058be:	e04a      	b.n	8005956 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <USBD_SetConfig+0x118>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d112      	bne.n	80058ee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <USBD_SetConfig+0x118>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <USBD_SetConfig+0x118>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fa25 	bl	8004d30 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9dc 	bl	8005ca4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80058ec:	e033      	b.n	8005956 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80058ee:	4b1b      	ldr	r3, [pc, #108]	; (800595c <USBD_SetConfig+0x118>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d01d      	beq.n	8005938 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fa13 	bl	8004d30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <USBD_SetConfig+0x118>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <USBD_SetConfig+0x118>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff f9e9 	bl	8004cf2 <USBD_SetClassConfig>
 8005920:	4603      	mov	r3, r0
 8005922:	2b02      	cmp	r3, #2
 8005924:	d104      	bne.n	8005930 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8f2 	bl	8005b12 <USBD_CtlError>
          return;
 800592e:	e012      	b.n	8005956 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9b7 	bl	8005ca4 <USBD_CtlSendStatus>
      break;
 8005936:	e00e      	b.n	8005956 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f9b3 	bl	8005ca4 <USBD_CtlSendStatus>
      break;
 800593e:	e00a      	b.n	8005956 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f8e5 	bl	8005b12 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <USBD_SetConfig+0x118>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff f9ee 	bl	8004d30 <USBD_ClrClassConfig>
      break;
 8005954:	bf00      	nop
    }
  }
}
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000224 	.word	0x20000224

08005960 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	88db      	ldrh	r3, [r3, #6]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d004      	beq.n	800597c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8cc 	bl	8005b12 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800597a:	e021      	b.n	80059c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005982:	2b01      	cmp	r3, #1
 8005984:	db17      	blt.n	80059b6 <USBD_GetConfig+0x56>
 8005986:	2b02      	cmp	r3, #2
 8005988:	dd02      	ble.n	8005990 <USBD_GetConfig+0x30>
 800598a:	2b03      	cmp	r3, #3
 800598c:	d00b      	beq.n	80059a6 <USBD_GetConfig+0x46>
 800598e:	e012      	b.n	80059b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3308      	adds	r3, #8
 800599a:	2201      	movs	r2, #1
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f922 	bl	8005be8 <USBD_CtlSendData>
      break;
 80059a4:	e00c      	b.n	80059c0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	2201      	movs	r2, #1
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f91a 	bl	8005be8 <USBD_CtlSendData>
      break;
 80059b4:	e004      	b.n	80059c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8aa 	bl	8005b12 <USBD_CtlError>
      break;
 80059be:	bf00      	nop
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059d8:	3b01      	subs	r3, #1
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d81e      	bhi.n	8005a1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	88db      	ldrh	r3, [r3, #6]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d004      	beq.n	80059f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f892 	bl	8005b12 <USBD_CtlError>
      break;
 80059ee:	e01a      	b.n	8005a26 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f043 0202 	orr.w	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	2202      	movs	r2, #2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8e7 	bl	8005be8 <USBD_CtlSendData>
    break;
 8005a1a:	e004      	b.n	8005a26 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f877 	bl	8005b12 <USBD_CtlError>
    break;
 8005a24:	bf00      	nop
  }
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	885b      	ldrh	r3, [r3, #2]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d106      	bne.n	8005a4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f92b 	bl	8005ca4 <USBD_CtlSendStatus>
  }

}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005a66:	3b01      	subs	r3, #1
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d80b      	bhi.n	8005a84 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	885b      	ldrh	r3, [r3, #2]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10c      	bne.n	8005a8e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f911 	bl	8005ca4 <USBD_CtlSendStatus>
    }
    break;
 8005a82:	e004      	b.n	8005a8e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f843 	bl	8005b12 <USBD_CtlError>
    break;
 8005a8c:	e000      	b.n	8005a90 <USBD_ClrFeature+0x3a>
    break;
 8005a8e:	bf00      	nop
  }
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	785a      	ldrb	r2, [r3, #1]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	3303      	adds	r3, #3
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	3305      	adds	r3, #5
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3306      	adds	r3, #6
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3307      	adds	r3, #7
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	80da      	strh	r2, [r3, #6]

}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fcbc 	bl	800649c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b24:	2100      	movs	r1, #0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fcb8 	bl	800649c <USBD_LL_StallEP>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d032      	beq.n	8005bb0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f834 	bl	8005bb8 <USBD_GetLen>
 8005b50:	4603      	mov	r3, r0
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	75fa      	strb	r2, [r7, #23]
 8005b64:	461a      	mov	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4413      	add	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	75fa      	strb	r2, [r7, #23]
 8005b76:	461a      	mov	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005b80:	e012      	b.n	8005ba8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	60fa      	str	r2, [r7, #12]
 8005b88:	7dfa      	ldrb	r2, [r7, #23]
 8005b8a:	1c51      	adds	r1, r2, #1
 8005b8c:	75f9      	strb	r1, [r7, #23]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	440a      	add	r2, r1
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	75fa      	strb	r2, [r7, #23]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e8      	bne.n	8005b82 <USBD_GetString+0x4e>
    }
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8005bc4:	e005      	b.n	8005bd2 <USBD_GetLen+0x1a>
    {
        len++;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f5      	bne.n	8005bc6 <USBD_GetLen+0xe>
    }

    return len;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fccc 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	2100      	movs	r1, #0
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fcba 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2203      	movs	r2, #3
 8005c56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	2100      	movs	r1, #0
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fcbf 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	2100      	movs	r1, #0
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fcad 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fc77 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2205      	movs	r2, #5
 8005cd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fc87 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4912      	ldr	r1, [pc, #72]	; (8005d40 <MX_USB_DEVICE_Init+0x50>)
 8005cf8:	4812      	ldr	r0, [pc, #72]	; (8005d44 <MX_USB_DEVICE_Init+0x54>)
 8005cfa:	f7fe ff9e 	bl	8004c3a <USBD_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d04:	f7fa fdc4 	bl	8000890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005d08:	490f      	ldr	r1, [pc, #60]	; (8005d48 <MX_USB_DEVICE_Init+0x58>)
 8005d0a:	480e      	ldr	r0, [pc, #56]	; (8005d44 <MX_USB_DEVICE_Init+0x54>)
 8005d0c:	f7fe ffc0 	bl	8004c90 <USBD_RegisterClass>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d16:	f7fa fdbb 	bl	8000890 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005d1a:	490c      	ldr	r1, [pc, #48]	; (8005d4c <MX_USB_DEVICE_Init+0x5c>)
 8005d1c:	4809      	ldr	r0, [pc, #36]	; (8005d44 <MX_USB_DEVICE_Init+0x54>)
 8005d1e:	f7fe ff75 	bl	8004c0c <USBD_CUSTOM_HID_RegisterInterface>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005d28:	f7fa fdb2 	bl	8000890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d2c:	4805      	ldr	r0, [pc, #20]	; (8005d44 <MX_USB_DEVICE_Init+0x54>)
 8005d2e:	f7fe ffc9 	bl	8004cc4 <USBD_Start>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d38:	f7fa fdaa 	bl	8000890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	2000014c 	.word	0x2000014c
 8005d44:	2000027c 	.word	0x2000027c
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	2000013c 	.word	0x2000013c

08005d50 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005d64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	460a      	mov	r2, r1
 8005d7a:	71fb      	strb	r3, [r7, #7]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	//ф-я приёма данных от хоста к девайсу
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d80:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <CUSTOM_HID_OutEvent_FS+0x120>)
 8005d82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d86:	60bb      	str	r3, [r7, #8]

	  for (uint8_t i = 0; i < 4; i++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e008      	b.n	8005da0 <CUSTOM_HID_OutEvent_FS+0x30>
	  	  {
		  dataToReceive[i] = hhid->Report_buf[i];
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	5c89      	ldrb	r1, [r1, r2]
 8005d96:	4a3f      	ldr	r2, [pc, #252]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005d98:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < 4; i++)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d9f3      	bls.n	8005d8e <CUSTOM_HID_OutEvent_FS+0x1e>
	  	  }
	  if ((dataToReceive[0]==1)&&(dataToReceive[1]==1))
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d109      	bne.n	8005dc2 <CUSTOM_HID_OutEvent_FS+0x52>
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <CUSTOM_HID_OutEvent_FS+0x52>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8005db6:	2201      	movs	r2, #1
 8005db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005dbc:	4836      	ldr	r0, [pc, #216]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005dbe:	f7fb f9ad 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==1)&&(dataToReceive[1]==0))
 8005dc2:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d109      	bne.n	8005dde <CUSTOM_HID_OutEvent_FS+0x6e>
 8005dca:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <CUSTOM_HID_OutEvent_FS+0x6e>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005dd8:	482f      	ldr	r0, [pc, #188]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005dda:	f7fb f99f 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==2)&&(dataToReceive[1]==1))
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d109      	bne.n	8005dfa <CUSTOM_HID_OutEvent_FS+0x8a>
 8005de6:	4b2b      	ldr	r3, [pc, #172]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <CUSTOM_HID_OutEvent_FS+0x8a>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8005dee:	2201      	movs	r2, #1
 8005df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005df4:	4828      	ldr	r0, [pc, #160]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005df6:	f7fb f991 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==2)&&(dataToReceive[1]==0))
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d109      	bne.n	8005e16 <CUSTOM_HID_OutEvent_FS+0xa6>
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <CUSTOM_HID_OutEvent_FS+0xa6>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e10:	4821      	ldr	r0, [pc, #132]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005e12:	f7fb f983 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==3)&&(dataToReceive[1]==1))
 8005e16:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d109      	bne.n	8005e32 <CUSTOM_HID_OutEvent_FS+0xc2>
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <CUSTOM_HID_OutEvent_FS+0xc2>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8005e26:	2201      	movs	r2, #1
 8005e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e2c:	481a      	ldr	r0, [pc, #104]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005e2e:	f7fb f975 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==3)&&(dataToReceive[1]==0))
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d109      	bne.n	8005e4e <CUSTOM_HID_OutEvent_FS+0xde>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <CUSTOM_HID_OutEvent_FS+0xde>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8005e42:	2200      	movs	r2, #0
 8005e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e48:	4813      	ldr	r0, [pc, #76]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005e4a:	f7fb f967 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==4)&&(dataToReceive[1]==1))
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d109      	bne.n	8005e6a <CUSTOM_HID_OutEvent_FS+0xfa>
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d105      	bne.n	8005e6a <CUSTOM_HID_OutEvent_FS+0xfa>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e64:	480c      	ldr	r0, [pc, #48]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005e66:	f7fb f959 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
	  if ((dataToReceive[0]==4)&&(dataToReceive[1]==0))
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d109      	bne.n	8005e86 <CUSTOM_HID_OutEvent_FS+0x116>
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <CUSTOM_HID_OutEvent_FS+0x124>)
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <CUSTOM_HID_OutEvent_FS+0x116>
	  	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e80:	4805      	ldr	r0, [pc, #20]	; (8005e98 <CUSTOM_HID_OutEvent_FS+0x128>)
 8005e82:	f7fb f94b 	bl	800111c <HAL_GPIO_WritePin>
	  	  }
  return (USBD_OK);
 8005e86:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2000027c 	.word	0x2000027c
 8005e94:	20000518 	.word	0x20000518
 8005e98:	40020c00 	.word	0x40020c00

08005e9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2212      	movs	r2, #18
 8005eac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005eae:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <USBD_FS_DeviceDescriptor+0x20>)
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20000168 	.word	0x20000168

08005ec0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ed2:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	2000017c 	.word	0x2000017c

08005ee4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	6039      	str	r1, [r7, #0]
 8005eee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	4907      	ldr	r1, [pc, #28]	; (8005f18 <USBD_FS_ProductStrDescriptor+0x34>)
 8005efa:	4808      	ldr	r0, [pc, #32]	; (8005f1c <USBD_FS_ProductStrDescriptor+0x38>)
 8005efc:	f7ff fe1a 	bl	8005b34 <USBD_GetString>
 8005f00:	e004      	b.n	8005f0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4904      	ldr	r1, [pc, #16]	; (8005f18 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f06:	4805      	ldr	r0, [pc, #20]	; (8005f1c <USBD_FS_ProductStrDescriptor+0x38>)
 8005f08:	f7ff fe14 	bl	8005b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000520 	.word	0x20000520
 8005f1c:	080068a4 	.word	0x080068a4

08005f20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	4904      	ldr	r1, [pc, #16]	; (8005f40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f30:	4804      	ldr	r0, [pc, #16]	; (8005f44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f32:	f7ff fdff 	bl	8005b34 <USBD_GetString>
  return USBD_StrDesc;
 8005f36:	4b02      	ldr	r3, [pc, #8]	; (8005f40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000520 	.word	0x20000520
 8005f44:	080068c4 	.word	0x080068c4

08005f48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	6039      	str	r1, [r7, #0]
 8005f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	221a      	movs	r2, #26
 8005f58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f5a:	f000 f843 	bl	8005fe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f5e:	4b02      	ldr	r3, [pc, #8]	; (8005f68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000180 	.word	0x20000180

08005f6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	4907      	ldr	r1, [pc, #28]	; (8005fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f82:	4808      	ldr	r0, [pc, #32]	; (8005fa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f84:	f7ff fdd6 	bl	8005b34 <USBD_GetString>
 8005f88:	e004      	b.n	8005f94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4904      	ldr	r1, [pc, #16]	; (8005fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f8e:	4805      	ldr	r0, [pc, #20]	; (8005fa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f90:	f7ff fdd0 	bl	8005b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f94:	4b02      	ldr	r3, [pc, #8]	; (8005fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000520 	.word	0x20000520
 8005fa4:	080068d8 	.word	0x080068d8

08005fa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4907      	ldr	r1, [pc, #28]	; (8005fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fbe:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fc0:	f7ff fdb8 	bl	8005b34 <USBD_GetString>
 8005fc4:	e004      	b.n	8005fd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	4904      	ldr	r1, [pc, #16]	; (8005fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fcc:	f7ff fdb2 	bl	8005b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fd0:	4b02      	ldr	r3, [pc, #8]	; (8005fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000520 	.word	0x20000520
 8005fe0:	080068ec 	.word	0x080068ec

08005fe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <Get_SerialNum+0x44>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ff0:	4b0e      	ldr	r3, [pc, #56]	; (800602c <Get_SerialNum+0x48>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <Get_SerialNum+0x4c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800600a:	2208      	movs	r2, #8
 800600c:	4909      	ldr	r1, [pc, #36]	; (8006034 <Get_SerialNum+0x50>)
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f814 	bl	800603c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006014:	2204      	movs	r2, #4
 8006016:	4908      	ldr	r1, [pc, #32]	; (8006038 <Get_SerialNum+0x54>)
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f80f 	bl	800603c <IntToUnicode>
  }
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	1fff7a10 	.word	0x1fff7a10
 800602c:	1fff7a14 	.word	0x1fff7a14
 8006030:	1fff7a18 	.word	0x1fff7a18
 8006034:	20000182 	.word	0x20000182
 8006038:	20000192 	.word	0x20000192

0800603c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
 8006052:	e027      	b.n	80060a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	0f1b      	lsrs	r3, r3, #28
 8006058:	2b09      	cmp	r3, #9
 800605a:	d80b      	bhi.n	8006074 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	0f1b      	lsrs	r3, r3, #28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4619      	mov	r1, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	440b      	add	r3, r1
 800606c:	3230      	adds	r2, #48	; 0x30
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e00a      	b.n	800608a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0f1b      	lsrs	r3, r3, #28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4619      	mov	r1, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	440b      	add	r3, r1
 8006084:	3237      	adds	r2, #55	; 0x37
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	3301      	adds	r3, #1
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4413      	add	r3, r2
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	3301      	adds	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
 80060a4:	7dfa      	ldrb	r2, [r7, #23]
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3d3      	bcc.n	8006054 <IntToUnicode+0x18>
  }
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	60da      	str	r2, [r3, #12]
 80060ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060d8:	d13a      	bne.n	8006150 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fc:	2302      	movs	r3, #2
 80060fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006104:	2303      	movs	r3, #3
 8006106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006108:	230a      	movs	r3, #10
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	4619      	mov	r1, r3
 8006112:	4812      	ldr	r0, [pc, #72]	; (800615c <HAL_PCD_MspInit+0xa4>)
 8006114:	f7fa fe68 	bl	8000de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4a0e      	ldr	r2, [pc, #56]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	6353      	str	r3, [r2, #52]	; 0x34
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800612e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006132:	6453      	str	r3, [r2, #68]	; 0x44
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006140:	2200      	movs	r2, #0
 8006142:	2100      	movs	r1, #0
 8006144:	2043      	movs	r0, #67	; 0x43
 8006146:	f7fa fe18 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800614a:	2043      	movs	r0, #67	; 0x43
 800614c:	f7fa fe31 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006150:	bf00      	nop
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	40020000 	.word	0x40020000

08006160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe fded 	bl	8004d56 <USBD_LL_SetupStage>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fe fe1d 	bl	8004dec <USBD_LL_DataOutStage>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	1a9b      	subs	r3, r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	3348      	adds	r3, #72	; 0x48
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	4619      	mov	r1, r3
 80061e2:	f7fe fe74 	bl	8004ece <USBD_LL_DataInStage>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe ff82 	bl	8005106 <USBD_LL_SOF>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	e008      	b.n	8006236 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d102      	bne.n	8006232 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006232:	f7fa fb2d 	bl	8000890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe ff2a 	bl	800509a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fee3 	bl	8005018 <USBD_LL_Reset>
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe ff25 	bl	80050ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <HAL_PCD_SuspendCallback+0x48>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4a03      	ldr	r2, [pc, #12]	; (80062a4 <HAL_PCD_SuspendCallback+0x48>)
 8006296:	f043 0306 	orr.w	r3, r3, #6
 800629a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe ff14 	bl	80050e4 <USBD_LL_Resume>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe ff3a 	bl	8005154 <USBD_LL_IsoOUTIncomplete>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe ff1b 	bl	800513a <USBD_LL_IsoINIncomplete>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe ff27 	bl	800516e <USBD_LL_DevConnected>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe ff24 	bl	8005184 <USBD_LL_DevDisconnected>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13c      	bne.n	80063ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <USBD_LL_Init+0x94>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <USBD_LL_Init+0x94>)
 8006360:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006364:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <USBD_LL_Init+0x94>)
 8006366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800636a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <USBD_LL_Init+0x94>)
 800636e:	2204      	movs	r2, #4
 8006370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006372:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <USBD_LL_Init+0x94>)
 8006374:	2202      	movs	r2, #2
 8006376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006378:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <USBD_LL_Init+0x94>)
 800637a:	2200      	movs	r2, #0
 800637c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <USBD_LL_Init+0x94>)
 8006380:	2202      	movs	r2, #2
 8006382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <USBD_LL_Init+0x94>)
 8006386:	2200      	movs	r2, #0
 8006388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <USBD_LL_Init+0x94>)
 800638c:	2200      	movs	r2, #0
 800638e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <USBD_LL_Init+0x94>)
 8006392:	2200      	movs	r2, #0
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <USBD_LL_Init+0x94>)
 8006398:	2200      	movs	r2, #0
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <USBD_LL_Init+0x94>)
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063a2:	480d      	ldr	r0, [pc, #52]	; (80063d8 <USBD_LL_Init+0x94>)
 80063a4:	f7fa fed3 	bl	800114e <HAL_PCD_Init>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063ae:	f7fa fa6f 	bl	8000890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063b2:	2180      	movs	r1, #128	; 0x80
 80063b4:	4808      	ldr	r0, [pc, #32]	; (80063d8 <USBD_LL_Init+0x94>)
 80063b6:	f7fc f820 	bl	80023fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063ba:	2240      	movs	r2, #64	; 0x40
 80063bc:	2100      	movs	r1, #0
 80063be:	4806      	ldr	r0, [pc, #24]	; (80063d8 <USBD_LL_Init+0x94>)
 80063c0:	f7fb ffd4 	bl	800236c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	2101      	movs	r1, #1
 80063c8:	4803      	ldr	r0, [pc, #12]	; (80063d8 <USBD_LL_Init+0x94>)
 80063ca:	f7fb ffcf 	bl	800236c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000720 	.word	0x20000720

080063dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa ffc8 	bl	8001388 <HAL_PCD_Start>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f91c 	bl	800663c <USBD_Get_USB_Status>
 8006404:	4603      	mov	r3, r0
 8006406:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006408:	7bbb      	ldrb	r3, [r7, #14]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	4608      	mov	r0, r1
 800641c:	4611      	mov	r1, r2
 800641e:	461a      	mov	r2, r3
 8006420:	4603      	mov	r3, r0
 8006422:	70fb      	strb	r3, [r7, #3]
 8006424:	460b      	mov	r3, r1
 8006426:	70bb      	strb	r3, [r7, #2]
 8006428:	4613      	mov	r3, r2
 800642a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800643a:	78bb      	ldrb	r3, [r7, #2]
 800643c:	883a      	ldrh	r2, [r7, #0]
 800643e:	78f9      	ldrb	r1, [r7, #3]
 8006440:	f7fb fb9d 	bl	8001b7e <HAL_PCD_EP_Open>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8f6 	bl	800663c <USBD_Get_USB_Status>
 8006450:	4603      	mov	r3, r0
 8006452:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006454:	7bbb      	ldrb	r3, [r7, #14]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7fb fbe6 	bl	8001c4e <HAL_PCD_EP_Close>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f8d7 	bl	800663c <USBD_Get_USB_Status>
 800648e:	4603      	mov	r3, r0
 8006490:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006492:	7bbb      	ldrb	r3, [r7, #14]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb fca6 	bl	8001e0c <HAL_PCD_EP_SetStall>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f8b8 	bl	800663c <USBD_Get_USB_Status>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fb fceb 	bl	8001ed4 <HAL_PCD_EP_ClrStall>
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f899 	bl	800663c <USBD_Get_USB_Status>
 800650a:	4603      	mov	r3, r0
 800650c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800650e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800652a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800652c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da0b      	bge.n	800654c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	333e      	adds	r3, #62	; 0x3e
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	e00b      	b.n	8006564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006562:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f7fb fad0 	bl	8001b34 <HAL_PCD_SetAddress>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f84e 	bl	800663c <USBD_Get_USB_Status>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	72fb      	strb	r3, [r7, #11]
 80065be:	4613      	mov	r3, r2
 80065c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80065d0:	893b      	ldrh	r3, [r7, #8]
 80065d2:	7af9      	ldrb	r1, [r7, #11]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f7fb fbcf 	bl	8001d78 <HAL_PCD_EP_Transmit>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f82b 	bl	800663c <USBD_Get_USB_Status>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	461a      	mov	r2, r3
 8006600:	460b      	mov	r3, r1
 8006602:	72fb      	strb	r3, [r7, #11]
 8006604:	4613      	mov	r3, r2
 8006606:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006616:	893b      	ldrh	r3, [r7, #8]
 8006618:	7af9      	ldrb	r1, [r7, #11]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	f7fb fb61 	bl	8001ce2 <HAL_PCD_EP_Receive>
 8006620:	4603      	mov	r3, r0
 8006622:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f808 	bl	800663c <USBD_Get_USB_Status>
 800662c:	4603      	mov	r3, r0
 800662e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006630:	7dbb      	ldrb	r3, [r7, #22]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d817      	bhi.n	8006680 <USBD_Get_USB_Status+0x44>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <USBD_Get_USB_Status+0x1c>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006669 	.word	0x08006669
 800665c:	0800666f 	.word	0x0800666f
 8006660:	08006675 	.word	0x08006675
 8006664:	0800667b 	.word	0x0800667b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]
    break;
 800666c:	e00b      	b.n	8006686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800666e:	2302      	movs	r3, #2
 8006670:	73fb      	strb	r3, [r7, #15]
    break;
 8006672:	e008      	b.n	8006686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
    break;
 8006678:	e005      	b.n	8006686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800667a:	2302      	movs	r3, #2
 800667c:	73fb      	strb	r3, [r7, #15]
    break;
 800667e:	e002      	b.n	8006686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006680:	2302      	movs	r3, #2
 8006682:	73fb      	strb	r3, [r7, #15]
    break;
 8006684:	bf00      	nop
  }
  return usb_status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <__errno>:
 8006694:	4b01      	ldr	r3, [pc, #4]	; (800669c <__errno+0x8>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000019c 	.word	0x2000019c

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4e0d      	ldr	r6, [pc, #52]	; (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	; (80066dc <__libc_init_array+0x3c>)
 80066a6:	1ba4      	subs	r4, r4, r6
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2500      	movs	r5, #0
 80066ac:	42a5      	cmp	r5, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4e0b      	ldr	r6, [pc, #44]	; (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	; (80066e4 <__libc_init_array+0x44>)
 80066b4:	f000 f8ea 	bl	800688c <_init>
 80066b8:	1ba4      	subs	r4, r4, r6
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2500      	movs	r5, #0
 80066be:	42a5      	cmp	r5, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066c8:	4798      	blx	r3
 80066ca:	3501      	adds	r5, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066d2:	4798      	blx	r3
 80066d4:	3501      	adds	r5, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	0800691c 	.word	0x0800691c
 80066dc:	0800691c 	.word	0x0800691c
 80066e0:	0800691c 	.word	0x0800691c
 80066e4:	08006920 	.word	0x08006920

080066e8 <malloc>:
 80066e8:	4b02      	ldr	r3, [pc, #8]	; (80066f4 <malloc+0xc>)
 80066ea:	4601      	mov	r1, r0
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f000 b861 	b.w	80067b4 <_malloc_r>
 80066f2:	bf00      	nop
 80066f4:	2000019c 	.word	0x2000019c

080066f8 <free>:
 80066f8:	4b02      	ldr	r3, [pc, #8]	; (8006704 <free+0xc>)
 80066fa:	4601      	mov	r1, r0
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	f000 b80b 	b.w	8006718 <_free_r>
 8006702:	bf00      	nop
 8006704:	2000019c 	.word	0x2000019c

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <_free_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	2900      	cmp	r1, #0
 800671e:	d045      	beq.n	80067ac <_free_r+0x94>
 8006720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006724:	1f0c      	subs	r4, r1, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	18e4      	addlt	r4, r4, r3
 800672c:	f000 f8ac 	bl	8006888 <__malloc_lock>
 8006730:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <_free_r+0x98>)
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	4610      	mov	r0, r2
 8006736:	b933      	cbnz	r3, 8006746 <_free_r+0x2e>
 8006738:	6063      	str	r3, [r4, #4]
 800673a:	6014      	str	r4, [r2, #0]
 800673c:	4628      	mov	r0, r5
 800673e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006742:	f000 b8a2 	b.w	800688a <__malloc_unlock>
 8006746:	42a3      	cmp	r3, r4
 8006748:	d90c      	bls.n	8006764 <_free_r+0x4c>
 800674a:	6821      	ldr	r1, [r4, #0]
 800674c:	1862      	adds	r2, r4, r1
 800674e:	4293      	cmp	r3, r2
 8006750:	bf04      	itt	eq
 8006752:	681a      	ldreq	r2, [r3, #0]
 8006754:	685b      	ldreq	r3, [r3, #4]
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	bf04      	itt	eq
 800675a:	1852      	addeq	r2, r2, r1
 800675c:	6022      	streq	r2, [r4, #0]
 800675e:	6004      	str	r4, [r0, #0]
 8006760:	e7ec      	b.n	800673c <_free_r+0x24>
 8006762:	4613      	mov	r3, r2
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	b10a      	cbz	r2, 800676c <_free_r+0x54>
 8006768:	42a2      	cmp	r2, r4
 800676a:	d9fa      	bls.n	8006762 <_free_r+0x4a>
 800676c:	6819      	ldr	r1, [r3, #0]
 800676e:	1858      	adds	r0, r3, r1
 8006770:	42a0      	cmp	r0, r4
 8006772:	d10b      	bne.n	800678c <_free_r+0x74>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	4401      	add	r1, r0
 8006778:	1858      	adds	r0, r3, r1
 800677a:	4282      	cmp	r2, r0
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	d1dd      	bne.n	800673c <_free_r+0x24>
 8006780:	6810      	ldr	r0, [r2, #0]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	4401      	add	r1, r0
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	e7d7      	b.n	800673c <_free_r+0x24>
 800678c:	d902      	bls.n	8006794 <_free_r+0x7c>
 800678e:	230c      	movs	r3, #12
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	e7d3      	b.n	800673c <_free_r+0x24>
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	1821      	adds	r1, r4, r0
 8006798:	428a      	cmp	r2, r1
 800679a:	bf04      	itt	eq
 800679c:	6811      	ldreq	r1, [r2, #0]
 800679e:	6852      	ldreq	r2, [r2, #4]
 80067a0:	6062      	str	r2, [r4, #4]
 80067a2:	bf04      	itt	eq
 80067a4:	1809      	addeq	r1, r1, r0
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	605c      	str	r4, [r3, #4]
 80067aa:	e7c7      	b.n	800673c <_free_r+0x24>
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	20000228 	.word	0x20000228

080067b4 <_malloc_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	1ccd      	adds	r5, r1, #3
 80067b8:	f025 0503 	bic.w	r5, r5, #3
 80067bc:	3508      	adds	r5, #8
 80067be:	2d0c      	cmp	r5, #12
 80067c0:	bf38      	it	cc
 80067c2:	250c      	movcc	r5, #12
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	4606      	mov	r6, r0
 80067c8:	db01      	blt.n	80067ce <_malloc_r+0x1a>
 80067ca:	42a9      	cmp	r1, r5
 80067cc:	d903      	bls.n	80067d6 <_malloc_r+0x22>
 80067ce:	230c      	movs	r3, #12
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	2000      	movs	r0, #0
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	f000 f857 	bl	8006888 <__malloc_lock>
 80067da:	4a21      	ldr	r2, [pc, #132]	; (8006860 <_malloc_r+0xac>)
 80067dc:	6814      	ldr	r4, [r2, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	b991      	cbnz	r1, 8006808 <_malloc_r+0x54>
 80067e2:	4c20      	ldr	r4, [pc, #128]	; (8006864 <_malloc_r+0xb0>)
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	b91b      	cbnz	r3, 80067f0 <_malloc_r+0x3c>
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f83d 	bl	8006868 <_sbrk_r>
 80067ee:	6020      	str	r0, [r4, #0]
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f000 f838 	bl	8006868 <_sbrk_r>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d124      	bne.n	8006846 <_malloc_r+0x92>
 80067fc:	230c      	movs	r3, #12
 80067fe:	6033      	str	r3, [r6, #0]
 8006800:	4630      	mov	r0, r6
 8006802:	f000 f842 	bl	800688a <__malloc_unlock>
 8006806:	e7e4      	b.n	80067d2 <_malloc_r+0x1e>
 8006808:	680b      	ldr	r3, [r1, #0]
 800680a:	1b5b      	subs	r3, r3, r5
 800680c:	d418      	bmi.n	8006840 <_malloc_r+0x8c>
 800680e:	2b0b      	cmp	r3, #11
 8006810:	d90f      	bls.n	8006832 <_malloc_r+0x7e>
 8006812:	600b      	str	r3, [r1, #0]
 8006814:	50cd      	str	r5, [r1, r3]
 8006816:	18cc      	adds	r4, r1, r3
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f836 	bl	800688a <__malloc_unlock>
 800681e:	f104 000b 	add.w	r0, r4, #11
 8006822:	1d23      	adds	r3, r4, #4
 8006824:	f020 0007 	bic.w	r0, r0, #7
 8006828:	1ac3      	subs	r3, r0, r3
 800682a:	d0d3      	beq.n	80067d4 <_malloc_r+0x20>
 800682c:	425a      	negs	r2, r3
 800682e:	50e2      	str	r2, [r4, r3]
 8006830:	e7d0      	b.n	80067d4 <_malloc_r+0x20>
 8006832:	428c      	cmp	r4, r1
 8006834:	684b      	ldr	r3, [r1, #4]
 8006836:	bf16      	itet	ne
 8006838:	6063      	strne	r3, [r4, #4]
 800683a:	6013      	streq	r3, [r2, #0]
 800683c:	460c      	movne	r4, r1
 800683e:	e7eb      	b.n	8006818 <_malloc_r+0x64>
 8006840:	460c      	mov	r4, r1
 8006842:	6849      	ldr	r1, [r1, #4]
 8006844:	e7cc      	b.n	80067e0 <_malloc_r+0x2c>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d005      	beq.n	800685c <_malloc_r+0xa8>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4630      	mov	r0, r6
 8006854:	f000 f808 	bl	8006868 <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d0cf      	beq.n	80067fc <_malloc_r+0x48>
 800685c:	6025      	str	r5, [r4, #0]
 800685e:	e7db      	b.n	8006818 <_malloc_r+0x64>
 8006860:	20000228 	.word	0x20000228
 8006864:	2000022c 	.word	0x2000022c

08006868 <_sbrk_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4c06      	ldr	r4, [pc, #24]	; (8006884 <_sbrk_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4605      	mov	r5, r0
 8006870:	4608      	mov	r0, r1
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	f7fa f8a6 	bl	80009c4 <_sbrk>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_sbrk_r+0x1a>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	b103      	cbz	r3, 8006882 <_sbrk_r+0x1a>
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20000b28 	.word	0x20000b28

08006888 <__malloc_lock>:
 8006888:	4770      	bx	lr

0800688a <__malloc_unlock>:
 800688a:	4770      	bx	lr

0800688c <_init>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr

08006898 <_fini>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	bf00      	nop
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr
