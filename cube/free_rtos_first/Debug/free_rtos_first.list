
free_rtos_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a2c  20000010  0800601c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20004a3c  0800601c  00024a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018356  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c2b  00000000  00000000  00038396  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  0003c268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002fe5  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e880  00000000  00000000  000403b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3c16  00000000  00000000  0004ec35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012284b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  001228c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e0c 	.word	0x08005e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005e0c 	.word	0x08005e0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbe4 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f884 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f916 	bl	800071c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f8ea 	bl	80006c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f002 fa6c 	bl	80029d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem01_UART_Green */
  BinSem01_UART_GreenHandle = osSemaphoreNew(1, 1, &BinSem01_UART_Green_attributes);
 80004f8:	4a25      	ldr	r2, [pc, #148]	; (8000590 <main+0xb0>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	2001      	movs	r0, #1
 80004fe:	f002 fba5 	bl	8002c4c <osSemaphoreNew>
 8000502:	4602      	mov	r2, r0
 8000504:	4b23      	ldr	r3, [pc, #140]	; (8000594 <main+0xb4>)
 8000506:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (1, sizeof(uint16_t), &myQueue01_attributes);
 8000508:	4a23      	ldr	r2, [pc, #140]	; (8000598 <main+0xb8>)
 800050a:	2102      	movs	r1, #2
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fc3b 	bl	8002d88 <osMessageQueueNew>
 8000512:	4602      	mov	r2, r0
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <main+0xbc>)
 8000516:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <main+0xc0>)
 800051a:	2100      	movs	r1, #0
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <main+0xc4>)
 800051e:	f002 fac1 	bl	8002aa4 <osThreadNew>
 8000522:	4602      	mov	r2, r0
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <main+0xc8>)
 8000526:	601a      	str	r2, [r3, #0]

  /* creation of myTask1ms */
  myTask1msHandle = osThreadNew(Task1msHandler, NULL, &myTask1ms_attributes);
 8000528:	4a20      	ldr	r2, [pc, #128]	; (80005ac <main+0xcc>)
 800052a:	2100      	movs	r1, #0
 800052c:	4820      	ldr	r0, [pc, #128]	; (80005b0 <main+0xd0>)
 800052e:	f002 fab9 	bl	8002aa4 <osThreadNew>
 8000532:	4602      	mov	r2, r0
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <main+0xd4>)
 8000536:	601a      	str	r2, [r3, #0]

  /* creation of myTask10ms */
  myTask10msHandle = osThreadNew(Task10msHandler, NULL, &myTask10ms_attributes);
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <main+0xd8>)
 800053a:	2100      	movs	r1, #0
 800053c:	481f      	ldr	r0, [pc, #124]	; (80005bc <main+0xdc>)
 800053e:	f002 fab1 	bl	8002aa4 <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <main+0xe0>)
 8000546:	601a      	str	r2, [r3, #0]

  /* creation of myTask100ms */
  myTask100msHandle = osThreadNew(Task100msHandler, NULL, &myTask100ms_attributes);
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <main+0xe4>)
 800054a:	2100      	movs	r1, #0
 800054c:	481e      	ldr	r0, [pc, #120]	; (80005c8 <main+0xe8>)
 800054e:	f002 faa9 	bl	8002aa4 <osThreadNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <main+0xec>)
 8000556:	601a      	str	r2, [r3, #0]

  /* creation of ButtonCheck */
  ButtonCheckHandle = osThreadNew(ButtonCheckHandler, NULL, &ButtonCheck_attributes);
 8000558:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <main+0xf0>)
 800055a:	2100      	movs	r1, #0
 800055c:	481d      	ldr	r0, [pc, #116]	; (80005d4 <main+0xf4>)
 800055e:	f002 faa1 	bl	8002aa4 <osThreadNew>
 8000562:	4602      	mov	r2, r0
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0xf8>)
 8000566:	601a      	str	r2, [r3, #0]

  /* creation of ButtonLedBlink */
  ButtonLedBlinkHandle = osThreadNew(ButtonLedBlinkHandler, NULL, &ButtonLedBlink_attributes);
 8000568:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <main+0xfc>)
 800056a:	2100      	movs	r1, #0
 800056c:	481c      	ldr	r0, [pc, #112]	; (80005e0 <main+0x100>)
 800056e:	f002 fa99 	bl	8002aa4 <osThreadNew>
 8000572:	4602      	mov	r2, r0
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <main+0x104>)
 8000576:	601a      	str	r2, [r3, #0]

  /* creation of Task_UART */
  Task_UARTHandle = osThreadNew(Task_UART_Handle, NULL, &Task_UART_attributes);
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <main+0x108>)
 800057a:	2100      	movs	r1, #0
 800057c:	481b      	ldr	r0, [pc, #108]	; (80005ec <main+0x10c>)
 800057e:	f002 fa91 	bl	8002aa4 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <main+0x110>)
 8000586:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f002 fa56 	bl	8002a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0xac>
 800058e:	bf00      	nop
 8000590:	08005fd4 	.word	0x08005fd4
 8000594:	200049a8 	.word	0x200049a8
 8000598:	08005fbc 	.word	0x08005fbc
 800059c:	200049b0 	.word	0x200049b0
 80005a0:	08005ec0 	.word	0x08005ec0
 80005a4:	08000819 	.word	0x08000819
 80005a8:	20004940 	.word	0x20004940
 80005ac:	08005ee4 	.word	0x08005ee4
 80005b0:	08000829 	.word	0x08000829
 80005b4:	200049b4 	.word	0x200049b4
 80005b8:	08005f08 	.word	0x08005f08
 80005bc:	08000875 	.word	0x08000875
 80005c0:	200049ac 	.word	0x200049ac
 80005c4:	08005f2c 	.word	0x08005f2c
 80005c8:	080008c1 	.word	0x080008c1
 80005cc:	20004990 	.word	0x20004990
 80005d0:	08005f50 	.word	0x08005f50
 80005d4:	08000921 	.word	0x08000921
 80005d8:	20004984 	.word	0x20004984
 80005dc:	08005f74 	.word	0x08005f74
 80005e0:	08000971 	.word	0x08000971
 80005e4:	20004988 	.word	0x20004988
 80005e8:	08005f98 	.word	0x08005f98
 80005ec:	080009b1 	.word	0x080009b1
 80005f0:	2000498c 	.word	0x2000498c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fbf9 	bl	8005dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000668:	23c0      	movs	r3, #192	; 0xc0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800066c:	2308      	movs	r3, #8
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe23 	bl	80012c4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f9da 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2101      	movs	r1, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f87c 	bl	80017a4 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f9c3 	bl	8000a3c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART3_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART3_UART_Init+0x4c>)
 8000700:	f001 fcb2 	bl	8002068 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f997 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20004944 	.word	0x20004944
 8000718:	40004800 	.word	0x40004800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a32      	ldr	r2, [pc, #200]	; (8000804 <MX_GPIO_Init+0xe8>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b30      	ldr	r3, [pc, #192]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a24      	ldr	r2, [pc, #144]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_GPIO_Init+0xe8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_GPIO_Init+0xe8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <MX_GPIO_Init+0xec>)
 80007aa:	f000 fd57 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0xf0>)
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_GPIO_Init+0xf4>)
 80007c2:	f000 fb99 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c6:	2304      	movs	r3, #4
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_GPIO_Init+0xf8>)
 80007da:	f000 fb8d 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xec>)
 80007f8:	f000 fb7e 	bl	8000ef8 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	10110000 	.word	0x10110000
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400

08000818 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f002 f9e5 	bl	8002bf0 <osDelay>
 8000826:	e7fb      	b.n	8000820 <StartDefaultTask+0x8>

08000828 <Task1msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1msHandler */
void Task1msHandler(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1msHandler */
    TickType_t xLastWakeTime; //xLastWakeTime хранит значение времени, соответствующее моменту, когда задача была разблокирована в предыдущий раз.
    const TickType_t xFrequency = 1 / portTICK_PERIOD_MS; // аргумент задаёт нужный период
 8000830:	2301      	movs	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount(); //xLastWakeTime нуждается в инициализации текущим значением счетчика тиков. Переменная записывается явно только в этот момент, затем обновляется автоматически внутри функции vTaskDelayUntil()
 8000834:	f003 fe56 	bl	80044e4 <xTaskGetTickCount>
 8000838:	4603      	mov	r3, r0
 800083a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  task1msCnt++;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <Task1msHandler+0x44>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <Task1msHandler+0x44>)
 8000844:	6013      	str	r3, [r2, #0]
	  if (task1msCnt == 100)
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <Task1msHandler+0x44>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b64      	cmp	r3, #100	; 0x64
 800084c:	d107      	bne.n	800085e <Task1msHandler+0x36>
	  	  {
		  task1msCnt = 0;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <Task1msHandler+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <Task1msHandler+0x48>)
 800085a:	f000 fd18 	bl	800128e <HAL_GPIO_TogglePin>
	  	  }
	  vTaskDelayUntil(&xLastWakeTime, xFrequency); //функция vTaskDelayUntil() вызывает диспетчер, который переводит задачу в WAIT на период T = xLastWakeTime + xFrequency от момента прошлого пробуждения задачи*/
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	68f9      	ldr	r1, [r7, #12]
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fc81 	bl	800416c <vTaskDelayUntil>
	  task1msCnt++;
 800086a:	e7e7      	b.n	800083c <Task1msHandler+0x14>
 800086c:	2000002c 	.word	0x2000002c
 8000870:	40020c00 	.word	0x40020c00

08000874 <Task10msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10msHandler */
void Task10msHandler(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10msHandler */
	TickType_t xLastWakeTime; //аргумент хранит значение времени, соответствующее моменту, когда задача была разблокирована в предыдущий раз
	const TickType_t xFrequency = 10 / portTICK_PERIOD_MS; // аргумент задаёт нужный период (в данном случае 10 мс)
 800087c:	230a      	movs	r3, #10
 800087e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000880:	f003 fe30 	bl	80044e4 <xTaskGetTickCount>
 8000884:	4603      	mov	r3, r0
 8000886:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	task10msCnt++;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <Task10msHandler+0x44>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <Task10msHandler+0x44>)
 8000890:	6013      	str	r3, [r2, #0]
	if (task10msCnt == 100) //(досчитаем до 1 с)
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <Task10msHandler+0x44>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b64      	cmp	r3, #100	; 0x64
 8000898:	d107      	bne.n	80008aa <Task10msHandler+0x36>
		{
		task10msCnt = 0;
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <Task10msHandler+0x44>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
	 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <Task10msHandler+0x48>)
 80008a6:	f000 fcf2 	bl	800128e <HAL_GPIO_TogglePin>
	 	}
	vTaskDelayUntil(&xLastWakeTime, xFrequency); //функция vTaskDelayUntil() заблокирует задачу до момента времени T = xLastWakeTime + xFrequency*/
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	68f9      	ldr	r1, [r7, #12]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fc5b 	bl	800416c <vTaskDelayUntil>
	task10msCnt++;
 80008b6:	e7e7      	b.n	8000888 <Task10msHandler+0x14>
 80008b8:	20000030 	.word	0x20000030
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <Task100msHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100msHandler */
void Task100msHandler(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100msHandler */
	TickType_t xLastWakeTime; //аргумент хранит значение времени, соответствующее моменту, когда задача была разблокирована в предыдущий раз
	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS; // аргумент задаёт нужный период (в данном случае 50 мс)
 80008c8:	2332      	movs	r3, #50	; 0x32
 80008ca:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80008cc:	f003 fe0a 	bl	80044e4 <xTaskGetTickCount>
 80008d0:	4603      	mov	r3, r0
 80008d2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
		task100msCnt++;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <Task100msHandler+0x54>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <Task100msHandler+0x54>)
 80008dc:	6013      	str	r3, [r2, #0]
	if (task100msCnt == 100) //(досчитаем до 5 с)
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <Task100msHandler+0x54>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b64      	cmp	r3, #100	; 0x64
 80008e4:	d10e      	bne.n	8000904 <Task100msHandler+0x44>
		{
		task100msCnt = 0;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <Task100msHandler+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
	 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <Task100msHandler+0x58>)
 80008f2:	f000 fccc 	bl	800128e <HAL_GPIO_TogglePin>
	 	xSemaphoreGive (BinSem01_UART_GreenHandle); //выдать семафор
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <Task100msHandler+0x5c>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	f002 fd54 	bl	80033ac <xQueueGenericSend>
	 	}
	vTaskDelayUntil(&xLastWakeTime, xFrequency); //функция vTaskDelayUntil() заблокирует задачу до момента времени T = xLastWakeTime + xFrequency*/
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fc2e 	bl	800416c <vTaskDelayUntil>
		task100msCnt++;
 8000910:	e7e0      	b.n	80008d4 <Task100msHandler+0x14>
 8000912:	bf00      	nop
 8000914:	20000034 	.word	0x20000034
 8000918:	40020c00 	.word	0x40020c00
 800091c:	200049a8 	.word	0x200049a8

08000920 <ButtonCheckHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonCheckHandler */
void ButtonCheckHandler(void *argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonCheckHandler */
  /* Infinite loop */
	uint8_t button = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET) // button is pressed?
 800092c:	2101      	movs	r1, #1
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <ButtonCheckHandler+0x48>)
 8000930:	f000 fc7c 	bl	800122c <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d101      	bne.n	800093e <ButtonCheckHandler+0x1e>
			{
			button = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
			}
		if (button)
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00c      	beq.n	800095e <ButtonCheckHandler+0x3e>
			{
			xQueueSend (myQueue01Handle, &button, 0); //xQueueSendToFront() используется для отправки данных в начало очереди.
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <ButtonCheckHandler+0x4c>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	f107 010f 	add.w	r1, r7, #15
 800094c:	2300      	movs	r3, #0
 800094e:	2200      	movs	r2, #0
 8000950:	f002 fd2c 	bl	80033ac <xQueueGenericSend>
			button = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(200 / portTICK_RATE_MS); //вызовом vTaskDelay(), задача помещается в состояние Blocked до истечения периода задержки. Период задержки указывается в 'тиках', можно использовать portTICK_RATE_MS для преобразования в мс
 8000958:	20c8      	movs	r0, #200	; 0xc8
 800095a:	f003 fc81 	bl	8004260 <vTaskDelay>
			}
    osDelay(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f002 f946 	bl	8002bf0 <osDelay>
	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET) // button is pressed?
 8000964:	e7e2      	b.n	800092c <ButtonCheckHandler+0xc>
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000
 800096c:	200049b0 	.word	0x200049b0

08000970 <ButtonLedBlinkHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonLedBlinkHandler */
void ButtonLedBlinkHandler(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonLedBlinkHandler */
  /* Infinite loop */
	uint8_t blink_rate=0; //индикатор включения кнопки
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	xQueueReceive (myQueue01Handle, &blink_rate, 0); //xQueueReceive() используется для приема (чтения) элемента из очереди, при этом элемент удаляется из очереди
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <ButtonLedBlinkHandler+0x38>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f107 010f 	add.w	r1, r7, #15
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fe9e 	bl	80036c8 <xQueueReceive>
	if (blink_rate)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <ButtonLedBlinkHandler+0x30>
		{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <ButtonLedBlinkHandler+0x3c>)
 8000998:	f000 fc79 	bl	800128e <HAL_GPIO_TogglePin>
		blink_rate = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
		}
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f002 f925 	bl	8002bf0 <osDelay>
	xQueueReceive (myQueue01Handle, &blink_rate, 0); //xQueueReceive() используется для приема (чтения) элемента из очереди, при этом элемент удаляется из очереди
 80009a6:	e7e9      	b.n	800097c <ButtonLedBlinkHandler+0xc>
 80009a8:	200049b0 	.word	0x200049b0
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <Task_UART_Handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UART_Handle */
void Task_UART_Handle(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_UART_Handle */
  /* Infinite loop */
  for(;;)
  {
	if( BinSem01_UART_GreenHandle != NULL )
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <Task_UART_Handle+0x58>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0fb      	beq.n	80009b8 <Task_UART_Handle+0x8>
	{
		if( xSemaphoreTake( BinSem01_UART_GreenHandle, (TickType_t) (200 / portTICK_RATE_MS) ) == pdTRUE ) //подождать 200 тиков, пока семафор станет свободным
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <Task_UART_Handle+0x58>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	21c8      	movs	r1, #200	; 0xc8
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 ff5a 	bl	8003880 <xQueueSemaphoreTake>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d1f2      	bne.n	80009b8 <Task_UART_Handle+0x8>
		{
			sprintf (message_UART_tx, "red_led!\r\n");
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <Task_UART_Handle+0x5c>)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <Task_UART_Handle+0x60>)
 80009d6:	cb03      	ldmia	r3!, {r0, r1}
 80009d8:	6010      	str	r0, [r2, #0]
 80009da:	6051      	str	r1, [r2, #4]
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	789b      	ldrb	r3, [r3, #2]
 80009e0:	8111      	strh	r1, [r2, #8]
 80009e2:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit (&huart3, (unsigned char*)message_UART_tx, strlen(message_UART_tx), 0xFFFF);
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <Task_UART_Handle+0x5c>)
 80009e6:	f7ff fbf3 	bl	80001d0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f2:	4906      	ldr	r1, [pc, #24]	; (8000a0c <Task_UART_Handle+0x5c>)
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <Task_UART_Handle+0x64>)
 80009f6:	f001 fb84 	bl	8002102 <HAL_UART_Transmit>
			memset(message_UART_tx, '\0', sizeof(message_UART_tx)); //очищаем буфер передачи
 80009fa:	2214      	movs	r2, #20
 80009fc:	2100      	movs	r1, #0
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <Task_UART_Handle+0x5c>)
 8000a00:	f005 f9fb 	bl	8005dfa <memset>
	if( BinSem01_UART_GreenHandle != NULL )
 8000a04:	e7d8      	b.n	80009b8 <Task_UART_Handle+0x8>
 8000a06:	bf00      	nop
 8000a08:	200049a8 	.word	0x200049a8
 8000a0c:	20004994 	.word	0x20004994
 8000a10:	08005e9c 	.word	0x08005e9c
 8000a14:	20004944 	.word	0x20004944

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 f963 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40000800 	.word	0x40000800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	f06f 0001 	mvn.w	r0, #1
 8000a92:	f000 fa07 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1c:	f000 f9ec 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	201e      	movs	r0, #30
 8000b4a:	f000 f9ab 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b4e:	201e      	movs	r0, #30
 8000b50:	f000 f9c4 	bl	8000edc <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_InitTick+0xa4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f804 	bl	8001b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b80:	f000 ffda 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8000b84:	4603      	mov	r3, r0
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_InitTick+0xa8>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_InitTick+0xac>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_InitTick+0xb0>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_InitTick+0xac>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_InitTick+0xac>)
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_InitTick+0xac>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_InitTick+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_InitTick+0xac>)
 8000bba:	f001 f817 	bl	8001bec <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_InitTick+0xac>)
 8000bc6:	f001 f846 	bl	8001c56 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	200049b8 	.word	0x200049b8
 8000be4:	40000800 	.word	0x40000800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM4_IRQHandler+0x10>)
 8000c22:	f001 f83c 	bl	8001c9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200049b8 	.word	0x200049b8

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SystemInit+0x28>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <SystemInit+0x28>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x28>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x14>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x18>)
 8000c66:	585b      	ldr	r3, [r3, r1]
 8000c68:	5043      	str	r3, [r0, r1]
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0x1c>)
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x20>)
 8000c70:	1842      	adds	r2, r0, r1
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x24>)
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x28>)
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>
 8000c86:	f7ff ffd3 	bl	8000c30 <SystemInit>
 8000c8a:	f005 f887 	bl	8005d9c <__libc_init_array>
 8000c8e:	f7ff fc27 	bl	80004e0 <main>
 8000c92:	4770      	bx	lr
 8000c94:	20020000 	.word	0x20020000
 8000c98:	0800600c 	.word	0x0800600c
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000010 	.word	0x20000010
 8000ca4:	20000010 	.word	0x20000010
 8000ca8:	20004a3c 	.word	0x20004a3c

08000cac <ADC_IRQHandler>:
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f8d8 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff28 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff feb2 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	200049f8 	.word	0x200049f8

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200049f8 	.word	0x200049f8

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d00b      	beq.n	8000f52 <HAL_GPIO_Init+0x5a>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f46:	2b11      	cmp	r3, #17
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b12      	cmp	r3, #18
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0xfc>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b12      	cmp	r3, #18
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <HAL_GPIO_Init+0x308>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5e      	ldr	r2, [pc, #376]	; (8001200 <HAL_GPIO_Init+0x308>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <HAL_GPIO_Init+0x308>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5a      	ldr	r2, [pc, #360]	; (8001204 <HAL_GPIO_Init+0x30c>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x310>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_GPIO_Init+0x314>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x324>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_GPIO_Init+0x328>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4934      	ldr	r1, [pc, #208]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_GPIO_Init+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001162:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_GPIO_Init+0x330>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_GPIO_Init+0x330>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x330>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_GPIO_Init+0x330>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_GPIO_Init+0x330>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_GPIO_Init+0x330>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_GPIO_Init+0x330>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	3724      	adds	r7, #36	; 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40021400 	.word	0x40021400
 8001220:	40021800 	.word	0x40021800
 8001224:	40021c00 	.word	0x40021c00
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e001      	b.n	800124e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	401a      	ands	r2, r3
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d104      	bne.n	80012b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e25b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4ba3      	ldr	r3, [pc, #652]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4ba0      	ldr	r3, [pc, #640]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e236      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a8a      	ldr	r2, [pc, #552]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a87      	ldr	r2, [pc, #540]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcce 	bl	8000d1c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcca 	bl	8000d1c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1fb      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcba 	bl	8000d1c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcb6 	bl	8000d1c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1e7      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1bb      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4952      	ldr	r1, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc6f 	bl	8000d1c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc6b 	bl	8000d1c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e19c      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4940      	ldr	r1, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc4e 	bl	8000d1c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc4a 	bl	8000d1c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e17b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d030      	beq.n	8001510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc2e 	bl	8000d1c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc2a 	bl	8000d1c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e15b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc17 	bl	8000d1c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc13 	bl	8000d1c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e144      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a0 	beq.w	800165e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d121      	bne.n	800159e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbd9 	bl	8000d1c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x2ce>
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
 800157c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fbcc 	bl	8000d1c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0fd      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x4d4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015bc:	4b77      	ldr	r3, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a76      	ldr	r2, [pc, #472]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	4b74      	ldr	r3, [pc, #464]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a73      	ldr	r2, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015d6:	4b71      	ldr	r3, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a70      	ldr	r2, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b6e      	ldr	r3, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a6d      	ldr	r2, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb91 	bl	8000d1c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb8d 	bl	8000d1c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0bc      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x33a>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb7b 	bl	8000d1c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb77 	bl	8000d1c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0a6      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8092 	beq.w	800178c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d05c      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d141      	bne.n	8001700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb4b 	bl	8000d1c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb47 	bl	8000d1c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e078      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
 80016cc:	4933      	ldr	r1, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb20 	bl	8000d1c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb1c 	bl	8000d1c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04d      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x41c>
 80016fe:	e045      	b.n	800178c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb09 	bl	8000d1c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb05 	bl	8000d1c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e036      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x44a>
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e029      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	429a      	cmp	r2, r3
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d115      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000
 800179c:	40023800 	.word	0x40023800
 80017a0:	42470060 	.word	0x42470060

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff fa42 	bl	8000d1c <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff fa3e 	bl	8000d1c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4601      	mov	r1, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	fa21 f303 	lsr.w	r3, r1, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8f2 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	08005fe4 	.word	0x08005fe4
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d008      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80b4 	bne.w	8001b04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800199e:	60bb      	str	r3, [r7, #8]
       break;
 80019a0:	e0b3      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019a4:	60bb      	str	r3, [r7, #8]
      break;
 80019a6:	e0b0      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d04a      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	ea03 0501 	and.w	r5, r3, r1
 80019d4:	ea04 0602 	and.w	r6, r4, r2
 80019d8:	4629      	mov	r1, r5
 80019da:	4632      	mov	r2, r6
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0154      	lsls	r4, r2, #5
 80019e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ea:	014b      	lsls	r3, r1, #5
 80019ec:	4619      	mov	r1, r3
 80019ee:	4622      	mov	r2, r4
 80019f0:	1b49      	subs	r1, r1, r5
 80019f2:	eb62 0206 	sbc.w	r2, r2, r6
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f04f 0400 	mov.w	r4, #0
 80019fe:	0194      	lsls	r4, r2, #6
 8001a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a04:	018b      	lsls	r3, r1, #6
 8001a06:	1a5b      	subs	r3, r3, r1
 8001a08:	eb64 0402 	sbc.w	r4, r4, r2
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	00e2      	lsls	r2, r4, #3
 8001a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a1a:	00d9      	lsls	r1, r3, #3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	195b      	adds	r3, r3, r5
 8001a22:	eb44 0406 	adc.w	r4, r4, r6
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	0262      	lsls	r2, r4, #9
 8001a30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a34:	0259      	lsls	r1, r3, #9
 8001a36:	460b      	mov	r3, r1
 8001a38:	4614      	mov	r4, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	f7fe fbca 	bl	80001e0 <__aeabi_uldivmod>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e049      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	ea03 0501 	and.w	r5, r3, r1
 8001a6a:	ea04 0602 	and.w	r6, r4, r2
 8001a6e:	4629      	mov	r1, r5
 8001a70:	4632      	mov	r2, r6
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f04f 0400 	mov.w	r4, #0
 8001a7a:	0154      	lsls	r4, r2, #5
 8001a7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a80:	014b      	lsls	r3, r1, #5
 8001a82:	4619      	mov	r1, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	1b49      	subs	r1, r1, r5
 8001a88:	eb62 0206 	sbc.w	r2, r2, r6
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	f04f 0400 	mov.w	r4, #0
 8001a94:	0194      	lsls	r4, r2, #6
 8001a96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	1a5b      	subs	r3, r3, r1
 8001a9e:	eb64 0402 	sbc.w	r4, r4, r2
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	00e2      	lsls	r2, r4, #3
 8001aac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ab0:	00d9      	lsls	r1, r3, #3
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	195b      	adds	r3, r3, r5
 8001ab8:	eb44 0406 	adc.w	r4, r4, r6
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	02a2      	lsls	r2, r4, #10
 8001ac6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aca:	0299      	lsls	r1, r3, #10
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4623      	mov	r3, r4
 8001ade:	f7fe fb7f 	bl	80001e0 <__aeabi_uldivmod>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	3301      	adds	r3, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	60bb      	str	r3, [r7, #8]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b06:	60bb      	str	r3, [r7, #8]
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4601      	mov	r1, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08005ff4 	.word	0x08005ff4

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b64:	f7ff ffdc 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b68:	4601      	mov	r1, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0b5b      	lsrs	r3, r3, #13
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08005ff4 	.word	0x08005ff4

08001b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	220f      	movs	r2, #15
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCC_GetClockConfig+0x60>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01d      	b.n	8001c3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f815 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 f968 	bl	8001f00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d122      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0202 	mvn.w	r2, #2
 8001cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8ee 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001ce6:	e005      	b.n	8001cf4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8e0 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8f1 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d122      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d11b      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0204 	mvn.w	r2, #4
 8001d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8c4 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d3a:	e005      	b.n	8001d48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8b6 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8c7 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d122      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11b      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0208 	mvn.w	r2, #8
 8001d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f89a 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d8e:	e005      	b.n	8001d9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f88c 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f89d 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d122      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d11b      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0210 	mvn.w	r2, #16
 8001dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f870 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001de2:	e005      	b.n	8001df0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f862 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f873 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10e      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0201 	mvn.w	r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fdfb 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d10e      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f903 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d10e      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f838 	bl	8001eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d10e      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d107      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0220 	mvn.w	r2, #32
 8001e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8cd 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d027      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d023      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d017      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <TIM_Base_SetConfig+0x128>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <TIM_Base_SetConfig+0x12c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <TIM_Base_SetConfig+0x130>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <TIM_Base_SetConfig+0x134>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <TIM_Base_SetConfig+0x138>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <TIM_Base_SetConfig+0x13c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0xf8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d103      	bne.n	8002000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	40001800 	.word	0x40001800
 8002038:	40001c00 	.word	0x40001c00
 800203c:	40002000 	.word	0x40002000

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e03f      	b.n	80020fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fd08 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f90b 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af02      	add	r7, sp, #8
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 8083 	bne.w	800222a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_UART_Transmit+0x2e>
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e07b      	b.n	800222c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_UART_Transmit+0x40>
 800213e:	2302      	movs	r3, #2
 8002140:	e074      	b.n	800222c <HAL_UART_Transmit+0x12a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2221      	movs	r2, #33	; 0x21
 8002154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002158:	f7fe fde0 	bl	8000d1c <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002172:	e042      	b.n	80021fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d122      	bne.n	80021d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f84c 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e042      	b.n	800222c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3302      	adds	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	e017      	b.n	80021fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	e013      	b.n	80021fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f829 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e01f      	b.n	800222c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1b7      	bne.n	8002174 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f810 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e006      	b.n	800222c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002244:	e02c      	b.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d028      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x30>
 8002254:	f7fe fd62 	bl	8000d1c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d21d      	bcs.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002272:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e00f      	b.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d0c3      	beq.n	8002246 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800230a:	f023 030c 	bic.w	r3, r3, #12
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	430b      	orrs	r3, r1
 8002316:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002336:	f040 818b 	bne.w	8002650 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4ac1      	ldr	r2, [pc, #772]	; (8002644 <UART_SetConfig+0x37c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d005      	beq.n	8002350 <UART_SetConfig+0x88>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4abf      	ldr	r2, [pc, #764]	; (8002648 <UART_SetConfig+0x380>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f040 80bd 	bne.w	80024ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002350:	f7ff fc06 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8002354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	461d      	mov	r5, r3
 800235a:	f04f 0600 	mov.w	r6, #0
 800235e:	46a8      	mov	r8, r5
 8002360:	46b1      	mov	r9, r6
 8002362:	eb18 0308 	adds.w	r3, r8, r8
 8002366:	eb49 0409 	adc.w	r4, r9, r9
 800236a:	4698      	mov	r8, r3
 800236c:	46a1      	mov	r9, r4
 800236e:	eb18 0805 	adds.w	r8, r8, r5
 8002372:	eb49 0906 	adc.w	r9, r9, r6
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800238a:	4688      	mov	r8, r1
 800238c:	4691      	mov	r9, r2
 800238e:	eb18 0005 	adds.w	r0, r8, r5
 8002392:	eb49 0106 	adc.w	r1, r9, r6
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	461d      	mov	r5, r3
 800239c:	f04f 0600 	mov.w	r6, #0
 80023a0:	196b      	adds	r3, r5, r5
 80023a2:	eb46 0406 	adc.w	r4, r6, r6
 80023a6:	461a      	mov	r2, r3
 80023a8:	4623      	mov	r3, r4
 80023aa:	f7fd ff19 	bl	80001e0 <__aeabi_uldivmod>
 80023ae:	4603      	mov	r3, r0
 80023b0:	460c      	mov	r4, r1
 80023b2:	461a      	mov	r2, r3
 80023b4:	4ba5      	ldr	r3, [pc, #660]	; (800264c <UART_SetConfig+0x384>)
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	461d      	mov	r5, r3
 80023c4:	f04f 0600 	mov.w	r6, #0
 80023c8:	46a9      	mov	r9, r5
 80023ca:	46b2      	mov	sl, r6
 80023cc:	eb19 0309 	adds.w	r3, r9, r9
 80023d0:	eb4a 040a 	adc.w	r4, sl, sl
 80023d4:	4699      	mov	r9, r3
 80023d6:	46a2      	mov	sl, r4
 80023d8:	eb19 0905 	adds.w	r9, r9, r5
 80023dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f4:	4689      	mov	r9, r1
 80023f6:	4692      	mov	sl, r2
 80023f8:	eb19 0005 	adds.w	r0, r9, r5
 80023fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	461d      	mov	r5, r3
 8002406:	f04f 0600 	mov.w	r6, #0
 800240a:	196b      	adds	r3, r5, r5
 800240c:	eb46 0406 	adc.w	r4, r6, r6
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	f7fd fee4 	bl	80001e0 <__aeabi_uldivmod>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	461a      	mov	r2, r3
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <UART_SetConfig+0x384>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	; 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a86      	ldr	r2, [pc, #536]	; (800264c <UART_SetConfig+0x384>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002440:	4498      	add	r8, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	461d      	mov	r5, r3
 8002446:	f04f 0600 	mov.w	r6, #0
 800244a:	46a9      	mov	r9, r5
 800244c:	46b2      	mov	sl, r6
 800244e:	eb19 0309 	adds.w	r3, r9, r9
 8002452:	eb4a 040a 	adc.w	r4, sl, sl
 8002456:	4699      	mov	r9, r3
 8002458:	46a2      	mov	sl, r4
 800245a:	eb19 0905 	adds.w	r9, r9, r5
 800245e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002476:	4689      	mov	r9, r1
 8002478:	4692      	mov	sl, r2
 800247a:	eb19 0005 	adds.w	r0, r9, r5
 800247e:	eb4a 0106 	adc.w	r1, sl, r6
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	461d      	mov	r5, r3
 8002488:	f04f 0600 	mov.w	r6, #0
 800248c:	196b      	adds	r3, r5, r5
 800248e:	eb46 0406 	adc.w	r4, r6, r6
 8002492:	461a      	mov	r2, r3
 8002494:	4623      	mov	r3, r4
 8002496:	f7fd fea3 	bl	80001e0 <__aeabi_uldivmod>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	461a      	mov	r2, r3
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <UART_SetConfig+0x384>)
 80024a2:	fba3 1302 	umull	r1, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2164      	movs	r1, #100	; 0x64
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	3332      	adds	r3, #50	; 0x32
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <UART_SetConfig+0x384>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4442      	add	r2, r8
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e26f      	b.n	80029aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ca:	f7ff fb35 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 80024ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	461d      	mov	r5, r3
 80024d4:	f04f 0600 	mov.w	r6, #0
 80024d8:	46a8      	mov	r8, r5
 80024da:	46b1      	mov	r9, r6
 80024dc:	eb18 0308 	adds.w	r3, r8, r8
 80024e0:	eb49 0409 	adc.w	r4, r9, r9
 80024e4:	4698      	mov	r8, r3
 80024e6:	46a1      	mov	r9, r4
 80024e8:	eb18 0805 	adds.w	r8, r8, r5
 80024ec:	eb49 0906 	adc.w	r9, r9, r6
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002504:	4688      	mov	r8, r1
 8002506:	4691      	mov	r9, r2
 8002508:	eb18 0005 	adds.w	r0, r8, r5
 800250c:	eb49 0106 	adc.w	r1, r9, r6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	461d      	mov	r5, r3
 8002516:	f04f 0600 	mov.w	r6, #0
 800251a:	196b      	adds	r3, r5, r5
 800251c:	eb46 0406 	adc.w	r4, r6, r6
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	f7fd fe5c 	bl	80001e0 <__aeabi_uldivmod>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	461a      	mov	r2, r3
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <UART_SetConfig+0x384>)
 8002530:	fba3 2302 	umull	r2, r3, r3, r2
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	461d      	mov	r5, r3
 800253e:	f04f 0600 	mov.w	r6, #0
 8002542:	46a9      	mov	r9, r5
 8002544:	46b2      	mov	sl, r6
 8002546:	eb19 0309 	adds.w	r3, r9, r9
 800254a:	eb4a 040a 	adc.w	r4, sl, sl
 800254e:	4699      	mov	r9, r3
 8002550:	46a2      	mov	sl, r4
 8002552:	eb19 0905 	adds.w	r9, r9, r5
 8002556:	eb4a 0a06 	adc.w	sl, sl, r6
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800256a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800256e:	4689      	mov	r9, r1
 8002570:	4692      	mov	sl, r2
 8002572:	eb19 0005 	adds.w	r0, r9, r5
 8002576:	eb4a 0106 	adc.w	r1, sl, r6
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	461d      	mov	r5, r3
 8002580:	f04f 0600 	mov.w	r6, #0
 8002584:	196b      	adds	r3, r5, r5
 8002586:	eb46 0406 	adc.w	r4, r6, r6
 800258a:	461a      	mov	r2, r3
 800258c:	4623      	mov	r3, r4
 800258e:	f7fd fe27 	bl	80001e0 <__aeabi_uldivmod>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <UART_SetConfig+0x384>)
 800259a:	fba3 1302 	umull	r1, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2164      	movs	r1, #100	; 0x64
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	3332      	adds	r3, #50	; 0x32
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <UART_SetConfig+0x384>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025ba:	4498      	add	r8, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	461d      	mov	r5, r3
 80025c0:	f04f 0600 	mov.w	r6, #0
 80025c4:	46a9      	mov	r9, r5
 80025c6:	46b2      	mov	sl, r6
 80025c8:	eb19 0309 	adds.w	r3, r9, r9
 80025cc:	eb4a 040a 	adc.w	r4, sl, sl
 80025d0:	4699      	mov	r9, r3
 80025d2:	46a2      	mov	sl, r4
 80025d4:	eb19 0905 	adds.w	r9, r9, r5
 80025d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f0:	4689      	mov	r9, r1
 80025f2:	4692      	mov	sl, r2
 80025f4:	eb19 0005 	adds.w	r0, r9, r5
 80025f8:	eb4a 0106 	adc.w	r1, sl, r6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	461d      	mov	r5, r3
 8002602:	f04f 0600 	mov.w	r6, #0
 8002606:	196b      	adds	r3, r5, r5
 8002608:	eb46 0406 	adc.w	r4, r6, r6
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fd fde6 	bl	80001e0 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	461a      	mov	r2, r3
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <UART_SetConfig+0x384>)
 800261c:	fba3 1302 	umull	r1, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <UART_SetConfig+0x384>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 0207 	and.w	r2, r3, #7
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4442      	add	r2, r8
 8002640:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002642:	e1b2      	b.n	80029aa <UART_SetConfig+0x6e2>
 8002644:	40011000 	.word	0x40011000
 8002648:	40011400 	.word	0x40011400
 800264c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4ad7      	ldr	r2, [pc, #860]	; (80029b4 <UART_SetConfig+0x6ec>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d005      	beq.n	8002666 <UART_SetConfig+0x39e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4ad6      	ldr	r2, [pc, #856]	; (80029b8 <UART_SetConfig+0x6f0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	f040 80d1 	bne.w	8002808 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002666:	f7ff fa7b 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 800266a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	469a      	mov	sl, r3
 8002670:	f04f 0b00 	mov.w	fp, #0
 8002674:	46d0      	mov	r8, sl
 8002676:	46d9      	mov	r9, fp
 8002678:	eb18 0308 	adds.w	r3, r8, r8
 800267c:	eb49 0409 	adc.w	r4, r9, r9
 8002680:	4698      	mov	r8, r3
 8002682:	46a1      	mov	r9, r4
 8002684:	eb18 080a 	adds.w	r8, r8, sl
 8002688:	eb49 090b 	adc.w	r9, r9, fp
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800269c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026a0:	4688      	mov	r8, r1
 80026a2:	4691      	mov	r9, r2
 80026a4:	eb1a 0508 	adds.w	r5, sl, r8
 80026a8:	eb4b 0609 	adc.w	r6, fp, r9
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f04f 0400 	mov.w	r4, #0
 80026be:	0094      	lsls	r4, r2, #2
 80026c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c4:	008b      	lsls	r3, r1, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	4623      	mov	r3, r4
 80026ca:	4628      	mov	r0, r5
 80026cc:	4631      	mov	r1, r6
 80026ce:	f7fd fd87 	bl	80001e0 <__aeabi_uldivmod>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	461a      	mov	r2, r3
 80026d8:	4bb8      	ldr	r3, [pc, #736]	; (80029bc <UART_SetConfig+0x6f4>)
 80026da:	fba3 2302 	umull	r2, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	469b      	mov	fp, r3
 80026e8:	f04f 0c00 	mov.w	ip, #0
 80026ec:	46d9      	mov	r9, fp
 80026ee:	46e2      	mov	sl, ip
 80026f0:	eb19 0309 	adds.w	r3, r9, r9
 80026f4:	eb4a 040a 	adc.w	r4, sl, sl
 80026f8:	4699      	mov	r9, r3
 80026fa:	46a2      	mov	sl, r4
 80026fc:	eb19 090b 	adds.w	r9, r9, fp
 8002700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002718:	4689      	mov	r9, r1
 800271a:	4692      	mov	sl, r2
 800271c:	eb1b 0509 	adds.w	r5, fp, r9
 8002720:	eb4c 060a 	adc.w	r6, ip, sl
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	0094      	lsls	r4, r2, #2
 8002738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800273c:	008b      	lsls	r3, r1, #2
 800273e:	461a      	mov	r2, r3
 8002740:	4623      	mov	r3, r4
 8002742:	4628      	mov	r0, r5
 8002744:	4631      	mov	r1, r6
 8002746:	f7fd fd4b 	bl	80001e0 <__aeabi_uldivmod>
 800274a:	4603      	mov	r3, r0
 800274c:	460c      	mov	r4, r1
 800274e:	461a      	mov	r2, r3
 8002750:	4b9a      	ldr	r3, [pc, #616]	; (80029bc <UART_SetConfig+0x6f4>)
 8002752:	fba3 1302 	umull	r1, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2164      	movs	r1, #100	; 0x64
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	3332      	adds	r3, #50	; 0x32
 8002764:	4a95      	ldr	r2, [pc, #596]	; (80029bc <UART_SetConfig+0x6f4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	4498      	add	r8, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	469b      	mov	fp, r3
 8002776:	f04f 0c00 	mov.w	ip, #0
 800277a:	46d9      	mov	r9, fp
 800277c:	46e2      	mov	sl, ip
 800277e:	eb19 0309 	adds.w	r3, r9, r9
 8002782:	eb4a 040a 	adc.w	r4, sl, sl
 8002786:	4699      	mov	r9, r3
 8002788:	46a2      	mov	sl, r4
 800278a:	eb19 090b 	adds.w	r9, r9, fp
 800278e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800279e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a6:	4689      	mov	r9, r1
 80027a8:	4692      	mov	sl, r2
 80027aa:	eb1b 0509 	adds.w	r5, fp, r9
 80027ae:	eb4c 060a 	adc.w	r6, ip, sl
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	0094      	lsls	r4, r2, #2
 80027c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ca:	008b      	lsls	r3, r1, #2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	4628      	mov	r0, r5
 80027d2:	4631      	mov	r1, r6
 80027d4:	f7fd fd04 	bl	80001e0 <__aeabi_uldivmod>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	461a      	mov	r2, r3
 80027de:	4b77      	ldr	r3, [pc, #476]	; (80029bc <UART_SetConfig+0x6f4>)
 80027e0:	fba3 1302 	umull	r1, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2164      	movs	r1, #100	; 0x64
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <UART_SetConfig+0x6f4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4442      	add	r2, r8
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e0d0      	b.n	80029aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002808:	f7ff f996 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 800280c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	469a      	mov	sl, r3
 8002812:	f04f 0b00 	mov.w	fp, #0
 8002816:	46d0      	mov	r8, sl
 8002818:	46d9      	mov	r9, fp
 800281a:	eb18 0308 	adds.w	r3, r8, r8
 800281e:	eb49 0409 	adc.w	r4, r9, r9
 8002822:	4698      	mov	r8, r3
 8002824:	46a1      	mov	r9, r4
 8002826:	eb18 080a 	adds.w	r8, r8, sl
 800282a:	eb49 090b 	adc.w	r9, r9, fp
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800283a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800283e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002842:	4688      	mov	r8, r1
 8002844:	4691      	mov	r9, r2
 8002846:	eb1a 0508 	adds.w	r5, sl, r8
 800284a:	eb4b 0609 	adc.w	r6, fp, r9
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f04f 0400 	mov.w	r4, #0
 8002860:	0094      	lsls	r4, r2, #2
 8002862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002866:	008b      	lsls	r3, r1, #2
 8002868:	461a      	mov	r2, r3
 800286a:	4623      	mov	r3, r4
 800286c:	4628      	mov	r0, r5
 800286e:	4631      	mov	r1, r6
 8002870:	f7fd fcb6 	bl	80001e0 <__aeabi_uldivmod>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4b50      	ldr	r3, [pc, #320]	; (80029bc <UART_SetConfig+0x6f4>)
 800287c:	fba3 2302 	umull	r2, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	469b      	mov	fp, r3
 800288a:	f04f 0c00 	mov.w	ip, #0
 800288e:	46d9      	mov	r9, fp
 8002890:	46e2      	mov	sl, ip
 8002892:	eb19 0309 	adds.w	r3, r9, r9
 8002896:	eb4a 040a 	adc.w	r4, sl, sl
 800289a:	4699      	mov	r9, r3
 800289c:	46a2      	mov	sl, r4
 800289e:	eb19 090b 	adds.w	r9, r9, fp
 80028a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ba:	4689      	mov	r9, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	eb1b 0509 	adds.w	r5, fp, r9
 80028c2:	eb4c 060a 	adc.w	r6, ip, sl
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	0094      	lsls	r4, r2, #2
 80028da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028de:	008b      	lsls	r3, r1, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	4628      	mov	r0, r5
 80028e6:	4631      	mov	r1, r6
 80028e8:	f7fd fc7a 	bl	80001e0 <__aeabi_uldivmod>
 80028ec:	4603      	mov	r3, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <UART_SetConfig+0x6f4>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	; 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <UART_SetConfig+0x6f4>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002912:	4498      	add	r8, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	469b      	mov	fp, r3
 8002918:	f04f 0c00 	mov.w	ip, #0
 800291c:	46d9      	mov	r9, fp
 800291e:	46e2      	mov	sl, ip
 8002920:	eb19 0309 	adds.w	r3, r9, r9
 8002924:	eb4a 040a 	adc.w	r4, sl, sl
 8002928:	4699      	mov	r9, r3
 800292a:	46a2      	mov	sl, r4
 800292c:	eb19 090b 	adds.w	r9, r9, fp
 8002930:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002948:	4689      	mov	r9, r1
 800294a:	4692      	mov	sl, r2
 800294c:	eb1b 0509 	adds.w	r5, fp, r9
 8002950:	eb4c 060a 	adc.w	r6, ip, sl
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	0094      	lsls	r4, r2, #2
 8002968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800296c:	008b      	lsls	r3, r1, #2
 800296e:	461a      	mov	r2, r3
 8002970:	4623      	mov	r3, r4
 8002972:	4628      	mov	r0, r5
 8002974:	4631      	mov	r1, r6
 8002976:	f7fd fc33 	bl	80001e0 <__aeabi_uldivmod>
 800297a:	4603      	mov	r3, r0
 800297c:	460c      	mov	r4, r1
 800297e:	461a      	mov	r2, r3
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <UART_SetConfig+0x6f4>)
 8002982:	fba3 1302 	umull	r1, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	3332      	adds	r3, #50	; 0x32
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <UART_SetConfig+0x6f4>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4442      	add	r2, r8
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	e7ff      	b.n	80029aa <UART_SetConfig+0x6e2>
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40011400 	.word	0x40011400
 80029bc:	51eb851f 	.word	0x51eb851f

080029c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d6:	f3ef 8305 	mrs	r3, IPSR
 80029da:	60bb      	str	r3, [r7, #8]
  return(result);
 80029dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e2:	f3ef 8310 	mrs	r3, PRIMASK
 80029e6:	607b      	str	r3, [r7, #4]
  return(result);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029ee:	f3ef 8311 	mrs	r3, BASEPRI
 80029f2:	603b      	str	r3, [r7, #0]
  return(result);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <osKernelInitialize+0x3a>
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <osKernelInitialize+0x64>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d103      	bne.n	8002a0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002a02:	f06f 0305 	mvn.w	r3, #5
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e00c      	b.n	8002a24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <osKernelInitialize+0x64>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <osKernelInitialize+0x64>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e002      	b.n	8002a24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000038 	.word	0x20000038

08002a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3e:	f3ef 8305 	mrs	r3, IPSR
 8002a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a56:	f3ef 8311 	mrs	r3, BASEPRI
 8002a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <osKernelStart+0x3a>
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <osKernelStart+0x68>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d103      	bne.n	8002a72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a6a:	f06f 0305 	mvn.w	r3, #5
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e010      	b.n	8002a94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <osKernelStart+0x68>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d109      	bne.n	8002a8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a7a:	f7ff ffa1 	bl	80029c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <osKernelStart+0x68>)
 8002a80:	2202      	movs	r2, #2
 8002a82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a84:	f001 fc20 	bl	80042c8 <vTaskStartScheduler>
      stat = osOK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e002      	b.n	8002a94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000038 	.word	0x20000038

08002aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b090      	sub	sp, #64	; 0x40
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab4:	f3ef 8305 	mrs	r3, IPSR
 8002ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 808f 	bne.w	8002be0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ace:	f3ef 8311 	mrs	r3, BASEPRI
 8002ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <osThreadNew+0x3e>
 8002ada:	4b44      	ldr	r3, [pc, #272]	; (8002bec <osThreadNew+0x148>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d07e      	beq.n	8002be0 <osThreadNew+0x13c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d07b      	beq.n	8002be0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002aec:	2318      	movs	r3, #24
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d045      	beq.n	8002b8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <osThreadNew+0x6a>
        name = attr->name;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <osThreadNew+0x90>
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	2b38      	cmp	r3, #56	; 0x38
 8002b26:	d805      	bhi.n	8002b34 <osThreadNew+0x90>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <osThreadNew+0x94>
        return (NULL);
 8002b34:	2300      	movs	r3, #0
 8002b36:	e054      	b.n	8002be2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <osThreadNew+0xca>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b5b      	cmp	r3, #91	; 0x5b
 8002b56:	d90a      	bls.n	8002b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <osThreadNew+0xca>
        mem = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	e010      	b.n	8002b90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <osThreadNew+0xec>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <osThreadNew+0xec>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d104      	bne.n	8002b90 <osThreadNew+0xec>
          mem = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	e001      	b.n	8002b90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d110      	bne.n	8002bb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b9e:	9202      	str	r2, [sp, #8]
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f001 f93f 	bl	8003e30 <xTaskCreateStatic>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e013      	b.n	8002be0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d110      	bne.n	8002be0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f107 0310 	add.w	r3, r7, #16
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f001 f987 	bl	8003ee4 <xTaskCreate>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <osThreadNew+0x13c>
          hTask = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002be0:	693b      	ldr	r3, [r7, #16]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3730      	adds	r7, #48	; 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000038 	.word	0x20000038

08002bf0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf8:	f3ef 8305 	mrs	r3, IPSR
 8002bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8002bfe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10f      	bne.n	8002c24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c04:	f3ef 8310 	mrs	r3, PRIMASK
 8002c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c10:	f3ef 8311 	mrs	r3, BASEPRI
 8002c14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <osDelay+0x3c>
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <osDelay+0x58>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d103      	bne.n	8002c2c <osDelay+0x3c>
    stat = osErrorISR;
 8002c24:	f06f 0305 	mvn.w	r3, #5
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e007      	b.n	8002c3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f001 fb12 	bl	8004260 <vTaskDelay>
    }
  }

  return (stat);
 8002c3c:	697b      	ldr	r3, [r7, #20]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000038 	.word	0x20000038

08002c4c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	; 0x30
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c5c:	f3ef 8305 	mrs	r3, IPSR
 8002c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c62:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 8087 	bne.w	8002d78 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6e:	617b      	str	r3, [r7, #20]
  return(result);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c76:	f3ef 8311 	mrs	r3, BASEPRI
 8002c7a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <osSemaphoreNew+0x3e>
 8002c82:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <osSemaphoreNew+0x138>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d076      	beq.n	8002d78 <osSemaphoreNew+0x12c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d073      	beq.n	8002d78 <osSemaphoreNew+0x12c>
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d86f      	bhi.n	8002d78 <osSemaphoreNew+0x12c>
    mem = -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <osSemaphoreNew+0x6e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8002cb2:	d902      	bls.n	8002cba <osSemaphoreNew+0x6e>
        mem = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	e00c      	b.n	8002cd4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <osSemaphoreNew+0x88>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <osSemaphoreNew+0x88>
          mem = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
 8002cce:	e001      	b.n	8002cd4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d04d      	beq.n	8002d78 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d129      	bne.n	8002d36 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10b      	bne.n	8002d00 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	2303      	movs	r3, #3
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f000 fa1c 	bl	8003134 <xQueueGenericCreateStatic>
 8002cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8002cfe:	e005      	b.n	8002d0c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002d00:	2203      	movs	r2, #3
 8002d02:	2100      	movs	r1, #0
 8002d04:	2001      	movs	r0, #1
 8002d06:	f000 fa88 	bl	800321a <xQueueGenericCreate>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d022      	beq.n	8002d58 <osSemaphoreNew+0x10c>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01f      	beq.n	8002d58 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d20:	f000 fb44 	bl	80033ac <xQueueGenericSend>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d016      	beq.n	8002d58 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8002d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d2c:	f000 feb0 	bl	8003a90 <vQueueDelete>
            hSemaphore = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e010      	b.n	8002d58 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 faca 	bl	80032de <xQueueCreateCountingSemaphoreStatic>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8002d4c:	e004      	b.n	8002d58 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 faf9 	bl	8003348 <xQueueCreateCountingSemaphore>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <osSemaphoreNew+0x120>
          name = attr->name;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e001      	b.n	8002d70 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002d70:	69f9      	ldr	r1, [r7, #28]
 8002d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d74:	f000 ffd6 	bl	8003d24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000038 	.word	0x20000038

08002d88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d98:	f3ef 8305 	mrs	r3, IPSR
 8002d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d9e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d170      	bne.n	8002e86 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	617b      	str	r3, [r7, #20]
  return(result);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002db0:	f3ef 8311 	mrs	r3, BASEPRI
 8002db4:	613b      	str	r3, [r7, #16]
  return(result);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <osMessageQueueNew+0x3c>
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <osMessageQueueNew+0x108>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d060      	beq.n	8002e86 <osMessageQueueNew+0xfe>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d05d      	beq.n	8002e86 <osMessageQueueNew+0xfe>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05a      	beq.n	8002e86 <osMessageQueueNew+0xfe>
    mem = -1;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d029      	beq.n	8002e30 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <osMessageQueueNew+0x82>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b4f      	cmp	r3, #79	; 0x4f
 8002dea:	d90e      	bls.n	8002e0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <osMessageQueueNew+0x82>
        mem = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	e014      	b.n	8002e34 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d110      	bne.n	8002e34 <osMessageQueueNew+0xac>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <osMessageQueueNew+0xac>
          mem = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	e001      	b.n	8002e34 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10c      	bne.n	8002e54 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	460b      	mov	r3, r1
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f972 	bl	8003134 <xQueueGenericCreateStatic>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24
 8002e52:	e008      	b.n	8002e66 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9db 	bl	800321a <xQueueGenericCreate>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <osMessageQueueNew+0xf2>
        name = attr->name;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e001      	b.n	8002e7e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e82:	f000 ff4f 	bl	8003d24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000038 	.word	0x20000038

08002e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8002eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000003c 	.word	0x2000003c
 8002ec4:	20000098 	.word	0x20000098

08002ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8002ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000298 	.word	0x20000298
 8002ef8:	200002f4 	.word	0x200002f4

08002efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f103 0208 	add.w	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f103 0208 	add.w	r2, r3, #8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 0208 	add.w	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d103      	bne.n	8002fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e00c      	b.n	8002fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e002      	b.n	8002fcc <vListInsert+0x2e>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d2f6      	bcs.n	8002fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6852      	ldr	r2, [r2, #4]
 8003030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d103      	bne.n	8003044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	e7fe      	b.n	800308a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800308c:	f002 fb96 	bl	80057bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	441a      	add	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	3b01      	subs	r3, #1
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01a      	beq.n	8003120 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3310      	adds	r3, #16
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fb6a 	bl	80047c8 <xTaskRemoveFromEventList>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d012      	beq.n	8003120 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <xQueueGenericReset+0xcc>)
 80030fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	e009      	b.n	8003120 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3310      	adds	r3, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fef3 	bl	8002efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3324      	adds	r3, #36	; 0x24
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff feee 	bl	8002efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003120:	f002 fb7a 	bl	8005818 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003124:	2301      	movs	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000ed04 	.word	0xe000ed04

08003134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	; 0x38
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <xQueueGenericCreateStatic+0x28>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	e7fe      	b.n	800315a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <xQueueGenericCreateStatic+0x42>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	e7fe      	b.n	8003174 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <xQueueGenericCreateStatic+0x4e>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <xQueueGenericCreateStatic+0x52>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericCreateStatic+0x54>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <xQueueGenericCreateStatic+0x6c>
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	e7fe      	b.n	800319e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <xQueueGenericCreateStatic+0x78>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <xQueueGenericCreateStatic+0x7c>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <xQueueGenericCreateStatic+0x7e>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <xQueueGenericCreateStatic+0x96>
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e7fe      	b.n	80031c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031ca:	2350      	movs	r3, #80	; 0x50
 80031cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d009      	beq.n	80031e8 <xQueueGenericCreateStatic+0xb4>
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e7fe      	b.n	80031e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f844 	bl	8003298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003212:	4618      	mov	r0, r3
 8003214:	3730      	adds	r7, #48	; 0x30
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	; 0x28
 800321e:	af02      	add	r7, sp, #8
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <xQueueGenericCreate+0x28>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e004      	b.n	8003258 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	3350      	adds	r3, #80	; 0x50
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fbc7 	bl	80059f0 <pvPortMalloc>
 8003262:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d011      	beq.n	800328e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3350      	adds	r3, #80	; 0x50
 8003272:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800327c:	79fa      	ldrb	r2, [r7, #7]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f805 	bl	8003298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800328e:	69bb      	ldr	r3, [r7, #24]
	}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e002      	b.n	80032ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032c6:	2101      	movs	r1, #1
 80032c8:	69b8      	ldr	r0, [r7, #24]
 80032ca:	f7ff fecb 	bl	8003064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08a      	sub	sp, #40	; 0x28
 80032e2:	af02      	add	r7, sp, #8
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <xQueueCreateCountingSemaphoreStatic+0x26>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e7fe      	b.n	8003302 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d909      	bls.n	8003320 <xQueueCreateCountingSemaphoreStatic+0x42>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e7fe      	b.n	800331e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003320:	2302      	movs	r3, #2
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	2100      	movs	r1, #0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff02 	bl	8003134 <xQueueGenericCreateStatic>
 8003330:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800333e:	69fb      	ldr	r3, [r7, #28]
	}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <xQueueCreateCountingSemaphore+0x24>
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e7fe      	b.n	800336a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d909      	bls.n	8003388 <xQueueCreateCountingSemaphore+0x40>
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e7fe      	b.n	8003386 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003388:	2202      	movs	r2, #2
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff44 	bl	800321a <xQueueGenericCreate>
 8003392:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80033a0:	697b      	ldr	r3, [r7, #20]
	}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ba:	2300      	movs	r3, #0
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <xQueueGenericSend+0x30>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	e7fe      	b.n	80033da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <xQueueGenericSend+0x3e>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <xQueueGenericSend+0x42>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueGenericSend+0x44>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <xQueueGenericSend+0x5c>
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e7fe      	b.n	8003406 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <xQueueGenericSend+0x6a>
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <xQueueGenericSend+0x6e>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueGenericSend+0x70>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <xQueueGenericSend+0x88>
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	e7fe      	b.n	8003432 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003434:	f001 fb7e 	bl	8004b34 <xTaskGetSchedulerState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <xQueueGenericSend+0x98>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueGenericSend+0x9c>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueGenericSend+0x9e>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <xQueueGenericSend+0xb6>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	e7fe      	b.n	8003460 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003462:	f002 f9ab 	bl	80057bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <xQueueGenericSend+0xcc>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d129      	bne.n	80034cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800347e:	f000 fb41 	bl	8003b04 <prvCopyDataToQueue>
 8003482:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f999 	bl	80047c8 <xTaskRemoveFromEventList>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <xQueueGenericSend+0x1f0>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	e00a      	b.n	80034c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <xQueueGenericSend+0x1f0>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034c4:	f002 f9a8 	bl	8005818 <vPortExitCritical>
				return pdPASS;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e063      	b.n	8003594 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034d2:	f002 f9a1 	bl	8005818 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e05c      	b.n	8003594 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f9d1 	bl	800488c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ee:	f002 f993 	bl	8005818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034f2:	f000 ff4d 	bl	8004390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034f6:	f002 f961 	bl	80057bc <vPortEnterCritical>
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d103      	bne.n	8003510 <xQueueGenericSend+0x164>
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003516:	b25b      	sxtb	r3, r3
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d103      	bne.n	8003526 <xQueueGenericSend+0x17a>
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003526:	f002 f977 	bl	8005818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352a:	1d3a      	adds	r2, r7, #4
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f9c0 	bl	80048b8 <xTaskCheckForTimeOut>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d124      	bne.n	8003588 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800353e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003540:	f000 fbd8 	bl	8003cf4 <prvIsQueueFull>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	3310      	adds	r3, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f001 f8ea 	bl	800472c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355a:	f000 fb63 	bl	8003c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800355e:	f000 ff25 	bl	80043ac <xTaskResumeAll>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af7c 	bne.w	8003462 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <xQueueGenericSend+0x1f0>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	e772      	b.n	8003462 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357e:	f000 fb51 	bl	8003c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003582:	f000 ff13 	bl	80043ac <xTaskResumeAll>
 8003586:	e76c      	b.n	8003462 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fb4b 	bl	8003c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800358e:	f000 ff0d 	bl	80043ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003594:	4618      	mov	r0, r3
 8003596:	3738      	adds	r7, #56	; 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xQueueGenericSendFromISR+0x2c>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e7fe      	b.n	80035ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <xQueueGenericSendFromISR+0x3a>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <xQueueGenericSendFromISR+0x3e>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericSendFromISR+0x40>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <xQueueGenericSendFromISR+0x58>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <xQueueGenericSendFromISR+0x66>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <xQueueGenericSendFromISR+0x6a>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericSendFromISR+0x6c>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <xQueueGenericSendFromISR+0x84>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e7fe      	b.n	8003622 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003624:	f002 f9a6 	bl	8005974 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003628:	f3ef 8211 	mrs	r2, BASEPRI
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61ba      	str	r2, [r7, #24]
 800363e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003640:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <xQueueGenericSendFromISR+0xb6>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d12c      	bne.n	80036b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003666:	f000 fa4d 	bl	8003b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800366a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d112      	bne.n	800369a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f8a1 	bl	80047c8 <xTaskRemoveFromEventList>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800369a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800369e:	3301      	adds	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	b25a      	sxtb	r2, r3
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036aa:	2301      	movs	r3, #1
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036ae:	e001      	b.n	80036b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3738      	adds	r7, #56	; 0x38
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <xQueueReceive+0x2e>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	e7fe      	b.n	80036f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <xQueueReceive+0x3c>
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <xQueueReceive+0x40>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <xQueueReceive+0x42>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <xQueueReceive+0x5a>
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e7fe      	b.n	8003720 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003722:	f001 fa07 	bl	8004b34 <xTaskGetSchedulerState>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <xQueueReceive+0x6a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueReceive+0x6e>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <xQueueReceive+0x70>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <xQueueReceive+0x88>
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e7fe      	b.n	800374e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003750:	f002 f834 	bl	80057bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01f      	beq.n	80037a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003764:	f000 fa38 	bl	8003bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	3310      	adds	r3, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f823 	bl	80047c8 <xTaskRemoveFromEventList>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <xQueueReceive+0x1b4>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003798:	f002 f83e 	bl	8005818 <vPortExitCritical>
				return pdPASS;
 800379c:	2301      	movs	r3, #1
 800379e:	e069      	b.n	8003874 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a6:	f002 f837 	bl	8005818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e062      	b.n	8003874 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b4:	f107 0310 	add.w	r3, r7, #16
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f867 	bl	800488c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c2:	f002 f829 	bl	8005818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c6:	f000 fde3 	bl	8004390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ca:	f001 fff7 	bl	80057bc <vPortEnterCritical>
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d103      	bne.n	80037e4 <xQueueReceive+0x11c>
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d103      	bne.n	80037fa <xQueueReceive+0x132>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037fa:	f002 f80d 	bl	8005818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fe:	1d3a      	adds	r2, r7, #4
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f856 	bl	80048b8 <xTaskCheckForTimeOut>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d123      	bne.n	800385a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003814:	f000 fa58 	bl	8003cc8 <prvIsQueueEmpty>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	3324      	adds	r3, #36	; 0x24
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 ff80 	bl	800472c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800382c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382e:	f000 f9f9 	bl	8003c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003832:	f000 fdbb 	bl	80043ac <xTaskResumeAll>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d189      	bne.n	8003750 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <xQueueReceive+0x1b4>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	e780      	b.n	8003750 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800384e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003850:	f000 f9e8 	bl	8003c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003854:	f000 fdaa 	bl	80043ac <xTaskResumeAll>
 8003858:	e77a      	b.n	8003750 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f9e2 	bl	8003c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003860:	f000 fda4 	bl	80043ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 fa2f 	bl	8003cc8 <prvIsQueueEmpty>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f43f af6f 	beq.w	8003750 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003874:	4618      	mov	r0, r3
 8003876:	3730      	adds	r7, #48	; 0x30
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueSemaphoreTake+0x30>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	e7fe      	b.n	80038ae <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <xQueueSemaphoreTake+0x4c>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e7fe      	b.n	80038ca <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038cc:	f001 f932 	bl	8004b34 <xTaskGetSchedulerState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xQueueSemaphoreTake+0x5c>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueSemaphoreTake+0x60>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueSemaphoreTake+0x62>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <xQueueSemaphoreTake+0x7a>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e7fe      	b.n	80038f8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038fa:	f001 ff5f 	bl	80057bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d024      	beq.n	8003954 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800391a:	f001 fa7d 	bl	8004e18 <pvTaskIncrementMutexHeldCount>
 800391e:	4602      	mov	r2, r0
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00f      	beq.n	800394c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	3310      	adds	r3, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f000 ff49 	bl	80047c8 <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <xQueueSemaphoreTake+0x20c>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800394c:	f001 ff64 	bl	8005818 <vPortExitCritical>
				return pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	e096      	b.n	8003a82 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d110      	bne.n	800397c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <xQueueSemaphoreTake+0xf4>
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e7fe      	b.n	8003972 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003974:	f001 ff50 	bl	8005818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003978:	2300      	movs	r3, #0
 800397a:	e082      	b.n	8003a82 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	4618      	mov	r0, r3
 8003988:	f000 ff80 	bl	800488c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003990:	f001 ff42 	bl	8005818 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003994:	f000 fcfc 	bl	8004390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003998:	f001 ff10 	bl	80057bc <vPortEnterCritical>
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d103      	bne.n	80039b2 <xQueueSemaphoreTake+0x132>
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d103      	bne.n	80039c8 <xQueueSemaphoreTake+0x148>
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c8:	f001 ff26 	bl	8005818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039cc:	463a      	mov	r2, r7
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 ff6f 	bl	80048b8 <xTaskCheckForTimeOut>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d132      	bne.n	8003a46 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039e2:	f000 f971 	bl	8003cc8 <prvIsQueueEmpty>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d026      	beq.n	8003a3a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80039f4:	f001 fee2 	bl	80057bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 f8b7 	bl	8004b70 <xTaskPriorityInherit>
 8003a02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a04:	f001 ff08 	bl	8005818 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fe8b 	bl	800472c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a18:	f000 f904 	bl	8003c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a1c:	f000 fcc6 	bl	80043ac <xTaskResumeAll>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f47f af69 	bne.w	80038fa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <xQueueSemaphoreTake+0x20c>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	e75f      	b.n	80038fa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a3c:	f000 f8f2 	bl	8003c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a40:	f000 fcb4 	bl	80043ac <xTaskResumeAll>
 8003a44:	e759      	b.n	80038fa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a48:	f000 f8ec 	bl	8003c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a4c:	f000 fcae 	bl	80043ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a52:	f000 f939 	bl	8003cc8 <prvIsQueueEmpty>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f43f af4e 	beq.w	80038fa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003a64:	f001 feaa 	bl	80057bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a6a:	f000 f833 	bl	8003ad4 <prvGetDisinheritPriorityAfterTimeout>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f94e 	bl	8004d18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a7c:	f001 fecc 	bl	8005818 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3738      	adds	r7, #56	; 0x38
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <vQueueDelete+0x26>
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	e7fe      	b.n	8003ab4 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f95c 	bl	8003d74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f002 f854 	bl	8005b74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003af6:	68fb      	ldr	r3, [r7, #12]
	}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14d      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f886 	bl	8004c40 <xTaskPriorityDisinherit>
 8003b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	e043      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d119      	bne.n	8003b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6858      	ldr	r0, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	f002 f948 	bl	8005de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d32b      	bcc.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	e026      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68d8      	ldr	r0, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	461a      	mov	r2, r3
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	f002 f92e 	bl	8005de4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	425b      	negs	r3, r3
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	425b      	negs	r3, r3
 8003bae:	441a      	add	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d105      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d303      	bcc.n	8003c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	461a      	mov	r2, r3
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f002 f8e4 	bl	8005de4 <memcpy>
	}
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c2c:	f001 fdc6 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c38:	e011      	b.n	8003c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fdbe 	bl	80047c8 <xTaskRemoveFromEventList>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c52:	f000 fe91 	bl	8004978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dce9      	bgt.n	8003c3a <prvUnlockQueue+0x16>
 8003c66:	e000      	b.n	8003c6a <prvUnlockQueue+0x46>
					break;
 8003c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	22ff      	movs	r2, #255	; 0xff
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c72:	f001 fdd1 	bl	8005818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c76:	f001 fda1 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c82:	e011      	b.n	8003ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3310      	adds	r3, #16
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd99 	bl	80047c8 <xTaskRemoveFromEventList>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c9c:	f000 fe6c 	bl	8004978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dce9      	bgt.n	8003c84 <prvUnlockQueue+0x60>
 8003cb0:	e000      	b.n	8003cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cbc:	f001 fdac 	bl	8005818 <vPortExitCritical>
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd0:	f001 fd74 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e001      	b.n	8003ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ce6:	f001 fd97 	bl	8005818 <vPortExitCritical>

	return xReturn;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cfc:	f001 fd5e 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d102      	bne.n	8003d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e001      	b.n	8003d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 fd7f 	bl	8005818 <vPortExitCritical>

	return xReturn;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e014      	b.n	8003d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d34:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <vQueueAddToRegistry+0x4c>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d40:	490b      	ldr	r1, [pc, #44]	; (8003d70 <vQueueAddToRegistry+0x4c>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <vQueueAddToRegistry+0x4c>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d56:	e005      	b.n	8003d64 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b07      	cmp	r3, #7
 8003d62:	d9e7      	bls.n	8003d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	200049fc 	.word	0x200049fc

08003d74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e016      	b.n	8003db0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <vQueueUnregisterQueue+0x50>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d10b      	bne.n	8003daa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <vQueueUnregisterQueue+0x50>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2100      	movs	r1, #0
 8003d98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <vQueueUnregisterQueue+0x50>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
				break;
 8003da8:	e005      	b.n	8003db6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b07      	cmp	r3, #7
 8003db4:	d9e5      	bls.n	8003d82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200049fc 	.word	0x200049fc

08003dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dd8:	f001 fcf0 	bl	80057bc <vPortEnterCritical>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d103      	bne.n	8003df2 <vQueueWaitForMessageRestricted+0x2a>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d103      	bne.n	8003e08 <vQueueWaitForMessageRestricted+0x40>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	f001 fd06 	bl	8005818 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fca9 	bl	8004774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff fefe 	bl	8003c24 <prvUnlockQueue>
	}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af04      	add	r7, sp, #16
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <xTaskCreateStatic+0x28>
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	e7fe      	b.n	8003e56 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <xTaskCreateStatic+0x42>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e7fe      	b.n	8003e70 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e72:	235c      	movs	r3, #92	; 0x5c
 8003e74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b5c      	cmp	r3, #92	; 0x5c
 8003e7a:	d009      	beq.n	8003e90 <xTaskCreateStatic+0x60>
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e7fe      	b.n	8003e8e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01e      	beq.n	8003ed6 <xTaskCreateStatic+0xa6>
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01b      	beq.n	8003ed6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9303      	str	r3, [sp, #12]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f850 	bl	8003f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed0:	f000 f8dc 	bl	800408c <prvAddNewTaskToReadyList>
 8003ed4:	e001      	b.n	8003eda <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eda:	697b      	ldr	r3, [r7, #20]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fd79 	bl	80059f0 <pvPortMalloc>
 8003efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f06:	205c      	movs	r0, #92	; 0x5c
 8003f08:	f001 fd72 	bl	80059f0 <pvPortMalloc>
 8003f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	e005      	b.n	8003f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f001 fe29 	bl	8005b74 <vPortFree>
 8003f22:	e001      	b.n	8003f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f80e 	bl	8003f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	f000 f89a 	bl	800408c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e002      	b.n	8003f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f64:	69bb      	ldr	r3, [r7, #24]
	}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b088      	sub	sp, #32
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	461a      	mov	r2, r3
 8003f86:	21a5      	movs	r1, #165	; 0xa5
 8003f88:	f001 ff37 	bl	8005dfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f96:	3b01      	subs	r3, #1
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f023 0307 	bic.w	r3, r3, #7
 8003fa4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <prvInitialiseNewTask+0x56>
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e7fe      	b.n	8003fc2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01f      	beq.n	800400a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e012      	b.n	8003ff6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	7819      	ldrb	r1, [r3, #0]
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3334      	adds	r3, #52	; 0x34
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d006      	beq.n	8003ffe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b0f      	cmp	r3, #15
 8003ffa:	d9e9      	bls.n	8003fd0 <prvInitialiseNewTask+0x62>
 8003ffc:	e000      	b.n	8004000 <prvInitialiseNewTask+0x92>
			{
				break;
 8003ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004008:	e003      	b.n	8004012 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b37      	cmp	r3, #55	; 0x37
 8004016:	d901      	bls.n	800401c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004018:	2337      	movs	r3, #55	; 0x37
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004026:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	2200      	movs	r2, #0
 800402c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe ff82 	bl	8002f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ff7d 	bl	8002f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	69b8      	ldr	r0, [r7, #24]
 800406c:	f001 fa82 	bl	8005574 <pxPortInitialiseStack>
 8004070:	4602      	mov	r2, r0
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004082:	bf00      	nop
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004094:	f001 fb92 	bl	80057bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <prvAddNewTaskToReadyList+0xc4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040aa:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <prvAddNewTaskToReadyList+0xc4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d110      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040b8:	f000 fc82 	bl	80049c0 <prvInitialiseTaskLists>
 80040bc:	e00d      	b.n	80040da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <prvAddNewTaskToReadyList+0xcc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d802      	bhi.n	80040da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <prvAddNewTaskToReadyList+0xc8>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <prvAddNewTaskToReadyList+0xd0>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <prvAddNewTaskToReadyList+0xd4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d903      	bls.n	8004100 <prvAddNewTaskToReadyList+0x74>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <prvAddNewTaskToReadyList+0xd4>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a15      	ldr	r2, [pc, #84]	; (8004164 <prvAddNewTaskToReadyList+0xd8>)
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe ff1d 	bl	8002f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800411c:	f001 fb7c 	bl	8005818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <prvAddNewTaskToReadyList+0xcc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <prvAddNewTaskToReadyList+0xc8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d207      	bcs.n	8004146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <prvAddNewTaskToReadyList+0xdc>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000bc8 	.word	0x20000bc8
 8004154:	200006f4 	.word	0x200006f4
 8004158:	20000bd4 	.word	0x20000bd4
 800415c:	20000be4 	.word	0x20000be4
 8004160:	20000bd0 	.word	0x20000bd0
 8004164:	200006f8 	.word	0x200006f8
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <vTaskDelayUntil+0x28>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e7fe      	b.n	8004192 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <vTaskDelayUntil+0x42>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e7fe      	b.n	80041ac <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <vTaskDelayUntil+0xe8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <vTaskDelayUntil+0x5e>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e7fe      	b.n	80041c8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80041ca:	f000 f8e1 	bl	8004390 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <vTaskDelayUntil+0xec>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a3a      	ldr	r2, [r7, #32]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d20b      	bcs.n	8004200 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d211      	bcs.n	8004216 <vTaskDelayUntil+0xaa>
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d90d      	bls.n	8004216 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e00a      	b.n	8004216 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	429a      	cmp	r2, r3
 8004208:	d303      	bcc.n	8004212 <vTaskDelayUntil+0xa6>
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	429a      	cmp	r2, r3
 8004210:	d901      	bls.n	8004216 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004212:	2301      	movs	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fe08 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004230:	f000 f8bc 	bl	80043ac <xTaskResumeAll>
 8004234:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <vTaskDelayUntil+0xf0>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800424c:	bf00      	nop
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000bf0 	.word	0x20000bf0
 8004258:	20000bcc 	.word	0x20000bcc
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <vTaskDelay+0x60>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <vTaskDelay+0x2e>
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	e7fe      	b.n	800428c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800428e:	f000 f87f 	bl	8004390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fdd3 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800429a:	f000 f887 	bl	80043ac <xTaskResumeAll>
 800429e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <vTaskDelay+0x64>)
 80042a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000bf0 	.word	0x20000bf0
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042d6:	463a      	mov	r2, r7
 80042d8:	1d39      	adds	r1, r7, #4
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fdd8 	bl	8002e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	2300      	movs	r3, #0
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	460a      	mov	r2, r1
 80042f6:	4920      	ldr	r1, [pc, #128]	; (8004378 <vTaskStartScheduler+0xb0>)
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <vTaskStartScheduler+0xb4>)
 80042fa:	f7ff fd99 	bl	8003e30 <xTaskCreateStatic>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <vTaskStartScheduler+0xb8>)
 8004302:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <vTaskStartScheduler+0xb8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e001      	b.n	8004316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d102      	bne.n	8004322 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800431c:	f000 fde4 	bl	8004ee8 <xTimerCreateTimerTask>
 8004320:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d115      	bne.n	8004354 <vTaskStartScheduler+0x8c>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <vTaskStartScheduler+0xbc>)
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <vTaskStartScheduler+0xc0>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <vTaskStartScheduler+0xc4>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800434e:	f001 f997 	bl	8005680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004352:	e00d      	b.n	8004370 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d109      	bne.n	8004370 <vTaskStartScheduler+0xa8>
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e7fe      	b.n	800436e <vTaskStartScheduler+0xa6>
}
 8004370:	bf00      	nop
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	08005ea8 	.word	0x08005ea8
 800437c:	08004991 	.word	0x08004991
 8004380:	20000bec 	.word	0x20000bec
 8004384:	20000be8 	.word	0x20000be8
 8004388:	20000bd4 	.word	0x20000bd4
 800438c:	20000bcc 	.word	0x20000bcc

08004390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <vTaskSuspendAll+0x18>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a03      	ldr	r2, [pc, #12]	; (80043a8 <vTaskSuspendAll+0x18>)
 800439c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000bf0 	.word	0x20000bf0

080043ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <xTaskResumeAll+0x114>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <xTaskResumeAll+0x2a>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e7fe      	b.n	80043d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043d6:	f001 f9f1 	bl	80057bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <xTaskResumeAll+0x114>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3b01      	subs	r3, #1
 80043e0:	4a37      	ldr	r2, [pc, #220]	; (80044c0 <xTaskResumeAll+0x114>)
 80043e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <xTaskResumeAll+0x114>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d162      	bne.n	80044b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <xTaskResumeAll+0x118>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05e      	beq.n	80044b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f4:	e02f      	b.n	8004456 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f6:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <xTaskResumeAll+0x11c>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3318      	adds	r3, #24
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fe04 	bl	8003010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fdff 	bl	8003010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <xTaskResumeAll+0x120>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <xTaskResumeAll+0x7a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <xTaskResumeAll+0x120>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <xTaskResumeAll+0x124>)
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f7fe fd8a 	bl	8002f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <xTaskResumeAll+0x128>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <xTaskResumeAll+0x12c>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004456:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <xTaskResumeAll+0x11c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1cb      	bne.n	80043f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004464:	f000 fb46 	bl	8004af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <xTaskResumeAll+0x130>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004474:	f000 f846 	bl	8004504 <xTaskIncrementTick>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <xTaskResumeAll+0x12c>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f1      	bne.n	8004474 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <xTaskResumeAll+0x130>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <xTaskResumeAll+0x12c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <xTaskResumeAll+0x134>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044b2:	f001 f9b1 	bl	8005818 <vPortExitCritical>

	return xAlreadyYielded;
 80044b6:	68bb      	ldr	r3, [r7, #8]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000bf0 	.word	0x20000bf0
 80044c4:	20000bc8 	.word	0x20000bc8
 80044c8:	20000b88 	.word	0x20000b88
 80044cc:	20000bd0 	.word	0x20000bd0
 80044d0:	200006f8 	.word	0x200006f8
 80044d4:	200006f4 	.word	0x200006f4
 80044d8:	20000bdc 	.word	0x20000bdc
 80044dc:	20000bd8 	.word	0x20000bd8
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <xTaskGetTickCount+0x1c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044f0:	687b      	ldr	r3, [r7, #4]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000bcc 	.word	0x20000bcc

08004504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450e:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <xTaskIncrementTick+0x144>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 8088 	bne.w	8004628 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <xTaskIncrementTick+0x148>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004520:	4a4a      	ldr	r2, [pc, #296]	; (800464c <xTaskIncrementTick+0x148>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11f      	bne.n	800456c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800452c:	4b48      	ldr	r3, [pc, #288]	; (8004650 <xTaskIncrementTick+0x14c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <xTaskIncrementTick+0x46>
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	e7fe      	b.n	8004548 <xTaskIncrementTick+0x44>
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <xTaskIncrementTick+0x14c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <xTaskIncrementTick+0x150>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <xTaskIncrementTick+0x14c>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <xTaskIncrementTick+0x150>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <xTaskIncrementTick+0x154>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <xTaskIncrementTick+0x154>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f000 fac4 	bl	8004af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <xTaskIncrementTick+0x158>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d349      	bcc.n	800460a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004576:	4b36      	ldr	r3, [pc, #216]	; (8004650 <xTaskIncrementTick+0x14c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <xTaskIncrementTick+0x158>)
 8004582:	f04f 32ff 	mov.w	r2, #4294967295
 8004586:	601a      	str	r2, [r3, #0]
					break;
 8004588:	e03f      	b.n	800460a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <xTaskIncrementTick+0x14c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d203      	bcs.n	80045aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045a2:	4a2e      	ldr	r2, [pc, #184]	; (800465c <xTaskIncrementTick+0x158>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045a8:	e02f      	b.n	800460a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fd2e 	bl	8003010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3318      	adds	r3, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fd25 	bl	8003010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d903      	bls.n	80045da <xTaskIncrementTick+0xd6>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	4a22      	ldr	r2, [pc, #136]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <xTaskIncrementTick+0x160>)
 80045e8:	441a      	add	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fcb0 	bl	8002f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <xTaskIncrementTick+0x164>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	429a      	cmp	r2, r3
 8004602:	d3b8      	bcc.n	8004576 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004608:	e7b5      	b.n	8004576 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800460a:	4b17      	ldr	r3, [pc, #92]	; (8004668 <xTaskIncrementTick+0x164>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4914      	ldr	r1, [pc, #80]	; (8004664 <xTaskIncrementTick+0x160>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d907      	bls.n	8004632 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e004      	b.n	8004632 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <xTaskIncrementTick+0x168>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	4a0f      	ldr	r2, [pc, #60]	; (800466c <xTaskIncrementTick+0x168>)
 8004630:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <xTaskIncrementTick+0x16c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000bf0 	.word	0x20000bf0
 800464c:	20000bcc 	.word	0x20000bcc
 8004650:	20000b80 	.word	0x20000b80
 8004654:	20000b84 	.word	0x20000b84
 8004658:	20000be0 	.word	0x20000be0
 800465c:	20000be8 	.word	0x20000be8
 8004660:	20000bd0 	.word	0x20000bd0
 8004664:	200006f8 	.word	0x200006f8
 8004668:	200006f4 	.word	0x200006f4
 800466c:	20000bd8 	.word	0x20000bd8
 8004670:	20000bdc 	.word	0x20000bdc

08004674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800467a:	4b27      	ldr	r3, [pc, #156]	; (8004718 <vTaskSwitchContext+0xa4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <vTaskSwitchContext+0xa8>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004688:	e040      	b.n	800470c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <vTaskSwitchContext+0xa8>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b23      	ldr	r3, [pc, #140]	; (8004720 <vTaskSwitchContext+0xac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e00f      	b.n	80046b8 <vTaskSwitchContext+0x44>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <vTaskSwitchContext+0x3e>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	e7fe      	b.n	80046b0 <vTaskSwitchContext+0x3c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	491a      	ldr	r1, [pc, #104]	; (8004724 <vTaskSwitchContext+0xb0>)
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0e5      	beq.n	8004698 <vTaskSwitchContext+0x24>
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <vTaskSwitchContext+0xb0>)
 80046d8:	4413      	add	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3308      	adds	r3, #8
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d104      	bne.n	80046fc <vTaskSwitchContext+0x88>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <vTaskSwitchContext+0xb4>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4a06      	ldr	r2, [pc, #24]	; (8004720 <vTaskSwitchContext+0xac>)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000bf0 	.word	0x20000bf0
 800471c:	20000bdc 	.word	0x20000bdc
 8004720:	20000bd0 	.word	0x20000bd0
 8004724:	200006f8 	.word	0x200006f8
 8004728:	200006f4 	.word	0x200006f4

0800472c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <vTaskPlaceOnEventList+0x24>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e7fe      	b.n	800474e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <vTaskPlaceOnEventList+0x44>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3318      	adds	r3, #24
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fe fc20 	bl	8002f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800475e:	2101      	movs	r1, #1
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f000 fb6d 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200006f4 	.word	0x200006f4

08004774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <vTaskPlaceOnEventListRestricted+0x26>
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e7fe      	b.n	8004798 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3318      	adds	r3, #24
 80047a0:	4619      	mov	r1, r3
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7fe fbd7 	bl	8002f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	68b8      	ldr	r0, [r7, #8]
 80047b8:	f000 fb42 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
	}
 80047bc:	bf00      	nop
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200006f4 	.word	0x200006f4

080047c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <xTaskRemoveFromEventList+0x2a>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e7fe      	b.n	80047f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fc0a 	bl	8003010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <xTaskRemoveFromEventList+0xac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3304      	adds	r3, #4
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fc01 	bl	8003010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <xTaskRemoveFromEventList+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d903      	bls.n	8004822 <xTaskRemoveFromEventList+0x5a>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <xTaskRemoveFromEventList+0xb0>)
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4a13      	ldr	r2, [pc, #76]	; (800487c <xTaskRemoveFromEventList+0xb4>)
 8004830:	441a      	add	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fe fb8c 	bl	8002f56 <vListInsertEnd>
 800483e:	e005      	b.n	800484c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3318      	adds	r3, #24
 8004844:	4619      	mov	r1, r3
 8004846:	480e      	ldr	r0, [pc, #56]	; (8004880 <xTaskRemoveFromEventList+0xb8>)
 8004848:	f7fe fb85 	bl	8002f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <xTaskRemoveFromEventList+0xbc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	429a      	cmp	r2, r3
 8004858:	d905      	bls.n	8004866 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <xTaskRemoveFromEventList+0xc0>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e001      	b.n	800486a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800486a:	697b      	ldr	r3, [r7, #20]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000bf0 	.word	0x20000bf0
 8004878:	20000bd0 	.word	0x20000bd0
 800487c:	200006f8 	.word	0x200006f8
 8004880:	20000b88 	.word	0x20000b88
 8004884:	200006f4 	.word	0x200006f4
 8004888:	20000bdc 	.word	0x20000bdc

0800488c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <vTaskInternalSetTimeOutState+0x24>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <vTaskInternalSetTimeOutState+0x28>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000be0 	.word	0x20000be0
 80048b4:	20000bcc 	.word	0x20000bcc

080048b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <xTaskCheckForTimeOut+0x24>
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e7fe      	b.n	80048da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <xTaskCheckForTimeOut+0x3e>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e7fe      	b.n	80048f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80048f6:	f000 ff61 	bl	80057bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <xTaskCheckForTimeOut+0xb8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d102      	bne.n	800491a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e023      	b.n	8004962 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <xTaskCheckForTimeOut+0xbc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d007      	beq.n	8004936 <xTaskCheckForTimeOut+0x7e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e015      	b.n	8004962 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	429a      	cmp	r2, r3
 800493e:	d20b      	bcs.n	8004958 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff9d 	bl	800488c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e004      	b.n	8004962 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f000 ff59 	bl	8005818 <vPortExitCritical>

	return xReturn;
 8004966:	69fb      	ldr	r3, [r7, #28]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000bcc 	.word	0x20000bcc
 8004974:	20000be0 	.word	0x20000be0

08004978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <vTaskMissedYield+0x14>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000bdc 	.word	0x20000bdc

08004990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004998:	f000 f852 	bl	8004a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <prvIdleTask+0x28>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d9f9      	bls.n	8004998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <prvIdleTask+0x2c>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b4:	e7f0      	b.n	8004998 <prvIdleTask+0x8>
 80049b6:	bf00      	nop
 80049b8:	200006f8 	.word	0x200006f8
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e00c      	b.n	80049e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <prvInitialiseTaskLists+0x60>)
 80049d8:	4413      	add	r3, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fa8e 	bl	8002efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b37      	cmp	r3, #55	; 0x37
 80049ea:	d9ef      	bls.n	80049cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049ec:	480d      	ldr	r0, [pc, #52]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 80049ee:	f7fe fa85 	bl	8002efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049f2:	480d      	ldr	r0, [pc, #52]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 80049f4:	f7fe fa82 	bl	8002efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049f8:	480c      	ldr	r0, [pc, #48]	; (8004a2c <prvInitialiseTaskLists+0x6c>)
 80049fa:	f7fe fa7f 	bl	8002efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049fe:	480c      	ldr	r0, [pc, #48]	; (8004a30 <prvInitialiseTaskLists+0x70>)
 8004a00:	f7fe fa7c 	bl	8002efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a04:	480b      	ldr	r0, [pc, #44]	; (8004a34 <prvInitialiseTaskLists+0x74>)
 8004a06:	f7fe fa79 	bl	8002efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <prvInitialiseTaskLists+0x78>)
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 8004a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvInitialiseTaskLists+0x7c>)
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200006f8 	.word	0x200006f8
 8004a24:	20000b58 	.word	0x20000b58
 8004a28:	20000b6c 	.word	0x20000b6c
 8004a2c:	20000b88 	.word	0x20000b88
 8004a30:	20000b9c 	.word	0x20000b9c
 8004a34:	20000bb4 	.word	0x20000bb4
 8004a38:	20000b80 	.word	0x20000b80
 8004a3c:	20000b84 	.word	0x20000b84

08004a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a46:	e019      	b.n	8004a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a48:	f000 feb8 	bl	80057bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <prvCheckTasksWaitingTermination+0x4c>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fad9 	bl	8003010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <prvCheckTasksWaitingTermination+0x50>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <prvCheckTasksWaitingTermination+0x50>)
 8004a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a72:	f000 fed1 	bl	8005818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f80e 	bl	8004a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e1      	bne.n	8004a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000b9c 	.word	0x20000b9c
 8004a90:	20000bc8 	.word	0x20000bc8
 8004a94:	20000bb0 	.word	0x20000bb0

08004a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 f860 	bl	8005b74 <vPortFree>
				vPortFree( pxTCB );
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f001 f85d 	bl	8005b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aba:	e017      	b.n	8004aec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d103      	bne.n	8004ace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 f854 	bl	8005b74 <vPortFree>
	}
 8004acc:	e00e      	b.n	8004aec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d009      	beq.n	8004aec <prvDeleteTCB+0x54>
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e7fe      	b.n	8004aea <prvDeleteTCB+0x52>
	}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b06:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b0c:	e008      	b.n	8004b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000b80 	.word	0x20000b80
 8004b30:	20000be8 	.word	0x20000be8

08004b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <xTaskGetSchedulerState+0x34>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b42:	2301      	movs	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	e008      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <xTaskGetSchedulerState+0x38>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b50:	2302      	movs	r3, #2
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	e001      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b5a:	687b      	ldr	r3, [r7, #4]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000bd4 	.word	0x20000bd4
 8004b6c:	20000bf0 	.word	0x20000bf0

08004b70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d051      	beq.n	8004c2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <xTaskPriorityInherit+0xc4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d241      	bcs.n	8004c18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db06      	blt.n	8004baa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <xTaskPriorityInherit+0xc4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6959      	ldr	r1, [r3, #20]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <xTaskPriorityInherit+0xc8>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4299      	cmp	r1, r3
 8004bc0:	d122      	bne.n	8004c08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fa22 	bl	8003010 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <xTaskPriorityInherit+0xc4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <xTaskPriorityInherit+0xcc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d903      	bls.n	8004bea <xTaskPriorityInherit+0x7a>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <xTaskPriorityInherit+0xcc>)
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <xTaskPriorityInherit+0xc8>)
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fe f9a8 	bl	8002f56 <vListInsertEnd>
 8004c06:	e004      	b.n	8004c12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <xTaskPriorityInherit+0xc4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e008      	b.n	8004c2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <xTaskPriorityInherit+0xc4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d201      	bcs.n	8004c2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c26:	2301      	movs	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200006f4 	.word	0x200006f4
 8004c38:	200006f8 	.word	0x200006f8
 8004c3c:	20000bd0 	.word	0x20000bd0

08004c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d054      	beq.n	8004d00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c56:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <xTaskPriorityDisinherit+0xcc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d009      	beq.n	8004c74 <xTaskPriorityDisinherit+0x34>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e7fe      	b.n	8004c72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <xTaskPriorityDisinherit+0x50>
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	e7fe      	b.n	8004c8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	1e5a      	subs	r2, r3, #1
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d02c      	beq.n	8004d00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d128      	bne.n	8004d00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe f9ac 	bl	8003010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <xTaskPriorityDisinherit+0xd0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d903      	bls.n	8004ce0 <xTaskPriorityDisinherit+0xa0>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <xTaskPriorityDisinherit+0xd0>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <xTaskPriorityDisinherit+0xd4>)
 8004cee:	441a      	add	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fe f92d 	bl	8002f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d00:	697b      	ldr	r3, [r7, #20]
	}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200006f4 	.word	0x200006f4
 8004d10:	20000bd0 	.word	0x20000bd0
 8004d14:	200006f8 	.word	0x200006f8

08004d18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d068      	beq.n	8004e02 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e7fe      	b.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d902      	bls.n	8004d5c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e002      	b.n	8004d62 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d04a      	beq.n	8004e02 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d145      	bne.n	8004e02 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d76:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d109      	bne.n	8004d94 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	e7fe      	b.n	8004d92 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db04      	blt.n	8004db2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	6959      	ldr	r1, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	d11c      	bne.n	8004e02 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe f91f 	bl	8003010 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d903      	bls.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004df4:	441a      	add	r2, r3
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fe f8aa 	bl	8002f56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e02:	bf00      	nop
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200006f4 	.word	0x200006f4
 8004e10:	200006f8 	.word	0x200006f8
 8004e14:	20000bd0 	.word	0x20000bd0

08004e18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e2a:	3201      	adds	r2, #1
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8004e30:	681b      	ldr	r3, [r3, #0]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	200006f4 	.word	0x200006f4

08004e40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e50:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f8da 	bl	8003010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d10a      	bne.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4819      	ldr	r0, [pc, #100]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e74:	f7fe f86f 	bl	8002f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e78:	e026      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d209      	bcs.n	8004ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe f87d 	bl	8002f9e <vListInsert>
}
 8004ea4:	e010      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe f873 	bl	8002f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d202      	bcs.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000bcc 	.word	0x20000bcc
 8004ed4:	200006f4 	.word	0x200006f4
 8004ed8:	20000bb4 	.word	0x20000bb4
 8004edc:	20000b84 	.word	0x20000b84
 8004ee0:	20000b80 	.word	0x20000b80
 8004ee4:	20000be8 	.word	0x20000be8

08004ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ef2:	f000 faff 	bl	80054f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <xTimerCreateTimerTask+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f06:	1d3a      	adds	r2, r7, #4
 8004f08:	f107 0108 	add.w	r1, r7, #8
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fd ffd9 	bl	8002ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	2302      	movs	r3, #2
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	460a      	mov	r2, r1
 8004f28:	4910      	ldr	r1, [pc, #64]	; (8004f6c <xTimerCreateTimerTask+0x84>)
 8004f2a:	4811      	ldr	r0, [pc, #68]	; (8004f70 <xTimerCreateTimerTask+0x88>)
 8004f2c:	f7fe ff80 	bl	8003e30 <xTaskCreateStatic>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <xTimerCreateTimerTask+0x74>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e7fe      	b.n	8004f5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004f5c:	697b      	ldr	r3, [r7, #20]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000c24 	.word	0x20000c24
 8004f6c:	08005eb0 	.word	0x08005eb0
 8004f70:	080050a9 	.word	0x080050a9
 8004f74:	20000c28 	.word	0x20000c28

08004f78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <xTimerGenericCommand+0x2c>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	e7fe      	b.n	8004fa2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <xTimerGenericCommand+0x94>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02a      	beq.n	8005002 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	dc18      	bgt.n	8004ff0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fbe:	f7ff fdb9 	bl	8004b34 <xTaskGetSchedulerState>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d109      	bne.n	8004fdc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <xTimerGenericCommand+0x94>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	f107 0110 	add.w	r1, r7, #16
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd4:	f7fe f9ea 	bl	80033ac <xQueueGenericSend>
 8004fd8:	6278      	str	r0, [r7, #36]	; 0x24
 8004fda:	e012      	b.n	8005002 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <xTimerGenericCommand+0x94>)
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	f107 0110 	add.w	r1, r7, #16
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7fe f9e0 	bl	80033ac <xQueueGenericSend>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24
 8004fee:	e008      	b.n	8005002 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <xTimerGenericCommand+0x94>)
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	f107 0110 	add.w	r1, r7, #16
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	f7fe fad0 	bl	80035a0 <xQueueGenericSendFromISR>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005004:	4618      	mov	r0, r3
 8005006:	3728      	adds	r7, #40	; 0x28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000c24 	.word	0x20000c24

08005010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <prvProcessExpiredTimer+0x94>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fd fff1 	bl	8003010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d021      	beq.n	8005080 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	18d1      	adds	r1, r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f000 f8d1 	bl	80051f0 <prvInsertTimerInActiveList>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01e      	beq.n	8005092 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	2100      	movs	r1, #0
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff ff8a 	bl	8004f78 <xTimerGenericCommand>
 8005064:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d112      	bne.n	8005092 <prvProcessExpiredTimer+0x82>
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e7fe      	b.n	800507e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	4798      	blx	r3
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000c1c 	.word	0x20000c1c

080050a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f857 	bl	8005168 <prvGetNextExpireTime>
 80050ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4619      	mov	r1, r3
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f803 	bl	80050cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050c6:	f000 f8d5 	bl	8005274 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ca:	e7f1      	b.n	80050b0 <prvTimerTask+0x8>

080050cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050d6:	f7ff f95b 	bl	8004390 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f866 	bl	80051b0 <prvSampleTimeNow>
 80050e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d130      	bne.n	800514e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <prvProcessTimerOrBlockTask+0x3c>
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d806      	bhi.n	8005108 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050fa:	f7ff f957 	bl	80043ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ff85 	bl	8005010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005106:	e024      	b.n	8005152 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <prvProcessTimerOrBlockTask+0x90>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <prvProcessTimerOrBlockTask+0x50>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <prvProcessTimerOrBlockTask+0x52>
 800511c:	2300      	movs	r3, #0
 800511e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005120:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <prvProcessTimerOrBlockTask+0x94>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	f7fe fe4b 	bl	8003dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005132:	f7ff f93b 	bl	80043ac <xTaskResumeAll>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <prvProcessTimerOrBlockTask+0x98>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	f3bf 8f6f 	isb	sy
}
 800514c:	e001      	b.n	8005152 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800514e:	f7ff f92d 	bl	80043ac <xTaskResumeAll>
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000c20 	.word	0x20000c20
 8005160:	20000c24 	.word	0x20000c24
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <prvGetNextExpireTime+0x44>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <prvGetNextExpireTime+0x16>
 800517a:	2201      	movs	r2, #1
 800517c:	e000      	b.n	8005180 <prvGetNextExpireTime+0x18>
 800517e:	2200      	movs	r2, #0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <prvGetNextExpireTime+0x44>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e001      	b.n	800519c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000c1c 	.word	0x20000c1c

080051b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051b8:	f7ff f994 	bl	80044e4 <xTaskGetTickCount>
 80051bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <prvSampleTimeNow+0x3c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d205      	bcs.n	80051d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051c8:	f000 f930 	bl	800542c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e002      	b.n	80051da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvSampleTimeNow+0x3c>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000c2c 	.word	0x20000c2c

080051f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d812      	bhi.n	800523c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e01b      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <prvInsertTimerInActiveList+0x7c>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7fd feb2 	bl	8002f9e <vListInsert>
 800523a:	e012      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d206      	bcs.n	8005252 <prvInsertTimerInActiveList+0x62>
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e007      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvInsertTimerInActiveList+0x80>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3304      	adds	r3, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f7fd fe9e 	bl	8002f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000c20 	.word	0x20000c20
 8005270:	20000c1c 	.word	0x20000c1c

08005274 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527a:	e0c6      	b.n	800540a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da17      	bge.n	80052b2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	3304      	adds	r3, #4
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvProcessReceivedCommands+0x2e>
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e7fe      	b.n	80052a0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a8:	6850      	ldr	r0, [r2, #4]
 80052aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ac:	6892      	ldr	r2, [r2, #8]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f2c0 80a7 	blt.w	8005408 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd fea0 	bl	8003010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d0:	463b      	mov	r3, r7
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff ff6c 	bl	80051b0 <prvSampleTimeNow>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b09      	cmp	r3, #9
 80052de:	f200 8094 	bhi.w	800540a <prvProcessReceivedCommands+0x196>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <prvProcessReceivedCommands+0x74>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005383 	.word	0x08005383
 80052f8:	08005397 	.word	0x08005397
 80052fc:	080053df 	.word	0x080053df
 8005300:	08005311 	.word	0x08005311
 8005304:	08005311 	.word	0x08005311
 8005308:	08005383 	.word	0x08005383
 800530c:	08005397 	.word	0x08005397
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	18d1      	adds	r1, r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005330:	f7ff ff5e 	bl	80051f0 <prvInsertTimerInActiveList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d067      	beq.n	800540a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05c      	beq.n	800540a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	441a      	add	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	2100      	movs	r1, #0
 8005360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005362:	f7ff fe09 	bl	8004f78 <xTimerGenericCommand>
 8005366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d14d      	bne.n	800540a <prvProcessReceivedCommands+0x196>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	e7fe      	b.n	8005380 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	b2da      	uxtb	r2, r3
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005394:	e039      	b.n	800540a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvProcessReceivedCommands+0x156>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e7fe      	b.n	80053c8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	18d1      	adds	r1, r2, r3
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d8:	f7ff ff0a 	bl	80051f0 <prvInsertTimerInActiveList>
					break;
 80053dc:	e015      	b.n	800540a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ee:	f000 fbc1 	bl	8005b74 <vPortFree>
 80053f2:	e00a      	b.n	800540a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005406:	e000      	b.n	800540a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <prvProcessReceivedCommands+0x1b4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1d39      	adds	r1, r7, #4
 8005410:	2200      	movs	r2, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe f958 	bl	80036c8 <xQueueReceive>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f af2e 	bne.w	800527c <prvProcessReceivedCommands+0x8>
	}
}
 8005420:	bf00      	nop
 8005422:	3730      	adds	r7, #48	; 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000c24 	.word	0x20000c24

0800542c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005432:	e047      	b.n	80054c4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005434:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <prvSwitchTimerLists+0xc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800543e:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <prvSwitchTimerLists+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3304      	adds	r3, #4
 800544c:	4618      	mov	r0, r3
 800544e:	f7fd fddf 	bl	8003010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02d      	beq.n	80054c4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d90e      	bls.n	8005498 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005486:	4b19      	ldr	r3, [pc, #100]	; (80054ec <prvSwitchTimerLists+0xc0>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fd fd84 	bl	8002f9e <vListInsert>
 8005496:	e015      	b.n	80054c4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005498:	2300      	movs	r3, #0
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	2100      	movs	r1, #0
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff fd68 	bl	8004f78 <xTimerGenericCommand>
 80054a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <prvSwitchTimerLists+0x98>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	e7fe      	b.n	80054c2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <prvSwitchTimerLists+0xc0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1b2      	bne.n	8005434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <prvSwitchTimerLists+0xc0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <prvSwitchTimerLists+0xc4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <prvSwitchTimerLists+0xc0>)
 80054da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054dc:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <prvSwitchTimerLists+0xc4>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6013      	str	r3, [r2, #0]
}
 80054e2:	bf00      	nop
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000c1c 	.word	0x20000c1c
 80054f0:	20000c20 	.word	0x20000c20

080054f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054fa:	f000 f95f 	bl	80057bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <prvCheckForValidListAndQueue+0x60>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d120      	bne.n	8005548 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005506:	4814      	ldr	r0, [pc, #80]	; (8005558 <prvCheckForValidListAndQueue+0x64>)
 8005508:	f7fd fcf8 	bl	8002efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800550c:	4813      	ldr	r0, [pc, #76]	; (800555c <prvCheckForValidListAndQueue+0x68>)
 800550e:	f7fd fcf5 	bl	8002efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <prvCheckForValidListAndQueue+0x6c>)
 8005514:	4a10      	ldr	r2, [pc, #64]	; (8005558 <prvCheckForValidListAndQueue+0x64>)
 8005516:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <prvCheckForValidListAndQueue+0x70>)
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <prvCheckForValidListAndQueue+0x68>)
 800551c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <prvCheckForValidListAndQueue+0x74>)
 8005524:	4a11      	ldr	r2, [pc, #68]	; (800556c <prvCheckForValidListAndQueue+0x78>)
 8005526:	2110      	movs	r1, #16
 8005528:	200a      	movs	r0, #10
 800552a:	f7fd fe03 	bl	8003134 <xQueueGenericCreateStatic>
 800552e:	4602      	mov	r2, r0
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <prvCheckForValidListAndQueue+0x60>)
 8005532:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <prvCheckForValidListAndQueue+0x60>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <prvCheckForValidListAndQueue+0x60>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	490b      	ldr	r1, [pc, #44]	; (8005570 <prvCheckForValidListAndQueue+0x7c>)
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fbee 	bl	8003d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005548:	f000 f966 	bl	8005818 <vPortExitCritical>
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000c24 	.word	0x20000c24
 8005558:	20000bf4 	.word	0x20000bf4
 800555c:	20000c08 	.word	0x20000c08
 8005560:	20000c1c 	.word	0x20000c1c
 8005564:	20000c20 	.word	0x20000c20
 8005568:	20000cd0 	.word	0x20000cd0
 800556c:	20000c30 	.word	0x20000c30
 8005570:	08005eb8 	.word	0x08005eb8

08005574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b04      	subs	r3, #4
 8005584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800558c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b04      	subs	r3, #4
 8005592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b04      	subs	r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055a4:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <pxPortInitialiseStack+0x64>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3b14      	subs	r3, #20
 80055ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b04      	subs	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f06f 0202 	mvn.w	r2, #2
 80055c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b20      	subs	r3, #32
 80055c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	080055dd 	.word	0x080055dd

080055dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <prvTaskExitError+0x50>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d009      	beq.n	8005604 <prvTaskExitError+0x28>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e7fe      	b.n	8005602 <prvTaskExitError+0x26>
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005616:	bf00      	nop
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0fc      	beq.n	8005618 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000000c 	.word	0x2000000c

08005630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <pxCurrentTCBConst2>)
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	f380 8809 	msr	PSP, r0
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	4770      	bx	lr
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst2>:
 8005650:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005658:	4808      	ldr	r0, [pc, #32]	; (800567c <prvPortStartFirstTask+0x24>)
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f380 8808 	msr	MSP, r0
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8814 	msr	CONTROL, r0
 800566a:	b662      	cpsie	i
 800566c:	b661      	cpsie	f
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	df00      	svc	0
 8005678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800567a:	bf00      	nop
 800567c:	e000ed08 	.word	0xe000ed08

08005680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <xPortStartScheduler+0x118>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a44      	ldr	r2, [pc, #272]	; (800579c <xPortStartScheduler+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d109      	bne.n	80056a4 <xPortStartScheduler+0x24>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	e7fe      	b.n	80056a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056a4:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <xPortStartScheduler+0x118>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <xPortStartScheduler+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d109      	bne.n	80056c2 <xPortStartScheduler+0x42>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e7fe      	b.n	80056c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056c2:	4b38      	ldr	r3, [pc, #224]	; (80057a4 <xPortStartScheduler+0x124>)
 80056c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	22ff      	movs	r2, #255	; 0xff
 80056d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <xPortStartScheduler+0x128>)
 80056e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ea:	4b30      	ldr	r3, [pc, #192]	; (80057ac <xPortStartScheduler+0x12c>)
 80056ec:	2207      	movs	r2, #7
 80056ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056f0:	e009      	b.n	8005706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80056f2:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <xPortStartScheduler+0x12c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <xPortStartScheduler+0x12c>)
 80056fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d0ef      	beq.n	80056f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <xPortStartScheduler+0x12c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1c3 0307 	rsb	r3, r3, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	d009      	beq.n	8005732 <xPortStartScheduler+0xb2>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	e7fe      	b.n	8005730 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <xPortStartScheduler+0x12c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <xPortStartScheduler+0x12c>)
 800573a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <xPortStartScheduler+0x12c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <xPortStartScheduler+0x12c>)
 8005746:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <xPortStartScheduler+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <xPortStartScheduler+0x130>)
 8005756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800575a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <xPortStartScheduler+0x130>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <xPortStartScheduler+0x130>)
 8005762:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005768:	f000 f8d6 	bl	8005918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <xPortStartScheduler+0x134>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005772:	f000 f8f5 	bl	8005960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <xPortStartScheduler+0x138>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <xPortStartScheduler+0x138>)
 800577c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005780:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005782:	f7ff ff69 	bl	8005658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005786:	f7fe ff75 	bl	8004674 <vTaskSwitchContext>
	prvTaskExitError();
 800578a:	f7ff ff27 	bl	80055dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	e000ed00 	.word	0xe000ed00
 800579c:	410fc271 	.word	0x410fc271
 80057a0:	410fc270 	.word	0x410fc270
 80057a4:	e000e400 	.word	0xe000e400
 80057a8:	20000d20 	.word	0x20000d20
 80057ac:	20000d24 	.word	0x20000d24
 80057b0:	e000ed20 	.word	0xe000ed20
 80057b4:	2000000c 	.word	0x2000000c
 80057b8:	e000ef34 	.word	0xe000ef34

080057bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <vPortEnterCritical+0x54>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <vPortEnterCritical+0x54>)
 80057dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <vPortEnterCritical+0x54>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10e      	bne.n	8005804 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <vPortEnterCritical+0x58>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <vPortEnterCritical+0x48>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	e7fe      	b.n	8005802 <vPortEnterCritical+0x46>
	}
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2000000c 	.word	0x2000000c
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <vPortExitCritical+0x4c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <vPortExitCritical+0x22>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e7fe      	b.n	8005838 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vPortExitCritical+0x4c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a08      	ldr	r2, [pc, #32]	; (8005864 <vPortExitCritical+0x4c>)
 8005842:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <vPortExitCritical+0x4c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <vPortExitCritical+0x3e>
 800584c:	2300      	movs	r3, #0
 800584e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000000c 	.word	0x2000000c
	...

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7fe fee8 	bl	8004674 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f0:	f7fe fe08 	bl	8004504 <xTaskIncrementTick>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <SysTick_Handler+0x3c>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <vPortSetupTimerInterrupt+0x34>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vPortSetupTimerInterrupt+0x38>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <vPortSetupTimerInterrupt+0x3c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <vPortSetupTimerInterrupt+0x40>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	4a09      	ldr	r2, [pc, #36]	; (800595c <vPortSetupTimerInterrupt+0x44>)
 8005936:	3b01      	subs	r3, #1
 8005938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <vPortSetupTimerInterrupt+0x34>)
 800593c:	2207      	movs	r2, #7
 800593e:	601a      	str	r2, [r3, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000e010 	.word	0xe000e010
 8005950:	e000e018 	.word	0xe000e018
 8005954:	20000000 	.word	0x20000000
 8005958:	10624dd3 	.word	0x10624dd3
 800595c:	e000e014 	.word	0xe000e014

08005960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005970 <vPortEnableVFP+0x10>
 8005964:	6801      	ldr	r1, [r0, #0]
 8005966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800596a:	6001      	str	r1, [r0, #0]
 800596c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800596e:	bf00      	nop
 8005970:	e000ed88 	.word	0xe000ed88

08005974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800597a:	f3ef 8305 	mrs	r3, IPSR
 800597e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d913      	bls.n	80059ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <vPortValidateInterruptPriority+0x6c>)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <vPortValidateInterruptPriority+0x70>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	7afa      	ldrb	r2, [r7, #11]
 8005996:	429a      	cmp	r2, r3
 8005998:	d209      	bcs.n	80059ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	e7fe      	b.n	80059ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <vPortValidateInterruptPriority+0x74>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <vPortValidateInterruptPriority+0x78>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d909      	bls.n	80059d2 <vPortValidateInterruptPriority+0x5e>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	e7fe      	b.n	80059d0 <vPortValidateInterruptPriority+0x5c>
	}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e3f0 	.word	0xe000e3f0
 80059e4:	20000d20 	.word	0x20000d20
 80059e8:	e000ed0c 	.word	0xe000ed0c
 80059ec:	20000d24 	.word	0x20000d24

080059f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059fc:	f7fe fcc8 	bl	8004390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a00:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <pvPortMalloc+0x170>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a08:	f000 f90c 	bl	8005c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a0c:	4b55      	ldr	r3, [pc, #340]	; (8005b64 <pvPortMalloc+0x174>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 808c 	bne.w	8005b32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01c      	beq.n	8005a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a20:	2208      	movs	r2, #8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f023 0307 	bic.w	r3, r3, #7
 8005a38:	3308      	adds	r3, #8
 8005a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <pvPortMalloc+0x6a>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e7fe      	b.n	8005a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d068      	beq.n	8005b32 <pvPortMalloc+0x142>
 8005a60:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <pvPortMalloc+0x178>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d863      	bhi.n	8005b32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a6a:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <pvPortMalloc+0x17c>)
 8005a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <pvPortMalloc+0x17c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a74:	e004      	b.n	8005a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d903      	bls.n	8005a92 <pvPortMalloc+0xa2>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f1      	bne.n	8005a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a92:	4b33      	ldr	r3, [pc, #204]	; (8005b60 <pvPortMalloc+0x170>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d04a      	beq.n	8005b32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	4413      	add	r3, r2
 8005aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d91e      	bls.n	8005afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <pvPortMalloc+0xf4>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e7fe      	b.n	8005ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f000 f8f6 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <pvPortMalloc+0x178>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <pvPortMalloc+0x178>)
 8005b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b0a:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <pvPortMalloc+0x178>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <pvPortMalloc+0x180>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d203      	bcs.n	8005b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <pvPortMalloc+0x178>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <pvPortMalloc+0x180>)
 8005b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <pvPortMalloc+0x174>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b32:	f7fe fc3b 	bl	80043ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <pvPortMalloc+0x164>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e7fe      	b.n	8005b52 <pvPortMalloc+0x162>
	return pvReturn;
 8005b54:	69fb      	ldr	r3, [r7, #28]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	; 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20004930 	.word	0x20004930
 8005b64:	2000493c 	.word	0x2000493c
 8005b68:	20004934 	.word	0x20004934
 8005b6c:	20004928 	.word	0x20004928
 8005b70:	20004938 	.word	0x20004938

08005b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d046      	beq.n	8005c14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b86:	2308      	movs	r3, #8
 8005b88:	425b      	negs	r3, r3
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <vPortFree+0xa8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <vPortFree+0x42>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e7fe      	b.n	8005bb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <vPortFree+0x5e>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	e7fe      	b.n	8005bd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <vPortFree+0xa8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <vPortFree+0xa8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bf8:	f7fe fbca 	bl	8004390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vPortFree+0xac>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <vPortFree+0xac>)
 8005c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c0a:	6938      	ldr	r0, [r7, #16]
 8005c0c:	f000 f86c 	bl	8005ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c10:	f7fe fbcc 	bl	80043ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000493c 	.word	0x2000493c
 8005c20:	20004934 	.word	0x20004934

08005c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <prvHeapInit+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <prvHeapInit+0xac>)
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c70:	2208      	movs	r2, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvHeapInit+0xb4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvHeapInit+0xb8>)
 8005cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <prvHeapInit+0xbc>)
 8005cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <prvHeapInit+0xc0>)
 8005cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000d28 	.word	0x20000d28
 8005cd4:	20004928 	.word	0x20004928
 8005cd8:	20004930 	.word	0x20004930
 8005cdc:	20004938 	.word	0x20004938
 8005ce0:	20004934 	.word	0x20004934
 8005ce4:	2000493c 	.word	0x2000493c

08005ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <prvInsertBlockIntoFreeList+0x14>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d118      	bne.n	8005d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00d      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e003      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d002      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20004928 	.word	0x20004928
 8005d98:	20004930 	.word	0x20004930

08005d9c <__libc_init_array>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0d      	ldr	r6, [pc, #52]	; (8005dd4 <__libc_init_array+0x38>)
 8005da0:	4c0d      	ldr	r4, [pc, #52]	; (8005dd8 <__libc_init_array+0x3c>)
 8005da2:	1ba4      	subs	r4, r4, r6
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	2500      	movs	r5, #0
 8005da8:	42a5      	cmp	r5, r4
 8005daa:	d109      	bne.n	8005dc0 <__libc_init_array+0x24>
 8005dac:	4e0b      	ldr	r6, [pc, #44]	; (8005ddc <__libc_init_array+0x40>)
 8005dae:	4c0c      	ldr	r4, [pc, #48]	; (8005de0 <__libc_init_array+0x44>)
 8005db0:	f000 f82c 	bl	8005e0c <_init>
 8005db4:	1ba4      	subs	r4, r4, r6
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	2500      	movs	r5, #0
 8005dba:	42a5      	cmp	r5, r4
 8005dbc:	d105      	bne.n	8005dca <__libc_init_array+0x2e>
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc4:	4798      	blx	r3
 8005dc6:	3501      	adds	r5, #1
 8005dc8:	e7ee      	b.n	8005da8 <__libc_init_array+0xc>
 8005dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dce:	4798      	blx	r3
 8005dd0:	3501      	adds	r5, #1
 8005dd2:	e7f2      	b.n	8005dba <__libc_init_array+0x1e>
 8005dd4:	08006004 	.word	0x08006004
 8005dd8:	08006004 	.word	0x08006004
 8005ddc:	08006004 	.word	0x08006004
 8005de0:	08006008 	.word	0x08006008

08005de4 <memcpy>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	1e43      	subs	r3, r0, #1
 8005de8:	440a      	add	r2, r1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	d100      	bne.n	8005df0 <memcpy+0xc>
 8005dee:	bd10      	pop	{r4, pc}
 8005df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df8:	e7f7      	b.n	8005dea <memcpy+0x6>

08005dfa <memset>:
 8005dfa:	4402      	add	r2, r0
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d100      	bne.n	8005e04 <memset+0xa>
 8005e02:	4770      	bx	lr
 8005e04:	f803 1b01 	strb.w	r1, [r3], #1
 8005e08:	e7f9      	b.n	8005dfe <memset+0x4>
	...

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
