
G474_HRITM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d88  08003d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d90  08003d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08003da4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003da4  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f988  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9a  00000000  00000000  0002f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00032350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025aae  00000000  00000000  00033098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4f3  00000000  00000000  00058b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001026a2  00000000  00000000  00067039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001696db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  00169730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003d30 	.word	0x08003d30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003d30 	.word	0x08003d30

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb02 	bl	8000b1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f815 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f9b1 	bl	8000884 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 8000522:	f000 f879 	bl	8000618 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f961 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // __HAL_RCC_HRTIM1_CONFIG(RCC_HRTIM1CLK_PLLCLK); //выбор выхода PLL для тактирования таймера HRTIM1
  __HRTIM1_CLK_ENABLE(); //включение тактирование регистров таймера HRTIM1
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <main+0x34>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <main+0x34>)
 8000530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b03      	ldr	r3, [pc, #12]	; (8000544 <main+0x34>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x32>
 8000544:	40021000 	.word	0x40021000

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0a8      	sub	sp, #160	; 0xa0
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000552:	2238      	movs	r2, #56	; 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fbe2 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2254      	movs	r2, #84	; 0x54
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fbd4 	bl	8003d20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057c:	f001 fdee 	bl	800215c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000596:	2304      	movs	r3, #4
 8000598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 48;
 800059c:	2330      	movs	r3, #48	; 0x30
 800059e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fe83 	bl	80022c4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c4:	f000 f982 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005de:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f984 	bl	80028f4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f2:	f000 f96b 	bl	80008cc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fb93 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800060c:	f000 f95e 	bl	80008cc <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	37a0      	adds	r7, #160	; 0xa0
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0ae      	sub	sp, #184	; 0xb8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800061e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800062c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000644:	2260      	movs	r2, #96	; 0x60
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fb69 	bl	8003d20 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fb5d 	bl	8003d20 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000666:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 8000668:	4a5f      	ldr	r2, [pc, #380]	; (80007e8 <MX_HRTIM1_Init+0x1d0>)
 800066a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800066c:	4b5d      	ldr	r3, [pc, #372]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000672:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000678:	485a      	ldr	r0, [pc, #360]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 800067a:	f000 fd27 	bl	80010cc <HAL_HRTIM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_HRTIM1_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 f922 	bl	80008cc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000688:	210c      	movs	r1, #12
 800068a:	4856      	ldr	r0, [pc, #344]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 800068c:	f000 fdee 	bl	800126c <HAL_HRTIM_DLLCalibrationStart>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_HRTIM1_Init+0x82>
  {
    Error_Handler();
 8000696:	f000 f919 	bl	80008cc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800069a:	210a      	movs	r1, #10
 800069c:	4851      	ldr	r0, [pc, #324]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 800069e:	f000 fe3d 	bl	800131c <HAL_HRTIM_PollForDLLCalibration>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_HRTIM1_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 f910 	bl	80008cc <Error_Handler>
  }
  pTimeBaseCfg.Period = TIMB_PERIOD;
 80006ac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80006b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80006c0:	2308      	movs	r3, #8
 80006c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80006c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006ca:	461a      	mov	r2, r3
 80006cc:	2101      	movs	r1, #1
 80006ce:	4845      	ldr	r0, [pc, #276]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 80006d0:	f000 fe58 	bl	8001384 <HAL_HRTIM_TimeBaseConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_HRTIM1_Init+0xc6>
  {
    Error_Handler();
 80006da:	f000 f8f7 	bl	80008cc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80006f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006f4:	461a      	mov	r2, r3
 80006f6:	2101      	movs	r1, #1
 80006f8:	483a      	ldr	r0, [pc, #232]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 80006fa:	f000 fedd 	bl	80014b8 <HAL_HRTIM_WaveformTimerControl>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 8000704:	f000 f8e2 	bl	80008cc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8000718:	2301      	movs	r3, #1
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800071c:	2300      	movs	r3, #0
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000720:	2300      	movs	r3, #0
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000734:	2300      	movs	r3, #0
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000738:	2300      	movs	r3, #0
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800073c:	2300      	movs	r3, #0
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000740:	2300      	movs	r3, #0
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800074c:	2300      	movs	r3, #0
 800074e:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000750:	2300      	movs	r3, #0
 8000752:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	461a      	mov	r2, r3
 8000770:	2101      	movs	r1, #1
 8000772:	481c      	ldr	r0, [pc, #112]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 8000774:	f000 fe2e 	bl	80013d4 <HAL_HRTIM_WaveformTimerConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_HRTIM1_Init+0x16a>
  {
    Error_Handler();
 800077e:	f000 f8a5 	bl	80008cc <Error_Handler>
  }
  pCompareCfg.CompareValue = TIMB_PERIOD * TIMB_DUTY_CYCLE;
 8000782:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000786:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 8000792:	f000 fec5 	bl	8001520 <HAL_HRTIM_WaveformCompareConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_HRTIM1_Init+0x188>
  {
    Error_Handler();
 800079c:	f000 f896 	bl	80008cc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80007a4:	2304      	movs	r3, #4
 80007a6:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80007a8:	2308      	movs	r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2204      	movs	r2, #4
 80007c4:	2101      	movs	r1, #1
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 80007c8:	f001 f818 	bl	80017fc <HAL_HRTIM_WaveformOutputConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_HRTIM1_Init+0x1be>
  {
    Error_Handler();
 80007d2:	f000 f87b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_HRTIM1_Init+0x1cc>)
 80007d8:	f000 f8c2 	bl	8000960 <HAL_HRTIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	37b8      	adds	r7, #184	; 0xb8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000028 	.word	0x20000028
 80007e8:	40016800 	.word	0x40016800

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_USART2_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_USART2_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_USART2_UART_Init+0x90>)
 80007f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_USART2_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000836:	f002 fcc5 	bl	80031c4 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f844 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_USART2_UART_Init+0x90>)
 8000848:	f003 f97c 	bl	8003b44 <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000852:	f000 f83b 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x90>)
 800085a:	f003 f9b1 	bl	8003bc0 <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 f832 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USART2_UART_Init+0x90>)
 800086a:	f003 f932 	bl	8003ad2 <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 f82a 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000124 	.word	0x20000124
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0x44>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x44>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_GPIO_Init+0x44>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x44>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_GPIO_Init+0x44>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090e:	f001 fcc9 	bl	80022a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_HRTIM_MspInit+0x38>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_HRTIM_MspInit+0x3c>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_HRTIM_MspInit+0x3c>)
 8000938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_HRTIM_MspInit+0x3c>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40016800 	.word	0x40016800
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_HRTIM_MspPostInit+0x68>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d11d      	bne.n	80009be <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_HRTIM_MspPostInit+0x6c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <HAL_HRTIM_MspPostInit+0x6c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_HRTIM_MspPostInit+0x6c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA10     ------> HRTIM1_CHB1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80009ac:	230d      	movs	r3, #13
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f000 fa05 	bl	8000dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40016800 	.word	0x40016800
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d128      	bne.n	8000a44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x80>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_UART_MspInit+0x80>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 f9c2 	bl	8000dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f890 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0b      	ldr	r4, [pc, #44]	; (8000b18 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af6:	f7ff ffd7 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f003 f8ed 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f7ff fd07 	bl	8000510 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   r0, =_estack
 8000b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b10:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b18:	200001b8 	.word	0x200001b8

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>

08000b1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f91b 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f80e 	bl	8000b50 <HAL_InitTick>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	e001      	b.n	8000b44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b40:	f7ff feca 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b44:	79fb      	ldrb	r3, [r7, #7]

}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_InitTick+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d022      	beq.n	8000baa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_InitTick+0x6c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_InitTick+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f918 	bl	8000dae <HAL_SYSTICK_Config>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10f      	bne.n	8000ba4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	d809      	bhi.n	8000b9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b92:	f000 f8f2 	bl	8000d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_InitTick+0x70>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e004      	b.n	8000bae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200001b4 	.word	0x200001b4
 8000be4:	20000008 	.word	0x20000008

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200001b4 	.word	0x200001b4

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff47 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff5e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff90 	bl	8000cb8 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5f 	bl	8000c64 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffb2 	bl	8000d20 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dd6:	e15a      	b.n	800108e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 814c 	beq.w	8001088 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d00b      	beq.n	8000e10 <HAL_GPIO_Init+0x48>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	2b11      	cmp	r3, #17
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b12      	cmp	r3, #18
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 0201 	and.w	r2, r3, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0xea>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d123      	bne.n	8000efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	6939      	ldr	r1, [r7, #16]
 8000ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0203 	and.w	r2, r3, #3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80a6 	beq.w	8001088 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	4a5a      	ldr	r2, [pc, #360]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6613      	str	r3, [r2, #96]	; 0x60
 8000f48:	4b58      	ldr	r3, [pc, #352]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f54:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7e:	d01f      	beq.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d019      	beq.n	8000fbc <HAL_GPIO_Init+0x1f4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <HAL_GPIO_Init+0x1f0>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x2f4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_GPIO_Init+0x2fc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1e4>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e00a      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fac:	2306      	movs	r3, #6
 8000fae:	e008      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd2:	4937      	ldr	r1, [pc, #220]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001004:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x300>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102e:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x300>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f ae9d 	bne.w	8000dd8 <HAL_GPIO_Init+0x10>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	48001000 	.word	0x48001000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0be      	b.n	800125c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2202      	movs	r2, #2
 80010e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02e      	beq.n	8001188 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <HAL_HRTIM_Init+0x198>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d10b      	bne.n	800114c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_HRTIM_Init+0x19c>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001138:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <HAL_HRTIM_Init+0x19c>)
 800113a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800113e:	6613      	str	r3, [r2, #96]	; 0x60
 8001140:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_HRTIM_Init+0x19c>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800115a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001170:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fbc9 	bl	8000920 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011a8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80011d0:	2300      	movs	r3, #0
 80011d2:	75fb      	strb	r3, [r7, #23]
 80011d4:	e03e      	b.n	8001254 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80011d6:	7dfa      	ldrb	r2, [r7, #23]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	3318      	adds	r3, #24
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80011ea:	7dfa      	ldrb	r2, [r7, #23]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	331c      	adds	r3, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80011fe:	7dfa      	ldrb	r2, [r7, #23]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3320      	adds	r3, #32
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001212:	7dfa      	ldrb	r2, [r7, #23]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3324      	adds	r3, #36	; 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001226:	7dfa      	ldrb	r2, [r7, #23]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3328      	adds	r3, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800123a:	7dfa      	ldrb	r2, [r7, #23]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3330      	adds	r3, #48	; 0x30
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	3301      	adds	r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b06      	cmp	r3, #6
 8001258:	d9bd      	bls.n	80011d6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40016800 	.word	0x40016800
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001280:	2302      	movs	r3, #2
 8001282:	e045      	b.n	8001310 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2202      	movs	r2, #2
 8001290:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129a:	d114      	bne.n	80012c6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0202 	bic.w	r2, r2, #2
 80012ac:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80012c4:	e01f      	b.n	8001306 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0202 	orr.w	r2, r2, #2
 80012d6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80012e2:	f023 010c 	bic.w	r1, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8001326:	f7ff fc5f 	bl	8000be8 <HAL_GetTick>
 800132a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800132c:	e014      	b.n	8001358 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d010      	beq.n	8001358 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8001336:	f7ff fc57 	bl	8000be8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d302      	bcc.n	800134c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2207      	movs	r2, #7
 8001350:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e011      	b.n	800137c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d1e1      	bne.n	800132e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d101      	bne.n	80013a0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800139c:	2302      	movs	r3, #2
 800139e:	e015      	b.n	80013cc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d104      	bne.n	80013b8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 fa54 	bl	800185e <HRTIM_MasterBase_Config>
 80013b6:	e004      	b.n	80013c2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 fa7d 	bl	80018bc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d101      	bne.n	80013f0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e05f      	b.n	80014b0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e058      	b.n	80014b0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b06      	cmp	r3, #6
 8001412:	d104      	bne.n	800141e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 fa90 	bl	800193c <HRTIM_MasterWaveform_Config>
 800141c:	e004      	b.n	8001428 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 fb28 	bl	8001a78 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4403      	add	r3, r0
 800143a:	3320      	adds	r3, #32
 800143c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4403      	add	r3, r0
 8001450:	3324      	adds	r3, #36	; 0x24
 8001452:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4403      	add	r3, r0
 8001466:	3328      	adds	r3, #40	; 0x28
 8001468:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	332c      	adds	r3, #44	; 0x2c
 800147e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6919      	ldr	r1, [r3, #16]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4403      	add	r3, r0
 8001492:	3330      	adds	r3, #48	; 0x30
 8001494:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fdf1 	bl	8002080 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d101      	bne.n	80014d4 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80014d0:	2302      	movs	r3, #2
 80014d2:	e020      	b.n	8001516 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80014de:	2302      	movs	r3, #2
 80014e0:	e019      	b.n	8001516 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fc52 	bl	8001da0 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fdbe 	bl	8002080 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d101      	bne.n	800153e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
 800153c:	e157      	b.n	80017ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8001548:	2302      	movs	r3, #2
 800154a:	e150      	b.n	80017ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d140      	bne.n	80015e4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3b01      	subs	r3, #1
 8001566:	2b07      	cmp	r3, #7
 8001568:	d82a      	bhi.n	80015c0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001591 	.word	0x08001591
 8001574:	0800159d 	.word	0x0800159d
 8001578:	080015c1 	.word	0x080015c1
 800157c:	080015a9 	.word	0x080015a9
 8001580:	080015c1 	.word	0x080015c1
 8001584:	080015c1 	.word	0x080015c1
 8001588:	080015c1 	.word	0x080015c1
 800158c:	080015b5 	.word	0x080015b5
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	61da      	str	r2, [r3, #28]
        break;
 800159a:	e01a      	b.n	80015d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80015a6:	e014      	b.n	80015d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80015b2:	e00e      	b.n	80015d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80015be:	e008      	b.n	80015d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2207      	movs	r2, #7
 80015c4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 80015d0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b07      	cmp	r3, #7
 80015dc:	f040 80fe 	bne.w	80017dc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e104      	b.n	80017ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	f200 80e3 	bhi.w	80017b4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001615 	.word	0x08001615
 80015f8:	08001629 	.word	0x08001629
 80015fc:	080017b5 	.word	0x080017b5
 8001600:	080016e5 	.word	0x080016e5
 8001604:	080017b5 	.word	0x080017b5
 8001608:	080017b5 	.word	0x080017b5
 800160c:	080017b5 	.word	0x080017b5
 8001610:	080016f9 	.word	0x080016f9
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	01db      	lsls	r3, r3, #7
 8001620:	440b      	add	r3, r1
 8001622:	339c      	adds	r3, #156	; 0x9c
 8001624:	601a      	str	r2, [r3, #0]
        break;
 8001626:	e0d1      	b.n	80017cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	440b      	add	r3, r1
 8001636:	33a4      	adds	r3, #164	; 0xa4
 8001638:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03f      	beq.n	80016c2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	01db      	lsls	r3, r3, #7
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	6811      	ldr	r1, [r2, #0]
 8001654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	440b      	add	r3, r1
 8001660:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3301      	adds	r3, #1
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4413      	add	r3, r2
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	6809      	ldr	r1, [r1, #0]
 8001678:	431a      	orrs	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	01db      	lsls	r3, r3, #7
 8001680:	440b      	add	r3, r1
 8001682:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168c:	d109      	bne.n	80016a2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	01db      	lsls	r3, r3, #7
 800169a:	440b      	add	r3, r1
 800169c:	339c      	adds	r3, #156	; 0x9c
 800169e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80016a0:	e091      	b.n	80017c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016aa:	f040 808c 	bne.w	80017c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	01db      	lsls	r3, r3, #7
 80016ba:	440b      	add	r3, r1
 80016bc:	33a8      	adds	r3, #168	; 0xa8
 80016be:	601a      	str	r2, [r3, #0]
         break;
 80016c0:	e081      	b.n	80017c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	01db      	lsls	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	6811      	ldr	r1, [r2, #0]
 80016d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3301      	adds	r3, #1
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	440b      	add	r3, r1
 80016e0:	601a      	str	r2, [r3, #0]
         break;
 80016e2:	e070      	b.n	80017c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	440b      	add	r3, r1
 80016f2:	33a8      	adds	r3, #168	; 0xa8
 80016f4:	601a      	str	r2, [r3, #0]
        break;
 80016f6:	e069      	b.n	80017cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	01db      	lsls	r3, r3, #7
 8001704:	440b      	add	r3, r1
 8001706:	33ac      	adds	r3, #172	; 0xac
 8001708:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03f      	beq.n	8001792 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	01db      	lsls	r3, r3, #7
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	440b      	add	r3, r1
 8001730:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	01db      	lsls	r3, r3, #7
 800173c:	4413      	add	r3, r2
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	6809      	ldr	r1, [r1, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3301      	adds	r3, #1
 8001750:	01db      	lsls	r3, r3, #7
 8001752:	440b      	add	r3, r1
 8001754:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175e:	d109      	bne.n	8001774 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	440b      	add	r3, r1
 800176e:	339c      	adds	r3, #156	; 0x9c
 8001770:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8001772:	e02a      	b.n	80017ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800177c:	d125      	bne.n	80017ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	440b      	add	r3, r1
 800178c:	33a8      	adds	r3, #168	; 0xa8
 800178e:	601a      	str	r2, [r3, #0]
         break;
 8001790:	e01b      	b.n	80017ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	01db      	lsls	r3, r3, #7
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	6811      	ldr	r1, [r2, #0]
 80017a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	3301      	adds	r3, #1
 80017ac:	01db      	lsls	r3, r3, #7
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
         break;
 80017b2:	e00a      	b.n	80017ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2207      	movs	r2, #7
 80017b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80017c4:	e002      	b.n	80017cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80017c6:	bf00      	nop
 80017c8:	e000      	b.n	80017cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80017ca:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d101      	bne.n	80017dc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e008      	b.n	80017ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d101      	bne.n	800181a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
 8001818:	e01d      	b.n	8001856 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001824:	2302      	movs	r3, #2
 8001826:	e016      	b.n	8001856 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fb0e 	bl	8001e60 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 0307 	bic.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f023 0318 	bic.w	r3, r3, #24
 8001888:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6852      	ldr	r2, [r2, #4]
 80018ae:	619a      	str	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	4413      	add	r3, r2
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f023 0318 	bic.w	r3, r3, #24
 80018f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3301      	adds	r3, #1
 8001904:	01db      	lsls	r3, r3, #7
 8001906:	4413      	add	r3, r2
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	01db      	lsls	r3, r3, #7
 8001918:	440b      	add	r3, r1
 800191a:	3394      	adds	r3, #148	; 0x94
 800191c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	440b      	add	r3, r1
 800192c:	3398      	adds	r3, #152	; 0x98
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8001956:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 0320 	bic.w	r3, r3, #32
 800195e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001970:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b20      	cmp	r3, #32
 8001978:	d003      	beq.n	8001982 <HRTIM_MasterWaveform_Config+0x46>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d108      	bne.n	8001994 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001988:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e021      	b.n	80019d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d108      	bne.n	80019ae <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a2:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e014      	b.n	80019d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d108      	bne.n	80019c8 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e007      	b.n	80019d8 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 0320 	bic.w	r3, r3, #32
 80019ce:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019d6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001a02:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001a14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001a26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001a3a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	01db      	lsls	r3, r3, #7
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	6811      	ldr	r1, [r2, #0]
 8001a96:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	440b      	add	r3, r1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	33e8      	adds	r3, #232	; 0xe8
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	4413      	add	r3, r2
 8001ace:	33e4      	adds	r3, #228	; 0xe4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8001adc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f023 0320 	bic.w	r3, r3, #32
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	4313      	orrs	r3, r2
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d003      	beq.n	8001b00 <HRTIM_TimingUnitWaveform_Config+0x88>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d108      	bne.n	8001b12 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	e021      	b.n	8001b56 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d108      	bne.n	8001b2c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e014      	b.n	8001b56 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d108      	bne.n	8001b46 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	e007      	b.n	8001b56 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f023 0320 	bic.w	r3, r3, #32
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	4313      	orrs	r3, r2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b76:	4313      	orrs	r3, r2
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4313      	orrs	r3, r2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bdc:	d103      	bne.n	8001be6 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c06:	4313      	orrs	r3, r2
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c26:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c3c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8001c62:	d004      	beq.n	8001c6e <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c68:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8001c6c:	d103      	bne.n	8001c76 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d108      	bne.n	8001c88 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8001c7c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c82:	6a3a      	ldr	r2, [r7, #32]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c8e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d850      	bhi.n	8001d48 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HRTIM_TimingUnitWaveform_Config+0x234>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cdb 	.word	0x08001cdb
 8001cb4:	08001cf1 	.word	0x08001cf1
 8001cb8:	08001d07 	.word	0x08001d07
 8001cbc:	08001d1d 	.word	0x08001d1d
 8001cc0:	08001d33 	.word	0x08001d33
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]
      break;
 8001cd8:	e037      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61fb      	str	r3, [r7, #28]
      break;
 8001cee:	e02c      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001cf6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61fb      	str	r3, [r7, #28]
      break;
 8001d04:	e021      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d0c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
      break;
 8001d1a:	e016      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d22:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	015b      	lsls	r3, r3, #5
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
      break;
 8001d30:	e00b      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d38:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	019b      	lsls	r3, r3, #6
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
      break;
 8001d46:	e000      	b.n	8001d4a <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8001d48:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3301      	adds	r3, #1
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	4413      	add	r3, r2
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	4413      	add	r3, r2
 8001d64:	33e8      	adds	r3, #232	; 0xe8
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	01db      	lsls	r3, r3, #7
 8001d72:	4413      	add	r3, r2
 8001d74:	33e4      	adds	r3, #228	; 0xe4
 8001d76:	6a3a      	ldr	r2, [r7, #32]
 8001d78:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	01db      	lsls	r3, r3, #7
 8001d82:	4413      	add	r3, r2
 8001d84:	33d4      	adds	r3, #212	; 0xd4
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8001d94:	bf00      	nop
 8001d96:	372c      	adds	r7, #44	; 0x2c
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	01db      	lsls	r3, r3, #7
 8001db4:	4413      	add	r3, r2
 8001db6:	33ec      	adds	r3, #236	; 0xec
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f023 0310 	bic.w	r3, r3, #16
 8001dc2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dd6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dfa:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11a      	bne.n	8001e44 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f023 0302 	bic.w	r3, r3, #2
 8001e26:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4413      	add	r3, r2
 8001e4e:	33ec      	adds	r3, #236	; 0xec
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]

}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	4413      	add	r3, r2
 8001e7c:	33e4      	adds	r3, #228	; 0xe4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	01db      	lsls	r3, r3, #7
 8001e8a:	4413      	add	r3, r2
 8001e8c:	33b8      	adds	r3, #184	; 0xb8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	617b      	str	r3, [r7, #20]

  switch (Output)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e98:	f000 8088 	beq.w	8001fac <HRTIM_OutputConfig+0x14c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea2:	f200 8098 	bhi.w	8001fd6 <HRTIM_OutputConfig+0x176>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d06b      	beq.n	8001f86 <HRTIM_OutputConfig+0x126>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb4:	f200 808f 	bhi.w	8001fd6 <HRTIM_OutputConfig+0x176>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ebe:	d075      	beq.n	8001fac <HRTIM_OutputConfig+0x14c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec6:	f200 8086 	bhi.w	8001fd6 <HRTIM_OutputConfig+0x176>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed0:	d059      	beq.n	8001f86 <HRTIM_OutputConfig+0x126>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed8:	d87d      	bhi.n	8001fd6 <HRTIM_OutputConfig+0x176>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d065      	beq.n	8001fac <HRTIM_OutputConfig+0x14c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d877      	bhi.n	8001fd6 <HRTIM_OutputConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d849      	bhi.n	8001f80 <HRTIM_OutputConfig+0x120>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d071      	beq.n	8001fd6 <HRTIM_OutputConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	d86d      	bhi.n	8001fd6 <HRTIM_OutputConfig+0x176>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <HRTIM_OutputConfig+0xa0>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f87 	.word	0x08001f87
 8001f04:	08001fad 	.word	0x08001fad
 8001f08:	08001fd7 	.word	0x08001fd7
 8001f0c:	08001f87 	.word	0x08001f87
 8001f10:	08001fd7 	.word	0x08001fd7
 8001f14:	08001fd7 	.word	0x08001fd7
 8001f18:	08001fd7 	.word	0x08001fd7
 8001f1c:	08001fad 	.word	0x08001fad
 8001f20:	08001fd7 	.word	0x08001fd7
 8001f24:	08001fd7 	.word	0x08001fd7
 8001f28:	08001fd7 	.word	0x08001fd7
 8001f2c:	08001fd7 	.word	0x08001fd7
 8001f30:	08001fd7 	.word	0x08001fd7
 8001f34:	08001fd7 	.word	0x08001fd7
 8001f38:	08001fd7 	.word	0x08001fd7
 8001f3c:	08001f87 	.word	0x08001f87
 8001f40:	08001fd7 	.word	0x08001fd7
 8001f44:	08001fd7 	.word	0x08001fd7
 8001f48:	08001fd7 	.word	0x08001fd7
 8001f4c:	08001fd7 	.word	0x08001fd7
 8001f50:	08001fd7 	.word	0x08001fd7
 8001f54:	08001fd7 	.word	0x08001fd7
 8001f58:	08001fd7 	.word	0x08001fd7
 8001f5c:	08001fd7 	.word	0x08001fd7
 8001f60:	08001fd7 	.word	0x08001fd7
 8001f64:	08001fd7 	.word	0x08001fd7
 8001f68:	08001fd7 	.word	0x08001fd7
 8001f6c:	08001fd7 	.word	0x08001fd7
 8001f70:	08001fd7 	.word	0x08001fd7
 8001f74:	08001fd7 	.word	0x08001fd7
 8001f78:	08001fd7 	.word	0x08001fd7
 8001f7c:	08001fad 	.word	0x08001fad
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d127      	bne.n	8001fd6 <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	01db      	lsls	r3, r3, #7
 8001f92:	440b      	add	r3, r1
 8001f94:	33bc      	adds	r3, #188	; 0xbc
 8001f96:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	440b      	add	r3, r1
 8001fa6:	33c0      	adds	r3, #192	; 0xc0
 8001fa8:	601a      	str	r2, [r3, #0]
      break;
 8001faa:	e015      	b.n	8001fd8 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	440b      	add	r3, r1
 8001fba:	33c4      	adds	r3, #196	; 0xc4
 8001fbc:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	440b      	add	r3, r1
 8001fcc:	33c8      	adds	r3, #200	; 0xc8
 8001fce:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	61bb      	str	r3, [r7, #24]
      break;
 8001fd4:	e000      	b.n	8001fd8 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 8001fd6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8001fd8:	22fe      	movs	r2, #254	; 0xfe
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	4313      	orrs	r3, r2
 8002006:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	4313      	orrs	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	4313      	orrs	r3, r2
 8002026:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	4313      	orrs	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d111      	bne.n	8002064 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4313      	orrs	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	01db      	lsls	r3, r3, #7
 800206c:	4413      	add	r3, r2
 800206e:	33e4      	adds	r3, #228	; 0xe4
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	3724      	adds	r7, #36	; 0x24
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b06      	cmp	r3, #6
 800208e:	d85e      	bhi.n	800214e <HRTIM_ForceRegistersUpdate+0xce>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <HRTIM_ForceRegistersUpdate+0x18>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020cb 	.word	0x080020cb
 800209c:	080020e1 	.word	0x080020e1
 80020a0:	080020f7 	.word	0x080020f7
 80020a4:	0800210d 	.word	0x0800210d
 80020a8:	08002123 	.word	0x08002123
 80020ac:	08002139 	.word	0x08002139
 80020b0:	080020b5 	.word	0x080020b5
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80020c8:	e042      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0202 	orr.w	r2, r2, #2
 80020da:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80020de:	e037      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0204 	orr.w	r2, r2, #4
 80020f0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80020f4:	e02c      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800210a:	e021      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0210 	orr.w	r2, r2, #16
 800211c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002120:	e016      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002136:	e00b      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002148:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800214c:	e000      	b.n	8002150 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800214e:	bf00      	nop
  }
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d141      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d131      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2232      	movs	r2, #50	; 0x32
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ae:	e002      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d102      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d158      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e057      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e2:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021ec:	e04d      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f4:	d141      	bne.n	800227a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d131      	bne.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2232      	movs	r2, #50	; 0x32
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223a:	e002      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d102      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f2      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002262:	d112      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e011      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002278:	e007      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002288:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40007000 	.word	0x40007000
 800229c:	20000000 	.word	0x20000000
 80022a0:	431bde83 	.word	0x431bde83

080022a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80022ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b2:	6093      	str	r3, [r2, #8]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e308      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d075      	beq.n	80023ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4ba3      	ldr	r3, [pc, #652]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x3e>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d002      	beq.n	8002308 <HAL_RCC_OscConfig+0x44>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b99      	ldr	r3, [pc, #612]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05b      	beq.n	80023cc <HAL_RCC_OscConfig+0x108>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d157      	bne.n	80023cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e2e3      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x74>
 800232a:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 800235c:	4b84      	ldr	r3, [pc, #528]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a83      	ldr	r2, [pc, #524]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fc34 	bl	8000be8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fc30 	bl	8000be8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e2a8      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xc0>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fc20 	bl	8000be8 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fc1c 	bl	8000be8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e294      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0xe8>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e4:	4b62      	ldr	r3, [pc, #392]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_OscConfig+0x136>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_OscConfig+0x13c>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11f      	bne.n	8002440 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_OscConfig+0x154>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e267      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	4952      	ldr	r1, [pc, #328]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800242c:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_RCC_OscConfig+0x2b0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fb8d 	bl	8000b50 <HAL_InitTick>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d043      	beq.n	80024c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e253      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a48      	ldr	r2, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fbc8 	bl	8000be8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fbc4 	bl	8000be8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e23c      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
 800248e:	e01a      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002490:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a36      	ldr	r2, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fba4 	bl	8000be8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fba0 	bl	8000be8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e218      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1e0>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d03c      	beq.n	800254c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01c      	beq.n	8002514 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fb7d 	bl	8000be8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fb79 	bl	8000be8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1f1      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ef      	beq.n	80024f2 <HAL_RCC_OscConfig+0x22e>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fb60 	bl	8000be8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fb5c 	bl	8000be8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1d4      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80ab 	beq.w	80026b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x2b4>
 800256a:	2301      	movs	r3, #1
 800256c:	e005      	b.n	800257a <HAL_RCC_OscConfig+0x2b6>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	20000004 	.word	0x20000004
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4baf      	ldr	r3, [pc, #700]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4aae      	ldr	r2, [pc, #696]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
 800258a:	4bac      	ldr	r3, [pc, #688]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259a:	4ba9      	ldr	r3, [pc, #676]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d118      	bne.n	80025d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a6:	4ba6      	ldr	r3, [pc, #664]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4aa5      	ldr	r2, [pc, #660]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fb19 	bl	8000be8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe fb15 	bl	8000be8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e18d      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025cc:	4b9c      	ldr	r3, [pc, #624]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d108      	bne.n	80025f2 <HAL_RCC_OscConfig+0x32e>
 80025e0:	4b96      	ldr	r3, [pc, #600]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a95      	ldr	r2, [pc, #596]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f0:	e024      	b.n	800263c <HAL_RCC_OscConfig+0x378>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d110      	bne.n	800261c <HAL_RCC_OscConfig+0x358>
 80025fa:	4b90      	ldr	r3, [pc, #576]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	4a8e      	ldr	r2, [pc, #568]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	4a8a      	ldr	r2, [pc, #552]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x378>
 800261c:	4b87      	ldr	r3, [pc, #540]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a86      	ldr	r2, [pc, #536]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800262c:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	4a82      	ldr	r2, [pc, #520]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d016      	beq.n	8002672 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fad0 	bl	8000be8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe facc 	bl	8000be8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e142      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ed      	beq.n	800264c <HAL_RCC_OscConfig+0x388>
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002672:	f7fe fab9 	bl	8000be8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fab5 	bl	8000be8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e12b      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ed      	bne.n	800267a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a64      	ldr	r2, [pc, #400]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03c      	beq.n	8002736 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c4:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fa88 	bl	8000be8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026dc:	f7fe fa84 	bl	8000be8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0fc      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x418>
 80026fc:	e01b      	b.n	8002736 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026fe:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002704:	4a4d      	ldr	r2, [pc, #308]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fa6b 	bl	8000be8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002716:	f7fe fa67 	bl	8000be8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0df      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002728:	4b44      	ldr	r3, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ef      	bne.n	8002716 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80d3 	beq.w	80028e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002740:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b0c      	cmp	r3, #12
 800274a:	f000 808d 	beq.w	8002868 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d15a      	bne.n	800280c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a38      	ldr	r2, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800275c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fa41 	bl	8000be8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fa3d 	bl	8000be8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0b5      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x580>)
 800278e:	4013      	ands	r3, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6a11      	ldr	r1, [r2, #32]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002798:	3a01      	subs	r2, #1
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	4311      	orrs	r1, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027a2:	0212      	lsls	r2, r2, #8
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0552      	lsls	r2, r2, #21
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027b6:	0852      	lsrs	r2, r2, #1
 80027b8:	3a01      	subs	r2, #1
 80027ba:	0652      	lsls	r2, r2, #25
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027c2:	06d2      	lsls	r2, r2, #27
 80027c4:	430a      	orrs	r2, r1
 80027c6:	491d      	ldr	r1, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fa00 	bl	8000be8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe f9fc 	bl	8000be8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e074      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x528>
 800280a:	e06c      	b.n	80028e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800282a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe f9d8 	bl	8000be8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283a:	e00e      	b.n	800285a <HAL_RCC_OscConfig+0x596>
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
 8002844:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe f9ce 	bl	8000be8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e046      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_OscConfig+0x62c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x584>
 8002866:	e03e      	b.n	80028e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e039      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x62c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d12c      	bne.n	80028e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d123      	bne.n	80028e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d11b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d113      	bne.n	80028e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e11e      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 020f 	bic.w	r2, r3, #15
 8002922:	498c      	ldr	r1, [pc, #560]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e106      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d073      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d129      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0f4      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002960:	f000 f99e 	bl	8002ca0 <RCC_GetSysClockFreqFromPLLSource>
 8002964:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_ClockConfig+0x268>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d93f      	bls.n	80029ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002982:	2b00      	cmp	r3, #0
 8002984:	d033      	beq.n	80029ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d12f      	bne.n	80029ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002996:	4a70      	ldr	r2, [pc, #448]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e024      	b.n	80029ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0c6      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029bc:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0be      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029cc:	f000 f8ce 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_RCC_ClockConfig+0x268>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d909      	bls.n	80029ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e2:	4a5d      	ldr	r2, [pc, #372]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4957      	ldr	r1, [pc, #348]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe f8f2 	bl	8000be8 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe f8ee 	bl	8000be8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e095      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a68:	4a3b      	ldr	r2, [pc, #236]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4936      	ldr	r1, [pc, #216]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a32      	ldr	r2, [pc, #200]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d21d      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 020f 	bic.w	r2, r3, #15
 8002aac:	4929      	ldr	r1, [pc, #164]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe f898 	bl	8000be8 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe f894 	bl	8000be8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e03b      	b.n	8002b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1ed      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4917      	ldr	r1, [pc, #92]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490f      	ldr	r1, [pc, #60]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1e:	f000 f825 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_RCC_ClockConfig+0x264>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490c      	ldr	r1, [pc, #48]	; (8002b60 <HAL_RCC_ClockConfig+0x26c>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f804 	bl	8000b50 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	04c4b400 	.word	0x04c4b400
 8002b60:	08003d48 	.word	0x08003d48
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b72:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e047      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e03e      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d136      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bc0:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bca:	68d2      	ldr	r2, [r2, #12]
 8002bcc:	0a12      	lsrs	r2, r2, #8
 8002bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	0a12      	lsrs	r2, r2, #8
 8002be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
      break;
 8002bf2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0e5b      	lsrs	r3, r3, #25
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e001      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c14:	693b      	ldr	r3, [r7, #16]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	017d7840 	.word	0x017d7840

08002c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4904      	ldr	r1, [pc, #16]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08003d58 	.word	0x08003d58

08002c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c78:	f7ff ffda 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0adb      	lsrs	r3, r3, #11
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4904      	ldr	r1, [pc, #16]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08003d58 	.word	0x08003d58

08002ca0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d10c      	bne.n	8002cde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cce:	68d2      	ldr	r2, [r2, #12]
 8002cd0:	0a12      	lsrs	r2, r2, #8
 8002cd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
    break;
 8002cdc:	e00c      	b.n	8002cf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	0a12      	lsrs	r2, r2, #8
 8002cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    break;
 8002cf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0e5b      	lsrs	r3, r3, #25
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	3301      	adds	r3, #1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000
 8002d24:	017d7840 	.word	0x017d7840
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d34:	2300      	movs	r3, #0
 8002d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8098 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a39      	ldr	r2, [pc, #228]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d82:	f7fd ff31 	bl	8000be8 <HAL_GetTick>
 8002d86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d88:	e009      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fd ff2d 	bl	8000be8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d902      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d9c:	e005      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d159      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002db0:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d019      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fd feed 	bl	8000be8 <HAL_GetTick>
 8002e0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e10:	e00b      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fd fee9 	bl	8000be8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d902      	bls.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	74fb      	strb	r3, [r7, #19]
            break;
 8002e28:	e006      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ec      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e54:	e008      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e68:	7c7b      	ldrb	r3, [r7, #17]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4baf      	ldr	r3, [pc, #700]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	4aae      	ldr	r2, [pc, #696]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e86:	4ba9      	ldr	r3, [pc, #676]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 0203 	bic.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	49a5      	ldr	r1, [pc, #660]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 020c 	bic.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	499d      	ldr	r1, [pc, #628]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eca:	4b98      	ldr	r3, [pc, #608]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4994      	ldr	r1, [pc, #592]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eec:	4b8f      	ldr	r3, [pc, #572]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	498c      	ldr	r1, [pc, #560]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f0e:	4b87      	ldr	r3, [pc, #540]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	4983      	ldr	r1, [pc, #524]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f30:	4b7e      	ldr	r3, [pc, #504]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	497b      	ldr	r1, [pc, #492]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4972      	ldr	r1, [pc, #456]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f74:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	496a      	ldr	r1, [pc, #424]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	4961      	ldr	r1, [pc, #388]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	4959      	ldr	r1, [pc, #356]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	4950      	ldr	r1, [pc, #320]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4948      	ldr	r1, [pc, #288]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301a:	d105      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	493a      	ldr	r1, [pc, #232]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003052:	d105      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800305a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	492c      	ldr	r1, [pc, #176]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308a:	d105      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003096:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	491e      	ldr	r1, [pc, #120]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c2:	d105      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4910      	ldr	r1, [pc, #64]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d105      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d018      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4902      	ldr	r1, [pc, #8]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800312a:	e001      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800312c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003138:	d105      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d015      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	4917      	ldr	r1, [pc, #92]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d105      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d015      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800318c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a8:	d105      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80031b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fbf1 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2224      	movs	r2, #36	; 0x24
 80031f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f82c 	bl	8003264 <UART_SetConfig>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e022      	b.n	800325c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faea 	bl	80037f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fb71 	bl	800393c <UART_CheckIdleState>
 800325a:	4603      	mov	r3, r0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	b5b0      	push	{r4, r5, r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4313      	orrs	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4bb1      	ldr	r3, [pc, #708]	; (8003554 <UART_SetConfig+0x2f0>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	430b      	orrs	r3, r1
 800329a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4aa6      	ldr	r2, [pc, #664]	; (8003558 <UART_SetConfig+0x2f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f023 010f 	bic.w	r1, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a97      	ldr	r2, [pc, #604]	; (800355c <UART_SetConfig+0x2f8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d120      	bne.n	8003346 <UART_SetConfig+0xe2>
 8003304:	4b96      	ldr	r3, [pc, #600]	; (8003560 <UART_SetConfig+0x2fc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b03      	cmp	r3, #3
 8003310:	d816      	bhi.n	8003340 <UART_SetConfig+0xdc>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0xb4>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003329 	.word	0x08003329
 800331c:	08003335 	.word	0x08003335
 8003320:	0800332f 	.word	0x0800332f
 8003324:	0800333b 	.word	0x0800333b
 8003328:	2301      	movs	r3, #1
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e0e7      	b.n	80034fe <UART_SetConfig+0x29a>
 800332e:	2302      	movs	r3, #2
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e0e4      	b.n	80034fe <UART_SetConfig+0x29a>
 8003334:	2304      	movs	r3, #4
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e0e1      	b.n	80034fe <UART_SetConfig+0x29a>
 800333a:	2308      	movs	r3, #8
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e0de      	b.n	80034fe <UART_SetConfig+0x29a>
 8003340:	2310      	movs	r3, #16
 8003342:	76fb      	strb	r3, [r7, #27]
 8003344:	e0db      	b.n	80034fe <UART_SetConfig+0x29a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a86      	ldr	r2, [pc, #536]	; (8003564 <UART_SetConfig+0x300>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d132      	bne.n	80033b6 <UART_SetConfig+0x152>
 8003350:	4b83      	ldr	r3, [pc, #524]	; (8003560 <UART_SetConfig+0x2fc>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d828      	bhi.n	80033b0 <UART_SetConfig+0x14c>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x100>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003399 	.word	0x08003399
 8003368:	080033b1 	.word	0x080033b1
 800336c:	080033b1 	.word	0x080033b1
 8003370:	080033b1 	.word	0x080033b1
 8003374:	080033a5 	.word	0x080033a5
 8003378:	080033b1 	.word	0x080033b1
 800337c:	080033b1 	.word	0x080033b1
 8003380:	080033b1 	.word	0x080033b1
 8003384:	0800339f 	.word	0x0800339f
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b1 	.word	0x080033b1
 8003394:	080033ab 	.word	0x080033ab
 8003398:	2300      	movs	r3, #0
 800339a:	76fb      	strb	r3, [r7, #27]
 800339c:	e0af      	b.n	80034fe <UART_SetConfig+0x29a>
 800339e:	2302      	movs	r3, #2
 80033a0:	76fb      	strb	r3, [r7, #27]
 80033a2:	e0ac      	b.n	80034fe <UART_SetConfig+0x29a>
 80033a4:	2304      	movs	r3, #4
 80033a6:	76fb      	strb	r3, [r7, #27]
 80033a8:	e0a9      	b.n	80034fe <UART_SetConfig+0x29a>
 80033aa:	2308      	movs	r3, #8
 80033ac:	76fb      	strb	r3, [r7, #27]
 80033ae:	e0a6      	b.n	80034fe <UART_SetConfig+0x29a>
 80033b0:	2310      	movs	r3, #16
 80033b2:	76fb      	strb	r3, [r7, #27]
 80033b4:	e0a3      	b.n	80034fe <UART_SetConfig+0x29a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <UART_SetConfig+0x304>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d120      	bne.n	8003402 <UART_SetConfig+0x19e>
 80033c0:	4b67      	ldr	r3, [pc, #412]	; (8003560 <UART_SetConfig+0x2fc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033ca:	2b30      	cmp	r3, #48	; 0x30
 80033cc:	d013      	beq.n	80033f6 <UART_SetConfig+0x192>
 80033ce:	2b30      	cmp	r3, #48	; 0x30
 80033d0:	d814      	bhi.n	80033fc <UART_SetConfig+0x198>
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d009      	beq.n	80033ea <UART_SetConfig+0x186>
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d810      	bhi.n	80033fc <UART_SetConfig+0x198>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <UART_SetConfig+0x180>
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d006      	beq.n	80033f0 <UART_SetConfig+0x18c>
 80033e2:	e00b      	b.n	80033fc <UART_SetConfig+0x198>
 80033e4:	2300      	movs	r3, #0
 80033e6:	76fb      	strb	r3, [r7, #27]
 80033e8:	e089      	b.n	80034fe <UART_SetConfig+0x29a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	76fb      	strb	r3, [r7, #27]
 80033ee:	e086      	b.n	80034fe <UART_SetConfig+0x29a>
 80033f0:	2304      	movs	r3, #4
 80033f2:	76fb      	strb	r3, [r7, #27]
 80033f4:	e083      	b.n	80034fe <UART_SetConfig+0x29a>
 80033f6:	2308      	movs	r3, #8
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e080      	b.n	80034fe <UART_SetConfig+0x29a>
 80033fc:	2310      	movs	r3, #16
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	e07d      	b.n	80034fe <UART_SetConfig+0x29a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a59      	ldr	r2, [pc, #356]	; (800356c <UART_SetConfig+0x308>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d120      	bne.n	800344e <UART_SetConfig+0x1ea>
 800340c:	4b54      	ldr	r3, [pc, #336]	; (8003560 <UART_SetConfig+0x2fc>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003416:	2bc0      	cmp	r3, #192	; 0xc0
 8003418:	d013      	beq.n	8003442 <UART_SetConfig+0x1de>
 800341a:	2bc0      	cmp	r3, #192	; 0xc0
 800341c:	d814      	bhi.n	8003448 <UART_SetConfig+0x1e4>
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d009      	beq.n	8003436 <UART_SetConfig+0x1d2>
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d810      	bhi.n	8003448 <UART_SetConfig+0x1e4>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <UART_SetConfig+0x1cc>
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d006      	beq.n	800343c <UART_SetConfig+0x1d8>
 800342e:	e00b      	b.n	8003448 <UART_SetConfig+0x1e4>
 8003430:	2300      	movs	r3, #0
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e063      	b.n	80034fe <UART_SetConfig+0x29a>
 8003436:	2302      	movs	r3, #2
 8003438:	76fb      	strb	r3, [r7, #27]
 800343a:	e060      	b.n	80034fe <UART_SetConfig+0x29a>
 800343c:	2304      	movs	r3, #4
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e05d      	b.n	80034fe <UART_SetConfig+0x29a>
 8003442:	2308      	movs	r3, #8
 8003444:	76fb      	strb	r3, [r7, #27]
 8003446:	e05a      	b.n	80034fe <UART_SetConfig+0x29a>
 8003448:	2310      	movs	r3, #16
 800344a:	76fb      	strb	r3, [r7, #27]
 800344c:	e057      	b.n	80034fe <UART_SetConfig+0x29a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <UART_SetConfig+0x30c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d125      	bne.n	80034a4 <UART_SetConfig+0x240>
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <UART_SetConfig+0x2fc>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003466:	d017      	beq.n	8003498 <UART_SetConfig+0x234>
 8003468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346c:	d817      	bhi.n	800349e <UART_SetConfig+0x23a>
 800346e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003472:	d00b      	beq.n	800348c <UART_SetConfig+0x228>
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d811      	bhi.n	800349e <UART_SetConfig+0x23a>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <UART_SetConfig+0x222>
 800347e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003482:	d006      	beq.n	8003492 <UART_SetConfig+0x22e>
 8003484:	e00b      	b.n	800349e <UART_SetConfig+0x23a>
 8003486:	2300      	movs	r3, #0
 8003488:	76fb      	strb	r3, [r7, #27]
 800348a:	e038      	b.n	80034fe <UART_SetConfig+0x29a>
 800348c:	2302      	movs	r3, #2
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	e035      	b.n	80034fe <UART_SetConfig+0x29a>
 8003492:	2304      	movs	r3, #4
 8003494:	76fb      	strb	r3, [r7, #27]
 8003496:	e032      	b.n	80034fe <UART_SetConfig+0x29a>
 8003498:	2308      	movs	r3, #8
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e02f      	b.n	80034fe <UART_SetConfig+0x29a>
 800349e:	2310      	movs	r3, #16
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e02c      	b.n	80034fe <UART_SetConfig+0x29a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <UART_SetConfig+0x2f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d125      	bne.n	80034fa <UART_SetConfig+0x296>
 80034ae:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <UART_SetConfig+0x2fc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034bc:	d017      	beq.n	80034ee <UART_SetConfig+0x28a>
 80034be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034c2:	d817      	bhi.n	80034f4 <UART_SetConfig+0x290>
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c8:	d00b      	beq.n	80034e2 <UART_SetConfig+0x27e>
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ce:	d811      	bhi.n	80034f4 <UART_SetConfig+0x290>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <UART_SetConfig+0x278>
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d006      	beq.n	80034e8 <UART_SetConfig+0x284>
 80034da:	e00b      	b.n	80034f4 <UART_SetConfig+0x290>
 80034dc:	2300      	movs	r3, #0
 80034de:	76fb      	strb	r3, [r7, #27]
 80034e0:	e00d      	b.n	80034fe <UART_SetConfig+0x29a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	76fb      	strb	r3, [r7, #27]
 80034e6:	e00a      	b.n	80034fe <UART_SetConfig+0x29a>
 80034e8:	2304      	movs	r3, #4
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	e007      	b.n	80034fe <UART_SetConfig+0x29a>
 80034ee:	2308      	movs	r3, #8
 80034f0:	76fb      	strb	r3, [r7, #27]
 80034f2:	e004      	b.n	80034fe <UART_SetConfig+0x29a>
 80034f4:	2310      	movs	r3, #16
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e001      	b.n	80034fe <UART_SetConfig+0x29a>
 80034fa:	2310      	movs	r3, #16
 80034fc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <UART_SetConfig+0x2f4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	f040 809f 	bne.w	8003648 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350a:	7efb      	ldrb	r3, [r7, #27]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d837      	bhi.n	8003580 <UART_SetConfig+0x31c>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <UART_SetConfig+0x2b4>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003581 	.word	0x08003581
 8003520:	08003545 	.word	0x08003545
 8003524:	08003581 	.word	0x08003581
 8003528:	0800354b 	.word	0x0800354b
 800352c:	08003581 	.word	0x08003581
 8003530:	08003581 	.word	0x08003581
 8003534:	08003581 	.word	0x08003581
 8003538:	08003579 	.word	0x08003579
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff fb84 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003540:	6178      	str	r0, [r7, #20]
        break;
 8003542:	e022      	b.n	800358a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <UART_SetConfig+0x310>)
 8003546:	617b      	str	r3, [r7, #20]
        break;
 8003548:	e01f      	b.n	800358a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7ff fb0f 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 800354e:	6178      	str	r0, [r7, #20]
        break;
 8003550:	e01b      	b.n	800358a <UART_SetConfig+0x326>
 8003552:	bf00      	nop
 8003554:	cfff69f3 	.word	0xcfff69f3
 8003558:	40008000 	.word	0x40008000
 800355c:	40013800 	.word	0x40013800
 8003560:	40021000 	.word	0x40021000
 8003564:	40004400 	.word	0x40004400
 8003568:	40004800 	.word	0x40004800
 800356c:	40004c00 	.word	0x40004c00
 8003570:	40005000 	.word	0x40005000
 8003574:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357c:	617b      	str	r3, [r7, #20]
        break;
 800357e:	e004      	b.n	800358a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	76bb      	strb	r3, [r7, #26]
        break;
 8003588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 811b 	beq.w	80037c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4a96      	ldr	r2, [pc, #600]	; (80037f0 <UART_SetConfig+0x58c>)
 8003598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359c:	461a      	mov	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d305      	bcc.n	80035c2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d902      	bls.n	80035c8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	76bb      	strb	r3, [r7, #26]
 80035c6:	e0ff      	b.n	80037c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	4a86      	ldr	r2, [pc, #536]	; (80037f0 <UART_SetConfig+0x58c>)
 80035d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	f7fc fe1a 	bl	8000218 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	020b      	lsls	r3, r1, #8
 80035f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035fa:	0202      	lsls	r2, r0, #8
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	6849      	ldr	r1, [r1, #4]
 8003600:	0849      	lsrs	r1, r1, #1
 8003602:	4608      	mov	r0, r1
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	1814      	adds	r4, r2, r0
 800360a:	eb43 0501 	adc.w	r5, r3, r1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	461a      	mov	r2, r3
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	4620      	mov	r0, r4
 800361a:	4629      	mov	r1, r5
 800361c:	f7fc fdfc 	bl	8000218 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362e:	d308      	bcc.n	8003642 <UART_SetConfig+0x3de>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003636:	d204      	bcs.n	8003642 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	e0c2      	b.n	80037c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	76bb      	strb	r3, [r7, #26]
 8003646:	e0bf      	b.n	80037c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003650:	d165      	bne.n	800371e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003652:	7efb      	ldrb	r3, [r7, #27]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d828      	bhi.n	80036aa <UART_SetConfig+0x446>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <UART_SetConfig+0x3fc>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003685 	.word	0x08003685
 8003664:	0800368d 	.word	0x0800368d
 8003668:	08003695 	.word	0x08003695
 800366c:	080036ab 	.word	0x080036ab
 8003670:	0800369b 	.word	0x0800369b
 8003674:	080036ab 	.word	0x080036ab
 8003678:	080036ab 	.word	0x080036ab
 800367c:	080036ab 	.word	0x080036ab
 8003680:	080036a3 	.word	0x080036a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003684:	f7ff fae0 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003688:	6178      	str	r0, [r7, #20]
        break;
 800368a:	e013      	b.n	80036b4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7ff faf2 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8003690:	6178      	str	r0, [r7, #20]
        break;
 8003692:	e00f      	b.n	80036b4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003694:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <UART_SetConfig+0x590>)
 8003696:	617b      	str	r3, [r7, #20]
        break;
 8003698:	e00c      	b.n	80036b4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369a:	f7ff fa67 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 800369e:	6178      	str	r0, [r7, #20]
        break;
 80036a0:	e008      	b.n	80036b4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a6:	617b      	str	r3, [r7, #20]
        break;
 80036a8:	e004      	b.n	80036b4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	76bb      	strb	r3, [r7, #26]
        break;
 80036b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8086 	beq.w	80037c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <UART_SetConfig+0x58c>)
 80036c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c6:	461a      	mov	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ce:	005a      	lsls	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	d916      	bls.n	8003718 <UART_SetConfig+0x4b4>
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d212      	bcs.n	8003718 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f023 030f 	bic.w	r3, r3, #15
 80036fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	b29a      	uxth	r2, r3
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	4313      	orrs	r3, r2
 800370c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	89fa      	ldrh	r2, [r7, #14]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e057      	b.n	80037c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	76bb      	strb	r3, [r7, #26]
 800371c:	e054      	b.n	80037c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800371e:	7efb      	ldrb	r3, [r7, #27]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d828      	bhi.n	8003776 <UART_SetConfig+0x512>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x4c8>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003751 	.word	0x08003751
 8003730:	08003759 	.word	0x08003759
 8003734:	08003761 	.word	0x08003761
 8003738:	08003777 	.word	0x08003777
 800373c:	08003767 	.word	0x08003767
 8003740:	08003777 	.word	0x08003777
 8003744:	08003777 	.word	0x08003777
 8003748:	08003777 	.word	0x08003777
 800374c:	0800376f 	.word	0x0800376f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7ff fa7a 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003754:	6178      	str	r0, [r7, #20]
        break;
 8003756:	e013      	b.n	8003780 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff fa8c 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 800375c:	6178      	str	r0, [r7, #20]
        break;
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <UART_SetConfig+0x590>)
 8003762:	617b      	str	r3, [r7, #20]
        break;
 8003764:	e00c      	b.n	8003780 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7ff fa01 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 800376a:	6178      	str	r0, [r7, #20]
        break;
 800376c:	e008      	b.n	8003780 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	617b      	str	r3, [r7, #20]
        break;
 8003774:	e004      	b.n	8003780 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	76bb      	strb	r3, [r7, #26]
        break;
 800377e:	bf00      	nop
    }

    if (pclk != 0U)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d020      	beq.n	80037c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <UART_SetConfig+0x58c>)
 800378c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003790:	461a      	mov	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fbb3 f2f2 	udiv	r2, r3, r2
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	d908      	bls.n	80037c4 <UART_SetConfig+0x560>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d204      	bcs.n	80037c4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	e001      	b.n	80037c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bdb0      	pop	{r4, r5, r7, pc}
 80037ee:	bf00      	nop
 80037f0:	08003d60 	.word	0x08003d60
 80037f4:	00f42400 	.word	0x00f42400

080037f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f6:	d10a      	bne.n	800390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800394c:	f7fd f94c 	bl	8000be8 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d10e      	bne.n	800397e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f82f 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e025      	b.n	80039ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d10e      	bne.n	80039aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f819 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e00f      	b.n	80039ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	e062      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d05e      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fd f8fc 	bl	8000be8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11d      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e045      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02e      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d126      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d08d      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e027      	b.n	8003b38 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e02d      	b.n	8003bb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	; 0x24
 8003b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f84f 	bl	8003c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e02d      	b.n	8003c34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f811 	bl	8003c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c5c:	e031      	b.n	8003cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c5e:	2308      	movs	r3, #8
 8003c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c62:	2308      	movs	r3, #8
 8003c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	0e5b      	lsrs	r3, r3, #25
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0f5b      	lsrs	r3, r3, #29
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	7b3a      	ldrb	r2, [r7, #12]
 8003c8a:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8003c8c:	5c8a      	ldrb	r2, [r1, r2]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c92:	7b3a      	ldrb	r2, [r7, #12]
 8003c94:	490f      	ldr	r1, [pc, #60]	; (8003cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8003c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	7b7a      	ldrb	r2, [r7, #13]
 8003ca8:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8003caa:	5c8a      	ldrb	r2, [r1, r2]
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cb0:	7b7a      	ldrb	r2, [r7, #13]
 8003cb2:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8003cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	08003d78 	.word	0x08003d78
 8003cd4:	08003d80 	.word	0x08003d80

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4d0d      	ldr	r5, [pc, #52]	; (8003d10 <__libc_init_array+0x38>)
 8003cdc:	4c0d      	ldr	r4, [pc, #52]	; (8003d14 <__libc_init_array+0x3c>)
 8003cde:	1b64      	subs	r4, r4, r5
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	4d0b      	ldr	r5, [pc, #44]	; (8003d18 <__libc_init_array+0x40>)
 8003cea:	4c0c      	ldr	r4, [pc, #48]	; (8003d1c <__libc_init_array+0x44>)
 8003cec:	f000 f820 	bl	8003d30 <_init>
 8003cf0:	1b64      	subs	r4, r4, r5
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08003d90 	.word	0x08003d90
 8003d14:	08003d90 	.word	0x08003d90
 8003d18:	08003d90 	.word	0x08003d90
 8003d1c:	08003d94 	.word	0x08003d94

08003d20 <memset>:
 8003d20:	4402      	add	r2, r0
 8003d22:	4603      	mov	r3, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
