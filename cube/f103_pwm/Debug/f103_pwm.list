
f103_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003480  08003480  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003480  08003480  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003480  08003480  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000074  080034fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080034fc  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b350  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e4  00000000  00000000  0002b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7f  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b761  00000000  00000000  00045ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a826  00000000  00000000  00051620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbe46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  000dbe9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080033d8 	.word	0x080033d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080033d8 	.word	0x080033d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
static char UART_msg_TX[msg_SIZE]; // массив для формирования сообщений для вывода по UART

//прерывание 1 раз в 2 мс
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d142      	bne.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        {
        	if (flag)
 800016e:	4b23      	ldr	r3, [pc, #140]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d01f      	beq.n	80001b6 <HAL_TIM_PeriodElapsedCallback+0x5a>
        	{
        		duty_ch1 += PERIOD/100; // прибавляем длительность импульса  PWM по 1
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	3301      	adds	r3, #1
 800017c:	4a20      	ldr	r2, [pc, #128]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800017e:	6013      	str	r3, [r2, #0]
        		TIM1->CCR1 = duty_ch1;
 8000180:	4a20      	ldr	r2, [pc, #128]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000182:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	6353      	str	r3, [r2, #52]	; 0x34
        		if(duty_ch1 >= PERIOD)
 8000188:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b63      	cmp	r3, #99	; 0x63
 800018e:	d931      	bls.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        		{
        			flag = 0;
 8000190:	4b1a      	ldr	r3, [pc, #104]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
        			sprintf (UART_msg_TX,"flag=0\r\n");
 8000196:	491c      	ldr	r1, [pc, #112]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000198:	481c      	ldr	r0, [pc, #112]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800019a:	f002 fce3 	bl	8002b64 <siprintf>
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800019e:	481b      	ldr	r0, [pc, #108]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ac:	4917      	ldr	r1, [pc, #92]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ae:	4818      	ldr	r0, [pc, #96]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001b0:	f002 fb3c 	bl	800282c <HAL_UART_Transmit>
        	}
        }

 //       sprintf (UART_msg_TX,"timer2\r\n");
//        HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 }
 80001b4:	e01e      	b.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        		duty_ch1 -= PERIOD/100; // убавляем длительность импульса PWM по 1
 80001b6:	4b12      	ldr	r3, [pc, #72]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	4a10      	ldr	r2, [pc, #64]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001be:	6013      	str	r3, [r2, #0]
        		TIM1->CCR1 = duty_ch1;
 80001c0:	4a10      	ldr	r2, [pc, #64]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001c2:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	6353      	str	r3, [r2, #52]	; 0x34
        		if(duty_ch1 <= 1)
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d811      	bhi.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        			flag = 1;
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]
        			sprintf (UART_msg_TX,"flag=1\r\n");
 80001d6:	490f      	ldr	r1, [pc, #60]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001da:	f002 fcc3 	bl	8002b64 <siprintf>
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ee:	4808      	ldr	r0, [pc, #32]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001f0:	f002 fb1c 	bl	800282c <HAL_UART_Transmit>
 }
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000000 	.word	0x20000000
 8000200:	20000090 	.word	0x20000090
 8000204:	40012c00 	.word	0x40012c00
 8000208:	080033f0 	.word	0x080033f0
 800020c:	20000094 	.word	0x20000094
 8000210:	200000dc 	.word	0x200000dc
 8000214:	080033fc 	.word	0x080033fc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbf7 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f871 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9f3 	bl	8000610 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800022a:	f000 f99d 	bl	8000568 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800022e:	f000 f8af 	bl	8000390 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000232:	f000 f94d 	bl	80004d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f9c1 	bl	80005bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t count = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	71fb      	strb	r3, [r7, #7]
  TIM1->CCR1 = PERIOD/4;
 800023e:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <main+0xd4>)
 8000240:	2219      	movs	r2, #25
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000244:	2100      	movs	r1, #0
 8000246:	482a      	ldr	r0, [pc, #168]	; (80002f0 <main+0xd8>)
 8000248:	f001 fbee 	bl	8001a28 <HAL_TIM_PWM_Start>
//  HAL_TIM_Base_Start_IT(&htim2);
  sprintf (UART_msg_TX,"pwm_start\r\n");
 800024c:	4929      	ldr	r1, [pc, #164]	; (80002f4 <main+0xdc>)
 800024e:	482a      	ldr	r0, [pc, #168]	; (80002f8 <main+0xe0>)
 8000250:	f002 fc88 	bl	8002b64 <siprintf>
  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000254:	4828      	ldr	r0, [pc, #160]	; (80002f8 <main+0xe0>)
 8000256:	f7ff ff79 	bl	800014c <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	b29a      	uxth	r2, r3
 800025e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000262:	4925      	ldr	r1, [pc, #148]	; (80002f8 <main+0xe0>)
 8000264:	4825      	ldr	r0, [pc, #148]	; (80002fc <main+0xe4>)
 8000266:	f002 fae1 	bl	800282c <HAL_UART_Transmit>
  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, ENABLE);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000270:	4823      	ldr	r0, [pc, #140]	; (8000300 <main+0xe8>)
 8000272:	f000 fee5 	bl	8001040 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800027a:	4821      	ldr	r0, [pc, #132]	; (8000300 <main+0xe8>)
 800027c:	f000 fef8 	bl	8001070 <HAL_GPIO_TogglePin>
	 switch (count)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b03      	cmp	r3, #3
 8000284:	d00e      	beq.n	80002a4 <main+0x8c>
 8000286:	2b03      	cmp	r3, #3
 8000288:	dc10      	bgt.n	80002ac <main+0x94>
 800028a:	2b01      	cmp	r3, #1
 800028c:	d002      	beq.n	8000294 <main+0x7c>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d004      	beq.n	800029c <main+0x84>
	 		 break;
	 	case 3:
	 		 TIM1->CCR1 = 3*(PERIOD/4);
	 		 break;
	 	default:
	 		break;
 8000292:	e00b      	b.n	80002ac <main+0x94>
	 		TIM1->CCR1 = PERIOD/4;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <main+0xd4>)
 8000296:	2219      	movs	r2, #25
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
	 		break;
 800029a:	e008      	b.n	80002ae <main+0x96>
	 		 TIM1->CCR1 = PERIOD/2;
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <main+0xd4>)
 800029e:	2232      	movs	r2, #50	; 0x32
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	 		 break;
 80002a2:	e004      	b.n	80002ae <main+0x96>
	 		 TIM1->CCR1 = 3*(PERIOD/4);
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <main+0xd4>)
 80002a6:	224b      	movs	r2, #75	; 0x4b
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
	 		 break;
 80002aa:	e000      	b.n	80002ae <main+0x96>
	 		break;
 80002ac:	bf00      	nop
	 	 }
	 sprintf (UART_msg_TX,"count = %d\r\n", count);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4914      	ldr	r1, [pc, #80]	; (8000304 <main+0xec>)
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <main+0xe0>)
 80002b6:	f002 fc55 	bl	8002b64 <siprintf>
	 HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80002ba:	480f      	ldr	r0, [pc, #60]	; (80002f8 <main+0xe0>)
 80002bc:	f7ff ff46 	bl	800014c <strlen>
 80002c0:	4603      	mov	r3, r0
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <main+0xe0>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <main+0xe4>)
 80002cc:	f002 faae 	bl	800282c <HAL_UART_Transmit>
	 count++;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	3301      	adds	r3, #1
 80002d4:	71fb      	strb	r3, [r7, #7]
	 if (count > 3)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d901      	bls.n	80002e0 <main+0xc8>
		 count = 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	71fb      	strb	r3, [r7, #7]
	 HAL_Delay (1000);
 80002e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e4:	f000 fbf6 	bl	8000ad4 <HAL_Delay>
	 HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 80002e8:	e7c5      	b.n	8000276 <main+0x5e>
 80002ea:	bf00      	nop
 80002ec:	40012c00 	.word	0x40012c00
 80002f0:	20000120 	.word	0x20000120
 80002f4:	08003408 	.word	0x08003408
 80002f8:	20000094 	.word	0x20000094
 80002fc:	200000dc 	.word	0x200000dc
 8000300:	40010c00 	.word	0x40010c00
 8000304:	08003414 	.word	0x08003414

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	; 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fc1c 	bl	8002b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033c:	2302      	movs	r3, #2
 800033e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000346:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800034a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034c:	f107 0318 	add.w	r3, r7, #24
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fea7 	bl	80010a4 <HAL_RCC_OscConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800035c:	f000 f9a4 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000364:	2302      	movs	r3, #2
 8000366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2101      	movs	r1, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f913 	bl	80015a4 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000384:	f000 f990 	bl	80006a8 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3740      	adds	r7, #64	; 0x40
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b096      	sub	sp, #88	; 0x58
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]
 80003be:	615a      	str	r2, [r3, #20]
 80003c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2220      	movs	r2, #32
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fbc3 	bl	8002b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003d0:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <MX_TIM1_Init+0x13c>)
 80003d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 80003d4:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003d6:	229f      	movs	r2, #159	; 0x9f
 80003d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003da:	4b3b      	ldr	r3, [pc, #236]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80003e0:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003e2:	2263      	movs	r2, #99	; 0x63
 80003e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ec:	4b36      	ldr	r3, [pc, #216]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003f8:	4833      	ldr	r0, [pc, #204]	; (80004c8 <MX_TIM1_Init+0x138>)
 80003fa:	f001 fa6d 	bl	80018d8 <HAL_TIM_Base_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000404:	f000 f950 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800040e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000412:	4619      	mov	r1, r3
 8000414:	482c      	ldr	r0, [pc, #176]	; (80004c8 <MX_TIM1_Init+0x138>)
 8000416:	f001 fd6f 	bl	8001ef8 <HAL_TIM_ConfigClockSource>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000420:	f000 f942 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <MX_TIM1_Init+0x138>)
 8000426:	f001 faa6 	bl	8001976 <HAL_TIM_PWM_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000430:	f000 f93a 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000440:	4619      	mov	r1, r3
 8000442:	4821      	ldr	r0, [pc, #132]	; (80004c8 <MX_TIM1_Init+0x138>)
 8000444:	f002 f8e4 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800044e:	f000 f92b 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2360      	movs	r3, #96	; 0x60
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800045e:	2300      	movs	r3, #0
 8000460:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800046a:	2300      	movs	r3, #0
 800046c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000472:	2200      	movs	r2, #0
 8000474:	4619      	mov	r1, r3
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <MX_TIM1_Init+0x138>)
 8000478:	f001 fc80 	bl	8001d7c <HAL_TIM_PWM_ConfigChannel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000482:	f000 f911 	bl	80006a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800049a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4807      	ldr	r0, [pc, #28]	; (80004c8 <MX_TIM1_Init+0x138>)
 80004aa:	f002 f90f 	bl	80026cc <HAL_TIMEx_ConfigBreakDeadTime>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004b4:	f000 f8f8 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <MX_TIM1_Init+0x138>)
 80004ba:	f000 f965 	bl	8000788 <HAL_TIM_MspPostInit>

}
 80004be:	bf00      	nop
 80004c0:	3758      	adds	r7, #88	; 0x58
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000120 	.word	0x20000120
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_TIM2_Init+0x94>)
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_TIM2_Init+0x94>)
 80004f6:	220f      	movs	r2, #15
 80004f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_TIM2_Init+0x94>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_TIM2_Init+0x94>)
 8000502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_TIM2_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_TIM2_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_TIM2_Init+0x94>)
 8000516:	f001 f9df 	bl	80018d8 <HAL_TIM_Base_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000520:	f000 f8c2 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <MX_TIM2_Init+0x94>)
 8000532:	f001 fce1 	bl	8001ef8 <HAL_TIM_ConfigClockSource>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 f8b4 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	2300      	movs	r3, #0
 8000542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_TIM2_Init+0x94>)
 800054e:	f002 f85f 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000558:	f000 f8a6 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000168 	.word	0x20000168

08000568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_USART1_UART_Init+0x50>)
 8000570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000574:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 80005a0:	f002 f8f7 	bl	8002792 <HAL_UART_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005aa:	f000 f87d 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000dc 	.word	0x200000dc
 80005b8:	40013800 	.word	0x40013800

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART2_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f002 f8cd 	bl	8002792 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f853 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001b0 	.word	0x200001b0
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_GPIO_Init+0x90>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <MX_GPIO_Init+0x90>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_GPIO_Init+0x90>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_GPIO_Init+0x90>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <MX_GPIO_Init+0x90>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_GPIO_Init+0x90>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_GPIO_Init+0x90>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x90>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_GPIO_Init+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000674:	f000 fce4 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2302      	movs	r3, #2
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000692:	f000 fb51 	bl	8000d38 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_MspInit+0x60>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_MspInit+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_TIM_Base_MspInit+0x68>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d10c      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 8000730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000742:	e018      	b.n	8000776 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074c:	d113      	bne.n	8000776 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_TIM_Base_MspInit+0x6c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	201c      	movs	r0, #28
 800076c:	f000 faad 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000770:	201c      	movs	r0, #28
 8000772:	f000 fac6 	bl	8000d02 <HAL_NVIC_EnableIRQ>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40012c00 	.word	0x40012c00
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <HAL_TIM_MspPostInit+0x5c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d118      	bne.n	80007da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_TIM_MspPostInit+0x64>)
 80007d6:	f000 faaf 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40012c00 	.word	0x40012c00
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0318 	add.w	r3, r7, #24
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <HAL_UART_MspInit+0xf8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d132      	bne.n	8000876 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000810:	4b36      	ldr	r3, [pc, #216]	; (80008ec <HAL_UART_MspInit+0xfc>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a35      	ldr	r2, [pc, #212]	; (80008ec <HAL_UART_MspInit+0xfc>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b30      	ldr	r3, [pc, #192]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <HAL_UART_MspInit+0xfc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	4619      	mov	r1, r3
 8000854:	4826      	ldr	r0, [pc, #152]	; (80008f0 <HAL_UART_MspInit+0x100>)
 8000856:	f000 fa6f 	bl	8000d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <HAL_UART_MspInit+0x100>)
 8000870:	f000 fa62 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000874:	e034      	b.n	80008e0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <HAL_UART_MspInit+0x104>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d12f      	bne.n	80008e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_UART_MspInit+0xfc>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_UART_MspInit+0xfc>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_UART_MspInit+0xfc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b0:	2304      	movs	r3, #4
 80008b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_UART_MspInit+0x100>)
 80008c4:	f000 fa38 	bl	8000d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008c8:	2308      	movs	r3, #8
 80008ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_UART_MspInit+0x100>)
 80008dc:	f000 fa2c 	bl	8000d38 <HAL_GPIO_Init>
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800
 80008f4:	40004400 	.word	0x40004400

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <HardFault_Handler+0x4>

0800090a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <BusFault_Handler+0x4>

08000916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8aa 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TIM2_IRQHandler+0x10>)
 8000952:	f001 f90b 	bl	8001b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000168 	.word	0x20000168

08000960 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x50>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x16>
		heap_end = &end;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <_sbrk+0x50>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <_sbrk+0x54>)
 8000974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <_sbrk+0x50>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <_sbrk+0x50>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	466a      	mov	r2, sp
 8000986:	4293      	cmp	r3, r2
 8000988:	d907      	bls.n	800099a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800098a:	f002 f8b9 	bl	8002b00 <__errno>
 800098e:	4603      	mov	r3, r0
 8000990:	220c      	movs	r2, #12
 8000992:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	e006      	b.n	80009a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <_sbrk+0x50>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <_sbrk+0x50>)
 80009a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000d0 	.word	0x200000d0
 80009b4:	20000208 	.word	0x20000208

080009b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ea:	f7ff ffe5 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f002 f88d 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fc11 	bl	8000218 <main>
  bx lr
 80009f6:	4770      	bx	lr
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a00:	08003488 	.word	0x08003488
  ldr r2, =_sbss
 8000a04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a08:	20000208 	.word	0x20000208

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x28>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f947 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff fe42 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f95f 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f927 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000004 	.word	0x20000004
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	20000008 	.word	0x20000008

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	2000000c 	.word	0x2000000c
 8000abc:	200001f4 	.word	0x200001f4

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200001f4 	.word	0x200001f4

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffe0 	bl	8000ac0 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <__NVIC_EnableIRQ+0x34>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff90 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff2d 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff42 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff35 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffa2 	bl	8000c70 <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e169      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8158 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a98      	ldr	r2, [pc, #608]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a96      	ldr	r2, [pc, #600]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a94      	ldr	r2, [pc, #592]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a92      	ldr	r2, [pc, #584]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a90      	ldr	r2, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a79      	ldr	r2, [pc, #484]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80b1 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	492f      	ldr	r1, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	492c      	ldr	r1, [pc, #176]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4928      	ldr	r1, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4922      	ldr	r1, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	491e      	ldr	r1, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	4918      	ldr	r1, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60cb      	str	r3, [r1, #12]
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x2e2>
 8000fd6:	bf00      	nop
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_GPIO_Init+0x304>)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4909      	ldr	r1, [pc, #36]	; (800103c <HAL_GPIO_Init+0x304>)
 8001016:	4013      	ands	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae8e 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	; 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	611a      	str	r2, [r3, #16]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43d9      	mvns	r1, r3
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	400b      	ands	r3, r1
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	611a      	str	r2, [r3, #16]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e26c      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8087 	beq.w	80011d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c4:	4b92      	ldr	r3, [pc, #584]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d00c      	beq.n	80010ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d0:	4b8f      	ldr	r3, [pc, #572]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d112      	bne.n	8001102 <HAL_RCC_OscConfig+0x5e>
 80010dc:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d10b      	bne.n	8001102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	4b89      	ldr	r3, [pc, #548]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d06c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x12c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d168      	bne.n	80011d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e246      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110a:	d106      	bne.n	800111a <HAL_RCC_OscConfig+0x76>
 800110c:	4b80      	ldr	r3, [pc, #512]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a7f      	ldr	r2, [pc, #508]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	e02e      	b.n	8001178 <HAL_RCC_OscConfig+0xd4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b78      	ldr	r3, [pc, #480]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a77      	ldr	r2, [pc, #476]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e01d      	b.n	8001178 <HAL_RCC_OscConfig+0xd4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0xbc>
 8001146:	4b72      	ldr	r3, [pc, #456]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a71      	ldr	r2, [pc, #452]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b6f      	ldr	r3, [pc, #444]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a6e      	ldr	r2, [pc, #440]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e00b      	b.n	8001178 <HAL_RCC_OscConfig+0xd4>
 8001160:	4b6b      	ldr	r3, [pc, #428]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a6a      	ldr	r2, [pc, #424]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a67      	ldr	r2, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc9e 	bl	8000ac0 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fc9a 	bl	8000ac0 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1fa      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0xe4>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc8a 	bl	8000ac0 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc86 	bl	8000ac0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1e6      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x10c>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011de:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ea:	4b49      	ldr	r3, [pc, #292]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d11c      	bne.n	8001230 <HAL_RCC_OscConfig+0x18c>
 80011f6:	4b46      	ldr	r3, [pc, #280]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	4b43      	ldr	r3, [pc, #268]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x176>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1ba      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4939      	ldr	r1, [pc, #228]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e03a      	b.n	80012a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fc3f 	bl	8000ac0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc3b 	bl	8000ac0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e19b      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4927      	ldr	r1, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc1e 	bl	8000ac0 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc1a 	bl	8000ac0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e17a      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d03a      	beq.n	8001328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d019      	beq.n	80012ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_RCC_OscConfig+0x274>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbfe 	bl	8000ac0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbfa 	bl	8000ac0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e15a      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f000 fad8 	bl	800189c <RCC_Delay>
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_RCC_OscConfig+0x274>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fbe4 	bl	8000ac0 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fa:	e00f      	b.n	800131c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fbe0 	bl	8000ac0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d908      	bls.n	800131c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e140      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	42420000 	.word	0x42420000
 8001318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	4b9e      	ldr	r3, [pc, #632]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e9      	bne.n	80012fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80a6 	beq.w	8001482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133a:	4b97      	ldr	r3, [pc, #604]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10d      	bne.n	8001362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b94      	ldr	r3, [pc, #592]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a93      	ldr	r2, [pc, #588]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b8e      	ldr	r3, [pc, #568]	; (800159c <HAL_RCC_OscConfig+0x4f8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <HAL_RCC_OscConfig+0x4f8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a8a      	ldr	r2, [pc, #552]	; (800159c <HAL_RCC_OscConfig+0x4f8>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137a:	f7ff fba1 	bl	8000ac0 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001382:	f7ff fb9d 	bl	8000ac0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b64      	cmp	r3, #100	; 0x64
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0fd      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x4f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x312>
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a7a      	ldr	r2, [pc, #488]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e02d      	b.n	8001412 <HAL_RCC_OscConfig+0x36e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a75      	ldr	r2, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	4b73      	ldr	r3, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a72      	ldr	r2, [pc, #456]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	e01c      	b.n	8001412 <HAL_RCC_OscConfig+0x36e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x356>
 80013e0:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a6c      	ldr	r2, [pc, #432]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a69      	ldr	r2, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	e00b      	b.n	8001412 <HAL_RCC_OscConfig+0x36e>
 80013fa:	4b67      	ldr	r3, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4a66      	ldr	r2, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6213      	str	r3, [r2, #32]
 8001406:	4b64      	ldr	r3, [pc, #400]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a63      	ldr	r2, [pc, #396]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb51 	bl	8000ac0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fb4d 	bl	8000ac0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0ab      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	4b57      	ldr	r3, [pc, #348]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ee      	beq.n	8001422 <HAL_RCC_OscConfig+0x37e>
 8001444:	e014      	b.n	8001470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb3b 	bl	8000ac0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fb37 	bl	8000ac0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e095      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ee      	bne.n	800144e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001476:	4b48      	ldr	r3, [pc, #288]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a47      	ldr	r2, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8081 	beq.w	800158e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d061      	beq.n	800155c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d146      	bne.n	800152e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_OscConfig+0x4fc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb0b 	bl	8000ac0 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb07 	bl	8000ac0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e067      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d108      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	492d      	ldr	r1, [pc, #180]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a19      	ldr	r1, [r3, #32]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	430b      	orrs	r3, r1
 80014fa:	4927      	ldr	r1, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x4fc>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fadb 	bl	8000ac0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fad7 	bl	8000ac0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e037      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x46a>
 800152c:	e02f      	b.n	800158e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_RCC_OscConfig+0x4fc>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fac4 	bl	8000ac0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fac0 	bl	8000ac0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e020      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x498>
 800155a:	e018      	b.n	800158e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e013      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	429a      	cmp	r2, r3
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	42420060 	.word	0x42420060

080015a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d0      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4965      	ldr	r1, [pc, #404]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800160a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d040      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e073      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4936      	ldr	r1, [pc, #216]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fa14 	bl	8000ac0 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fa10 	bl	8000ac0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e053      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d210      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4922      	ldr	r1, [pc, #136]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f821 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1cc>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f972 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	08003434 	.word	0x08003434
 8001770:	20000004 	.word	0x20000004
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b490      	push	{r4, r7}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001780:	1d3c      	adds	r4, r7, #4
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001788:	f240 2301 	movw	r3, #513	; 0x201
 800178c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x40>
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x46>
 80017b6:	e02d      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ba:	623b      	str	r3, [r7, #32]
      break;
 80017bc:	e02d      	b.n	800181a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0c5b      	lsrs	r3, r3, #17
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ea:	4413      	add	r3, r2
 80017ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	fb02 f203 	mul.w	r2, r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	e004      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	623b      	str	r3, [r7, #32]
      break;
 8001812:	e002      	b.n	800181a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001816:	623b      	str	r3, [r7, #32]
      break;
 8001818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181a:	6a3b      	ldr	r3, [r7, #32]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bc90      	pop	{r4, r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	08003424 	.word	0x08003424
 800182c:	40021000 	.word	0x40021000
 8001830:	007a1200 	.word	0x007a1200
 8001834:	003d0900 	.word	0x003d0900

08001838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_RCC_GetHCLKFreq+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001850:	f7ff fff2 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	08003444 	.word	0x08003444

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001878:	f7ff ffde 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0adb      	lsrs	r3, r3, #11
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	08003444 	.word	0x08003444

0800189c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <RCC_Delay+0x34>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <RCC_Delay+0x38>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a5b      	lsrs	r3, r3, #9
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b8:	bf00      	nop
  }
  while (Delay --);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	60fa      	str	r2, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f9      	bne.n	80018b8 <RCC_Delay+0x1c>
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000004 	.word	0x20000004
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e041      	b.n	800196e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7fe ff0a 	bl	8000718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f000 fbd6 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e041      	b.n	8001a0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f839 	bl	8001a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f000 fb87 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_TIM_PWM_Start+0x24>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e022      	b.n	8001a92 <HAL_TIM_PWM_Start+0x6a>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d109      	bne.n	8001a66 <HAL_TIM_PWM_Start+0x3e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	e015      	b.n	8001a92 <HAL_TIM_PWM_Start+0x6a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d109      	bne.n	8001a80 <HAL_TIM_PWM_Start+0x58>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e008      	b.n	8001a92 <HAL_TIM_PWM_Start+0x6a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e05e      	b.n	8001b58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d104      	bne.n	8001aaa <HAL_TIM_PWM_Start+0x82>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa8:	e013      	b.n	8001ad2 <HAL_TIM_PWM_Start+0xaa>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d104      	bne.n	8001aba <HAL_TIM_PWM_Start+0x92>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab8:	e00b      	b.n	8001ad2 <HAL_TIM_PWM_Start+0xaa>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d104      	bne.n	8001aca <HAL_TIM_PWM_Start+0xa2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac8:	e003      	b.n	8001ad2 <HAL_TIM_PWM_Start+0xaa>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fd74 	bl	80025c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_TIM_PWM_Start+0x138>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d107      	bne.n	8001afa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_TIM_PWM_Start+0x138>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00e      	beq.n	8001b22 <HAL_TIM_PWM_Start+0xfa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d009      	beq.n	8001b22 <HAL_TIM_PWM_Start+0xfa>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_TIM_PWM_Start+0x13c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d004      	beq.n	8001b22 <HAL_TIM_PWM_Start+0xfa>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_TIM_PWM_Start+0x140>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d111      	bne.n	8001b46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d010      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b44:	e007      	b.n	8001b56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40012c00 	.word	0x40012c00
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40000800 	.word	0x40000800

08001b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0202 	mvn.w	r2, #2
 8001b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fa6f 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa62 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fa71 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0204 	mvn.w	r2, #4
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa45 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa38 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fa47 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0208 	mvn.w	r2, #8
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fa1b 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa0e 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fa1d 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0210 	mvn.w	r2, #16
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f9f1 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f9e4 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f9f3 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0201 	mvn.w	r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fa36 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	2b80      	cmp	r3, #128	; 0x80
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fd32 	bl	8002780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f9b7 	bl	80020b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fcfd 	bl	800276e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0ac      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	f200 809f 	bhi.w	8001ee4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001de1 	.word	0x08001de1
 8001db0:	08001ee5 	.word	0x08001ee5
 8001db4:	08001ee5 	.word	0x08001ee5
 8001db8:	08001ee5 	.word	0x08001ee5
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001ee5 	.word	0x08001ee5
 8001dc4:	08001ee5 	.word	0x08001ee5
 8001dc8:	08001ee5 	.word	0x08001ee5
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001ee5 	.word	0x08001ee5
 8001dd4:	08001ee5 	.word	0x08001ee5
 8001dd8:	08001ee5 	.word	0x08001ee5
 8001ddc:	08001ea3 	.word	0x08001ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f9d0 	bl	800218c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6999      	ldr	r1, [r3, #24]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	619a      	str	r2, [r3, #24]
      break;
 8001e1e:	e062      	b.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fa16 	bl	8002258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6999      	ldr	r1, [r3, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
      break;
 8001e60:	e041      	b.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fa5f 	bl	800232c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0208 	orr.w	r2, r2, #8
 8001e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
      break;
 8001ea0:	e021      	b.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 faa9 	bl	8002400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69d9      	ldr	r1, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
      break;
 8001ee2:	e000      	b.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x18>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0b3      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x180>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f48:	d03e      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0xd0>
 8001f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4e:	f200 8087 	bhi.w	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f56:	f000 8085 	beq.w	8002064 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5e:	d87f      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f60:	2b70      	cmp	r3, #112	; 0x70
 8001f62:	d01a      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0xa2>
 8001f64:	2b70      	cmp	r3, #112	; 0x70
 8001f66:	d87b      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f68:	2b60      	cmp	r3, #96	; 0x60
 8001f6a:	d050      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x116>
 8001f6c:	2b60      	cmp	r3, #96	; 0x60
 8001f6e:	d877      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f70:	2b50      	cmp	r3, #80	; 0x50
 8001f72:	d03c      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0xf6>
 8001f74:	2b50      	cmp	r3, #80	; 0x50
 8001f76:	d873      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d058      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x136>
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d86f      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f80:	2b30      	cmp	r3, #48	; 0x30
 8001f82:	d064      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x156>
 8001f84:	2b30      	cmp	r3, #48	; 0x30
 8001f86:	d86b      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d060      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x156>
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d867      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05c      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x156>
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d05a      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f98:	e062      	b.n	8002060 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f000 faee 	bl	800258a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	609a      	str	r2, [r3, #8]
      break;
 8001fc6:	e04e      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f000 fad7 	bl	800258a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fea:	609a      	str	r2, [r3, #8]
      break;
 8001fec:	e03b      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 fa4e 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2150      	movs	r1, #80	; 0x50
 8002006:	4618      	mov	r0, r3
 8002008:	f000 faa5 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 800200c:	e02b      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	f000 fa6c 	bl	80024f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2160      	movs	r1, #96	; 0x60
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fa95 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 800202c:	e01b      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	461a      	mov	r2, r3
 800203c:	f000 fa2e 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fa85 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 800204c:	e00b      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f000 fa7c 	bl	8002556 <TIM_ITRx_SetConfig>
        break;
 800205e:	e002      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002064:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a29      	ldr	r2, [pc, #164]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <TIM_Base_SetConfig+0xbc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <TIM_Base_SetConfig+0xc0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <TIM_Base_SetConfig+0xbc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <TIM_Base_SetConfig+0xc0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d103      	bne.n	8002170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	615a      	str	r2, [r3, #20]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800

0800218c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 0302 	bic.w	r3, r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <TIM_OC1_SetConfig+0xc8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10c      	bne.n	8002202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0308 	bic.w	r3, r3, #8
 80021ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <TIM_OC1_SetConfig+0xc8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	621a      	str	r2, [r3, #32]
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00

08002258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f023 0210 	bic.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0320 	bic.w	r3, r3, #32
 80022a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <TIM_OC2_SetConfig+0xd0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10d      	bne.n	80022d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <TIM_OC2_SetConfig+0xd0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d113      	bne.n	8002304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40012c00 	.word	0x40012c00

0800232c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <TIM_OC3_SetConfig+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10d      	bne.n	80023a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <TIM_OC3_SetConfig+0xd0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d113      	bne.n	80023d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40012c00 	.word	0x40012c00

08002400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800244a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <TIM_OC4_SetConfig+0x98>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d109      	bne.n	8002474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40012c00 	.word	0x40012c00

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 030a 	bic.w	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 0210 	bic.w	r2, r3, #16
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	031b      	lsls	r3, r3, #12
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	621a      	str	r2, [r3, #32]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	f043 0307 	orr.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	609a      	str	r2, [r3, #8]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2201      	movs	r2, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002624:	2302      	movs	r3, #2
 8002626:	e046      	b.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d009      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4313      	orrs	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e03d      	b.n	8002764 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e03f      	b.n	8002824 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe f819 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2224      	movs	r2, #36	; 0x24
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f904 	bl	80029e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d17c      	bne.n	8002946 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Transmit+0x2c>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e075      	b.n	8002948 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit+0x3e>
 8002866:	2302      	movs	r3, #2
 8002868:	e06e      	b.n	8002948 <HAL_UART_Transmit+0x11c>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2221      	movs	r2, #33	; 0x21
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002880:	f7fe f91e 	bl	8000ac0 <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289a:	d108      	bne.n	80028ae <HAL_UART_Transmit+0x82>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	e003      	b.n	80028b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028be:	e02a      	b.n	8002916 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f840 	bl	8002950 <UART_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e036      	b.n	8002948 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	3302      	adds	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e007      	b.n	8002908 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1cf      	bne.n	80028c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2200      	movs	r2, #0
 8002928:	2140      	movs	r1, #64	; 0x40
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f810 	bl	8002950 <UART_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e006      	b.n	8002948 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002960:	e02c      	b.n	80029bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d028      	beq.n	80029bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x30>
 8002970:	f7fe f8a6 	bl	8000ac0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	429a      	cmp	r2, r3
 800297e:	d21d      	bcs.n	80029bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800298e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e00f      	b.n	80029dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d0c3      	beq.n	8002962 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a1e:	f023 030c 	bic.w	r3, r3, #12
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <UART_SetConfig+0x114>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7fe ff12 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	e002      	b.n	8002a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7fe fefa 	bl	800184c <HAL_RCC_GetPCLK1Freq>
 8002a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <UART_SetConfig+0x118>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	0119      	lsls	r1, r3, #4
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	; 0x32
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab0:	4419      	add	r1, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <UART_SetConfig+0x118>)
 8002aca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2064      	movs	r0, #100	; 0x64
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	; 0x32
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	440a      	add	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40013800 	.word	0x40013800
 8002afc:	51eb851f 	.word	0x51eb851f

08002b00 <__errno>:
 8002b00:	4b01      	ldr	r3, [pc, #4]	; (8002b08 <__errno+0x8>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000010 	.word	0x20000010

08002b0c <__libc_init_array>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	2600      	movs	r6, #0
 8002b10:	4d0c      	ldr	r5, [pc, #48]	; (8002b44 <__libc_init_array+0x38>)
 8002b12:	4c0d      	ldr	r4, [pc, #52]	; (8002b48 <__libc_init_array+0x3c>)
 8002b14:	1b64      	subs	r4, r4, r5
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	42a6      	cmp	r6, r4
 8002b1a:	d109      	bne.n	8002b30 <__libc_init_array+0x24>
 8002b1c:	f000 fc5c 	bl	80033d8 <_init>
 8002b20:	2600      	movs	r6, #0
 8002b22:	4d0a      	ldr	r5, [pc, #40]	; (8002b4c <__libc_init_array+0x40>)
 8002b24:	4c0a      	ldr	r4, [pc, #40]	; (8002b50 <__libc_init_array+0x44>)
 8002b26:	1b64      	subs	r4, r4, r5
 8002b28:	10a4      	asrs	r4, r4, #2
 8002b2a:	42a6      	cmp	r6, r4
 8002b2c:	d105      	bne.n	8002b3a <__libc_init_array+0x2e>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b34:	4798      	blx	r3
 8002b36:	3601      	adds	r6, #1
 8002b38:	e7ee      	b.n	8002b18 <__libc_init_array+0xc>
 8002b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3e:	4798      	blx	r3
 8002b40:	3601      	adds	r6, #1
 8002b42:	e7f2      	b.n	8002b2a <__libc_init_array+0x1e>
 8002b44:	08003480 	.word	0x08003480
 8002b48:	08003480 	.word	0x08003480
 8002b4c:	08003480 	.word	0x08003480
 8002b50:	08003484 	.word	0x08003484

08002b54 <memset>:
 8002b54:	4603      	mov	r3, r0
 8002b56:	4402      	add	r2, r0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <siprintf>:
 8002b64:	b40e      	push	{r1, r2, r3}
 8002b66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b6a:	b500      	push	{lr}
 8002b6c:	b09c      	sub	sp, #112	; 0x70
 8002b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9006      	str	r0, [sp, #24]
 8002b74:	9107      	str	r1, [sp, #28]
 8002b76:	9104      	str	r1, [sp, #16]
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <siprintf+0x38>)
 8002b7a:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <siprintf+0x3c>)
 8002b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b80:	9105      	str	r1, [sp, #20]
 8002b82:	6800      	ldr	r0, [r0, #0]
 8002b84:	a902      	add	r1, sp, #8
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f000 f868 	bl	8002c5c <_svfiprintf_r>
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	b01c      	add	sp, #112	; 0x70
 8002b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b98:	b003      	add	sp, #12
 8002b9a:	4770      	bx	lr
 8002b9c:	20000010 	.word	0x20000010
 8002ba0:	ffff0208 	.word	0xffff0208

08002ba4 <__ssputs_r>:
 8002ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba8:	688e      	ldr	r6, [r1, #8]
 8002baa:	4682      	mov	sl, r0
 8002bac:	429e      	cmp	r6, r3
 8002bae:	460c      	mov	r4, r1
 8002bb0:	4690      	mov	r8, r2
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	d838      	bhi.n	8002c28 <__ssputs_r+0x84>
 8002bb6:	898a      	ldrh	r2, [r1, #12]
 8002bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bbc:	d032      	beq.n	8002c24 <__ssputs_r+0x80>
 8002bbe:	6825      	ldr	r5, [r4, #0]
 8002bc0:	6909      	ldr	r1, [r1, #16]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	eba5 0901 	sub.w	r9, r5, r1
 8002bc8:	6965      	ldr	r5, [r4, #20]
 8002bca:	444b      	add	r3, r9
 8002bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bd4:	106d      	asrs	r5, r5, #1
 8002bd6:	429d      	cmp	r5, r3
 8002bd8:	bf38      	it	cc
 8002bda:	461d      	movcc	r5, r3
 8002bdc:	0553      	lsls	r3, r2, #21
 8002bde:	d531      	bpl.n	8002c44 <__ssputs_r+0xa0>
 8002be0:	4629      	mov	r1, r5
 8002be2:	f000 fb53 	bl	800328c <_malloc_r>
 8002be6:	4606      	mov	r6, r0
 8002be8:	b950      	cbnz	r0, 8002c00 <__ssputs_r+0x5c>
 8002bea:	230c      	movs	r3, #12
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f8ca 3000 	str.w	r3, [sl]
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c00:	464a      	mov	r2, r9
 8002c02:	6921      	ldr	r1, [r4, #16]
 8002c04:	f000 face 	bl	80031a4 <memcpy>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	6126      	str	r6, [r4, #16]
 8002c16:	444e      	add	r6, r9
 8002c18:	6026      	str	r6, [r4, #0]
 8002c1a:	463e      	mov	r6, r7
 8002c1c:	6165      	str	r5, [r4, #20]
 8002c1e:	eba5 0509 	sub.w	r5, r5, r9
 8002c22:	60a5      	str	r5, [r4, #8]
 8002c24:	42be      	cmp	r6, r7
 8002c26:	d900      	bls.n	8002c2a <__ssputs_r+0x86>
 8002c28:	463e      	mov	r6, r7
 8002c2a:	4632      	mov	r2, r6
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	f000 fac6 	bl	80031c0 <memmove>
 8002c34:	68a3      	ldr	r3, [r4, #8]
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	1b9b      	subs	r3, r3, r6
 8002c3a:	4432      	add	r2, r6
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	60a3      	str	r3, [r4, #8]
 8002c40:	6022      	str	r2, [r4, #0]
 8002c42:	e7db      	b.n	8002bfc <__ssputs_r+0x58>
 8002c44:	462a      	mov	r2, r5
 8002c46:	f000 fb7b 	bl	8003340 <_realloc_r>
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1e1      	bne.n	8002c14 <__ssputs_r+0x70>
 8002c50:	4650      	mov	r0, sl
 8002c52:	6921      	ldr	r1, [r4, #16]
 8002c54:	f000 face 	bl	80031f4 <_free_r>
 8002c58:	e7c7      	b.n	8002bea <__ssputs_r+0x46>
	...

08002c5c <_svfiprintf_r>:
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	4698      	mov	r8, r3
 8002c62:	898b      	ldrh	r3, [r1, #12]
 8002c64:	4607      	mov	r7, r0
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	b09d      	sub	sp, #116	; 0x74
 8002c6e:	d50e      	bpl.n	8002c8e <_svfiprintf_r+0x32>
 8002c70:	690b      	ldr	r3, [r1, #16]
 8002c72:	b963      	cbnz	r3, 8002c8e <_svfiprintf_r+0x32>
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	f000 fb09 	bl	800328c <_malloc_r>
 8002c7a:	6028      	str	r0, [r5, #0]
 8002c7c:	6128      	str	r0, [r5, #16]
 8002c7e:	b920      	cbnz	r0, 8002c8a <_svfiprintf_r+0x2e>
 8002c80:	230c      	movs	r3, #12
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	e0d1      	b.n	8002e2e <_svfiprintf_r+0x1d2>
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	616b      	str	r3, [r5, #20]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9309      	str	r3, [sp, #36]	; 0x24
 8002c92:	2320      	movs	r3, #32
 8002c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c98:	2330      	movs	r3, #48	; 0x30
 8002c9a:	f04f 0901 	mov.w	r9, #1
 8002c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e48 <_svfiprintf_r+0x1ec>
 8002ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002caa:	4623      	mov	r3, r4
 8002cac:	469a      	mov	sl, r3
 8002cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cb2:	b10a      	cbz	r2, 8002cb8 <_svfiprintf_r+0x5c>
 8002cb4:	2a25      	cmp	r2, #37	; 0x25
 8002cb6:	d1f9      	bne.n	8002cac <_svfiprintf_r+0x50>
 8002cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cbc:	d00b      	beq.n	8002cd6 <_svfiprintf_r+0x7a>
 8002cbe:	465b      	mov	r3, fp
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	f7ff ff6d 	bl	8002ba4 <__ssputs_r>
 8002cca:	3001      	adds	r0, #1
 8002ccc:	f000 80aa 	beq.w	8002e24 <_svfiprintf_r+0x1c8>
 8002cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cd2:	445a      	add	r2, fp
 8002cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8002cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a2 	beq.w	8002e24 <_svfiprintf_r+0x1c8>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cea:	f10a 0a01 	add.w	sl, sl, #1
 8002cee:	9304      	str	r3, [sp, #16]
 8002cf0:	9307      	str	r3, [sp, #28]
 8002cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8002cf8:	4654      	mov	r4, sl
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d00:	4851      	ldr	r0, [pc, #324]	; (8002e48 <_svfiprintf_r+0x1ec>)
 8002d02:	f000 fa41 	bl	8003188 <memchr>
 8002d06:	9a04      	ldr	r2, [sp, #16]
 8002d08:	b9d8      	cbnz	r0, 8002d42 <_svfiprintf_r+0xe6>
 8002d0a:	06d0      	lsls	r0, r2, #27
 8002d0c:	bf44      	itt	mi
 8002d0e:	2320      	movmi	r3, #32
 8002d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d14:	0711      	lsls	r1, r2, #28
 8002d16:	bf44      	itt	mi
 8002d18:	232b      	movmi	r3, #43	; 0x2b
 8002d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d22:	2b2a      	cmp	r3, #42	; 0x2a
 8002d24:	d015      	beq.n	8002d52 <_svfiprintf_r+0xf6>
 8002d26:	4654      	mov	r4, sl
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f04f 0c0a 	mov.w	ip, #10
 8002d2e:	9a07      	ldr	r2, [sp, #28]
 8002d30:	4621      	mov	r1, r4
 8002d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d36:	3b30      	subs	r3, #48	; 0x30
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d94e      	bls.n	8002dda <_svfiprintf_r+0x17e>
 8002d3c:	b1b0      	cbz	r0, 8002d6c <_svfiprintf_r+0x110>
 8002d3e:	9207      	str	r2, [sp, #28]
 8002d40:	e014      	b.n	8002d6c <_svfiprintf_r+0x110>
 8002d42:	eba0 0308 	sub.w	r3, r0, r8
 8002d46:	fa09 f303 	lsl.w	r3, r9, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	46a2      	mov	sl, r4
 8002d4e:	9304      	str	r3, [sp, #16]
 8002d50:	e7d2      	b.n	8002cf8 <_svfiprintf_r+0x9c>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	1d19      	adds	r1, r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	9103      	str	r1, [sp, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfbb      	ittet	lt
 8002d5e:	425b      	neglt	r3, r3
 8002d60:	f042 0202 	orrlt.w	r2, r2, #2
 8002d64:	9307      	strge	r3, [sp, #28]
 8002d66:	9307      	strlt	r3, [sp, #28]
 8002d68:	bfb8      	it	lt
 8002d6a:	9204      	strlt	r2, [sp, #16]
 8002d6c:	7823      	ldrb	r3, [r4, #0]
 8002d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d70:	d10c      	bne.n	8002d8c <_svfiprintf_r+0x130>
 8002d72:	7863      	ldrb	r3, [r4, #1]
 8002d74:	2b2a      	cmp	r3, #42	; 0x2a
 8002d76:	d135      	bne.n	8002de4 <_svfiprintf_r+0x188>
 8002d78:	9b03      	ldr	r3, [sp, #12]
 8002d7a:	3402      	adds	r4, #2
 8002d7c:	1d1a      	adds	r2, r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	9203      	str	r2, [sp, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bfb8      	it	lt
 8002d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d8a:	9305      	str	r3, [sp, #20]
 8002d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e58 <_svfiprintf_r+0x1fc>
 8002d90:	2203      	movs	r2, #3
 8002d92:	4650      	mov	r0, sl
 8002d94:	7821      	ldrb	r1, [r4, #0]
 8002d96:	f000 f9f7 	bl	8003188 <memchr>
 8002d9a:	b140      	cbz	r0, 8002dae <_svfiprintf_r+0x152>
 8002d9c:	2340      	movs	r3, #64	; 0x40
 8002d9e:	eba0 000a 	sub.w	r0, r0, sl
 8002da2:	fa03 f000 	lsl.w	r0, r3, r0
 8002da6:	9b04      	ldr	r3, [sp, #16]
 8002da8:	3401      	adds	r4, #1
 8002daa:	4303      	orrs	r3, r0
 8002dac:	9304      	str	r3, [sp, #16]
 8002dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db2:	2206      	movs	r2, #6
 8002db4:	4825      	ldr	r0, [pc, #148]	; (8002e4c <_svfiprintf_r+0x1f0>)
 8002db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dba:	f000 f9e5 	bl	8003188 <memchr>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d038      	beq.n	8002e34 <_svfiprintf_r+0x1d8>
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <_svfiprintf_r+0x1f4>)
 8002dc4:	bb1b      	cbnz	r3, 8002e0e <_svfiprintf_r+0x1b2>
 8002dc6:	9b03      	ldr	r3, [sp, #12]
 8002dc8:	3307      	adds	r3, #7
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	3308      	adds	r3, #8
 8002dd0:	9303      	str	r3, [sp, #12]
 8002dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd4:	4433      	add	r3, r6
 8002dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd8:	e767      	b.n	8002caa <_svfiprintf_r+0x4e>
 8002dda:	460c      	mov	r4, r1
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8002de2:	e7a5      	b.n	8002d30 <_svfiprintf_r+0xd4>
 8002de4:	2300      	movs	r3, #0
 8002de6:	f04f 0c0a 	mov.w	ip, #10
 8002dea:	4619      	mov	r1, r3
 8002dec:	3401      	adds	r4, #1
 8002dee:	9305      	str	r3, [sp, #20]
 8002df0:	4620      	mov	r0, r4
 8002df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df6:	3a30      	subs	r2, #48	; 0x30
 8002df8:	2a09      	cmp	r2, #9
 8002dfa:	d903      	bls.n	8002e04 <_svfiprintf_r+0x1a8>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0c5      	beq.n	8002d8c <_svfiprintf_r+0x130>
 8002e00:	9105      	str	r1, [sp, #20]
 8002e02:	e7c3      	b.n	8002d8c <_svfiprintf_r+0x130>
 8002e04:	4604      	mov	r4, r0
 8002e06:	2301      	movs	r3, #1
 8002e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e0c:	e7f0      	b.n	8002df0 <_svfiprintf_r+0x194>
 8002e0e:	ab03      	add	r3, sp, #12
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	462a      	mov	r2, r5
 8002e14:	4638      	mov	r0, r7
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <_svfiprintf_r+0x1f8>)
 8002e18:	a904      	add	r1, sp, #16
 8002e1a:	f3af 8000 	nop.w
 8002e1e:	1c42      	adds	r2, r0, #1
 8002e20:	4606      	mov	r6, r0
 8002e22:	d1d6      	bne.n	8002dd2 <_svfiprintf_r+0x176>
 8002e24:	89ab      	ldrh	r3, [r5, #12]
 8002e26:	065b      	lsls	r3, r3, #25
 8002e28:	f53f af2c 	bmi.w	8002c84 <_svfiprintf_r+0x28>
 8002e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e2e:	b01d      	add	sp, #116	; 0x74
 8002e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e34:	ab03      	add	r3, sp, #12
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <_svfiprintf_r+0x1f8>)
 8002e3e:	a904      	add	r1, sp, #16
 8002e40:	f000 f87c 	bl	8002f3c <_printf_i>
 8002e44:	e7eb      	b.n	8002e1e <_svfiprintf_r+0x1c2>
 8002e46:	bf00      	nop
 8002e48:	0800344c 	.word	0x0800344c
 8002e4c:	08003456 	.word	0x08003456
 8002e50:	00000000 	.word	0x00000000
 8002e54:	08002ba5 	.word	0x08002ba5
 8002e58:	08003452 	.word	0x08003452

08002e5c <_printf_common>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	4616      	mov	r6, r2
 8002e62:	4699      	mov	r9, r3
 8002e64:	688a      	ldr	r2, [r1, #8]
 8002e66:	690b      	ldr	r3, [r1, #16]
 8002e68:	4607      	mov	r7, r0
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bfb8      	it	lt
 8002e6e:	4613      	movlt	r3, r2
 8002e70:	6033      	str	r3, [r6, #0]
 8002e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e76:	460c      	mov	r4, r1
 8002e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e7c:	b10a      	cbz	r2, 8002e82 <_printf_common+0x26>
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6033      	str	r3, [r6, #0]
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	0699      	lsls	r1, r3, #26
 8002e86:	bf42      	ittt	mi
 8002e88:	6833      	ldrmi	r3, [r6, #0]
 8002e8a:	3302      	addmi	r3, #2
 8002e8c:	6033      	strmi	r3, [r6, #0]
 8002e8e:	6825      	ldr	r5, [r4, #0]
 8002e90:	f015 0506 	ands.w	r5, r5, #6
 8002e94:	d106      	bne.n	8002ea4 <_printf_common+0x48>
 8002e96:	f104 0a19 	add.w	sl, r4, #25
 8002e9a:	68e3      	ldr	r3, [r4, #12]
 8002e9c:	6832      	ldr	r2, [r6, #0]
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	42ab      	cmp	r3, r5
 8002ea2:	dc28      	bgt.n	8002ef6 <_printf_common+0x9a>
 8002ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ea8:	1e13      	subs	r3, r2, #0
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	bf18      	it	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	0692      	lsls	r2, r2, #26
 8002eb2:	d42d      	bmi.n	8002f10 <_printf_common+0xb4>
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d020      	beq.n	8002f04 <_printf_common+0xa8>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	68e5      	ldr	r5, [r4, #12]
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf18      	it	ne
 8002ece:	2500      	movne	r5, #0
 8002ed0:	6832      	ldr	r2, [r6, #0]
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	68a3      	ldr	r3, [r4, #8]
 8002ed8:	bf08      	it	eq
 8002eda:	1aad      	subeq	r5, r5, r2
 8002edc:	6922      	ldr	r2, [r4, #16]
 8002ede:	bf08      	it	eq
 8002ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bfc4      	itt	gt
 8002ee8:	1a9b      	subgt	r3, r3, r2
 8002eea:	18ed      	addgt	r5, r5, r3
 8002eec:	341a      	adds	r4, #26
 8002eee:	42b5      	cmp	r5, r6
 8002ef0:	d11a      	bne.n	8002f28 <_printf_common+0xcc>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	e008      	b.n	8002f08 <_printf_common+0xac>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	4652      	mov	r2, sl
 8002efa:	4649      	mov	r1, r9
 8002efc:	4638      	mov	r0, r7
 8002efe:	47c0      	blx	r8
 8002f00:	3001      	adds	r0, #1
 8002f02:	d103      	bne.n	8002f0c <_printf_common+0xb0>
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7c4      	b.n	8002e9a <_printf_common+0x3e>
 8002f10:	2030      	movs	r0, #48	; 0x30
 8002f12:	18e1      	adds	r1, r4, r3
 8002f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f1e:	4422      	add	r2, r4
 8002f20:	3302      	adds	r3, #2
 8002f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f26:	e7c5      	b.n	8002eb4 <_printf_common+0x58>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	4638      	mov	r0, r7
 8002f30:	47c0      	blx	r8
 8002f32:	3001      	adds	r0, #1
 8002f34:	d0e6      	beq.n	8002f04 <_printf_common+0xa8>
 8002f36:	3601      	adds	r6, #1
 8002f38:	e7d9      	b.n	8002eee <_printf_common+0x92>
	...

08002f3c <_printf_i>:
 8002f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f40:	460c      	mov	r4, r1
 8002f42:	7e27      	ldrb	r7, [r4, #24]
 8002f44:	4691      	mov	r9, r2
 8002f46:	2f78      	cmp	r7, #120	; 0x78
 8002f48:	4680      	mov	r8, r0
 8002f4a:	469a      	mov	sl, r3
 8002f4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f52:	d807      	bhi.n	8002f64 <_printf_i+0x28>
 8002f54:	2f62      	cmp	r7, #98	; 0x62
 8002f56:	d80a      	bhi.n	8002f6e <_printf_i+0x32>
 8002f58:	2f00      	cmp	r7, #0
 8002f5a:	f000 80d9 	beq.w	8003110 <_printf_i+0x1d4>
 8002f5e:	2f58      	cmp	r7, #88	; 0x58
 8002f60:	f000 80a4 	beq.w	80030ac <_printf_i+0x170>
 8002f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f6c:	e03a      	b.n	8002fe4 <_printf_i+0xa8>
 8002f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f72:	2b15      	cmp	r3, #21
 8002f74:	d8f6      	bhi.n	8002f64 <_printf_i+0x28>
 8002f76:	a001      	add	r0, pc, #4	; (adr r0, 8002f7c <_printf_i+0x40>)
 8002f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fe9 	.word	0x08002fe9
 8002f84:	08002f65 	.word	0x08002f65
 8002f88:	08002f65 	.word	0x08002f65
 8002f8c:	08002f65 	.word	0x08002f65
 8002f90:	08002f65 	.word	0x08002f65
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002f65 	.word	0x08002f65
 8002f9c:	08002f65 	.word	0x08002f65
 8002fa0:	08002f65 	.word	0x08002f65
 8002fa4:	08002f65 	.word	0x08002f65
 8002fa8:	080030f7 	.word	0x080030f7
 8002fac:	08003019 	.word	0x08003019
 8002fb0:	080030d9 	.word	0x080030d9
 8002fb4:	08002f65 	.word	0x08002f65
 8002fb8:	08002f65 	.word	0x08002f65
 8002fbc:	08003119 	.word	0x08003119
 8002fc0:	08002f65 	.word	0x08002f65
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08002f65 	.word	0x08002f65
 8002fcc:	08002f65 	.word	0x08002f65
 8002fd0:	080030e1 	.word	0x080030e1
 8002fd4:	680b      	ldr	r3, [r1, #0]
 8002fd6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	600a      	str	r2, [r1, #0]
 8002fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0a4      	b.n	8003132 <_printf_i+0x1f6>
 8002fe8:	6825      	ldr	r5, [r4, #0]
 8002fea:	6808      	ldr	r0, [r1, #0]
 8002fec:	062e      	lsls	r6, r5, #24
 8002fee:	f100 0304 	add.w	r3, r0, #4
 8002ff2:	d50a      	bpl.n	800300a <_printf_i+0xce>
 8002ff4:	6805      	ldr	r5, [r0, #0]
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	da03      	bge.n	8003004 <_printf_i+0xc8>
 8002ffc:	232d      	movs	r3, #45	; 0x2d
 8002ffe:	426d      	negs	r5, r5
 8003000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003004:	230a      	movs	r3, #10
 8003006:	485e      	ldr	r0, [pc, #376]	; (8003180 <_printf_i+0x244>)
 8003008:	e019      	b.n	800303e <_printf_i+0x102>
 800300a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800300e:	6805      	ldr	r5, [r0, #0]
 8003010:	600b      	str	r3, [r1, #0]
 8003012:	bf18      	it	ne
 8003014:	b22d      	sxthne	r5, r5
 8003016:	e7ef      	b.n	8002ff8 <_printf_i+0xbc>
 8003018:	680b      	ldr	r3, [r1, #0]
 800301a:	6825      	ldr	r5, [r4, #0]
 800301c:	1d18      	adds	r0, r3, #4
 800301e:	6008      	str	r0, [r1, #0]
 8003020:	0628      	lsls	r0, r5, #24
 8003022:	d501      	bpl.n	8003028 <_printf_i+0xec>
 8003024:	681d      	ldr	r5, [r3, #0]
 8003026:	e002      	b.n	800302e <_printf_i+0xf2>
 8003028:	0669      	lsls	r1, r5, #25
 800302a:	d5fb      	bpl.n	8003024 <_printf_i+0xe8>
 800302c:	881d      	ldrh	r5, [r3, #0]
 800302e:	2f6f      	cmp	r7, #111	; 0x6f
 8003030:	bf0c      	ite	eq
 8003032:	2308      	moveq	r3, #8
 8003034:	230a      	movne	r3, #10
 8003036:	4852      	ldr	r0, [pc, #328]	; (8003180 <_printf_i+0x244>)
 8003038:	2100      	movs	r1, #0
 800303a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800303e:	6866      	ldr	r6, [r4, #4]
 8003040:	2e00      	cmp	r6, #0
 8003042:	bfa8      	it	ge
 8003044:	6821      	ldrge	r1, [r4, #0]
 8003046:	60a6      	str	r6, [r4, #8]
 8003048:	bfa4      	itt	ge
 800304a:	f021 0104 	bicge.w	r1, r1, #4
 800304e:	6021      	strge	r1, [r4, #0]
 8003050:	b90d      	cbnz	r5, 8003056 <_printf_i+0x11a>
 8003052:	2e00      	cmp	r6, #0
 8003054:	d04d      	beq.n	80030f2 <_printf_i+0x1b6>
 8003056:	4616      	mov	r6, r2
 8003058:	fbb5 f1f3 	udiv	r1, r5, r3
 800305c:	fb03 5711 	mls	r7, r3, r1, r5
 8003060:	5dc7      	ldrb	r7, [r0, r7]
 8003062:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003066:	462f      	mov	r7, r5
 8003068:	42bb      	cmp	r3, r7
 800306a:	460d      	mov	r5, r1
 800306c:	d9f4      	bls.n	8003058 <_printf_i+0x11c>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d10b      	bne.n	800308a <_printf_i+0x14e>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	07df      	lsls	r7, r3, #31
 8003076:	d508      	bpl.n	800308a <_printf_i+0x14e>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	6861      	ldr	r1, [r4, #4]
 800307c:	4299      	cmp	r1, r3
 800307e:	bfde      	ittt	le
 8003080:	2330      	movle	r3, #48	; 0x30
 8003082:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003086:	f106 36ff 	addle.w	r6, r6, #4294967295
 800308a:	1b92      	subs	r2, r2, r6
 800308c:	6122      	str	r2, [r4, #16]
 800308e:	464b      	mov	r3, r9
 8003090:	4621      	mov	r1, r4
 8003092:	4640      	mov	r0, r8
 8003094:	f8cd a000 	str.w	sl, [sp]
 8003098:	aa03      	add	r2, sp, #12
 800309a:	f7ff fedf 	bl	8002e5c <_printf_common>
 800309e:	3001      	adds	r0, #1
 80030a0:	d14c      	bne.n	800313c <_printf_i+0x200>
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295
 80030a6:	b004      	add	sp, #16
 80030a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ac:	4834      	ldr	r0, [pc, #208]	; (8003180 <_printf_i+0x244>)
 80030ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030b2:	680e      	ldr	r6, [r1, #0]
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80030ba:	061f      	lsls	r7, r3, #24
 80030bc:	600e      	str	r6, [r1, #0]
 80030be:	d514      	bpl.n	80030ea <_printf_i+0x1ae>
 80030c0:	07d9      	lsls	r1, r3, #31
 80030c2:	bf44      	itt	mi
 80030c4:	f043 0320 	orrmi.w	r3, r3, #32
 80030c8:	6023      	strmi	r3, [r4, #0]
 80030ca:	b91d      	cbnz	r5, 80030d4 <_printf_i+0x198>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f023 0320 	bic.w	r3, r3, #32
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	2310      	movs	r3, #16
 80030d6:	e7af      	b.n	8003038 <_printf_i+0xfc>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	2378      	movs	r3, #120	; 0x78
 80030e2:	4828      	ldr	r0, [pc, #160]	; (8003184 <_printf_i+0x248>)
 80030e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030e8:	e7e3      	b.n	80030b2 <_printf_i+0x176>
 80030ea:	065e      	lsls	r6, r3, #25
 80030ec:	bf48      	it	mi
 80030ee:	b2ad      	uxthmi	r5, r5
 80030f0:	e7e6      	b.n	80030c0 <_printf_i+0x184>
 80030f2:	4616      	mov	r6, r2
 80030f4:	e7bb      	b.n	800306e <_printf_i+0x132>
 80030f6:	680b      	ldr	r3, [r1, #0]
 80030f8:	6826      	ldr	r6, [r4, #0]
 80030fa:	1d1d      	adds	r5, r3, #4
 80030fc:	6960      	ldr	r0, [r4, #20]
 80030fe:	600d      	str	r5, [r1, #0]
 8003100:	0635      	lsls	r5, r6, #24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	d501      	bpl.n	800310a <_printf_i+0x1ce>
 8003106:	6018      	str	r0, [r3, #0]
 8003108:	e002      	b.n	8003110 <_printf_i+0x1d4>
 800310a:	0671      	lsls	r1, r6, #25
 800310c:	d5fb      	bpl.n	8003106 <_printf_i+0x1ca>
 800310e:	8018      	strh	r0, [r3, #0]
 8003110:	2300      	movs	r3, #0
 8003112:	4616      	mov	r6, r2
 8003114:	6123      	str	r3, [r4, #16]
 8003116:	e7ba      	b.n	800308e <_printf_i+0x152>
 8003118:	680b      	ldr	r3, [r1, #0]
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	600a      	str	r2, [r1, #0]
 800311e:	681e      	ldr	r6, [r3, #0]
 8003120:	2100      	movs	r1, #0
 8003122:	4630      	mov	r0, r6
 8003124:	6862      	ldr	r2, [r4, #4]
 8003126:	f000 f82f 	bl	8003188 <memchr>
 800312a:	b108      	cbz	r0, 8003130 <_printf_i+0x1f4>
 800312c:	1b80      	subs	r0, r0, r6
 800312e:	6060      	str	r0, [r4, #4]
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	6123      	str	r3, [r4, #16]
 8003134:	2300      	movs	r3, #0
 8003136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800313a:	e7a8      	b.n	800308e <_printf_i+0x152>
 800313c:	4632      	mov	r2, r6
 800313e:	4649      	mov	r1, r9
 8003140:	4640      	mov	r0, r8
 8003142:	6923      	ldr	r3, [r4, #16]
 8003144:	47d0      	blx	sl
 8003146:	3001      	adds	r0, #1
 8003148:	d0ab      	beq.n	80030a2 <_printf_i+0x166>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	079b      	lsls	r3, r3, #30
 800314e:	d413      	bmi.n	8003178 <_printf_i+0x23c>
 8003150:	68e0      	ldr	r0, [r4, #12]
 8003152:	9b03      	ldr	r3, [sp, #12]
 8003154:	4298      	cmp	r0, r3
 8003156:	bfb8      	it	lt
 8003158:	4618      	movlt	r0, r3
 800315a:	e7a4      	b.n	80030a6 <_printf_i+0x16a>
 800315c:	2301      	movs	r3, #1
 800315e:	4632      	mov	r2, r6
 8003160:	4649      	mov	r1, r9
 8003162:	4640      	mov	r0, r8
 8003164:	47d0      	blx	sl
 8003166:	3001      	adds	r0, #1
 8003168:	d09b      	beq.n	80030a2 <_printf_i+0x166>
 800316a:	3501      	adds	r5, #1
 800316c:	68e3      	ldr	r3, [r4, #12]
 800316e:	9903      	ldr	r1, [sp, #12]
 8003170:	1a5b      	subs	r3, r3, r1
 8003172:	42ab      	cmp	r3, r5
 8003174:	dcf2      	bgt.n	800315c <_printf_i+0x220>
 8003176:	e7eb      	b.n	8003150 <_printf_i+0x214>
 8003178:	2500      	movs	r5, #0
 800317a:	f104 0619 	add.w	r6, r4, #25
 800317e:	e7f5      	b.n	800316c <_printf_i+0x230>
 8003180:	0800345d 	.word	0x0800345d
 8003184:	0800346e 	.word	0x0800346e

08003188 <memchr>:
 8003188:	4603      	mov	r3, r0
 800318a:	b510      	push	{r4, lr}
 800318c:	b2c9      	uxtb	r1, r1
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	4618      	mov	r0, r3
 8003194:	d101      	bne.n	800319a <memchr+0x12>
 8003196:	2000      	movs	r0, #0
 8003198:	e003      	b.n	80031a2 <memchr+0x1a>
 800319a:	7804      	ldrb	r4, [r0, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	428c      	cmp	r4, r1
 80031a0:	d1f6      	bne.n	8003190 <memchr+0x8>
 80031a2:	bd10      	pop	{r4, pc}

080031a4 <memcpy>:
 80031a4:	440a      	add	r2, r1
 80031a6:	4291      	cmp	r1, r2
 80031a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ac:	d100      	bne.n	80031b0 <memcpy+0xc>
 80031ae:	4770      	bx	lr
 80031b0:	b510      	push	{r4, lr}
 80031b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031b6:	4291      	cmp	r1, r2
 80031b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031bc:	d1f9      	bne.n	80031b2 <memcpy+0xe>
 80031be:	bd10      	pop	{r4, pc}

080031c0 <memmove>:
 80031c0:	4288      	cmp	r0, r1
 80031c2:	b510      	push	{r4, lr}
 80031c4:	eb01 0402 	add.w	r4, r1, r2
 80031c8:	d902      	bls.n	80031d0 <memmove+0x10>
 80031ca:	4284      	cmp	r4, r0
 80031cc:	4623      	mov	r3, r4
 80031ce:	d807      	bhi.n	80031e0 <memmove+0x20>
 80031d0:	1e43      	subs	r3, r0, #1
 80031d2:	42a1      	cmp	r1, r4
 80031d4:	d008      	beq.n	80031e8 <memmove+0x28>
 80031d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031de:	e7f8      	b.n	80031d2 <memmove+0x12>
 80031e0:	4601      	mov	r1, r0
 80031e2:	4402      	add	r2, r0
 80031e4:	428a      	cmp	r2, r1
 80031e6:	d100      	bne.n	80031ea <memmove+0x2a>
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031f2:	e7f7      	b.n	80031e4 <memmove+0x24>

080031f4 <_free_r>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4605      	mov	r5, r0
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d043      	beq.n	8003284 <_free_r+0x90>
 80031fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003200:	1f0c      	subs	r4, r1, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfb8      	it	lt
 8003206:	18e4      	addlt	r4, r4, r3
 8003208:	f000 f8d0 	bl	80033ac <__malloc_lock>
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <_free_r+0x94>)
 800320e:	6813      	ldr	r3, [r2, #0]
 8003210:	4610      	mov	r0, r2
 8003212:	b933      	cbnz	r3, 8003222 <_free_r+0x2e>
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	6014      	str	r4, [r2, #0]
 8003218:	4628      	mov	r0, r5
 800321a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800321e:	f000 b8cb 	b.w	80033b8 <__malloc_unlock>
 8003222:	42a3      	cmp	r3, r4
 8003224:	d90a      	bls.n	800323c <_free_r+0x48>
 8003226:	6821      	ldr	r1, [r4, #0]
 8003228:	1862      	adds	r2, r4, r1
 800322a:	4293      	cmp	r3, r2
 800322c:	bf01      	itttt	eq
 800322e:	681a      	ldreq	r2, [r3, #0]
 8003230:	685b      	ldreq	r3, [r3, #4]
 8003232:	1852      	addeq	r2, r2, r1
 8003234:	6022      	streq	r2, [r4, #0]
 8003236:	6063      	str	r3, [r4, #4]
 8003238:	6004      	str	r4, [r0, #0]
 800323a:	e7ed      	b.n	8003218 <_free_r+0x24>
 800323c:	461a      	mov	r2, r3
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	b10b      	cbz	r3, 8003246 <_free_r+0x52>
 8003242:	42a3      	cmp	r3, r4
 8003244:	d9fa      	bls.n	800323c <_free_r+0x48>
 8003246:	6811      	ldr	r1, [r2, #0]
 8003248:	1850      	adds	r0, r2, r1
 800324a:	42a0      	cmp	r0, r4
 800324c:	d10b      	bne.n	8003266 <_free_r+0x72>
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	4401      	add	r1, r0
 8003252:	1850      	adds	r0, r2, r1
 8003254:	4283      	cmp	r3, r0
 8003256:	6011      	str	r1, [r2, #0]
 8003258:	d1de      	bne.n	8003218 <_free_r+0x24>
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4401      	add	r1, r0
 8003260:	6011      	str	r1, [r2, #0]
 8003262:	6053      	str	r3, [r2, #4]
 8003264:	e7d8      	b.n	8003218 <_free_r+0x24>
 8003266:	d902      	bls.n	800326e <_free_r+0x7a>
 8003268:	230c      	movs	r3, #12
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	e7d4      	b.n	8003218 <_free_r+0x24>
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	1821      	adds	r1, r4, r0
 8003272:	428b      	cmp	r3, r1
 8003274:	bf01      	itttt	eq
 8003276:	6819      	ldreq	r1, [r3, #0]
 8003278:	685b      	ldreq	r3, [r3, #4]
 800327a:	1809      	addeq	r1, r1, r0
 800327c:	6021      	streq	r1, [r4, #0]
 800327e:	6063      	str	r3, [r4, #4]
 8003280:	6054      	str	r4, [r2, #4]
 8003282:	e7c9      	b.n	8003218 <_free_r+0x24>
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	bf00      	nop
 8003288:	200000d4 	.word	0x200000d4

0800328c <_malloc_r>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	1ccd      	adds	r5, r1, #3
 8003290:	f025 0503 	bic.w	r5, r5, #3
 8003294:	3508      	adds	r5, #8
 8003296:	2d0c      	cmp	r5, #12
 8003298:	bf38      	it	cc
 800329a:	250c      	movcc	r5, #12
 800329c:	2d00      	cmp	r5, #0
 800329e:	4606      	mov	r6, r0
 80032a0:	db01      	blt.n	80032a6 <_malloc_r+0x1a>
 80032a2:	42a9      	cmp	r1, r5
 80032a4:	d903      	bls.n	80032ae <_malloc_r+0x22>
 80032a6:	230c      	movs	r3, #12
 80032a8:	6033      	str	r3, [r6, #0]
 80032aa:	2000      	movs	r0, #0
 80032ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ae:	f000 f87d 	bl	80033ac <__malloc_lock>
 80032b2:	4921      	ldr	r1, [pc, #132]	; (8003338 <_malloc_r+0xac>)
 80032b4:	680a      	ldr	r2, [r1, #0]
 80032b6:	4614      	mov	r4, r2
 80032b8:	b99c      	cbnz	r4, 80032e2 <_malloc_r+0x56>
 80032ba:	4f20      	ldr	r7, [pc, #128]	; (800333c <_malloc_r+0xb0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b923      	cbnz	r3, 80032ca <_malloc_r+0x3e>
 80032c0:	4621      	mov	r1, r4
 80032c2:	4630      	mov	r0, r6
 80032c4:	f000 f862 	bl	800338c <_sbrk_r>
 80032c8:	6038      	str	r0, [r7, #0]
 80032ca:	4629      	mov	r1, r5
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 f85d 	bl	800338c <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d123      	bne.n	800331e <_malloc_r+0x92>
 80032d6:	230c      	movs	r3, #12
 80032d8:	4630      	mov	r0, r6
 80032da:	6033      	str	r3, [r6, #0]
 80032dc:	f000 f86c 	bl	80033b8 <__malloc_unlock>
 80032e0:	e7e3      	b.n	80032aa <_malloc_r+0x1e>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	1b5b      	subs	r3, r3, r5
 80032e6:	d417      	bmi.n	8003318 <_malloc_r+0x8c>
 80032e8:	2b0b      	cmp	r3, #11
 80032ea:	d903      	bls.n	80032f4 <_malloc_r+0x68>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	441c      	add	r4, r3
 80032f0:	6025      	str	r5, [r4, #0]
 80032f2:	e004      	b.n	80032fe <_malloc_r+0x72>
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	42a2      	cmp	r2, r4
 80032f8:	bf0c      	ite	eq
 80032fa:	600b      	streq	r3, [r1, #0]
 80032fc:	6053      	strne	r3, [r2, #4]
 80032fe:	4630      	mov	r0, r6
 8003300:	f000 f85a 	bl	80033b8 <__malloc_unlock>
 8003304:	f104 000b 	add.w	r0, r4, #11
 8003308:	1d23      	adds	r3, r4, #4
 800330a:	f020 0007 	bic.w	r0, r0, #7
 800330e:	1ac2      	subs	r2, r0, r3
 8003310:	d0cc      	beq.n	80032ac <_malloc_r+0x20>
 8003312:	1a1b      	subs	r3, r3, r0
 8003314:	50a3      	str	r3, [r4, r2]
 8003316:	e7c9      	b.n	80032ac <_malloc_r+0x20>
 8003318:	4622      	mov	r2, r4
 800331a:	6864      	ldr	r4, [r4, #4]
 800331c:	e7cc      	b.n	80032b8 <_malloc_r+0x2c>
 800331e:	1cc4      	adds	r4, r0, #3
 8003320:	f024 0403 	bic.w	r4, r4, #3
 8003324:	42a0      	cmp	r0, r4
 8003326:	d0e3      	beq.n	80032f0 <_malloc_r+0x64>
 8003328:	1a21      	subs	r1, r4, r0
 800332a:	4630      	mov	r0, r6
 800332c:	f000 f82e 	bl	800338c <_sbrk_r>
 8003330:	3001      	adds	r0, #1
 8003332:	d1dd      	bne.n	80032f0 <_malloc_r+0x64>
 8003334:	e7cf      	b.n	80032d6 <_malloc_r+0x4a>
 8003336:	bf00      	nop
 8003338:	200000d4 	.word	0x200000d4
 800333c:	200000d8 	.word	0x200000d8

08003340 <_realloc_r>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	4607      	mov	r7, r0
 8003344:	4614      	mov	r4, r2
 8003346:	460e      	mov	r6, r1
 8003348:	b921      	cbnz	r1, 8003354 <_realloc_r+0x14>
 800334a:	4611      	mov	r1, r2
 800334c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003350:	f7ff bf9c 	b.w	800328c <_malloc_r>
 8003354:	b922      	cbnz	r2, 8003360 <_realloc_r+0x20>
 8003356:	f7ff ff4d 	bl	80031f4 <_free_r>
 800335a:	4625      	mov	r5, r4
 800335c:	4628      	mov	r0, r5
 800335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003360:	f000 f830 	bl	80033c4 <_malloc_usable_size_r>
 8003364:	42a0      	cmp	r0, r4
 8003366:	d20f      	bcs.n	8003388 <_realloc_r+0x48>
 8003368:	4621      	mov	r1, r4
 800336a:	4638      	mov	r0, r7
 800336c:	f7ff ff8e 	bl	800328c <_malloc_r>
 8003370:	4605      	mov	r5, r0
 8003372:	2800      	cmp	r0, #0
 8003374:	d0f2      	beq.n	800335c <_realloc_r+0x1c>
 8003376:	4631      	mov	r1, r6
 8003378:	4622      	mov	r2, r4
 800337a:	f7ff ff13 	bl	80031a4 <memcpy>
 800337e:	4631      	mov	r1, r6
 8003380:	4638      	mov	r0, r7
 8003382:	f7ff ff37 	bl	80031f4 <_free_r>
 8003386:	e7e9      	b.n	800335c <_realloc_r+0x1c>
 8003388:	4635      	mov	r5, r6
 800338a:	e7e7      	b.n	800335c <_realloc_r+0x1c>

0800338c <_sbrk_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	2300      	movs	r3, #0
 8003390:	4d05      	ldr	r5, [pc, #20]	; (80033a8 <_sbrk_r+0x1c>)
 8003392:	4604      	mov	r4, r0
 8003394:	4608      	mov	r0, r1
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	f7fd fae2 	bl	8000960 <_sbrk>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d102      	bne.n	80033a6 <_sbrk_r+0x1a>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	b103      	cbz	r3, 80033a6 <_sbrk_r+0x1a>
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	200001f8 	.word	0x200001f8

080033ac <__malloc_lock>:
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <__malloc_lock+0x8>)
 80033ae:	f000 b811 	b.w	80033d4 <__retarget_lock_acquire_recursive>
 80033b2:	bf00      	nop
 80033b4:	20000200 	.word	0x20000200

080033b8 <__malloc_unlock>:
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <__malloc_unlock+0x8>)
 80033ba:	f000 b80c 	b.w	80033d6 <__retarget_lock_release_recursive>
 80033be:	bf00      	nop
 80033c0:	20000200 	.word	0x20000200

080033c4 <_malloc_usable_size_r>:
 80033c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c8:	1f18      	subs	r0, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfbc      	itt	lt
 80033ce:	580b      	ldrlt	r3, [r1, r0]
 80033d0:	18c0      	addlt	r0, r0, r3
 80033d2:	4770      	bx	lr

080033d4 <__retarget_lock_acquire_recursive>:
 80033d4:	4770      	bx	lr

080033d6 <__retarget_lock_release_recursive>:
 80033d6:	4770      	bx	lr

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
