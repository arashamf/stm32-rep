
f103_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c4  080032c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080032c4  080032c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c4  080032c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08003340  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003340  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fc  00000000  00000000  0002b252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a60  00000000  00000000  0002e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b699  00000000  00000000  00045d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7e4  00000000  00000000  000513a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbb85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  000dbbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800322c 	.word	0x0800322c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800322c 	.word	0x0800322c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
static char UART_msg_TX[msg_SIZE]; // массив для формирования сообщений для вывода по UART

//прерывание 1 раз в 2 мс
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d143      	bne.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
        {
        	if (flag)
 800016e:	4b24      	ldr	r3, [pc, #144]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d020      	beq.n	80001b8 <HAL_TIM_PeriodElapsedCallback+0x5c>
        	{
        		duty_ch1 += PERIOD/1000; // прибавляем длительность импульса  PWM по 1
 8000176:	4b23      	ldr	r3, [pc, #140]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	3301      	adds	r3, #1
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800017e:	6013      	str	r3, [r2, #0]
        		TIM1->CCR1 = duty_ch1;
 8000180:	4a21      	ldr	r2, [pc, #132]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000182:	4b20      	ldr	r3, [pc, #128]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	6353      	str	r3, [r2, #52]	; 0x34
        		if(duty_ch1 >= PERIOD)
 8000188:	4b1e      	ldr	r3, [pc, #120]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000190:	d331      	bcc.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
        		{
        			flag = 0;
 8000192:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
        			sprintf (UART_msg_TX,"flag=0\r\n");
 8000198:	491c      	ldr	r1, [pc, #112]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800019a:	481d      	ldr	r0, [pc, #116]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800019c:	f002 fc0c 	bl	80029b8 <siprintf>
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001a0:	481b      	ldr	r0, [pc, #108]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001a2:	f7ff ffd3 	bl	800014c <strlen>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ae:	4918      	ldr	r1, [pc, #96]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001b2:	f002 fa65 	bl	8002680 <HAL_UART_Transmit>
        	}
        }

 //       sprintf (UART_msg_TX,"timer2\r\n");
//        HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 }
 80001b6:	e01e      	b.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
        			duty_ch1 -= PERIOD/1000; // убавляем длительность импульса PWM по 1
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	3b01      	subs	r3, #1
 80001be:	4a11      	ldr	r2, [pc, #68]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001c0:	6013      	str	r3, [r2, #0]
        			TIM1->CCR1 = duty_ch1;
 80001c2:	4a11      	ldr	r2, [pc, #68]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	6353      	str	r3, [r2, #52]	; 0x34
        			if(duty_ch1 <= 1)
 80001ca:	4b0e      	ldr	r3, [pc, #56]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d811      	bhi.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
        			   flag = 1;
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
        			   sprintf (UART_msg_TX,"flag=1\r\n");
 80001d8:	490f      	ldr	r1, [pc, #60]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001da:	480d      	ldr	r0, [pc, #52]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001dc:	f002 fbec 	bl	80029b8 <siprintf>
        			   HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001e2:	f7ff ffb3 	bl	800014c <strlen>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001f2:	f002 fa45 	bl	8002680 <HAL_UART_Transmit>
 }
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000
 8000204:	20000090 	.word	0x20000090
 8000208:	40012c00 	.word	0x40012c00
 800020c:	08003244 	.word	0x08003244
 8000210:	20000094 	.word	0x20000094
 8000214:	200000dc 	.word	0x200000dc
 8000218:	08003250 	.word	0x08003250

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb24 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f82a 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f982 	bl	8000530 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800022c:	f000 f956 	bl	80004dc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000230:	f000 f868 	bl	8000304 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000234:	f000 f906 	bl	8000444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000238:	2100      	movs	r1, #0
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <main+0x4c>)
 800023c:	f001 fb1e 	bl	800187c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0x50>)
 8000242:	f001 fa71 	bl	8001728 <HAL_TIM_Base_Start_IT>
  sprintf (UART_msg_TX,"pwm_start\r\n");
 8000246:	490a      	ldr	r1, [pc, #40]	; (8000270 <main+0x54>)
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <main+0x58>)
 800024a:	f002 fbb5 	bl	80029b8 <siprintf>
  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <main+0x58>)
 8000250:	f7ff ff7c 	bl	800014c <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	b29a      	uxth	r2, r3
 8000258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <main+0x58>)
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x5c>)
 8000260:	f002 fa0e 	bl	8002680 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x48>
 8000266:	bf00      	nop
 8000268:	20000120 	.word	0x20000120
 800026c:	20000168 	.word	0x20000168
 8000270:	0800325c 	.word	0x0800325c
 8000274:	20000094 	.word	0x20000094
 8000278:	200000dc 	.word	0x200000dc

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fb8c 	bl	80029a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fdc5 	bl	8000e54 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f950 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2101      	movs	r1, #1
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 f831 	bl	8001354 <HAL_RCC_ClockConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002f8:	f000 f93c 	bl	8000574 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3740      	adds	r7, #64	; 0x40
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b096      	sub	sp, #88	; 0x58
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]
 8000334:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2220      	movs	r2, #32
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f002 fb33 	bl	80029a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000342:	4b3e      	ldr	r3, [pc, #248]	; (800043c <MX_TIM1_Init+0x138>)
 8000344:	4a3e      	ldr	r2, [pc, #248]	; (8000440 <MX_TIM1_Init+0x13c>)
 8000346:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000348:	4b3c      	ldr	r3, [pc, #240]	; (800043c <MX_TIM1_Init+0x138>)
 800034a:	229f      	movs	r2, #159	; 0x9f
 800034c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034e:	4b3b      	ldr	r3, [pc, #236]	; (800043c <MX_TIM1_Init+0x138>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000354:	4b39      	ldr	r3, [pc, #228]	; (800043c <MX_TIM1_Init+0x138>)
 8000356:	f240 32e7 	movw	r2, #999	; 0x3e7
 800035a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035c:	4b37      	ldr	r3, [pc, #220]	; (800043c <MX_TIM1_Init+0x138>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000362:	4b36      	ldr	r3, [pc, #216]	; (800043c <MX_TIM1_Init+0x138>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000368:	4b34      	ldr	r3, [pc, #208]	; (800043c <MX_TIM1_Init+0x138>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800036e:	4833      	ldr	r0, [pc, #204]	; (800043c <MX_TIM1_Init+0x138>)
 8000370:	f001 f98a 	bl	8001688 <HAL_TIM_Base_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800037a:	f000 f8fb 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000382:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000388:	4619      	mov	r1, r3
 800038a:	482c      	ldr	r0, [pc, #176]	; (800043c <MX_TIM1_Init+0x138>)
 800038c:	f001 fcde 	bl	8001d4c <HAL_TIM_ConfigClockSource>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000396:	f000 f8ed 	bl	8000574 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800039a:	4828      	ldr	r0, [pc, #160]	; (800043c <MX_TIM1_Init+0x138>)
 800039c:	f001 fa16 	bl	80017cc <HAL_TIM_PWM_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003a6:	f000 f8e5 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003b6:	4619      	mov	r1, r3
 80003b8:	4820      	ldr	r0, [pc, #128]	; (800043c <MX_TIM1_Init+0x138>)
 80003ba:	f002 f853 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003c4:	f000 f8d6 	bl	8000574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c8:	2360      	movs	r3, #96	; 0x60
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d0:	2300      	movs	r3, #0
 80003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003d4:	2300      	movs	r3, #0
 80003d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <MX_TIM1_Init+0x138>)
 80003ee:	f001 fbef 	bl	8001bd0 <HAL_TIM_PWM_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003f8:	f000 f8bc 	bl	8000574 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <MX_TIM1_Init+0x138>)
 8000420:	f002 f87e 	bl	8002520 <HAL_TIMEx_ConfigBreakDeadTime>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800042a:	f000 f8a3 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800042e:	4803      	ldr	r0, [pc, #12]	; (800043c <MX_TIM1_Init+0x138>)
 8000430:	f000 f910 	bl	8000654 <HAL_TIM_MspPostInit>

}
 8000434:	bf00      	nop
 8000436:	3758      	adds	r7, #88	; 0x58
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000120 	.word	0x20000120
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_TIM2_Init+0x94>)
 800046a:	220f      	movs	r2, #15
 800046c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000476:	f240 32e7 	movw	r2, #999	; 0x3e7
 800047a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_TIM2_Init+0x94>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_TIM2_Init+0x94>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000488:	4813      	ldr	r0, [pc, #76]	; (80004d8 <MX_TIM2_Init+0x94>)
 800048a:	f001 f8fd 	bl	8001688 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000494:	f000 f86e 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004a6:	f001 fc51 	bl	8001d4c <HAL_TIM_ConfigClockSource>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004b0:	f000 f860 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_TIM2_Init+0x94>)
 80004c2:	f001 ffcf 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 f852 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000168 	.word	0x20000168

080004dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_USART1_UART_Init+0x50>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80004ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000514:	f002 f867 	bl	80025e6 <HAL_UART_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800051e:	f000 f829 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000dc 	.word	0x200000dc
 800052c:	40013800 	.word	0x40013800

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_GPIO_Init+0x40>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <MX_GPIO_Init+0x40>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_GPIO_Init+0x40>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_GPIO_Init+0x40>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <MX_GPIO_Init+0x40>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MX_GPIO_Init+0x40>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_TIM_Base_MspInit+0x68>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10c      	bne.n	8000610 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 80005fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800060e:	e018      	b.n	8000642 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d113      	bne.n	8000642 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_TIM_Base_MspInit+0x6c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	201c      	movs	r0, #28
 8000638:	f000 fa51 	bl	8000ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800063c:	201c      	movs	r0, #28
 800063e:	f000 fa6a 	bl	8000b16 <HAL_NVIC_EnableIRQ>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40012c00 	.word	0x40012c00
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_TIM_MspPostInit+0x5c>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d118      	bne.n	80006a6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_TIM_MspPostInit+0x60>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_TIM_MspPostInit+0x60>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_TIM_MspPostInit+0x60>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2302      	movs	r3, #2
 8000698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <HAL_TIM_MspPostInit+0x64>)
 80006a2:	f000 fa53 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40012c00 	.word	0x40012c00
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010800 	.word	0x40010800

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <HAL_UART_MspInit+0x8c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d131      	bne.n	8000740 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a1a      	ldr	r2, [pc, #104]	; (800074c <HAL_UART_MspInit+0x90>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_UART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_UART_MspInit+0x90>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_UART_MspInit+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800070c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000716:	2303      	movs	r3, #3
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <HAL_UART_MspInit+0x94>)
 8000722:	f000 fa13 	bl	8000b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_UART_MspInit+0x94>)
 800073c:	f000 fa06 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40013800 	.word	0x40013800
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <HardFault_Handler+0x4>

08000766 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <MemManage_Handler+0x4>

0800076c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <BusFault_Handler+0x4>

08000772 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f8aa 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <TIM2_IRQHandler+0x10>)
 80007ae:	f001 f907 	bl	80019c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000168 	.word	0x20000168

080007bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x50>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x16>
		heap_end = &end;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <_sbrk+0x50>)
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <_sbrk+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <_sbrk+0x50>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <_sbrk+0x50>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	466a      	mov	r2, sp
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d907      	bls.n	80007f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007e6:	f002 f8b5 	bl	8002954 <__errno>
 80007ea:	4603      	mov	r3, r0
 80007ec:	220c      	movs	r2, #12
 80007ee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	e006      	b.n	8000804 <_sbrk+0x48>
	}

	heap_end += incr;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <_sbrk+0x50>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a03      	ldr	r2, [pc, #12]	; (800080c <_sbrk+0x50>)
 8000800:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000d0 	.word	0x200000d0
 8000810:	200001c8 	.word	0x200001c8

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000846:	f7ff ffe5 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f002 f889 	bl	8002960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fce5 	bl	800021c <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800085c:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8000860:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000864:	200001c4 	.word	0x200001c4

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x28>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x28>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f923 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff fe7a 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f93b 	bl	8000b32 <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 f903 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000004 	.word	0x20000004
 80008f0:	2000000c 	.word	0x2000000c
 80008f4:	20000008 	.word	0x20000008

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	2000000c 	.word	0x2000000c
 8000918:	200001b0 	.word	0x200001b0

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	200001b0 	.word	0x200001b0

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db0b      	blt.n	80009be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 021f 	and.w	r2, r3, #31
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <__NVIC_EnableIRQ+0x34>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	2001      	movs	r0, #1
 80009b6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff90 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff2d 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff42 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5f 	bl	80009cc <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff35 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffa2 	bl	8000a84 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	e169      	b.n	8000e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b60:	2201      	movs	r2, #1
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 8158 	bne.w	8000e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <HAL_GPIO_Init+0x2a0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d05e      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b88:	4a98      	ldr	r2, [pc, #608]	; (8000dec <HAL_GPIO_Init+0x2a0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d875      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b8e:	4a98      	ldr	r2, [pc, #608]	; (8000df0 <HAL_GPIO_Init+0x2a4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d058      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b94:	4a96      	ldr	r2, [pc, #600]	; (8000df0 <HAL_GPIO_Init+0x2a4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d86f      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b9a:	4a96      	ldr	r2, [pc, #600]	; (8000df4 <HAL_GPIO_Init+0x2a8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d052      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000ba0:	4a94      	ldr	r2, [pc, #592]	; (8000df4 <HAL_GPIO_Init+0x2a8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d869      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000ba6:	4a94      	ldr	r2, [pc, #592]	; (8000df8 <HAL_GPIO_Init+0x2ac>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d04c      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bac:	4a92      	ldr	r2, [pc, #584]	; (8000df8 <HAL_GPIO_Init+0x2ac>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d863      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bb2:	4a92      	ldr	r2, [pc, #584]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d046      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bb8:	4a90      	ldr	r2, [pc, #576]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d85d      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d82a      	bhi.n	8000c18 <HAL_GPIO_Init+0xcc>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d859      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <HAL_GPIO_Init+0x80>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000c33 	.word	0x08000c33
 8000bd8:	08000c75 	.word	0x08000c75
 8000bdc:	08000c7b 	.word	0x08000c7b
 8000be0:	08000c7b 	.word	0x08000c7b
 8000be4:	08000c7b 	.word	0x08000c7b
 8000be8:	08000c7b 	.word	0x08000c7b
 8000bec:	08000c7b 	.word	0x08000c7b
 8000bf0:	08000c7b 	.word	0x08000c7b
 8000bf4:	08000c7b 	.word	0x08000c7b
 8000bf8:	08000c7b 	.word	0x08000c7b
 8000bfc:	08000c7b 	.word	0x08000c7b
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c7b 	.word	0x08000c7b
 8000c08:	08000c7b 	.word	0x08000c7b
 8000c0c:	08000c7b 	.word	0x08000c7b
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	4a79      	ldr	r2, [pc, #484]	; (8000e00 <HAL_GPIO_Init+0x2b4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1e:	e02c      	b.n	8000c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e029      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e024      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	3308      	adds	r3, #8
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e01f      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	330c      	adds	r3, #12
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e01a      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e013      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d105      	bne.n	8000c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	611a      	str	r2, [r3, #16]
          break;
 8000c66:	e009      	b.n	8000c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	615a      	str	r2, [r3, #20]
          break;
 8000c72:	e003      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e000      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          break;
 8000c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d801      	bhi.n	8000c86 <HAL_GPIO_Init+0x13a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	e001      	b.n	8000c8a <HAL_GPIO_Init+0x13e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	d802      	bhi.n	8000c98 <HAL_GPIO_Init+0x14c>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x152>
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3b08      	subs	r3, #8
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	6a39      	ldr	r1, [r7, #32]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ccc:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce4:	4a48      	ldr	r2, [pc, #288]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a40      	ldr	r2, [pc, #256]	; (8000e0c <HAL_GPIO_Init+0x2c0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d013      	beq.n	8000d38 <HAL_GPIO_Init+0x1ec>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3f      	ldr	r2, [pc, #252]	; (8000e10 <HAL_GPIO_Init+0x2c4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00d      	beq.n	8000d34 <HAL_GPIO_Init+0x1e8>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <HAL_GPIO_Init+0x2c8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0x1e4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_GPIO_Init+0x2cc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_GPIO_Init+0x1e0>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4a:	492f      	ldr	r1, [pc, #188]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	492c      	ldr	r1, [pc, #176]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4928      	ldr	r1, [pc, #160]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4922      	ldr	r1, [pc, #136]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	491e      	ldr	r1, [pc, #120]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	4918      	ldr	r1, [pc, #96]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4914      	ldr	r1, [pc, #80]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d021      	beq.n	8000e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
 8000de8:	e021      	b.n	8000e2e <HAL_GPIO_Init+0x2e2>
 8000dea:	bf00      	nop
 8000dec:	10320000 	.word	0x10320000
 8000df0:	10310000 	.word	0x10310000
 8000df4:	10220000 	.word	0x10220000
 8000df8:	10210000 	.word	0x10210000
 8000dfc:	10120000 	.word	0x10120000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40011400 	.word	0x40011400
 8000e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f ae8e 	bne.w	8000b60 <HAL_GPIO_Init+0x14>
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	372c      	adds	r7, #44	; 0x2c
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e26c      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8087 	beq.w	8000f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e74:	4b92      	ldr	r3, [pc, #584]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d00c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e80:	4b8f      	ldr	r3, [pc, #572]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d112      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x5e>
 8000e8c:	4b8c      	ldr	r3, [pc, #560]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e98:	d10b      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d06c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x12c>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d168      	bne.n	8000f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e246      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x76>
 8000ebc:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a7f      	ldr	r2, [pc, #508]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e02e      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x98>
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7a      	ldr	r2, [pc, #488]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a77      	ldr	r2, [pc, #476]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0xbc>
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a71      	ldr	r2, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a6e      	ldr	r2, [pc, #440]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xd4>
 8000f10:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6a      	ldr	r2, [pc, #424]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a67      	ldr	r2, [pc, #412]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fcf4 	bl	800091c <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fcf0 	bl	800091c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1fa      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xe4>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fce0 	bl	800091c <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fcdc 	bl	800091c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e1e6      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x10c>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d063      	beq.n	8001056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8e:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_RCC_OscConfig+0x176>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d001      	beq.n	8000fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e1ba      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4939      	ldr	r1, [pc, #228]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e03a      	b.n	8001056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d020      	beq.n	800102a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fc95 	bl	800091c <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fc91 	bl	800091c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e19b      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_RCC_OscConfig+0x270>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fc74 	bl	800091c <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fc70 	bl	800091c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e17a      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03a      	beq.n	80010d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d019      	beq.n	800109e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001070:	f7ff fc54 	bl	800091c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fc50 	bl	800091c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e15a      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f000 fad8 	bl	800164c <RCC_Delay>
 800109c:	e01c      	b.n	80010d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc3a 	bl	800091c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	e00f      	b.n	80010cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc36 	bl	800091c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d908      	bls.n	80010cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e140      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	42420000 	.word	0x42420000
 80010c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010cc:	4b9e      	ldr	r3, [pc, #632]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e9      	bne.n	80010ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a6 	beq.w	8001232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ea:	4b97      	ldr	r3, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b94      	ldr	r3, [pc, #592]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a93      	ldr	r2, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b91      	ldr	r3, [pc, #580]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110e:	2301      	movs	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001112:	4b8e      	ldr	r3, [pc, #568]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d118      	bne.n	8001150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a8a      	ldr	r2, [pc, #552]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112a:	f7ff fbf7 	bl	800091c <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001132:	f7ff fbf3 	bl	800091c <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b64      	cmp	r3, #100	; 0x64
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0fd      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x312>
 8001158:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a7a      	ldr	r2, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	e02d      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x334>
 800116e:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a75      	ldr	r2, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a72      	ldr	r2, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	f023 0304 	bic.w	r3, r3, #4
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	e01c      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d10c      	bne.n	80011aa <HAL_RCC_OscConfig+0x356>
 8001190:	4b6d      	ldr	r3, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e00b      	b.n	80011c2 <HAL_RCC_OscConfig+0x36e>
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a66      	ldr	r2, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6213      	str	r3, [r2, #32]
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a63      	ldr	r2, [pc, #396]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d015      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fba7 	bl	800091c <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fba3 	bl	800091c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0ab      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0ee      	beq.n	80011d2 <HAL_RCC_OscConfig+0x37e>
 80011f4:	e014      	b.n	8001220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb91 	bl	800091c <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fb8d 	bl	800091c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e095      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ee      	bne.n	80011fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d105      	bne.n	8001232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a47      	ldr	r2, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8081 	beq.w	800133e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	d061      	beq.n	800130c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d146      	bne.n	80012de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fb61 	bl	800091c <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff fb5d 	bl	800091c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e067      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d108      	bne.n	8001298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	492d      	ldr	r1, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a19      	ldr	r1, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	430b      	orrs	r3, r1
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb31 	bl	800091c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff fb2d 	bl	800091c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e037      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x46a>
 80012dc:	e02f      	b.n	800133e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_RCC_OscConfig+0x4fc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb1a 	bl	800091c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff fb16 	bl	800091c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e020      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x498>
 800130a:	e018      	b.n	800133e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e013      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	429a      	cmp	r2, r3
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
 8001350:	42420060 	.word	0x42420060

08001354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0d0      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d910      	bls.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4965      	ldr	r1, [pc, #404]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b8      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494d      	ldr	r1, [pc, #308]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d040      	beq.n	8001474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d115      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07f      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e073      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06b      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f023 0203 	bic.w	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4936      	ldr	r1, [pc, #216]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff fa6a 	bl	800091c <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	e00a      	b.n	8001462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff fa66 	bl	800091c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e053      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 020c 	and.w	r2, r3, #12
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d1eb      	bne.n	800144c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d210      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4922      	ldr	r1, [pc, #136]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e032      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4916      	ldr	r1, [pc, #88]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f821 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	490a      	ldr	r1, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x1c8>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1cc>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1d0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9c8 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	08003278 	.word	0x08003278
 8001520:	20000004 	.word	0x20000004
 8001524:	20000008 	.word	0x20000008

08001528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	b490      	push	{r4, r7}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001530:	1d3c      	adds	r4, r7, #4
 8001532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001538:	f240 2301 	movw	r3, #513	; 0x201
 800153c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d002      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x40>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d003      	beq.n	800156e <HAL_RCC_GetSysClockFreq+0x46>
 8001566:	e02d      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800156a:	623b      	str	r3, [r7, #32]
      break;
 800156c:	e02d      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800157a:	4413      	add	r3, r2
 800157c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001580:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c5b      	lsrs	r3, r3, #17
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159a:	4413      	add	r3, r2
 800159c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a6:	fb02 f203 	mul.w	r2, r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	e004      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	623b      	str	r3, [r7, #32]
      break;
 80015c2:	e002      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c6:	623b      	str	r3, [r7, #32]
      break;
 80015c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ca:	6a3b      	ldr	r3, [r7, #32]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc90      	pop	{r4, r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	08003268 	.word	0x08003268
 80015dc:	40021000 	.word	0x40021000
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	003d0900 	.word	0x003d0900

080015e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001600:	f7ff fff2 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001604:	4602      	mov	r2, r0
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	4903      	ldr	r1, [pc, #12]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001612:	5ccb      	ldrb	r3, [r1, r3]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	08003288 	.word	0x08003288

08001624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001628:	f7ff ffde 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0adb      	lsrs	r3, r3, #11
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	08003288 	.word	0x08003288

0800164c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <RCC_Delay+0x34>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <RCC_Delay+0x38>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0a5b      	lsrs	r3, r3, #9
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001668:	bf00      	nop
  }
  while (Delay --);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	60fa      	str	r2, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f9      	bne.n	8001668 <RCC_Delay+0x1c>
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000004 	.word	0x20000004
 8001684:	10624dd3 	.word	0x10624dd3

08001688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e041      	b.n	800171e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe ff98 	bl	80005e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f000 fc28 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d001      	beq.n	8001740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e03a      	b.n	80017b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_TIM_Base_Start_IT+0x98>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00e      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x58>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d009      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x58>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d004      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x58>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d010      	beq.n	80017b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a2:	e007      	b.n	80017b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40000800 	.word	0x40000800

080017cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e041      	b.n	8001862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f839 	bl	800186a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3304      	adds	r3, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 fb86 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_TIM_PWM_Start+0x24>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e022      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d109      	bne.n	80018ba <HAL_TIM_PWM_Start+0x3e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	e015      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d109      	bne.n	80018d4 <HAL_TIM_PWM_Start+0x58>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e008      	b.n	80018e6 <HAL_TIM_PWM_Start+0x6a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e05e      	b.n	80019ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <HAL_TIM_PWM_Start+0x82>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018fc:	e013      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d104      	bne.n	800190e <HAL_TIM_PWM_Start+0x92>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800190c:	e00b      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d104      	bne.n	800191e <HAL_TIM_PWM_Start+0xa2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800191c:	e003      	b.n	8001926 <HAL_TIM_PWM_Start+0xaa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd74 	bl	800241c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_TIM_PWM_Start+0x138>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d107      	bne.n	800194e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_TIM_PWM_Start+0x138>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_TIM_PWM_Start+0xfa>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d009      	beq.n	8001976 <HAL_TIM_PWM_Start+0xfa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_TIM_PWM_Start+0x13c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_TIM_PWM_Start+0xfa>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_PWM_Start+0x140>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d111      	bne.n	800199a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d010      	beq.n	80019aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001998:	e007      	b.n	80019aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40000800 	.word	0x40000800

080019c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d122      	bne.n	8001a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d11b      	bne.n	8001a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0202 	mvn.w	r2, #2
 80019ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa6f 	bl	8001ee6 <HAL_TIM_IC_CaptureCallback>
 8001a08:	e005      	b.n	8001a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fa62 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa71 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d122      	bne.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d11b      	bne.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0204 	mvn.w	r2, #4
 8001a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa45 	bl	8001ee6 <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fa38 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa47 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d122      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0208 	mvn.w	r2, #8
 8001a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fa1b 	bl	8001ee6 <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fa0e 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa1d 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0210 	mvn.w	r2, #16
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2208      	movs	r2, #8
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f9f1 	bl	8001ee6 <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f9e4 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9f3 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0201 	mvn.w	r2, #1
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fb0c 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d10e      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5c:	2b80      	cmp	r3, #128	; 0x80
 8001b5e:	d107      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fd32 	bl	80025d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d10e      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d107      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f9b7 	bl	8001f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d107      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0220 	mvn.w	r2, #32
 8001bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fcfd 	bl	80025c2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e0ac      	b.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	f200 809f 	bhi.w	8001d38 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c35 	.word	0x08001c35
 8001c04:	08001d39 	.word	0x08001d39
 8001c08:	08001d39 	.word	0x08001d39
 8001c0c:	08001d39 	.word	0x08001d39
 8001c10:	08001c75 	.word	0x08001c75
 8001c14:	08001d39 	.word	0x08001d39
 8001c18:	08001d39 	.word	0x08001d39
 8001c1c:	08001d39 	.word	0x08001d39
 8001c20:	08001cb7 	.word	0x08001cb7
 8001c24:	08001d39 	.word	0x08001d39
 8001c28:	08001d39 	.word	0x08001d39
 8001c2c:	08001d39 	.word	0x08001d39
 8001c30:	08001cf7 	.word	0x08001cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f9d0 	bl	8001fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0204 	bic.w	r2, r2, #4
 8001c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6999      	ldr	r1, [r3, #24]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	619a      	str	r2, [r3, #24]
      break;
 8001c72:	e062      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fa16 	bl	80020ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6999      	ldr	r1, [r3, #24]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	021a      	lsls	r2, r3, #8
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	619a      	str	r2, [r3, #24]
      break;
 8001cb4:	e041      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fa5f 	bl	8002180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0208 	orr.w	r2, r2, #8
 8001cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0204 	bic.w	r2, r2, #4
 8001ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69d9      	ldr	r1, [r3, #28]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	61da      	str	r2, [r3, #28]
      break;
 8001cf4:	e021      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 faa9 	bl	8002254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69d9      	ldr	r1, [r3, #28]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	021a      	lsls	r2, r3, #8
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	61da      	str	r2, [r3, #28]
      break;
 8001d36:	e000      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_TIM_ConfigClockSource+0x18>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0b3      	b.n	8001ecc <HAL_TIM_ConfigClockSource+0x180>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9c:	d03e      	beq.n	8001e1c <HAL_TIM_ConfigClockSource+0xd0>
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da2:	f200 8087 	bhi.w	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001daa:	f000 8085 	beq.w	8001eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db2:	d87f      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d01a      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0xa2>
 8001db8:	2b70      	cmp	r3, #112	; 0x70
 8001dba:	d87b      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001dbc:	2b60      	cmp	r3, #96	; 0x60
 8001dbe:	d050      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x116>
 8001dc0:	2b60      	cmp	r3, #96	; 0x60
 8001dc2:	d877      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001dc4:	2b50      	cmp	r3, #80	; 0x50
 8001dc6:	d03c      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0xf6>
 8001dc8:	2b50      	cmp	r3, #80	; 0x50
 8001dca:	d873      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d058      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x136>
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d86f      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001dd4:	2b30      	cmp	r3, #48	; 0x30
 8001dd6:	d064      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0x156>
 8001dd8:	2b30      	cmp	r3, #48	; 0x30
 8001dda:	d86b      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d060      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0x156>
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d867      	bhi.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05c      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0x156>
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d05a      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001dec:	e062      	b.n	8001eb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f000 faee 	bl	80023de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	609a      	str	r2, [r3, #8]
      break;
 8001e1a:	e04e      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f000 fad7 	bl	80023de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3e:	609a      	str	r2, [r3, #8]
      break;
 8001e40:	e03b      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f000 fa4e 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2150      	movs	r1, #80	; 0x50
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 faa5 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001e60:	e02b      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f000 fa6c 	bl	800234c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2160      	movs	r1, #96	; 0x60
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa95 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001e80:	e01b      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f000 fa2e 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fa85 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001ea0:	e00b      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f000 fa7c 	bl	80023aa <TIM_ITRx_SetConfig>
        break;
 8001eb2:	e002      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001eb4:	bf00      	nop
 8001eb6:	e000      	b.n	8001eba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001eb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <TIM_Base_SetConfig+0xb8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00b      	beq.n	8001f4c <TIM_Base_SetConfig+0x30>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d007      	beq.n	8001f4c <TIM_Base_SetConfig+0x30>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <TIM_Base_SetConfig+0xbc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <TIM_Base_SetConfig+0x30>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <TIM_Base_SetConfig+0xc0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d108      	bne.n	8001f5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <TIM_Base_SetConfig+0xb8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00b      	beq.n	8001f7e <TIM_Base_SetConfig+0x62>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d007      	beq.n	8001f7e <TIM_Base_SetConfig+0x62>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <TIM_Base_SetConfig+0xbc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_Base_SetConfig+0x62>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <TIM_Base_SetConfig+0xc0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d108      	bne.n	8001f90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <TIM_Base_SetConfig+0xb8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d103      	bne.n	8001fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800

08001fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0201 	bic.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <TIM_OC1_SetConfig+0xc8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10c      	bne.n	8002056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0308 	bic.w	r3, r3, #8
 8002042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <TIM_OC1_SetConfig+0xc8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800206c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00

080020ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f023 0210 	bic.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0320 	bic.w	r3, r3, #32
 80020f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a1d      	ldr	r2, [pc, #116]	; (800217c <TIM_OC2_SetConfig+0xd0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d10d      	bne.n	8002128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <TIM_OC2_SetConfig+0xd0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d113      	bne.n	8002158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800213e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	621a      	str	r2, [r3, #32]
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40012c00 	.word	0x40012c00

08002180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <TIM_OC3_SetConfig+0xd0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10d      	bne.n	80021fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <TIM_OC3_SetConfig+0xd0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	621a      	str	r2, [r3, #32]
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00

08002254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800229e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	031b      	lsls	r3, r3, #12
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <TIM_OC4_SetConfig+0x98>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d109      	bne.n	80022c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	621a      	str	r2, [r3, #32]
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00

080022f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0201 	bic.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f023 030a 	bic.w	r3, r3, #10
 800232c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 0210 	bic.w	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	621a      	str	r2, [r3, #32]
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f043 0307 	orr.w	r3, r3, #7
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	021a      	lsls	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	609a      	str	r2, [r3, #8]
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002478:	2302      	movs	r3, #2
 800247a:	e046      	b.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d009      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10c      	bne.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800

08002520 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e03d      	b.n	80025b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e03f      	b.n	8002678 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe f855 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2224      	movs	r2, #36	; 0x24
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f904 	bl	8002838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800263e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800264e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800265e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	d17c      	bne.n	800279a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Transmit+0x2c>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e075      	b.n	800279c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit+0x3e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e06e      	b.n	800279c <HAL_UART_Transmit+0x11c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2221      	movs	r2, #33	; 0x21
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d4:	f7fe f922 	bl	800091c <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d108      	bne.n	8002702 <HAL_UART_Transmit+0x82>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e003      	b.n	800270a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002712:	e02a      	b.n	800276a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2200      	movs	r2, #0
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f840 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e036      	b.n	800279c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002742:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	3302      	adds	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	e007      	b.n	800275c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1cf      	bne.n	8002714 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2200      	movs	r2, #0
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f810 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e006      	b.n	800279c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	e02c      	b.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d028      	beq.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027c4:	f7fe f8aa 	bl	800091c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d21d      	bcs.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e00f      	b.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d0c3      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002872:	f023 030c 	bic.w	r3, r3, #12
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	430b      	orrs	r3, r1
 800287e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2c      	ldr	r2, [pc, #176]	; (800294c <UART_SetConfig+0x114>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d103      	bne.n	80028a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a0:	f7fe fec0 	bl	8001624 <HAL_RCC_GetPCLK2Freq>
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	e002      	b.n	80028ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028a8:	f7fe fea8 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <UART_SetConfig+0x118>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	0119      	lsls	r1, r3, #4
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009a      	lsls	r2, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <UART_SetConfig+0x118>)
 80028e6:	fba3 0302 	umull	r0, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <UART_SetConfig+0x118>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	4419      	add	r1, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f2f3 	udiv	r2, r2, r3
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <UART_SetConfig+0x118>)
 800291e:	fba3 0302 	umull	r0, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2064      	movs	r0, #100	; 0x64
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	3332      	adds	r3, #50	; 0x32
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	f003 020f 	and.w	r2, r3, #15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	440a      	add	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40013800 	.word	0x40013800
 8002950:	51eb851f 	.word	0x51eb851f

08002954 <__errno>:
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <__errno+0x8>)
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000010 	.word	0x20000010

08002960 <__libc_init_array>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	2600      	movs	r6, #0
 8002964:	4d0c      	ldr	r5, [pc, #48]	; (8002998 <__libc_init_array+0x38>)
 8002966:	4c0d      	ldr	r4, [pc, #52]	; (800299c <__libc_init_array+0x3c>)
 8002968:	1b64      	subs	r4, r4, r5
 800296a:	10a4      	asrs	r4, r4, #2
 800296c:	42a6      	cmp	r6, r4
 800296e:	d109      	bne.n	8002984 <__libc_init_array+0x24>
 8002970:	f000 fc5c 	bl	800322c <_init>
 8002974:	2600      	movs	r6, #0
 8002976:	4d0a      	ldr	r5, [pc, #40]	; (80029a0 <__libc_init_array+0x40>)
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <__libc_init_array+0x44>)
 800297a:	1b64      	subs	r4, r4, r5
 800297c:	10a4      	asrs	r4, r4, #2
 800297e:	42a6      	cmp	r6, r4
 8002980:	d105      	bne.n	800298e <__libc_init_array+0x2e>
 8002982:	bd70      	pop	{r4, r5, r6, pc}
 8002984:	f855 3b04 	ldr.w	r3, [r5], #4
 8002988:	4798      	blx	r3
 800298a:	3601      	adds	r6, #1
 800298c:	e7ee      	b.n	800296c <__libc_init_array+0xc>
 800298e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002992:	4798      	blx	r3
 8002994:	3601      	adds	r6, #1
 8002996:	e7f2      	b.n	800297e <__libc_init_array+0x1e>
 8002998:	080032c4 	.word	0x080032c4
 800299c:	080032c4 	.word	0x080032c4
 80029a0:	080032c4 	.word	0x080032c4
 80029a4:	080032c8 	.word	0x080032c8

080029a8 <memset>:
 80029a8:	4603      	mov	r3, r0
 80029aa:	4402      	add	r2, r0
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d100      	bne.n	80029b2 <memset+0xa>
 80029b0:	4770      	bx	lr
 80029b2:	f803 1b01 	strb.w	r1, [r3], #1
 80029b6:	e7f9      	b.n	80029ac <memset+0x4>

080029b8 <siprintf>:
 80029b8:	b40e      	push	{r1, r2, r3}
 80029ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029be:	b500      	push	{lr}
 80029c0:	b09c      	sub	sp, #112	; 0x70
 80029c2:	ab1d      	add	r3, sp, #116	; 0x74
 80029c4:	9002      	str	r0, [sp, #8]
 80029c6:	9006      	str	r0, [sp, #24]
 80029c8:	9107      	str	r1, [sp, #28]
 80029ca:	9104      	str	r1, [sp, #16]
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <siprintf+0x38>)
 80029ce:	4909      	ldr	r1, [pc, #36]	; (80029f4 <siprintf+0x3c>)
 80029d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029d4:	9105      	str	r1, [sp, #20]
 80029d6:	6800      	ldr	r0, [r0, #0]
 80029d8:	a902      	add	r1, sp, #8
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	f000 f868 	bl	8002ab0 <_svfiprintf_r>
 80029e0:	2200      	movs	r2, #0
 80029e2:	9b02      	ldr	r3, [sp, #8]
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	b01c      	add	sp, #112	; 0x70
 80029e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029ec:	b003      	add	sp, #12
 80029ee:	4770      	bx	lr
 80029f0:	20000010 	.word	0x20000010
 80029f4:	ffff0208 	.word	0xffff0208

080029f8 <__ssputs_r>:
 80029f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029fc:	688e      	ldr	r6, [r1, #8]
 80029fe:	4682      	mov	sl, r0
 8002a00:	429e      	cmp	r6, r3
 8002a02:	460c      	mov	r4, r1
 8002a04:	4690      	mov	r8, r2
 8002a06:	461f      	mov	r7, r3
 8002a08:	d838      	bhi.n	8002a7c <__ssputs_r+0x84>
 8002a0a:	898a      	ldrh	r2, [r1, #12]
 8002a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a10:	d032      	beq.n	8002a78 <__ssputs_r+0x80>
 8002a12:	6825      	ldr	r5, [r4, #0]
 8002a14:	6909      	ldr	r1, [r1, #16]
 8002a16:	3301      	adds	r3, #1
 8002a18:	eba5 0901 	sub.w	r9, r5, r1
 8002a1c:	6965      	ldr	r5, [r4, #20]
 8002a1e:	444b      	add	r3, r9
 8002a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a28:	106d      	asrs	r5, r5, #1
 8002a2a:	429d      	cmp	r5, r3
 8002a2c:	bf38      	it	cc
 8002a2e:	461d      	movcc	r5, r3
 8002a30:	0553      	lsls	r3, r2, #21
 8002a32:	d531      	bpl.n	8002a98 <__ssputs_r+0xa0>
 8002a34:	4629      	mov	r1, r5
 8002a36:	f000 fb53 	bl	80030e0 <_malloc_r>
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	b950      	cbnz	r0, 8002a54 <__ssputs_r+0x5c>
 8002a3e:	230c      	movs	r3, #12
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f8ca 3000 	str.w	r3, [sl]
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a54:	464a      	mov	r2, r9
 8002a56:	6921      	ldr	r1, [r4, #16]
 8002a58:	f000 face 	bl	8002ff8 <memcpy>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	6126      	str	r6, [r4, #16]
 8002a6a:	444e      	add	r6, r9
 8002a6c:	6026      	str	r6, [r4, #0]
 8002a6e:	463e      	mov	r6, r7
 8002a70:	6165      	str	r5, [r4, #20]
 8002a72:	eba5 0509 	sub.w	r5, r5, r9
 8002a76:	60a5      	str	r5, [r4, #8]
 8002a78:	42be      	cmp	r6, r7
 8002a7a:	d900      	bls.n	8002a7e <__ssputs_r+0x86>
 8002a7c:	463e      	mov	r6, r7
 8002a7e:	4632      	mov	r2, r6
 8002a80:	4641      	mov	r1, r8
 8002a82:	6820      	ldr	r0, [r4, #0]
 8002a84:	f000 fac6 	bl	8003014 <memmove>
 8002a88:	68a3      	ldr	r3, [r4, #8]
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	1b9b      	subs	r3, r3, r6
 8002a8e:	4432      	add	r2, r6
 8002a90:	2000      	movs	r0, #0
 8002a92:	60a3      	str	r3, [r4, #8]
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	e7db      	b.n	8002a50 <__ssputs_r+0x58>
 8002a98:	462a      	mov	r2, r5
 8002a9a:	f000 fb7b 	bl	8003194 <_realloc_r>
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d1e1      	bne.n	8002a68 <__ssputs_r+0x70>
 8002aa4:	4650      	mov	r0, sl
 8002aa6:	6921      	ldr	r1, [r4, #16]
 8002aa8:	f000 face 	bl	8003048 <_free_r>
 8002aac:	e7c7      	b.n	8002a3e <__ssputs_r+0x46>
	...

08002ab0 <_svfiprintf_r>:
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	898b      	ldrh	r3, [r1, #12]
 8002ab8:	4607      	mov	r7, r0
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	460d      	mov	r5, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	b09d      	sub	sp, #116	; 0x74
 8002ac2:	d50e      	bpl.n	8002ae2 <_svfiprintf_r+0x32>
 8002ac4:	690b      	ldr	r3, [r1, #16]
 8002ac6:	b963      	cbnz	r3, 8002ae2 <_svfiprintf_r+0x32>
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	f000 fb09 	bl	80030e0 <_malloc_r>
 8002ace:	6028      	str	r0, [r5, #0]
 8002ad0:	6128      	str	r0, [r5, #16]
 8002ad2:	b920      	cbnz	r0, 8002ade <_svfiprintf_r+0x2e>
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	e0d1      	b.n	8002c82 <_svfiprintf_r+0x1d2>
 8002ade:	2340      	movs	r3, #64	; 0x40
 8002ae0:	616b      	str	r3, [r5, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aec:	2330      	movs	r3, #48	; 0x30
 8002aee:	f04f 0901 	mov.w	r9, #1
 8002af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002af6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c9c <_svfiprintf_r+0x1ec>
 8002afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002afe:	4623      	mov	r3, r4
 8002b00:	469a      	mov	sl, r3
 8002b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b06:	b10a      	cbz	r2, 8002b0c <_svfiprintf_r+0x5c>
 8002b08:	2a25      	cmp	r2, #37	; 0x25
 8002b0a:	d1f9      	bne.n	8002b00 <_svfiprintf_r+0x50>
 8002b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8002b10:	d00b      	beq.n	8002b2a <_svfiprintf_r+0x7a>
 8002b12:	465b      	mov	r3, fp
 8002b14:	4622      	mov	r2, r4
 8002b16:	4629      	mov	r1, r5
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f7ff ff6d 	bl	80029f8 <__ssputs_r>
 8002b1e:	3001      	adds	r0, #1
 8002b20:	f000 80aa 	beq.w	8002c78 <_svfiprintf_r+0x1c8>
 8002b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b26:	445a      	add	r2, fp
 8002b28:	9209      	str	r2, [sp, #36]	; 0x24
 8002b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a2 	beq.w	8002c78 <_svfiprintf_r+0x1c8>
 8002b34:	2300      	movs	r3, #0
 8002b36:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b3e:	f10a 0a01 	add.w	sl, sl, #1
 8002b42:	9304      	str	r3, [sp, #16]
 8002b44:	9307      	str	r3, [sp, #28]
 8002b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b4c:	4654      	mov	r4, sl
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b54:	4851      	ldr	r0, [pc, #324]	; (8002c9c <_svfiprintf_r+0x1ec>)
 8002b56:	f000 fa41 	bl	8002fdc <memchr>
 8002b5a:	9a04      	ldr	r2, [sp, #16]
 8002b5c:	b9d8      	cbnz	r0, 8002b96 <_svfiprintf_r+0xe6>
 8002b5e:	06d0      	lsls	r0, r2, #27
 8002b60:	bf44      	itt	mi
 8002b62:	2320      	movmi	r3, #32
 8002b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b68:	0711      	lsls	r1, r2, #28
 8002b6a:	bf44      	itt	mi
 8002b6c:	232b      	movmi	r3, #43	; 0x2b
 8002b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b72:	f89a 3000 	ldrb.w	r3, [sl]
 8002b76:	2b2a      	cmp	r3, #42	; 0x2a
 8002b78:	d015      	beq.n	8002ba6 <_svfiprintf_r+0xf6>
 8002b7a:	4654      	mov	r4, sl
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f04f 0c0a 	mov.w	ip, #10
 8002b82:	9a07      	ldr	r2, [sp, #28]
 8002b84:	4621      	mov	r1, r4
 8002b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b8a:	3b30      	subs	r3, #48	; 0x30
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d94e      	bls.n	8002c2e <_svfiprintf_r+0x17e>
 8002b90:	b1b0      	cbz	r0, 8002bc0 <_svfiprintf_r+0x110>
 8002b92:	9207      	str	r2, [sp, #28]
 8002b94:	e014      	b.n	8002bc0 <_svfiprintf_r+0x110>
 8002b96:	eba0 0308 	sub.w	r3, r0, r8
 8002b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	46a2      	mov	sl, r4
 8002ba2:	9304      	str	r3, [sp, #16]
 8002ba4:	e7d2      	b.n	8002b4c <_svfiprintf_r+0x9c>
 8002ba6:	9b03      	ldr	r3, [sp, #12]
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	9103      	str	r1, [sp, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfbb      	ittet	lt
 8002bb2:	425b      	neglt	r3, r3
 8002bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8002bb8:	9307      	strge	r3, [sp, #28]
 8002bba:	9307      	strlt	r3, [sp, #28]
 8002bbc:	bfb8      	it	lt
 8002bbe:	9204      	strlt	r2, [sp, #16]
 8002bc0:	7823      	ldrb	r3, [r4, #0]
 8002bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc4:	d10c      	bne.n	8002be0 <_svfiprintf_r+0x130>
 8002bc6:	7863      	ldrb	r3, [r4, #1]
 8002bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bca:	d135      	bne.n	8002c38 <_svfiprintf_r+0x188>
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	3402      	adds	r4, #2
 8002bd0:	1d1a      	adds	r2, r3, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	9203      	str	r2, [sp, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cac <_svfiprintf_r+0x1fc>
 8002be4:	2203      	movs	r2, #3
 8002be6:	4650      	mov	r0, sl
 8002be8:	7821      	ldrb	r1, [r4, #0]
 8002bea:	f000 f9f7 	bl	8002fdc <memchr>
 8002bee:	b140      	cbz	r0, 8002c02 <_svfiprintf_r+0x152>
 8002bf0:	2340      	movs	r3, #64	; 0x40
 8002bf2:	eba0 000a 	sub.w	r0, r0, sl
 8002bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8002bfa:	9b04      	ldr	r3, [sp, #16]
 8002bfc:	3401      	adds	r4, #1
 8002bfe:	4303      	orrs	r3, r0
 8002c00:	9304      	str	r3, [sp, #16]
 8002c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c06:	2206      	movs	r2, #6
 8002c08:	4825      	ldr	r0, [pc, #148]	; (8002ca0 <_svfiprintf_r+0x1f0>)
 8002c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c0e:	f000 f9e5 	bl	8002fdc <memchr>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d038      	beq.n	8002c88 <_svfiprintf_r+0x1d8>
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <_svfiprintf_r+0x1f4>)
 8002c18:	bb1b      	cbnz	r3, 8002c62 <_svfiprintf_r+0x1b2>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	3308      	adds	r3, #8
 8002c24:	9303      	str	r3, [sp, #12]
 8002c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c28:	4433      	add	r3, r6
 8002c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2c:	e767      	b.n	8002afe <_svfiprintf_r+0x4e>
 8002c2e:	460c      	mov	r4, r1
 8002c30:	2001      	movs	r0, #1
 8002c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c36:	e7a5      	b.n	8002b84 <_svfiprintf_r+0xd4>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f04f 0c0a 	mov.w	ip, #10
 8002c3e:	4619      	mov	r1, r3
 8002c40:	3401      	adds	r4, #1
 8002c42:	9305      	str	r3, [sp, #20]
 8002c44:	4620      	mov	r0, r4
 8002c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c4a:	3a30      	subs	r2, #48	; 0x30
 8002c4c:	2a09      	cmp	r2, #9
 8002c4e:	d903      	bls.n	8002c58 <_svfiprintf_r+0x1a8>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0c5      	beq.n	8002be0 <_svfiprintf_r+0x130>
 8002c54:	9105      	str	r1, [sp, #20]
 8002c56:	e7c3      	b.n	8002be0 <_svfiprintf_r+0x130>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c60:	e7f0      	b.n	8002c44 <_svfiprintf_r+0x194>
 8002c62:	ab03      	add	r3, sp, #12
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	462a      	mov	r2, r5
 8002c68:	4638      	mov	r0, r7
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <_svfiprintf_r+0x1f8>)
 8002c6c:	a904      	add	r1, sp, #16
 8002c6e:	f3af 8000 	nop.w
 8002c72:	1c42      	adds	r2, r0, #1
 8002c74:	4606      	mov	r6, r0
 8002c76:	d1d6      	bne.n	8002c26 <_svfiprintf_r+0x176>
 8002c78:	89ab      	ldrh	r3, [r5, #12]
 8002c7a:	065b      	lsls	r3, r3, #25
 8002c7c:	f53f af2c 	bmi.w	8002ad8 <_svfiprintf_r+0x28>
 8002c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c82:	b01d      	add	sp, #116	; 0x74
 8002c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c88:	ab03      	add	r3, sp, #12
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	462a      	mov	r2, r5
 8002c8e:	4638      	mov	r0, r7
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_svfiprintf_r+0x1f8>)
 8002c92:	a904      	add	r1, sp, #16
 8002c94:	f000 f87c 	bl	8002d90 <_printf_i>
 8002c98:	e7eb      	b.n	8002c72 <_svfiprintf_r+0x1c2>
 8002c9a:	bf00      	nop
 8002c9c:	08003290 	.word	0x08003290
 8002ca0:	0800329a 	.word	0x0800329a
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	080029f9 	.word	0x080029f9
 8002cac:	08003296 	.word	0x08003296

08002cb0 <_printf_common>:
 8002cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	4616      	mov	r6, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	688a      	ldr	r2, [r1, #8]
 8002cba:	690b      	ldr	r3, [r1, #16]
 8002cbc:	4607      	mov	r7, r0
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bfb8      	it	lt
 8002cc2:	4613      	movlt	r3, r2
 8002cc4:	6033      	str	r3, [r6, #0]
 8002cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cca:	460c      	mov	r4, r1
 8002ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd0:	b10a      	cbz	r2, 8002cd6 <_printf_common+0x26>
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	6033      	str	r3, [r6, #0]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	6833      	ldrmi	r3, [r6, #0]
 8002cde:	3302      	addmi	r3, #2
 8002ce0:	6033      	strmi	r3, [r6, #0]
 8002ce2:	6825      	ldr	r5, [r4, #0]
 8002ce4:	f015 0506 	ands.w	r5, r5, #6
 8002ce8:	d106      	bne.n	8002cf8 <_printf_common+0x48>
 8002cea:	f104 0a19 	add.w	sl, r4, #25
 8002cee:	68e3      	ldr	r3, [r4, #12]
 8002cf0:	6832      	ldr	r2, [r6, #0]
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	42ab      	cmp	r3, r5
 8002cf6:	dc28      	bgt.n	8002d4a <_printf_common+0x9a>
 8002cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cfc:	1e13      	subs	r3, r2, #0
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	bf18      	it	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	0692      	lsls	r2, r2, #26
 8002d06:	d42d      	bmi.n	8002d64 <_printf_common+0xb4>
 8002d08:	4649      	mov	r1, r9
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d10:	47c0      	blx	r8
 8002d12:	3001      	adds	r0, #1
 8002d14:	d020      	beq.n	8002d58 <_printf_common+0xa8>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	68e5      	ldr	r5, [r4, #12]
 8002d1a:	f003 0306 	and.w	r3, r3, #6
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf18      	it	ne
 8002d22:	2500      	movne	r5, #0
 8002d24:	6832      	ldr	r2, [r6, #0]
 8002d26:	f04f 0600 	mov.w	r6, #0
 8002d2a:	68a3      	ldr	r3, [r4, #8]
 8002d2c:	bf08      	it	eq
 8002d2e:	1aad      	subeq	r5, r5, r2
 8002d30:	6922      	ldr	r2, [r4, #16]
 8002d32:	bf08      	it	eq
 8002d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bfc4      	itt	gt
 8002d3c:	1a9b      	subgt	r3, r3, r2
 8002d3e:	18ed      	addgt	r5, r5, r3
 8002d40:	341a      	adds	r4, #26
 8002d42:	42b5      	cmp	r5, r6
 8002d44:	d11a      	bne.n	8002d7c <_printf_common+0xcc>
 8002d46:	2000      	movs	r0, #0
 8002d48:	e008      	b.n	8002d5c <_printf_common+0xac>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4652      	mov	r2, sl
 8002d4e:	4649      	mov	r1, r9
 8002d50:	4638      	mov	r0, r7
 8002d52:	47c0      	blx	r8
 8002d54:	3001      	adds	r0, #1
 8002d56:	d103      	bne.n	8002d60 <_printf_common+0xb0>
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d60:	3501      	adds	r5, #1
 8002d62:	e7c4      	b.n	8002cee <_printf_common+0x3e>
 8002d64:	2030      	movs	r0, #48	; 0x30
 8002d66:	18e1      	adds	r1, r4, r3
 8002d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d72:	4422      	add	r2, r4
 8002d74:	3302      	adds	r3, #2
 8002d76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d7a:	e7c5      	b.n	8002d08 <_printf_common+0x58>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4622      	mov	r2, r4
 8002d80:	4649      	mov	r1, r9
 8002d82:	4638      	mov	r0, r7
 8002d84:	47c0      	blx	r8
 8002d86:	3001      	adds	r0, #1
 8002d88:	d0e6      	beq.n	8002d58 <_printf_common+0xa8>
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7d9      	b.n	8002d42 <_printf_common+0x92>
	...

08002d90 <_printf_i>:
 8002d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	460c      	mov	r4, r1
 8002d96:	7e27      	ldrb	r7, [r4, #24]
 8002d98:	4691      	mov	r9, r2
 8002d9a:	2f78      	cmp	r7, #120	; 0x78
 8002d9c:	4680      	mov	r8, r0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002da6:	d807      	bhi.n	8002db8 <_printf_i+0x28>
 8002da8:	2f62      	cmp	r7, #98	; 0x62
 8002daa:	d80a      	bhi.n	8002dc2 <_printf_i+0x32>
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	f000 80d9 	beq.w	8002f64 <_printf_i+0x1d4>
 8002db2:	2f58      	cmp	r7, #88	; 0x58
 8002db4:	f000 80a4 	beq.w	8002f00 <_printf_i+0x170>
 8002db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc0:	e03a      	b.n	8002e38 <_printf_i+0xa8>
 8002dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dc6:	2b15      	cmp	r3, #21
 8002dc8:	d8f6      	bhi.n	8002db8 <_printf_i+0x28>
 8002dca:	a001      	add	r0, pc, #4	; (adr r0, 8002dd0 <_printf_i+0x40>)
 8002dcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002dd0:	08002e29 	.word	0x08002e29
 8002dd4:	08002e3d 	.word	0x08002e3d
 8002dd8:	08002db9 	.word	0x08002db9
 8002ddc:	08002db9 	.word	0x08002db9
 8002de0:	08002db9 	.word	0x08002db9
 8002de4:	08002db9 	.word	0x08002db9
 8002de8:	08002e3d 	.word	0x08002e3d
 8002dec:	08002db9 	.word	0x08002db9
 8002df0:	08002db9 	.word	0x08002db9
 8002df4:	08002db9 	.word	0x08002db9
 8002df8:	08002db9 	.word	0x08002db9
 8002dfc:	08002f4b 	.word	0x08002f4b
 8002e00:	08002e6d 	.word	0x08002e6d
 8002e04:	08002f2d 	.word	0x08002f2d
 8002e08:	08002db9 	.word	0x08002db9
 8002e0c:	08002db9 	.word	0x08002db9
 8002e10:	08002f6d 	.word	0x08002f6d
 8002e14:	08002db9 	.word	0x08002db9
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002db9 	.word	0x08002db9
 8002e20:	08002db9 	.word	0x08002db9
 8002e24:	08002f35 	.word	0x08002f35
 8002e28:	680b      	ldr	r3, [r1, #0]
 8002e2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e2e:	1d1a      	adds	r2, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	600a      	str	r2, [r1, #0]
 8002e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0a4      	b.n	8002f86 <_printf_i+0x1f6>
 8002e3c:	6825      	ldr	r5, [r4, #0]
 8002e3e:	6808      	ldr	r0, [r1, #0]
 8002e40:	062e      	lsls	r6, r5, #24
 8002e42:	f100 0304 	add.w	r3, r0, #4
 8002e46:	d50a      	bpl.n	8002e5e <_printf_i+0xce>
 8002e48:	6805      	ldr	r5, [r0, #0]
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	2d00      	cmp	r5, #0
 8002e4e:	da03      	bge.n	8002e58 <_printf_i+0xc8>
 8002e50:	232d      	movs	r3, #45	; 0x2d
 8002e52:	426d      	negs	r5, r5
 8002e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e58:	230a      	movs	r3, #10
 8002e5a:	485e      	ldr	r0, [pc, #376]	; (8002fd4 <_printf_i+0x244>)
 8002e5c:	e019      	b.n	8002e92 <_printf_i+0x102>
 8002e5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e62:	6805      	ldr	r5, [r0, #0]
 8002e64:	600b      	str	r3, [r1, #0]
 8002e66:	bf18      	it	ne
 8002e68:	b22d      	sxthne	r5, r5
 8002e6a:	e7ef      	b.n	8002e4c <_printf_i+0xbc>
 8002e6c:	680b      	ldr	r3, [r1, #0]
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	1d18      	adds	r0, r3, #4
 8002e72:	6008      	str	r0, [r1, #0]
 8002e74:	0628      	lsls	r0, r5, #24
 8002e76:	d501      	bpl.n	8002e7c <_printf_i+0xec>
 8002e78:	681d      	ldr	r5, [r3, #0]
 8002e7a:	e002      	b.n	8002e82 <_printf_i+0xf2>
 8002e7c:	0669      	lsls	r1, r5, #25
 8002e7e:	d5fb      	bpl.n	8002e78 <_printf_i+0xe8>
 8002e80:	881d      	ldrh	r5, [r3, #0]
 8002e82:	2f6f      	cmp	r7, #111	; 0x6f
 8002e84:	bf0c      	ite	eq
 8002e86:	2308      	moveq	r3, #8
 8002e88:	230a      	movne	r3, #10
 8002e8a:	4852      	ldr	r0, [pc, #328]	; (8002fd4 <_printf_i+0x244>)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e92:	6866      	ldr	r6, [r4, #4]
 8002e94:	2e00      	cmp	r6, #0
 8002e96:	bfa8      	it	ge
 8002e98:	6821      	ldrge	r1, [r4, #0]
 8002e9a:	60a6      	str	r6, [r4, #8]
 8002e9c:	bfa4      	itt	ge
 8002e9e:	f021 0104 	bicge.w	r1, r1, #4
 8002ea2:	6021      	strge	r1, [r4, #0]
 8002ea4:	b90d      	cbnz	r5, 8002eaa <_printf_i+0x11a>
 8002ea6:	2e00      	cmp	r6, #0
 8002ea8:	d04d      	beq.n	8002f46 <_printf_i+0x1b6>
 8002eaa:	4616      	mov	r6, r2
 8002eac:	fbb5 f1f3 	udiv	r1, r5, r3
 8002eb0:	fb03 5711 	mls	r7, r3, r1, r5
 8002eb4:	5dc7      	ldrb	r7, [r0, r7]
 8002eb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002eba:	462f      	mov	r7, r5
 8002ebc:	42bb      	cmp	r3, r7
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	d9f4      	bls.n	8002eac <_printf_i+0x11c>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d10b      	bne.n	8002ede <_printf_i+0x14e>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	07df      	lsls	r7, r3, #31
 8002eca:	d508      	bpl.n	8002ede <_printf_i+0x14e>
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	6861      	ldr	r1, [r4, #4]
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	bfde      	ittt	le
 8002ed4:	2330      	movle	r3, #48	; 0x30
 8002ed6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002eda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ede:	1b92      	subs	r2, r2, r6
 8002ee0:	6122      	str	r2, [r4, #16]
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	f8cd a000 	str.w	sl, [sp]
 8002eec:	aa03      	add	r2, sp, #12
 8002eee:	f7ff fedf 	bl	8002cb0 <_printf_common>
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d14c      	bne.n	8002f90 <_printf_i+0x200>
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8002efa:	b004      	add	sp, #16
 8002efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f00:	4834      	ldr	r0, [pc, #208]	; (8002fd4 <_printf_i+0x244>)
 8002f02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f06:	680e      	ldr	r6, [r1, #0]
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f0e:	061f      	lsls	r7, r3, #24
 8002f10:	600e      	str	r6, [r1, #0]
 8002f12:	d514      	bpl.n	8002f3e <_printf_i+0x1ae>
 8002f14:	07d9      	lsls	r1, r3, #31
 8002f16:	bf44      	itt	mi
 8002f18:	f043 0320 	orrmi.w	r3, r3, #32
 8002f1c:	6023      	strmi	r3, [r4, #0]
 8002f1e:	b91d      	cbnz	r5, 8002f28 <_printf_i+0x198>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	f023 0320 	bic.w	r3, r3, #32
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	2310      	movs	r3, #16
 8002f2a:	e7af      	b.n	8002e8c <_printf_i+0xfc>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	2378      	movs	r3, #120	; 0x78
 8002f36:	4828      	ldr	r0, [pc, #160]	; (8002fd8 <_printf_i+0x248>)
 8002f38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f3c:	e7e3      	b.n	8002f06 <_printf_i+0x176>
 8002f3e:	065e      	lsls	r6, r3, #25
 8002f40:	bf48      	it	mi
 8002f42:	b2ad      	uxthmi	r5, r5
 8002f44:	e7e6      	b.n	8002f14 <_printf_i+0x184>
 8002f46:	4616      	mov	r6, r2
 8002f48:	e7bb      	b.n	8002ec2 <_printf_i+0x132>
 8002f4a:	680b      	ldr	r3, [r1, #0]
 8002f4c:	6826      	ldr	r6, [r4, #0]
 8002f4e:	1d1d      	adds	r5, r3, #4
 8002f50:	6960      	ldr	r0, [r4, #20]
 8002f52:	600d      	str	r5, [r1, #0]
 8002f54:	0635      	lsls	r5, r6, #24
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	d501      	bpl.n	8002f5e <_printf_i+0x1ce>
 8002f5a:	6018      	str	r0, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <_printf_i+0x1d4>
 8002f5e:	0671      	lsls	r1, r6, #25
 8002f60:	d5fb      	bpl.n	8002f5a <_printf_i+0x1ca>
 8002f62:	8018      	strh	r0, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	4616      	mov	r6, r2
 8002f68:	6123      	str	r3, [r4, #16]
 8002f6a:	e7ba      	b.n	8002ee2 <_printf_i+0x152>
 8002f6c:	680b      	ldr	r3, [r1, #0]
 8002f6e:	1d1a      	adds	r2, r3, #4
 8002f70:	600a      	str	r2, [r1, #0]
 8002f72:	681e      	ldr	r6, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4630      	mov	r0, r6
 8002f78:	6862      	ldr	r2, [r4, #4]
 8002f7a:	f000 f82f 	bl	8002fdc <memchr>
 8002f7e:	b108      	cbz	r0, 8002f84 <_printf_i+0x1f4>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	6060      	str	r0, [r4, #4]
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	6123      	str	r3, [r4, #16]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8e:	e7a8      	b.n	8002ee2 <_printf_i+0x152>
 8002f90:	4632      	mov	r2, r6
 8002f92:	4649      	mov	r1, r9
 8002f94:	4640      	mov	r0, r8
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	47d0      	blx	sl
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d0ab      	beq.n	8002ef6 <_printf_i+0x166>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	079b      	lsls	r3, r3, #30
 8002fa2:	d413      	bmi.n	8002fcc <_printf_i+0x23c>
 8002fa4:	68e0      	ldr	r0, [r4, #12]
 8002fa6:	9b03      	ldr	r3, [sp, #12]
 8002fa8:	4298      	cmp	r0, r3
 8002faa:	bfb8      	it	lt
 8002fac:	4618      	movlt	r0, r3
 8002fae:	e7a4      	b.n	8002efa <_printf_i+0x16a>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	47d0      	blx	sl
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d09b      	beq.n	8002ef6 <_printf_i+0x166>
 8002fbe:	3501      	adds	r5, #1
 8002fc0:	68e3      	ldr	r3, [r4, #12]
 8002fc2:	9903      	ldr	r1, [sp, #12]
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	dcf2      	bgt.n	8002fb0 <_printf_i+0x220>
 8002fca:	e7eb      	b.n	8002fa4 <_printf_i+0x214>
 8002fcc:	2500      	movs	r5, #0
 8002fce:	f104 0619 	add.w	r6, r4, #25
 8002fd2:	e7f5      	b.n	8002fc0 <_printf_i+0x230>
 8002fd4:	080032a1 	.word	0x080032a1
 8002fd8:	080032b2 	.word	0x080032b2

08002fdc <memchr>:
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	b2c9      	uxtb	r1, r1
 8002fe2:	4402      	add	r2, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	d101      	bne.n	8002fee <memchr+0x12>
 8002fea:	2000      	movs	r0, #0
 8002fec:	e003      	b.n	8002ff6 <memchr+0x1a>
 8002fee:	7804      	ldrb	r4, [r0, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	428c      	cmp	r4, r1
 8002ff4:	d1f6      	bne.n	8002fe4 <memchr+0x8>
 8002ff6:	bd10      	pop	{r4, pc}

08002ff8 <memcpy>:
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003000:	d100      	bne.n	8003004 <memcpy+0xc>
 8003002:	4770      	bx	lr
 8003004:	b510      	push	{r4, lr}
 8003006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800300a:	4291      	cmp	r1, r2
 800300c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003010:	d1f9      	bne.n	8003006 <memcpy+0xe>
 8003012:	bd10      	pop	{r4, pc}

08003014 <memmove>:
 8003014:	4288      	cmp	r0, r1
 8003016:	b510      	push	{r4, lr}
 8003018:	eb01 0402 	add.w	r4, r1, r2
 800301c:	d902      	bls.n	8003024 <memmove+0x10>
 800301e:	4284      	cmp	r4, r0
 8003020:	4623      	mov	r3, r4
 8003022:	d807      	bhi.n	8003034 <memmove+0x20>
 8003024:	1e43      	subs	r3, r0, #1
 8003026:	42a1      	cmp	r1, r4
 8003028:	d008      	beq.n	800303c <memmove+0x28>
 800302a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800302e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003032:	e7f8      	b.n	8003026 <memmove+0x12>
 8003034:	4601      	mov	r1, r0
 8003036:	4402      	add	r2, r0
 8003038:	428a      	cmp	r2, r1
 800303a:	d100      	bne.n	800303e <memmove+0x2a>
 800303c:	bd10      	pop	{r4, pc}
 800303e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003046:	e7f7      	b.n	8003038 <memmove+0x24>

08003048 <_free_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4605      	mov	r5, r0
 800304c:	2900      	cmp	r1, #0
 800304e:	d043      	beq.n	80030d8 <_free_r+0x90>
 8003050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003054:	1f0c      	subs	r4, r1, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	bfb8      	it	lt
 800305a:	18e4      	addlt	r4, r4, r3
 800305c:	f000 f8d0 	bl	8003200 <__malloc_lock>
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <_free_r+0x94>)
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	4610      	mov	r0, r2
 8003066:	b933      	cbnz	r3, 8003076 <_free_r+0x2e>
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	6014      	str	r4, [r2, #0]
 800306c:	4628      	mov	r0, r5
 800306e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003072:	f000 b8cb 	b.w	800320c <__malloc_unlock>
 8003076:	42a3      	cmp	r3, r4
 8003078:	d90a      	bls.n	8003090 <_free_r+0x48>
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	1862      	adds	r2, r4, r1
 800307e:	4293      	cmp	r3, r2
 8003080:	bf01      	itttt	eq
 8003082:	681a      	ldreq	r2, [r3, #0]
 8003084:	685b      	ldreq	r3, [r3, #4]
 8003086:	1852      	addeq	r2, r2, r1
 8003088:	6022      	streq	r2, [r4, #0]
 800308a:	6063      	str	r3, [r4, #4]
 800308c:	6004      	str	r4, [r0, #0]
 800308e:	e7ed      	b.n	800306c <_free_r+0x24>
 8003090:	461a      	mov	r2, r3
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	b10b      	cbz	r3, 800309a <_free_r+0x52>
 8003096:	42a3      	cmp	r3, r4
 8003098:	d9fa      	bls.n	8003090 <_free_r+0x48>
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	1850      	adds	r0, r2, r1
 800309e:	42a0      	cmp	r0, r4
 80030a0:	d10b      	bne.n	80030ba <_free_r+0x72>
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	4401      	add	r1, r0
 80030a6:	1850      	adds	r0, r2, r1
 80030a8:	4283      	cmp	r3, r0
 80030aa:	6011      	str	r1, [r2, #0]
 80030ac:	d1de      	bne.n	800306c <_free_r+0x24>
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4401      	add	r1, r0
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	6053      	str	r3, [r2, #4]
 80030b8:	e7d8      	b.n	800306c <_free_r+0x24>
 80030ba:	d902      	bls.n	80030c2 <_free_r+0x7a>
 80030bc:	230c      	movs	r3, #12
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	e7d4      	b.n	800306c <_free_r+0x24>
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	1821      	adds	r1, r4, r0
 80030c6:	428b      	cmp	r3, r1
 80030c8:	bf01      	itttt	eq
 80030ca:	6819      	ldreq	r1, [r3, #0]
 80030cc:	685b      	ldreq	r3, [r3, #4]
 80030ce:	1809      	addeq	r1, r1, r0
 80030d0:	6021      	streq	r1, [r4, #0]
 80030d2:	6063      	str	r3, [r4, #4]
 80030d4:	6054      	str	r4, [r2, #4]
 80030d6:	e7c9      	b.n	800306c <_free_r+0x24>
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	bf00      	nop
 80030dc:	200000d4 	.word	0x200000d4

080030e0 <_malloc_r>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	1ccd      	adds	r5, r1, #3
 80030e4:	f025 0503 	bic.w	r5, r5, #3
 80030e8:	3508      	adds	r5, #8
 80030ea:	2d0c      	cmp	r5, #12
 80030ec:	bf38      	it	cc
 80030ee:	250c      	movcc	r5, #12
 80030f0:	2d00      	cmp	r5, #0
 80030f2:	4606      	mov	r6, r0
 80030f4:	db01      	blt.n	80030fa <_malloc_r+0x1a>
 80030f6:	42a9      	cmp	r1, r5
 80030f8:	d903      	bls.n	8003102 <_malloc_r+0x22>
 80030fa:	230c      	movs	r3, #12
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	2000      	movs	r0, #0
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003102:	f000 f87d 	bl	8003200 <__malloc_lock>
 8003106:	4921      	ldr	r1, [pc, #132]	; (800318c <_malloc_r+0xac>)
 8003108:	680a      	ldr	r2, [r1, #0]
 800310a:	4614      	mov	r4, r2
 800310c:	b99c      	cbnz	r4, 8003136 <_malloc_r+0x56>
 800310e:	4f20      	ldr	r7, [pc, #128]	; (8003190 <_malloc_r+0xb0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b923      	cbnz	r3, 800311e <_malloc_r+0x3e>
 8003114:	4621      	mov	r1, r4
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f862 	bl	80031e0 <_sbrk_r>
 800311c:	6038      	str	r0, [r7, #0]
 800311e:	4629      	mov	r1, r5
 8003120:	4630      	mov	r0, r6
 8003122:	f000 f85d 	bl	80031e0 <_sbrk_r>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	d123      	bne.n	8003172 <_malloc_r+0x92>
 800312a:	230c      	movs	r3, #12
 800312c:	4630      	mov	r0, r6
 800312e:	6033      	str	r3, [r6, #0]
 8003130:	f000 f86c 	bl	800320c <__malloc_unlock>
 8003134:	e7e3      	b.n	80030fe <_malloc_r+0x1e>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	1b5b      	subs	r3, r3, r5
 800313a:	d417      	bmi.n	800316c <_malloc_r+0x8c>
 800313c:	2b0b      	cmp	r3, #11
 800313e:	d903      	bls.n	8003148 <_malloc_r+0x68>
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	441c      	add	r4, r3
 8003144:	6025      	str	r5, [r4, #0]
 8003146:	e004      	b.n	8003152 <_malloc_r+0x72>
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	42a2      	cmp	r2, r4
 800314c:	bf0c      	ite	eq
 800314e:	600b      	streq	r3, [r1, #0]
 8003150:	6053      	strne	r3, [r2, #4]
 8003152:	4630      	mov	r0, r6
 8003154:	f000 f85a 	bl	800320c <__malloc_unlock>
 8003158:	f104 000b 	add.w	r0, r4, #11
 800315c:	1d23      	adds	r3, r4, #4
 800315e:	f020 0007 	bic.w	r0, r0, #7
 8003162:	1ac2      	subs	r2, r0, r3
 8003164:	d0cc      	beq.n	8003100 <_malloc_r+0x20>
 8003166:	1a1b      	subs	r3, r3, r0
 8003168:	50a3      	str	r3, [r4, r2]
 800316a:	e7c9      	b.n	8003100 <_malloc_r+0x20>
 800316c:	4622      	mov	r2, r4
 800316e:	6864      	ldr	r4, [r4, #4]
 8003170:	e7cc      	b.n	800310c <_malloc_r+0x2c>
 8003172:	1cc4      	adds	r4, r0, #3
 8003174:	f024 0403 	bic.w	r4, r4, #3
 8003178:	42a0      	cmp	r0, r4
 800317a:	d0e3      	beq.n	8003144 <_malloc_r+0x64>
 800317c:	1a21      	subs	r1, r4, r0
 800317e:	4630      	mov	r0, r6
 8003180:	f000 f82e 	bl	80031e0 <_sbrk_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d1dd      	bne.n	8003144 <_malloc_r+0x64>
 8003188:	e7cf      	b.n	800312a <_malloc_r+0x4a>
 800318a:	bf00      	nop
 800318c:	200000d4 	.word	0x200000d4
 8003190:	200000d8 	.word	0x200000d8

08003194 <_realloc_r>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	4607      	mov	r7, r0
 8003198:	4614      	mov	r4, r2
 800319a:	460e      	mov	r6, r1
 800319c:	b921      	cbnz	r1, 80031a8 <_realloc_r+0x14>
 800319e:	4611      	mov	r1, r2
 80031a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031a4:	f7ff bf9c 	b.w	80030e0 <_malloc_r>
 80031a8:	b922      	cbnz	r2, 80031b4 <_realloc_r+0x20>
 80031aa:	f7ff ff4d 	bl	8003048 <_free_r>
 80031ae:	4625      	mov	r5, r4
 80031b0:	4628      	mov	r0, r5
 80031b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031b4:	f000 f830 	bl	8003218 <_malloc_usable_size_r>
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d20f      	bcs.n	80031dc <_realloc_r+0x48>
 80031bc:	4621      	mov	r1, r4
 80031be:	4638      	mov	r0, r7
 80031c0:	f7ff ff8e 	bl	80030e0 <_malloc_r>
 80031c4:	4605      	mov	r5, r0
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d0f2      	beq.n	80031b0 <_realloc_r+0x1c>
 80031ca:	4631      	mov	r1, r6
 80031cc:	4622      	mov	r2, r4
 80031ce:	f7ff ff13 	bl	8002ff8 <memcpy>
 80031d2:	4631      	mov	r1, r6
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff37 	bl	8003048 <_free_r>
 80031da:	e7e9      	b.n	80031b0 <_realloc_r+0x1c>
 80031dc:	4635      	mov	r5, r6
 80031de:	e7e7      	b.n	80031b0 <_realloc_r+0x1c>

080031e0 <_sbrk_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	2300      	movs	r3, #0
 80031e4:	4d05      	ldr	r5, [pc, #20]	; (80031fc <_sbrk_r+0x1c>)
 80031e6:	4604      	mov	r4, r0
 80031e8:	4608      	mov	r0, r1
 80031ea:	602b      	str	r3, [r5, #0]
 80031ec:	f7fd fae6 	bl	80007bc <_sbrk>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	d102      	bne.n	80031fa <_sbrk_r+0x1a>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	b103      	cbz	r3, 80031fa <_sbrk_r+0x1a>
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	bd38      	pop	{r3, r4, r5, pc}
 80031fc:	200001b4 	.word	0x200001b4

08003200 <__malloc_lock>:
 8003200:	4801      	ldr	r0, [pc, #4]	; (8003208 <__malloc_lock+0x8>)
 8003202:	f000 b811 	b.w	8003228 <__retarget_lock_acquire_recursive>
 8003206:	bf00      	nop
 8003208:	200001bc 	.word	0x200001bc

0800320c <__malloc_unlock>:
 800320c:	4801      	ldr	r0, [pc, #4]	; (8003214 <__malloc_unlock+0x8>)
 800320e:	f000 b80c 	b.w	800322a <__retarget_lock_release_recursive>
 8003212:	bf00      	nop
 8003214:	200001bc 	.word	0x200001bc

08003218 <_malloc_usable_size_r>:
 8003218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800321c:	1f18      	subs	r0, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	bfbc      	itt	lt
 8003222:	580b      	ldrlt	r3, [r1, r0]
 8003224:	18c0      	addlt	r0, r0, r3
 8003226:	4770      	bx	lr

08003228 <__retarget_lock_acquire_recursive>:
 8003228:	4770      	bx	lr

0800322a <__retarget_lock_release_recursive>:
 800322a:	4770      	bx	lr

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
