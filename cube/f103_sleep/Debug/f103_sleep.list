
f103_sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003368  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003368  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cce  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  00028d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017753  00000000  00000000  0002bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000966d  00000000  00000000  0004322b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c8d  00000000  00000000  0004c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000d1578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003238 	.word	0x08003238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003238 	.word	0x08003238

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 RTC_TimeTypeDef sTime;
	 RTC_AlarmTypeDef sAlarm;
	 uint8_t count = 5;
 8000162:	2305      	movs	r3, #5
 8000164:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 faef 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f875 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f955 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f929 	bl	80003c8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000176:	f000 f8c3 	bl	8000300 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  sprintf (UART_msg_TX,"sleep_mode_start\r\n");
 800017a:	4931      	ldr	r1, [pc, #196]	; (8000240 <main+0xe4>)
 800017c:	4831      	ldr	r0, [pc, #196]	; (8000244 <main+0xe8>)
 800017e:	f002 fc21 	bl	80029c4 <siprintf>
  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000182:	4830      	ldr	r0, [pc, #192]	; (8000244 <main+0xe8>)
 8000184:	f7ff ffe2 	bl	800014c <strlen>
 8000188:	4603      	mov	r3, r0
 800018a:	b29a      	uxth	r2, r3
 800018c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000190:	492c      	ldr	r1, [pc, #176]	; (8000244 <main+0xe8>)
 8000192:	482d      	ldr	r0, [pc, #180]	; (8000248 <main+0xec>)
 8000194:	f002 fa7a 	bl	800268c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf (UART_msg_TX,"sleep...\r\n");
 8000198:	492c      	ldr	r1, [pc, #176]	; (800024c <main+0xf0>)
 800019a:	482a      	ldr	r0, [pc, #168]	; (8000244 <main+0xe8>)
 800019c:	f002 fc12 	bl	80029c4 <siprintf>
	  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <main+0xe8>)
 80001a2:	f7ff ffd3 	bl	800014c <strlen>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ae:	4925      	ldr	r1, [pc, #148]	; (8000244 <main+0xe8>)
 80001b0:	4825      	ldr	r0, [pc, #148]	; (8000248 <main+0xec>)
 80001b2:	f002 fa6b 	bl	800268c <HAL_UART_Transmit>
	  HAL_SuspendTick(); //Перед переходом в спящий режим SLEEP сбрасываем бит TICKINT, разрешающий прерывания по достижению 0 таймера SysTick
 80001b6:	f000 fb29 	bl	800080c <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode (PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); //ф-я активации режима сна (Wait for Interrupt)
 80001ba:	2101      	movs	r1, #1
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fddf 	bl	8000d80 <HAL_PWR_EnterSLEEPMode>
	  HAL_ResumeTick(); //При выходе из режима SLEEP включаем прерывание таймера SysTick
 80001c2:	f000 fb31 	bl	8000828 <HAL_ResumeTick>
	  sprintf (UART_msg_TX,"wake up!\r\n");
 80001c6:	4922      	ldr	r1, [pc, #136]	; (8000250 <main+0xf4>)
 80001c8:	481e      	ldr	r0, [pc, #120]	; (8000244 <main+0xe8>)
 80001ca:	f002 fbfb 	bl	80029c4 <siprintf>
	  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001ce:	481d      	ldr	r0, [pc, #116]	; (8000244 <main+0xe8>)
 80001d0:	f7ff ffbc 	bl	800014c <strlen>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001dc:	4919      	ldr	r1, [pc, #100]	; (8000244 <main+0xe8>)
 80001de:	481a      	ldr	r0, [pc, #104]	; (8000248 <main+0xec>)
 80001e0:	f002 fa54 	bl	800268c <HAL_UART_Transmit>

	  sTime.Hours = 1; sTime.Minutes = 0; sTime.Seconds = 0;  //сброс часов RTC
 80001e4:	2301      	movs	r3, #1
 80001e6:	733b      	strb	r3, [r7, #12]
 80001e8:	2300      	movs	r3, #0
 80001ea:	737b      	strb	r3, [r7, #13]
 80001ec:	2300      	movs	r3, #0
 80001ee:	73bb      	strb	r3, [r7, #14]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80001f0:	f107 030c 	add.w	r3, r7, #12
 80001f4:	2200      	movs	r2, #0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4816      	ldr	r0, [pc, #88]	; (8000254 <main+0xf8>)
 80001fa:	f001 fc07 	bl	8001a0c <HAL_RTC_SetTime>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <main+0xac>
	     Error_Handler();
 8000204:	f000 f94a 	bl	800049c <Error_Handler>
	   }

	  sAlarm.AlarmTime.Hours = 1;   sAlarm.AlarmTime.Minutes = 0; sAlarm.AlarmTime.Seconds = count; //настрйока сигнала Alarma для срабатывания через таймера SysTick с
 8000208:	2301      	movs	r3, #1
 800020a:	713b      	strb	r3, [r7, #4]
 800020c:	2300      	movs	r3, #0
 800020e:	717b      	strb	r3, [r7, #5]
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	71bb      	strb	r3, [r7, #6]
	  sAlarm.Alarm = RTC_ALARM_A;
 8000214:	2300      	movs	r3, #0
 8000216:	60bb      	str	r3, [r7, #8]
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	4619      	mov	r1, r3
 800021e:	480d      	ldr	r0, [pc, #52]	; (8000254 <main+0xf8>)
 8000220:	f001 fe1a 	bl	8001e58 <HAL_RTC_SetAlarm_IT>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <main+0xd2>
	      Error_Handler();
 800022a:	f000 f937 	bl	800049c <Error_Handler>
	  }

	  count++;
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	3301      	adds	r3, #1
 8000232:	73fb      	strb	r3, [r7, #15]
	  if (count > 10)
 8000234:	7bfb      	ldrb	r3, [r7, #15]
 8000236:	2b0a      	cmp	r3, #10
 8000238:	d9ae      	bls.n	8000198 <main+0x3c>
		  count = 5;
 800023a:	2305      	movs	r3, #5
 800023c:	73fb      	strb	r3, [r7, #15]
	  sprintf (UART_msg_TX,"sleep...\r\n");
 800023e:	e7ab      	b.n	8000198 <main+0x3c>
 8000240:	08003250 	.word	0x08003250
 8000244:	2000008c 	.word	0x2000008c
 8000248:	200000cc 	.word	0x200000cc
 800024c:	08003264 	.word	0x08003264
 8000250:	08003270 	.word	0x08003270
 8000254:	20000110 	.word	0x20000110

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fba4 	bl	80029b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000288:	230a      	movs	r3, #10
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fd89 	bl	8000db8 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ac:	f000 f8f6 	bl	800049c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fff4 	bl	80012b8 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f8e1 	bl	800049c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002da:	2301      	movs	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002e2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f980 	bl	80015ec <HAL_RCCEx_PeriphCLKConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002f2:	f000 f8d3 	bl	800049c <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3750      	adds	r7, #80	; 0x50
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2100      	movs	r1, #0
 800030c:	460a      	mov	r2, r1
 800030e:	801a      	strh	r2, [r3, #0]
 8000310:	460a      	mov	r2, r1
 8000312:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <MX_RTC_Init+0xc0>)
 8000322:	4a28      	ldr	r2, [pc, #160]	; (80003c4 <MX_RTC_Init+0xc4>)
 8000324:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000326:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <MX_RTC_Init+0xc0>)
 8000328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800032c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800032e:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <MX_RTC_Init+0xc0>)
 8000330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000334:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000336:	4822      	ldr	r0, [pc, #136]	; (80003c0 <MX_RTC_Init+0xc0>)
 8000338:	f001 fad2 	bl	80018e0 <HAL_RTC_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000342:	f000 f8ab 	bl	800049c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000346:	2301      	movs	r3, #1
 8000348:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800034a:	2300      	movs	r3, #0
 800034c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800034e:	2300      	movs	r3, #0
 8000350:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2201      	movs	r2, #1
 8000358:	4619      	mov	r1, r3
 800035a:	4819      	ldr	r0, [pc, #100]	; (80003c0 <MX_RTC_Init+0xc0>)
 800035c:	f001 fb56 	bl	8001a0c <HAL_RTC_SetTime>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000366:	f000 f899 	bl	800049c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800036a:	2301      	movs	r3, #1
 800036c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800036e:	2301      	movs	r3, #1
 8000370:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000372:	2301      	movs	r3, #1
 8000374:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000376:	2300      	movs	r3, #0
 8000378:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2201      	movs	r2, #1
 8000380:	4619      	mov	r1, r3
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <MX_RTC_Init+0xc0>)
 8000384:	f001 fcb2 	bl	8001cec <HAL_RTC_SetDate>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800038e:	f000 f885 	bl	800049c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000392:	2301      	movs	r3, #1
 8000394:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000396:	2300      	movs	r3, #0
 8000398:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x5;
 800039a:	2305      	movs	r3, #5
 800039c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80003a2:	463b      	mov	r3, r7
 80003a4:	2201      	movs	r2, #1
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_RTC_Init+0xc0>)
 80003aa:	f001 fd55 	bl	8001e58 <HAL_RTC_SetAlarm_IT>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80003b4:	f000 f872 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000110 	.word	0x20000110
 80003c4:	40002800 	.word	0x40002800

080003c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART1_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80003d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 8000400:	f002 f8f7 	bl	80025f2 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 f847 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000cc 	.word	0x200000cc
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a0d      	ldr	r2, [pc, #52]	; (800045c <MX_GPIO_Init+0x40>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0310 	and.w	r3, r3, #16
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a07      	ldr	r2, [pc, #28]	; (800045c <MX_GPIO_Init+0x40>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_GPIO_Init+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
        sprintf(UART_msg_TX, "ALARM\r\n");
 8000468:	4909      	ldr	r1, [pc, #36]	; (8000490 <HAL_RTC_AlarmAEventCallback+0x30>)
 800046a:	480a      	ldr	r0, [pc, #40]	; (8000494 <HAL_RTC_AlarmAEventCallback+0x34>)
 800046c:	f002 faaa 	bl	80029c4 <siprintf>
        HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000470:	4808      	ldr	r0, [pc, #32]	; (8000494 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000472:	f7ff fe6b 	bl	800014c <strlen>
 8000476:	4603      	mov	r3, r0
 8000478:	b29a      	uxth	r2, r3
 800047a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047e:	4905      	ldr	r1, [pc, #20]	; (8000494 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_RTC_AlarmAEventCallback+0x38>)
 8000482:	f002 f903 	bl	800268c <HAL_UART_Transmit>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	0800327c 	.word	0x0800327c
 8000494:	2000008c 	.word	0x2000008c
 8000498:	200000cc 	.word	0x200000cc

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_MspInit+0x5c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_MspInit+0x5c>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_MspInit+0x60>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x60>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a13      	ldr	r2, [pc, #76]	; (8000568 <HAL_RTC_MspInit+0x5c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d120      	bne.n	8000560 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800051e:	f000 fc23 	bl	8000d68 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_RTC_MspInit+0x60>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <HAL_RTC_MspInit+0x60>)
 8000528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_RTC_MspInit+0x60>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_RTC_MspInit+0x64>)
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2003      	movs	r0, #3
 8000546:	f000 fa54 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800054a:	2003      	movs	r0, #3
 800054c:	f000 fa6d 	bl	8000a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2029      	movs	r0, #41	; 0x29
 8000556:	f000 fa4c 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800055a:	2029      	movs	r0, #41	; 0x29
 800055c:	f000 fa65 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40002800 	.word	0x40002800
 800056c:	40021000 	.word	0x40021000
 8000570:	4242043c 	.word	0x4242043c

08000574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_UART_MspInit+0x8c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d131      	bne.n	80005f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <HAL_UART_MspInit+0x90>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_UART_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_UART_MspInit+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_UART_MspInit+0x90>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_UART_MspInit+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_UART_MspInit+0x94>)
 80005da:	f000 fa41 	bl	8000a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_UART_MspInit+0x94>)
 80005f4:	f000 fa34 	bl	8000a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 f8bf 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <RTC_IRQHandler+0x10>)
 8000662:	f001 ff7d 	bl	8002560 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000110 	.word	0x20000110

08000670 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <RTC_Alarm_IRQHandler+0x10>)
 8000676:	f001 fca7 	bl	8001fc8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000110 	.word	0x20000110

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f002 f954 	bl	8002960 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20005000 	.word	0x20005000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	200000c0 	.word	0x200000c0
 80006ec:	20000138 	.word	0x20000138

080006f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Reset_Handler>:
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LoopFillZerobss+0x1a>)
 8000702:	2300      	movs	r3, #0
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:
 8000706:	58d4      	ldr	r4, [r2, r3]
 8000708:	50c4      	str	r4, [r0, r3]
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:
 800070c:	18c4      	adds	r4, r0, r3
 800070e:	428c      	cmp	r4, r1
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LoopFillZerobss+0x1e>)
 8000714:	4c0a      	ldr	r4, [pc, #40]	; (8000740 <LoopFillZerobss+0x22>)
 8000716:	2300      	movs	r3, #0
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:
 800071e:	42a2      	cmp	r2, r4
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>
 8000722:	f7ff ffe5 	bl	80006f0 <SystemInit>
 8000726:	f002 f921 	bl	800296c <__libc_init_array>
 800072a:	f7ff fd17 	bl	800015c <main>
 800072e:	4770      	bx	lr
 8000730:	20000000 	.word	0x20000000
 8000734:	20000070 	.word	0x20000070
 8000738:	080032f8 	.word	0x080032f8
 800073c:	20000070 	.word	0x20000070
 8000740:	20000138 	.word	0x20000138

08000744 <ADC1_2_IRQHandler>:
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f93f 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fea0 	bl	80004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f957 	bl	8000a46 <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f000 f91f 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000124 	.word	0x20000124

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000124 	.word	0x20000124

0800080c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HAL_SuspendTick+0x18>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_SuspendTick+0x18>)
 8000816:	f023 0302 	bic.w	r3, r3, #2
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_ResumeTick+0x18>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <HAL_ResumeTick+0x18>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	e000e010 	.word	0xe000e010

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <__NVIC_EnableIRQ+0x34>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009bc:	f7ff ff90 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff2d 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff42 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff35 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e169      	b.n	8000d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a74:	2201      	movs	r2, #1
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f040 8158 	bne.w	8000d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a9a      	ldr	r2, [pc, #616]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d05e      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000a9c:	4a98      	ldr	r2, [pc, #608]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d875      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aa2:	4a98      	ldr	r2, [pc, #608]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d058      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000aa8:	4a96      	ldr	r2, [pc, #600]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d86f      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aae:	4a96      	ldr	r2, [pc, #600]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d052      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ab4:	4a94      	ldr	r2, [pc, #592]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d869      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aba:	4a94      	ldr	r2, [pc, #592]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d04c      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ac0:	4a92      	ldr	r2, [pc, #584]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d863      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ac6:	4a92      	ldr	r2, [pc, #584]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d046      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000acc:	4a90      	ldr	r2, [pc, #576]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d85d      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d82a      	bhi.n	8000b2c <HAL_GPIO_Init+0xcc>
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d859      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <HAL_GPIO_Init+0x80>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000b5b 	.word	0x08000b5b
 8000ae4:	08000b35 	.word	0x08000b35
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b89 	.word	0x08000b89
 8000af0:	08000b8f 	.word	0x08000b8f
 8000af4:	08000b8f 	.word	0x08000b8f
 8000af8:	08000b8f 	.word	0x08000b8f
 8000afc:	08000b8f 	.word	0x08000b8f
 8000b00:	08000b8f 	.word	0x08000b8f
 8000b04:	08000b8f 	.word	0x08000b8f
 8000b08:	08000b8f 	.word	0x08000b8f
 8000b0c:	08000b8f 	.word	0x08000b8f
 8000b10:	08000b8f 	.word	0x08000b8f
 8000b14:	08000b8f 	.word	0x08000b8f
 8000b18:	08000b8f 	.word	0x08000b8f
 8000b1c:	08000b8f 	.word	0x08000b8f
 8000b20:	08000b8f 	.word	0x08000b8f
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b51 	.word	0x08000b51
 8000b2c:	4a79      	ldr	r2, [pc, #484]	; (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b32:	e02c      	b.n	8000b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e029      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	3304      	adds	r3, #4
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e024      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e01f      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	330c      	adds	r3, #12
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	e01a      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b62:	2304      	movs	r3, #4
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e013      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d105      	bne.n	8000b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b70:	2308      	movs	r3, #8
 8000b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	611a      	str	r2, [r3, #16]
          break;
 8000b7a:	e009      	b.n	8000b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	615a      	str	r2, [r3, #20]
          break;
 8000b86:	e003      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          break;
 8000b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d801      	bhi.n	8000b9a <HAL_GPIO_Init+0x13a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e001      	b.n	8000b9e <HAL_GPIO_Init+0x13e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	2bff      	cmp	r3, #255	; 0xff
 8000ba4:	d802      	bhi.n	8000bac <HAL_GPIO_Init+0x14c>
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x152>
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	210f      	movs	r1, #15
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	6a39      	ldr	r1, [r7, #32]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80b1 	beq.w	8000d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a4c      	ldr	r2, [pc, #304]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf8:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d013      	beq.n	8000c4c <HAL_GPIO_Init+0x1ec>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <HAL_GPIO_Init+0x2c4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d00d      	beq.n	8000c48 <HAL_GPIO_Init+0x1e8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <HAL_GPIO_Init+0x2c8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0x1e4>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d101      	bne.n	8000c40 <HAL_GPIO_Init+0x1e0>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c40:	2304      	movs	r3, #4
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5e:	492f      	ldr	r1, [pc, #188]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	492c      	ldr	r1, [pc, #176]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4928      	ldr	r1, [pc, #160]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4922      	ldr	r1, [pc, #136]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	491e      	ldr	r1, [pc, #120]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	4918      	ldr	r1, [pc, #96]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4914      	ldr	r1, [pc, #80]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d021      	beq.n	8000d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	490e      	ldr	r1, [pc, #56]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
 8000cfc:	e021      	b.n	8000d42 <HAL_GPIO_Init+0x2e2>
 8000cfe:	bf00      	nop
 8000d00:	10320000 	.word	0x10320000
 8000d04:	10310000 	.word	0x10310000
 8000d08:	10220000 	.word	0x10220000
 8000d0c:	10210000 	.word	0x10210000
 8000d10:	10120000 	.word	0x10120000
 8000d14:	10110000 	.word	0x10110000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_GPIO_Init+0x304>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4909      	ldr	r1, [pc, #36]	; (8000d64 <HAL_GPIO_Init+0x304>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f47f ae8e 	bne.w	8000a74 <HAL_GPIO_Init+0x14>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	372c      	adds	r7, #44	; 0x2c
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_PWR_EnableBkUpAccess+0x14>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	420e0020 	.word	0x420e0020

08000d80 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000d92:	f023 0304 	bic.w	r3, r3, #4
 8000d96:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000d9e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000da0:	e002      	b.n	8000da8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8000da2:	bf40      	sev
    __WFE();
 8000da4:	bf20      	wfe
    __WFE();
 8000da6:	bf20      	wfe
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e26c      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4b8f      	ldr	r3, [pc, #572]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d112      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
 8000df0:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b89      	ldr	r3, [pc, #548]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d06c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d168      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e246      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x76>
 8000e20:	4b80      	ldr	r3, [pc, #512]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7f      	ldr	r2, [pc, #508]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e02e      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x98>
 8000e36:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7a      	ldr	r2, [pc, #488]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b78      	ldr	r3, [pc, #480]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a77      	ldr	r2, [pc, #476]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e01d      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0xbc>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a71      	ldr	r2, [pc, #452]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e74:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b68      	ldr	r3, [pc, #416]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a67      	ldr	r2, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcb0 	bl	80007f8 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fcac 	bl	80007f8 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e1fa      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	4b5d      	ldr	r3, [pc, #372]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0xe4>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fc9c 	bl	80007f8 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fc98 	bl	80007f8 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	; 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e1e6      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x10c>
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d063      	beq.n	8000fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	4b43      	ldr	r3, [pc, #268]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e1ba      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4939      	ldr	r1, [pc, #228]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e03a      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc51 	bl	80007f8 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fc4d 	bl	80007f8 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e19b      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4927      	ldr	r1, [pc, #156]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc30 	bl	80007f8 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc2c 	bl	80007f8 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e17a      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03a      	beq.n	800103c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d019      	beq.n	8001002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_RCC_OscConfig+0x274>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fc10 	bl	80007f8 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fc0c 	bl	80007f8 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e15a      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fad8 	bl	80015b0 <RCC_Delay>
 8001000:	e01c      	b.n	800103c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_RCC_OscConfig+0x274>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fbf6 	bl	80007f8 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100e:	e00f      	b.n	8001030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fbf2 	bl	80007f8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d908      	bls.n	8001030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e140      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	42420000 	.word	0x42420000
 800102c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	4b9e      	ldr	r3, [pc, #632]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a6 	beq.w	8001196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104e:	4b97      	ldr	r3, [pc, #604]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a93      	ldr	r2, [pc, #588]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b91      	ldr	r3, [pc, #580]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <HAL_RCC_OscConfig+0x4f8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_RCC_OscConfig+0x4f8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a8a      	ldr	r2, [pc, #552]	; (80012b0 <HAL_RCC_OscConfig+0x4f8>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fbb3 	bl	80007f8 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fbaf 	bl	80007f8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	; 0x64
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0fd      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <HAL_RCC_OscConfig+0x4f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x312>
 80010bc:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a7a      	ldr	r2, [pc, #488]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e02d      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x334>
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a75      	ldr	r2, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a72      	ldr	r2, [pc, #456]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	e01c      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x356>
 80010f4:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a6c      	ldr	r2, [pc, #432]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4a69      	ldr	r2, [pc, #420]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6213      	str	r3, [r2, #32]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a66      	ldr	r2, [pc, #408]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001120:	f023 0304 	bic.w	r3, r3, #4
 8001124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d015      	beq.n	800115a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb63 	bl	80007f8 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb5f 	bl	80007f8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0ab      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ee      	beq.n	8001136 <HAL_RCC_OscConfig+0x37e>
 8001158:	e014      	b.n	8001184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb4d 	bl	80007f8 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb49 	bl	80007f8 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e095      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d105      	bne.n	8001196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8081 	beq.w	80012a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	4b42      	ldr	r3, [pc, #264]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d061      	beq.n	8001270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d146      	bne.n	8001242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b4:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <HAL_RCC_OscConfig+0x4fc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb1d 	bl	80007f8 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fb19 	bl	80007f8 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e067      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	492d      	ldr	r1, [pc, #180]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a19      	ldr	r1, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	430b      	orrs	r3, r1
 800120e:	4927      	ldr	r1, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x4fc>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff faed 	bl	80007f8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fae9 	bl	80007f8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e037      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x46a>
 8001240:	e02f      	b.n	80012a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_RCC_OscConfig+0x4fc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fad6 	bl	80007f8 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fad2 	bl	80007f8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e020      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x498>
 800126e:	e018      	b.n	80012a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e013      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_OscConfig+0x4f4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	429a      	cmp	r2, r3
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129a:	429a      	cmp	r2, r3
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40007000 	.word	0x40007000
 80012b4:	42420060 	.word	0x42420060

080012b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0d0      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d910      	bls.n	80012fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 0207 	bic.w	r2, r3, #7
 80012e2:	4965      	ldr	r1, [pc, #404]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0b8      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001314:	4b59      	ldr	r3, [pc, #356]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800131e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	494d      	ldr	r1, [pc, #308]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d040      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d115      	bne.n	8001396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e07f      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d107      	bne.n	8001386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e073      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e06b      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f023 0203 	bic.w	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4936      	ldr	r1, [pc, #216]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a8:	f7ff fa26 	bl	80007f8 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b0:	f7ff fa22 	bl	80007f8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e053      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 020c 	and.w	r2, r3, #12
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d1eb      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d210      	bcs.n	8001408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 0207 	bic.w	r2, r3, #7
 80013ee:	4922      	ldr	r1, [pc, #136]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e032      	b.n	800146e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4916      	ldr	r1, [pc, #88]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d009      	beq.n	8001446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001446:	f000 f821 	bl	800148c <HAL_RCC_GetSysClockFreq>
 800144a:	4602      	mov	r2, r0
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <HAL_RCC_ClockConfig+0x1c8>)
 8001458:	5ccb      	ldrb	r3, [r1, r3]
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x1cc>)
 8001460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_ClockConfig+0x1d0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f984 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40022000 	.word	0x40022000
 800147c:	40021000 	.word	0x40021000
 8001480:	080032a4 	.word	0x080032a4
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800148c:	b490      	push	{r4, r7}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001494:	1d3c      	adds	r4, r7, #4
 8001496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800149c:	f240 2301 	movw	r3, #513	; 0x201
 80014a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d002      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x40>
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0x46>
 80014ca:	e02d      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ce:	623b      	str	r3, [r7, #32]
      break;
 80014d0:	e02d      	b.n	800152e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014de:	4413      	add	r3, r2
 80014e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c5b      	lsrs	r3, r3, #17
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014fe:	4413      	add	r3, r2
 8001500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800150a:	fb02 f203 	mul.w	r2, r2, r3
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	e004      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	623b      	str	r3, [r7, #32]
      break;
 8001526:	e002      	b.n	800152e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800152e:	6a3b      	ldr	r3, [r7, #32]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bc90      	pop	{r4, r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	08003284 	.word	0x08003284
 8001540:	40021000 	.word	0x40021000
 8001544:	007a1200 	.word	0x007a1200
 8001548:	003d0900 	.word	0x003d0900

0800154c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <HAL_RCC_GetHCLKFreq+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001564:	f7ff fff2 	bl	800154c <HAL_RCC_GetHCLKFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	080032b4 	.word	0x080032b4

08001588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800158c:	f7ff ffde 	bl	800154c <HAL_RCC_GetHCLKFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	0adb      	lsrs	r3, r3, #11
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	4903      	ldr	r1, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	080032b4 	.word	0x080032b4

080015b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <RCC_Delay+0x34>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <RCC_Delay+0x38>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015cc:	bf00      	nop
  }
  while (Delay --);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f9      	bne.n	80015cc <RCC_Delay+0x1c>
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000000 	.word	0x20000000
 80015e8:	10624dd3 	.word	0x10624dd3

080015ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d07d      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160c:	4b4f      	ldr	r3, [pc, #316]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b4c      	ldr	r3, [pc, #304]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	61d3      	str	r3, [r2, #28]
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	4b46      	ldr	r3, [pc, #280]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d118      	bne.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164c:	f7ff f8d4 	bl	80007f8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	e008      	b.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f8d0 	bl	80007f8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e06d      	b.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02e      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d027      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff f89f 	bl	80007f8 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f89b 	bl	80007f8 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e036      	b.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ee      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4917      	ldr	r1, [pc, #92]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	490b      	ldr	r1, [pc, #44]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4904      	ldr	r1, [pc, #16]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	42420440 	.word	0x42420440

08001758 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b08d      	sub	sp, #52	; 0x34
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001760:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001762:	f107 040c 	add.w	r4, r7, #12
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800176c:	f240 2301 	movw	r3, #513	; 0x201
 8001770:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b10      	cmp	r3, #16
 800178a:	d00a      	beq.n	80017a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b10      	cmp	r3, #16
 8001790:	f200 8091 	bhi.w	80018b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d04c      	beq.n	8001834 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d07c      	beq.n	800189a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80017a0:	e089      	b.n	80018b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80017a8:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8082 	beq.w	80018ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017c2:	4413      	add	r3, r2
 80017c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017c8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d018      	beq.n	8001806 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c5b      	lsrs	r3, r3, #17
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017e2:	4413      	add	r3, r2
 80017e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80017f4:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001804:	e004      	b.n	8001810 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181c:	d102      	bne.n	8001824 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001822:	e04a      	b.n	80018ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001832:	e042      	b.n	80018ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001844:	d108      	bne.n	8001858 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
 8001856:	e01f      	b.n	8001898 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800185e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001862:	d109      	bne.n	8001878 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001870:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
 8001876:	e00f      	b.n	8001898 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800187e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001882:	d11c      	bne.n	80018be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d016      	beq.n	80018be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001890:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001896:	e012      	b.n	80018be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001898:	e011      	b.n	80018be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800189a:	f7ff fe75 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0b9b      	lsrs	r3, r3, #14
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018b4:	e004      	b.n	80018c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018be:	bf00      	nop
    }
  }
  return (frequency);
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3734      	adds	r7, #52	; 0x34
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08003294 	.word	0x08003294
 80018d0:	40021000 	.word	0x40021000
 80018d4:	007a1200 	.word	0x007a1200
 80018d8:	003d0900 	.word	0x003d0900
 80018dc:	aaaaaaab 	.word	0xaaaaaaab

080018e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e084      	b.n	8001a00 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7c5b      	ldrb	r3, [r3, #17]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe00 	bl	800050c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fb82 	bl	800201c <HAL_RTC_WaitForSynchro>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e06b      	b.n	8001a00 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fc3b 	bl	80021a4 <RTC_EnterInitMode>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e060      	b.n	8001a00 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0207 	bic.w	r2, r2, #7
 800194c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_RTC_Init+0x128>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_RTC_Init+0x128>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_RTC_Init+0x128>)
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	4926      	ldr	r1, [pc, #152]	; (8001a08 <HAL_RTC_Init+0x128>)
 8001970:	4313      	orrs	r3, r2
 8001972:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197c:	d003      	beq.n	8001986 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e00e      	b.n	80019a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001986:	2001      	movs	r0, #1
 8001988:	f7ff fee6 	bl	8001758 <HAL_RCCEx_GetPeriphCLKFreq>
 800198c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d104      	bne.n	800199e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e030      	b.n	8001a00 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 010f 	bic.w	r1, r3, #15
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	0c1a      	lsrs	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	041b      	lsls	r3, r3, #16
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	b291      	uxth	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fc0f 	bl	80021f4 <RTC_ExitInitMode>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2204      	movs	r2, #4
 80019e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00c      	b.n	8001a00 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40006c00 	.word	0x40006c00

08001a0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RTC_SetTime+0x20>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e080      	b.n	8001b32 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7c1b      	ldrb	r3, [r3, #16]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_RTC_SetTime+0x30>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e07a      	b.n	8001b32 <HAL_RTC_SetTime+0x126>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d113      	bne.n	8001a76 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a58:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	4619      	mov	r1, r3
 8001a62:	460b      	mov	r3, r1
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a5b      	subs	r3, r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a6a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e01e      	b.n	8001ab4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fbff 	bl	800227e <RTC_Bcd2ToByte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a88:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fbf4 	bl	800227e <RTC_Bcd2ToByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001aa2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	789b      	ldrb	r3, [r3, #2]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fbe8 	bl	800227e <RTC_Bcd2ToByte>
 8001aae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ab0:	4423      	add	r3, r4
 8001ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ab4:	6979      	ldr	r1, [r7, #20]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fb0d 	bl	80020d6 <RTC_WriteTimeCounter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e02f      	b.n	8001b32 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0205 	bic.w	r2, r2, #5
 8001ae0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fb1e 	bl	8002124 <RTC_ReadAlarmCounter>
 8001ae8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af0:	d018      	beq.n	8001b24 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d214      	bcs.n	8001b24 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b04:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fb24 	bl	8002156 <RTC_WriteAlarmCounter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2204      	movs	r2, #4
 8001b18:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e006      	b.n	8001b32 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}
	...

08001b3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RTC_GetTime+0x28>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b5      	b.n	8001cd4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0ac      	b.n	8001cd4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa7b 	bl	8002076 <RTC_ReadTimeCounter>
 8001b80:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <HAL_RTC_GetTime+0x1a0>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <HAL_RTC_GetTime+0x1a0>)
 8001b92:	fba3 1302 	umull	r1, r3, r3, r2
 8001b96:	0adb      	lsrs	r3, r3, #11
 8001b98:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_RTC_GetTime+0x1a4>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_RTC_GetTime+0x1a0>)
 8001bb4:	fba2 1203 	umull	r1, r2, r2, r3
 8001bb8:	0ad2      	lsrs	r2, r2, #11
 8001bba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bbe:	fb01 f202 	mul.w	r2, r1, r2
 8001bc2:	1a9a      	subs	r2, r3, r2
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_RTC_GetTime+0x1a4>)
 8001bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bca:	0959      	lsrs	r1, r3, #5
 8001bcc:	460b      	mov	r3, r1
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a5b      	subs	r3, r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	1ad1      	subs	r1, r2, r3
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b17      	cmp	r3, #23
 8001be0:	d955      	bls.n	8001c8e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4a3f      	ldr	r2, [pc, #252]	; (8001ce4 <HAL_RTC_GetTime+0x1a8>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001bee:	6939      	ldr	r1, [r7, #16]
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_RTC_GetTime+0x1a8>)
 8001bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bf6:	091a      	lsrs	r2, r3, #4
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1aca      	subs	r2, r1, r3
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fa8b 	bl	8002124 <RTC_ReadAlarmCounter>
 8001c0e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c16:	d008      	beq.n	8001c2a <HAL_RTC_GetTime+0xee>
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d904      	bls.n	8001c2a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e002      	b.n	8001c30 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <HAL_RTC_GetTime+0x1ac>)
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fa48 	bl	80020d6 <RTC_WriteTimeCounter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e041      	b.n	8001cd4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c56:	d00c      	beq.n	8001c72 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c60:	69f9      	ldr	r1, [r7, #28]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fa77 	bl	8002156 <RTC_WriteAlarmCounter>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e030      	b.n	8001cd4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c72:	69f9      	ldr	r1, [r7, #28]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fa6e 	bl	8002156 <RTC_WriteAlarmCounter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e027      	b.n	8001cd4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001c84:	6979      	ldr	r1, [r7, #20]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fb16 	bl	80022b8 <RTC_DateUpdate>
 8001c8c:	e003      	b.n	8001c96 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01a      	beq.n	8001cd2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 facf 	bl	8002244 <RTC_ByteToBcd2>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fac6 	bl	8002244 <RTC_ByteToBcd2>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	789b      	ldrb	r3, [r3, #2]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fabd 	bl	8002244 <RTC_ByteToBcd2>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	91a2b3c5 	.word	0x91a2b3c5
 8001ce0:	88888889 	.word	0x88888889
 8001ce4:	aaaaaaab 	.word	0xaaaaaaab
 8001ce8:	00015180 	.word	0x00015180

08001cec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_RTC_SetDate+0x24>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e097      	b.n	8001e44 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	7c1b      	ldrb	r3, [r3, #16]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_RTC_SetDate+0x34>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e091      	b.n	8001e44 <HAL_RTC_SetDate+0x158>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	78da      	ldrb	r2, [r3, #3]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	789a      	ldrb	r2, [r3, #2]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	739a      	strb	r2, [r3, #14]
 8001d4a:	e01a      	b.n	8001d82 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	78db      	ldrb	r3, [r3, #3]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fa94 	bl	800227e <RTC_Bcd2ToByte>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fa8b 	bl	800227e <RTC_Bcd2ToByte>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	789b      	ldrb	r3, [r3, #2]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fa82 	bl	800227e <RTC_Bcd2ToByte>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	7bdb      	ldrb	r3, [r3, #15]
 8001d86:	4618      	mov	r0, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7b59      	ldrb	r1, [r3, #13]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	7b9b      	ldrb	r3, [r3, #14]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f000 fb6d 	bl	8002470 <RTC_WeekDayNum>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	7b1a      	ldrb	r2, [r3, #12]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f965 	bl	8002076 <RTC_ReadTimeCounter>
 8001dac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_RTC_SetDate+0x160>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0adb      	lsrs	r3, r3, #11
 8001db8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b18      	cmp	r3, #24
 8001dbe:	d93a      	bls.n	8001e36 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_RTC_SetDate+0x164>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_RTC_SetDate+0x168>)
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dd6:	69f9      	ldr	r1, [r7, #28]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f97c 	bl	80020d6 <RTC_WriteTimeCounter>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2204      	movs	r2, #4
 8001de8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e027      	b.n	8001e44 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f995 	bl	8002124 <RTC_ReadAlarmCounter>
 8001dfa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e02:	d018      	beq.n	8001e36 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d214      	bcs.n	8001e36 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e16:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f99b 	bl	8002156 <RTC_WriteAlarmCounter>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e006      	b.n	8001e44 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	91a2b3c5 	.word	0x91a2b3c5
 8001e50:	aaaaaaab 	.word	0xaaaaaaab
 8001e54:	00015180 	.word	0x00015180

08001e58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	460a      	mov	r2, r1
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	460a      	mov	r2, r1
 8001e74:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_RTC_SetAlarm_IT+0x2a>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e099      	b.n	8001fba <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	7c1b      	ldrb	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RTC_SetAlarm_IT+0x3a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e093      	b.n	8001fba <HAL_RTC_SetAlarm_IT+0x162>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff fe48 	bl	8001b3c <HAL_RTC_GetTime>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e081      	b.n	8001fba <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001eb6:	7d3b      	ldrb	r3, [r7, #20]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8001ec2:	7d7b      	ldrb	r3, [r7, #21]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a5b      	subs	r3, r3, r1
 8001ecc:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001ece:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8001ed0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001ed2:	4413      	add	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d113      	bne.n	8001f04 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ee6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	785b      	ldrb	r3, [r3, #1]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a5b      	subs	r3, r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001ef8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001efe:	4413      	add	r3, r2
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e01e      	b.n	8001f42 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f9b8 	bl	800227e <RTC_Bcd2ToByte>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f16:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f9ad 	bl	800227e <RTC_Bcd2ToByte>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001f30:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	789b      	ldrb	r3, [r3, #2]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f9a1 	bl	800227e <RTC_Bcd2ToByte>
 8001f3c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001f3e:	4423      	add	r3, r4
 8001f40:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d205      	bcs.n	8001f56 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f54:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f56:	69f9      	ldr	r1, [r7, #28]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f8fc 	bl	8002156 <RTC_WriteAlarmCounter>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2204      	movs	r2, #4
 8001f68:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e022      	b.n	8001fba <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0202 	bic.w	r2, r2, #2
 8001f82:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0202 	orr.w	r2, r2, #2
 8001f92:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8001fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001faa:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d011      	beq.n	8002002 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe fa37 	bl	8000460 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0202 	bic.w	r2, r2, #2
 8002000:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002008:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	745a      	strb	r2, [r3, #17]
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e01d      	b.n	800206e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0208 	bic.w	r2, r2, #8
 8002040:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002042:	f7fe fbd9 	bl	80007f8 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002048:	e009      	b.n	800205e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800204a:	f7fe fbd5 	bl	80007f8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002058:	d901      	bls.n	800205e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e007      	b.n	800206e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	827b      	strh	r3, [r7, #18]
 8002082:	2300      	movs	r3, #0
 8002084:	823b      	strh	r3, [r7, #16]
 8002086:	2300      	movs	r3, #0
 8002088:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80020a6:	8a7a      	ldrh	r2, [r7, #18]
 80020a8:	8a3b      	ldrh	r3, [r7, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d008      	beq.n	80020c0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80020ae:	8a3b      	ldrh	r3, [r7, #16]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e004      	b.n	80020ca <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f85d 	bl	80021a4 <RTC_EnterInitMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e011      	b.n	800211a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	0c12      	lsrs	r2, r2, #16
 80020fe:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b292      	uxth	r2, r2
 8002108:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f872 	bl	80021f4 <RTC_ExitInitMode>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	81fb      	strh	r3, [r7, #14]
 8002130:	2300      	movs	r3, #0
 8002132:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	041a      	lsls	r2, r3, #16
 8002148:	89bb      	ldrh	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f81d 	bl	80021a4 <RTC_EnterInitMode>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e011      	b.n	800219a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	0c12      	lsrs	r2, r2, #16
 800217e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b292      	uxth	r2, r2
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f832 	bl	80021f4 <RTC_ExitInitMode>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80021b0:	f7fe fb22 	bl	80007f8 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021b6:	e009      	b.n	80021cc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021b8:	f7fe fb1e 	bl	80007f8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c6:	d901      	bls.n	80021cc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00f      	b.n	80021ec <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0210 	orr.w	r2, r2, #16
 80021e8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002210:	f7fe faf2 	bl	80007f8 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002216:	e009      	b.n	800222c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002218:	f7fe faee 	bl	80007f8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002226:	d901      	bls.n	800222c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e007      	b.n	800223c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002252:	e005      	b.n	8002260 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	3b0a      	subs	r3, #10
 800225e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b09      	cmp	r3, #9
 8002264:	d8f6      	bhi.n	8002254 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	b2da      	uxtb	r2, r3
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4313      	orrs	r3, r2
 8002272:	b2db      	uxtb	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	b2db      	uxtb	r3, r3
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7bdb      	ldrb	r3, [r3, #15]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7b5b      	ldrb	r3, [r3, #13]
 80022dc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7b9b      	ldrb	r3, [r3, #14]
 80022e2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e06f      	b.n	80023ca <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d011      	beq.n	8002314 <RTC_DateUpdate+0x5c>
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d00e      	beq.n	8002314 <RTC_DateUpdate+0x5c>
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d00b      	beq.n	8002314 <RTC_DateUpdate+0x5c>
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b07      	cmp	r3, #7
 8002300:	d008      	beq.n	8002314 <RTC_DateUpdate+0x5c>
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d005      	beq.n	8002314 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b0a      	cmp	r3, #10
 800230c:	d002      	beq.n	8002314 <RTC_DateUpdate+0x5c>
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d117      	bne.n	8002344 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b1e      	cmp	r3, #30
 8002318:	d803      	bhi.n	8002322 <RTC_DateUpdate+0x6a>
      {
        day++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002320:	e050      	b.n	80023c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d005      	beq.n	8002334 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	3301      	adds	r3, #1
 800232c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800232e:	2301      	movs	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002332:	e047      	b.n	80023c4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
          year++;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002342:	e03f      	b.n	80023c4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d008      	beq.n	800235c <RTC_DateUpdate+0xa4>
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d005      	beq.n	800235c <RTC_DateUpdate+0xa4>
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b09      	cmp	r3, #9
 8002354:	d002      	beq.n	800235c <RTC_DateUpdate+0xa4>
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b0b      	cmp	r3, #11
 800235a:	d10c      	bne.n	8002376 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b1d      	cmp	r3, #29
 8002360:	d803      	bhi.n	800236a <RTC_DateUpdate+0xb2>
      {
        day++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002368:	e02c      	b.n	80023c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	3301      	adds	r3, #1
 800236e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002370:	2301      	movs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002374:	e026      	b.n	80023c4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b1b      	cmp	r3, #27
 8002380:	d803      	bhi.n	800238a <RTC_DateUpdate+0xd2>
      {
        day++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e01c      	b.n	80023c4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b1c      	cmp	r3, #28
 800238e:	d111      	bne.n	80023b4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f839 	bl	800240c <RTC_IsLeapYear>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e00d      	b.n	80023c4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	3301      	adds	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
          day = 1U;
 80023ae:	2301      	movs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e007      	b.n	80023c4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b1d      	cmp	r3, #29
 80023b8:	d104      	bne.n	80023c4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3301      	adds	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80023c0:	2301      	movs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	3301      	adds	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d38b      	bcc.n	80022ea <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f000 f83b 	bl	8002470 <RTC_WeekDayNum>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	731a      	strb	r2, [r3, #12]
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	e01d      	b.n	8002462 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <RTC_IsLeapYear+0x60>)
 800242a:	fba2 1203 	umull	r1, r2, r2, r3
 800242e:	0952      	lsrs	r2, r2, #5
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	fb01 f202 	mul.w	r2, r1, r2
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <RTC_IsLeapYear+0x60>)
 8002446:	fba2 1203 	umull	r1, r2, r2, r3
 800244a:	09d2      	lsrs	r2, r2, #7
 800244c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002450:	fb01 f202 	mul.w	r2, r1, r2
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002460:	2300      	movs	r3, #0
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	51eb851f 	.word	0x51eb851f

08002470 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	4613      	mov	r3, r2
 800247e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800248e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d82d      	bhi.n	80024f2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <RTC_WeekDayNum+0xe4>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	085a      	lsrs	r2, r3, #1
 80024aa:	78bb      	ldrb	r3, [r7, #2]
 80024ac:	441a      	add	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	441a      	add	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3b01      	subs	r3, #1
 80024be:	4926      	ldr	r1, [pc, #152]	; (8002558 <RTC_WeekDayNum+0xe8>)
 80024c0:	fba1 1303 	umull	r1, r3, r1, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	4922      	ldr	r1, [pc, #136]	; (8002558 <RTC_WeekDayNum+0xe8>)
 80024ce:	fba1 1303 	umull	r1, r3, r1, r3
 80024d2:	09db      	lsrs	r3, r3, #7
 80024d4:	4413      	add	r3, r2
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <RTC_WeekDayNum+0xec>)
 80024da:	fba3 1302 	umull	r1, r3, r3, r2
 80024de:	1ad1      	subs	r1, r2, r3
 80024e0:	0849      	lsrs	r1, r1, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	0899      	lsrs	r1, r3, #2
 80024e6:	460b      	mov	r3, r1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e029      	b.n	8002546 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <RTC_WeekDayNum+0xe4>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	085a      	lsrs	r2, r3, #1
 8002506:	78bb      	ldrb	r3, [r7, #2]
 8002508:	441a      	add	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	441a      	add	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4910      	ldr	r1, [pc, #64]	; (8002558 <RTC_WeekDayNum+0xe8>)
 8002518:	fba1 1303 	umull	r1, r3, r1, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	490d      	ldr	r1, [pc, #52]	; (8002558 <RTC_WeekDayNum+0xe8>)
 8002524:	fba1 1303 	umull	r1, r3, r1, r3
 8002528:	09db      	lsrs	r3, r3, #7
 800252a:	4413      	add	r3, r2
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <RTC_WeekDayNum+0xec>)
 8002530:	fba3 1302 	umull	r1, r3, r3, r2
 8002534:	1ad1      	subs	r1, r2, r3
 8002536:	0849      	lsrs	r1, r1, #1
 8002538:	440b      	add	r3, r1
 800253a:	0899      	lsrs	r1, r3, #2
 800253c:	460b      	mov	r3, r1
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a5b      	subs	r3, r3, r1
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	b2db      	uxtb	r3, r3
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	38e38e39 	.word	0x38e38e39
 8002558:	51eb851f 	.word	0x51eb851f
 800255c:	24924925 	.word	0x24924925

08002560 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d027      	beq.n	80025c6 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f824 	bl	80025e0 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0204 	mvn.w	r2, #4
 80025a0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	745a      	strb	r2, [r3, #17]
 80025a8:	e005      	b.n	80025b6 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f80f 	bl	80025ce <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e03f      	b.n	8002684 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fd ffab 	bl	8000574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2224      	movs	r2, #36	; 0x24
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002634:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f904 	bl	8002844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d17c      	bne.n	80027a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_UART_Transmit+0x2c>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e075      	b.n	80027a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x3e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e06e      	b.n	80027a8 <HAL_UART_Transmit+0x11c>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2221      	movs	r2, #33	; 0x21
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e0:	f7fe f88a 	bl	80007f8 <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d108      	bne.n	800270e <HAL_UART_Transmit+0x82>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e003      	b.n	8002716 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800271e:	e02a      	b.n	8002776 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f840 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e036      	b.n	80027a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	3302      	adds	r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e007      	b.n	8002768 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3301      	adds	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1cf      	bne.n	8002720 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	2140      	movs	r1, #64	; 0x40
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f810 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e006      	b.n	80027a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	e02c      	b.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c8:	d028      	beq.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d0:	f7fe f812 	bl	80007f8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d21d      	bcs.n	800281c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e00f      	b.n	800283c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4013      	ands	r3, r2
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	429a      	cmp	r2, r3
 8002838:	d0c3      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800287e:	f023 030c 	bic.w	r3, r3, #12
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	430b      	orrs	r3, r1
 800288a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <UART_SetConfig+0x114>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028ac:	f7fe fe6c 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	e002      	b.n	80028ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b4:	f7fe fe54 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <UART_SetConfig+0x118>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	0119      	lsls	r1, r3, #4
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009a      	lsls	r2, r3, #2
 80028e4:	441a      	add	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <UART_SetConfig+0x118>)
 80028f2:	fba3 0302 	umull	r0, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2064      	movs	r0, #100	; 0x64
 80028fa:	fb00 f303 	mul.w	r3, r0, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	3332      	adds	r3, #50	; 0x32
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <UART_SetConfig+0x118>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	4419      	add	r1, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fbb2 f2f3 	udiv	r2, r2, r3
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <UART_SetConfig+0x118>)
 800292a:	fba3 0302 	umull	r0, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2064      	movs	r0, #100	; 0x64
 8002932:	fb00 f303 	mul.w	r3, r0, r3
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	3332      	adds	r3, #50	; 0x32
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <UART_SetConfig+0x118>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	f003 020f 	and.w	r2, r3, #15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	440a      	add	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40013800 	.word	0x40013800
 800295c:	51eb851f 	.word	0x51eb851f

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000000c 	.word	0x2000000c

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2600      	movs	r6, #0
 8002970:	4d0c      	ldr	r5, [pc, #48]	; (80029a4 <__libc_init_array+0x38>)
 8002972:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002974:	1b64      	subs	r4, r4, r5
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	f000 fc5c 	bl	8003238 <_init>
 8002980:	2600      	movs	r6, #0
 8002982:	4d0a      	ldr	r5, [pc, #40]	; (80029ac <__libc_init_array+0x40>)
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <__libc_init_array+0x44>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	080032f0 	.word	0x080032f0
 80029a8:	080032f0 	.word	0x080032f0
 80029ac:	080032f0 	.word	0x080032f0
 80029b0:	080032f4 	.word	0x080032f4

080029b4 <memset>:
 80029b4:	4603      	mov	r3, r0
 80029b6:	4402      	add	r2, r0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d100      	bne.n	80029be <memset+0xa>
 80029bc:	4770      	bx	lr
 80029be:	f803 1b01 	strb.w	r1, [r3], #1
 80029c2:	e7f9      	b.n	80029b8 <memset+0x4>

080029c4 <siprintf>:
 80029c4:	b40e      	push	{r1, r2, r3}
 80029c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029ca:	b500      	push	{lr}
 80029cc:	b09c      	sub	sp, #112	; 0x70
 80029ce:	ab1d      	add	r3, sp, #116	; 0x74
 80029d0:	9002      	str	r0, [sp, #8]
 80029d2:	9006      	str	r0, [sp, #24]
 80029d4:	9107      	str	r1, [sp, #28]
 80029d6:	9104      	str	r1, [sp, #16]
 80029d8:	4808      	ldr	r0, [pc, #32]	; (80029fc <siprintf+0x38>)
 80029da:	4909      	ldr	r1, [pc, #36]	; (8002a00 <siprintf+0x3c>)
 80029dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80029e0:	9105      	str	r1, [sp, #20]
 80029e2:	6800      	ldr	r0, [r0, #0]
 80029e4:	a902      	add	r1, sp, #8
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	f000 f868 	bl	8002abc <_svfiprintf_r>
 80029ec:	2200      	movs	r2, #0
 80029ee:	9b02      	ldr	r3, [sp, #8]
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	b01c      	add	sp, #112	; 0x70
 80029f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029f8:	b003      	add	sp, #12
 80029fa:	4770      	bx	lr
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	ffff0208 	.word	0xffff0208

08002a04 <__ssputs_r>:
 8002a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a08:	688e      	ldr	r6, [r1, #8]
 8002a0a:	4682      	mov	sl, r0
 8002a0c:	429e      	cmp	r6, r3
 8002a0e:	460c      	mov	r4, r1
 8002a10:	4690      	mov	r8, r2
 8002a12:	461f      	mov	r7, r3
 8002a14:	d838      	bhi.n	8002a88 <__ssputs_r+0x84>
 8002a16:	898a      	ldrh	r2, [r1, #12]
 8002a18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a1c:	d032      	beq.n	8002a84 <__ssputs_r+0x80>
 8002a1e:	6825      	ldr	r5, [r4, #0]
 8002a20:	6909      	ldr	r1, [r1, #16]
 8002a22:	3301      	adds	r3, #1
 8002a24:	eba5 0901 	sub.w	r9, r5, r1
 8002a28:	6965      	ldr	r5, [r4, #20]
 8002a2a:	444b      	add	r3, r9
 8002a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a34:	106d      	asrs	r5, r5, #1
 8002a36:	429d      	cmp	r5, r3
 8002a38:	bf38      	it	cc
 8002a3a:	461d      	movcc	r5, r3
 8002a3c:	0553      	lsls	r3, r2, #21
 8002a3e:	d531      	bpl.n	8002aa4 <__ssputs_r+0xa0>
 8002a40:	4629      	mov	r1, r5
 8002a42:	f000 fb53 	bl	80030ec <_malloc_r>
 8002a46:	4606      	mov	r6, r0
 8002a48:	b950      	cbnz	r0, 8002a60 <__ssputs_r+0x5c>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a50:	f8ca 3000 	str.w	r3, [sl]
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5a:	81a3      	strh	r3, [r4, #12]
 8002a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a60:	464a      	mov	r2, r9
 8002a62:	6921      	ldr	r1, [r4, #16]
 8002a64:	f000 face 	bl	8003004 <memcpy>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	6126      	str	r6, [r4, #16]
 8002a76:	444e      	add	r6, r9
 8002a78:	6026      	str	r6, [r4, #0]
 8002a7a:	463e      	mov	r6, r7
 8002a7c:	6165      	str	r5, [r4, #20]
 8002a7e:	eba5 0509 	sub.w	r5, r5, r9
 8002a82:	60a5      	str	r5, [r4, #8]
 8002a84:	42be      	cmp	r6, r7
 8002a86:	d900      	bls.n	8002a8a <__ssputs_r+0x86>
 8002a88:	463e      	mov	r6, r7
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	f000 fac6 	bl	8003020 <memmove>
 8002a94:	68a3      	ldr	r3, [r4, #8]
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	1b9b      	subs	r3, r3, r6
 8002a9a:	4432      	add	r2, r6
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	60a3      	str	r3, [r4, #8]
 8002aa0:	6022      	str	r2, [r4, #0]
 8002aa2:	e7db      	b.n	8002a5c <__ssputs_r+0x58>
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	f000 fb7b 	bl	80031a0 <_realloc_r>
 8002aaa:	4606      	mov	r6, r0
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1e1      	bne.n	8002a74 <__ssputs_r+0x70>
 8002ab0:	4650      	mov	r0, sl
 8002ab2:	6921      	ldr	r1, [r4, #16]
 8002ab4:	f000 face 	bl	8003054 <_free_r>
 8002ab8:	e7c7      	b.n	8002a4a <__ssputs_r+0x46>
	...

08002abc <_svfiprintf_r>:
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	4698      	mov	r8, r3
 8002ac2:	898b      	ldrh	r3, [r1, #12]
 8002ac4:	4607      	mov	r7, r0
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	460d      	mov	r5, r1
 8002aca:	4614      	mov	r4, r2
 8002acc:	b09d      	sub	sp, #116	; 0x74
 8002ace:	d50e      	bpl.n	8002aee <_svfiprintf_r+0x32>
 8002ad0:	690b      	ldr	r3, [r1, #16]
 8002ad2:	b963      	cbnz	r3, 8002aee <_svfiprintf_r+0x32>
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	f000 fb09 	bl	80030ec <_malloc_r>
 8002ada:	6028      	str	r0, [r5, #0]
 8002adc:	6128      	str	r0, [r5, #16]
 8002ade:	b920      	cbnz	r0, 8002aea <_svfiprintf_r+0x2e>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae8:	e0d1      	b.n	8002c8e <_svfiprintf_r+0x1d2>
 8002aea:	2340      	movs	r3, #64	; 0x40
 8002aec:	616b      	str	r3, [r5, #20]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9309      	str	r3, [sp, #36]	; 0x24
 8002af2:	2320      	movs	r3, #32
 8002af4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002af8:	2330      	movs	r3, #48	; 0x30
 8002afa:	f04f 0901 	mov.w	r9, #1
 8002afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ca8 <_svfiprintf_r+0x1ec>
 8002b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	469a      	mov	sl, r3
 8002b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b12:	b10a      	cbz	r2, 8002b18 <_svfiprintf_r+0x5c>
 8002b14:	2a25      	cmp	r2, #37	; 0x25
 8002b16:	d1f9      	bne.n	8002b0c <_svfiprintf_r+0x50>
 8002b18:	ebba 0b04 	subs.w	fp, sl, r4
 8002b1c:	d00b      	beq.n	8002b36 <_svfiprintf_r+0x7a>
 8002b1e:	465b      	mov	r3, fp
 8002b20:	4622      	mov	r2, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	4638      	mov	r0, r7
 8002b26:	f7ff ff6d 	bl	8002a04 <__ssputs_r>
 8002b2a:	3001      	adds	r0, #1
 8002b2c:	f000 80aa 	beq.w	8002c84 <_svfiprintf_r+0x1c8>
 8002b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b32:	445a      	add	r2, fp
 8002b34:	9209      	str	r2, [sp, #36]	; 0x24
 8002b36:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80a2 	beq.w	8002c84 <_svfiprintf_r+0x1c8>
 8002b40:	2300      	movs	r3, #0
 8002b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b4a:	f10a 0a01 	add.w	sl, sl, #1
 8002b4e:	9304      	str	r3, [sp, #16]
 8002b50:	9307      	str	r3, [sp, #28]
 8002b52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b56:	931a      	str	r3, [sp, #104]	; 0x68
 8002b58:	4654      	mov	r4, sl
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b60:	4851      	ldr	r0, [pc, #324]	; (8002ca8 <_svfiprintf_r+0x1ec>)
 8002b62:	f000 fa41 	bl	8002fe8 <memchr>
 8002b66:	9a04      	ldr	r2, [sp, #16]
 8002b68:	b9d8      	cbnz	r0, 8002ba2 <_svfiprintf_r+0xe6>
 8002b6a:	06d0      	lsls	r0, r2, #27
 8002b6c:	bf44      	itt	mi
 8002b6e:	2320      	movmi	r3, #32
 8002b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b74:	0711      	lsls	r1, r2, #28
 8002b76:	bf44      	itt	mi
 8002b78:	232b      	movmi	r3, #43	; 0x2b
 8002b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b82:	2b2a      	cmp	r3, #42	; 0x2a
 8002b84:	d015      	beq.n	8002bb2 <_svfiprintf_r+0xf6>
 8002b86:	4654      	mov	r4, sl
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f04f 0c0a 	mov.w	ip, #10
 8002b8e:	9a07      	ldr	r2, [sp, #28]
 8002b90:	4621      	mov	r1, r4
 8002b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b96:	3b30      	subs	r3, #48	; 0x30
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d94e      	bls.n	8002c3a <_svfiprintf_r+0x17e>
 8002b9c:	b1b0      	cbz	r0, 8002bcc <_svfiprintf_r+0x110>
 8002b9e:	9207      	str	r2, [sp, #28]
 8002ba0:	e014      	b.n	8002bcc <_svfiprintf_r+0x110>
 8002ba2:	eba0 0308 	sub.w	r3, r0, r8
 8002ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	46a2      	mov	sl, r4
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	e7d2      	b.n	8002b58 <_svfiprintf_r+0x9c>
 8002bb2:	9b03      	ldr	r3, [sp, #12]
 8002bb4:	1d19      	adds	r1, r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	9103      	str	r1, [sp, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bfbb      	ittet	lt
 8002bbe:	425b      	neglt	r3, r3
 8002bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8002bc4:	9307      	strge	r3, [sp, #28]
 8002bc6:	9307      	strlt	r3, [sp, #28]
 8002bc8:	bfb8      	it	lt
 8002bca:	9204      	strlt	r2, [sp, #16]
 8002bcc:	7823      	ldrb	r3, [r4, #0]
 8002bce:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd0:	d10c      	bne.n	8002bec <_svfiprintf_r+0x130>
 8002bd2:	7863      	ldrb	r3, [r4, #1]
 8002bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bd6:	d135      	bne.n	8002c44 <_svfiprintf_r+0x188>
 8002bd8:	9b03      	ldr	r3, [sp, #12]
 8002bda:	3402      	adds	r4, #2
 8002bdc:	1d1a      	adds	r2, r3, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	9203      	str	r2, [sp, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfb8      	it	lt
 8002be6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bea:	9305      	str	r3, [sp, #20]
 8002bec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cb8 <_svfiprintf_r+0x1fc>
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	7821      	ldrb	r1, [r4, #0]
 8002bf6:	f000 f9f7 	bl	8002fe8 <memchr>
 8002bfa:	b140      	cbz	r0, 8002c0e <_svfiprintf_r+0x152>
 8002bfc:	2340      	movs	r3, #64	; 0x40
 8002bfe:	eba0 000a 	sub.w	r0, r0, sl
 8002c02:	fa03 f000 	lsl.w	r0, r3, r0
 8002c06:	9b04      	ldr	r3, [sp, #16]
 8002c08:	3401      	adds	r4, #1
 8002c0a:	4303      	orrs	r3, r0
 8002c0c:	9304      	str	r3, [sp, #16]
 8002c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c12:	2206      	movs	r2, #6
 8002c14:	4825      	ldr	r0, [pc, #148]	; (8002cac <_svfiprintf_r+0x1f0>)
 8002c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c1a:	f000 f9e5 	bl	8002fe8 <memchr>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d038      	beq.n	8002c94 <_svfiprintf_r+0x1d8>
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <_svfiprintf_r+0x1f4>)
 8002c24:	bb1b      	cbnz	r3, 8002c6e <_svfiprintf_r+0x1b2>
 8002c26:	9b03      	ldr	r3, [sp, #12]
 8002c28:	3307      	adds	r3, #7
 8002c2a:	f023 0307 	bic.w	r3, r3, #7
 8002c2e:	3308      	adds	r3, #8
 8002c30:	9303      	str	r3, [sp, #12]
 8002c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c34:	4433      	add	r3, r6
 8002c36:	9309      	str	r3, [sp, #36]	; 0x24
 8002c38:	e767      	b.n	8002b0a <_svfiprintf_r+0x4e>
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c42:	e7a5      	b.n	8002b90 <_svfiprintf_r+0xd4>
 8002c44:	2300      	movs	r3, #0
 8002c46:	f04f 0c0a 	mov.w	ip, #10
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	3401      	adds	r4, #1
 8002c4e:	9305      	str	r3, [sp, #20]
 8002c50:	4620      	mov	r0, r4
 8002c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c56:	3a30      	subs	r2, #48	; 0x30
 8002c58:	2a09      	cmp	r2, #9
 8002c5a:	d903      	bls.n	8002c64 <_svfiprintf_r+0x1a8>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0c5      	beq.n	8002bec <_svfiprintf_r+0x130>
 8002c60:	9105      	str	r1, [sp, #20]
 8002c62:	e7c3      	b.n	8002bec <_svfiprintf_r+0x130>
 8002c64:	4604      	mov	r4, r0
 8002c66:	2301      	movs	r3, #1
 8002c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c6c:	e7f0      	b.n	8002c50 <_svfiprintf_r+0x194>
 8002c6e:	ab03      	add	r3, sp, #12
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	462a      	mov	r2, r5
 8002c74:	4638      	mov	r0, r7
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <_svfiprintf_r+0x1f8>)
 8002c78:	a904      	add	r1, sp, #16
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	1c42      	adds	r2, r0, #1
 8002c80:	4606      	mov	r6, r0
 8002c82:	d1d6      	bne.n	8002c32 <_svfiprintf_r+0x176>
 8002c84:	89ab      	ldrh	r3, [r5, #12]
 8002c86:	065b      	lsls	r3, r3, #25
 8002c88:	f53f af2c 	bmi.w	8002ae4 <_svfiprintf_r+0x28>
 8002c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c8e:	b01d      	add	sp, #116	; 0x74
 8002c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c94:	ab03      	add	r3, sp, #12
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	462a      	mov	r2, r5
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <_svfiprintf_r+0x1f8>)
 8002c9e:	a904      	add	r1, sp, #16
 8002ca0:	f000 f87c 	bl	8002d9c <_printf_i>
 8002ca4:	e7eb      	b.n	8002c7e <_svfiprintf_r+0x1c2>
 8002ca6:	bf00      	nop
 8002ca8:	080032bc 	.word	0x080032bc
 8002cac:	080032c6 	.word	0x080032c6
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	08002a05 	.word	0x08002a05
 8002cb8:	080032c2 	.word	0x080032c2

08002cbc <_printf_common>:
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	4616      	mov	r6, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	688a      	ldr	r2, [r1, #8]
 8002cc6:	690b      	ldr	r3, [r1, #16]
 8002cc8:	4607      	mov	r7, r0
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	bfb8      	it	lt
 8002cce:	4613      	movlt	r3, r2
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cdc:	b10a      	cbz	r2, 8002ce2 <_printf_common+0x26>
 8002cde:	3301      	adds	r3, #1
 8002ce0:	6033      	str	r3, [r6, #0]
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	0699      	lsls	r1, r3, #26
 8002ce6:	bf42      	ittt	mi
 8002ce8:	6833      	ldrmi	r3, [r6, #0]
 8002cea:	3302      	addmi	r3, #2
 8002cec:	6033      	strmi	r3, [r6, #0]
 8002cee:	6825      	ldr	r5, [r4, #0]
 8002cf0:	f015 0506 	ands.w	r5, r5, #6
 8002cf4:	d106      	bne.n	8002d04 <_printf_common+0x48>
 8002cf6:	f104 0a19 	add.w	sl, r4, #25
 8002cfa:	68e3      	ldr	r3, [r4, #12]
 8002cfc:	6832      	ldr	r2, [r6, #0]
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	42ab      	cmp	r3, r5
 8002d02:	dc28      	bgt.n	8002d56 <_printf_common+0x9a>
 8002d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d08:	1e13      	subs	r3, r2, #0
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	bf18      	it	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	0692      	lsls	r2, r2, #26
 8002d12:	d42d      	bmi.n	8002d70 <_printf_common+0xb4>
 8002d14:	4649      	mov	r1, r9
 8002d16:	4638      	mov	r0, r7
 8002d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d1c:	47c0      	blx	r8
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d020      	beq.n	8002d64 <_printf_common+0xa8>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	68e5      	ldr	r5, [r4, #12]
 8002d26:	f003 0306 	and.w	r3, r3, #6
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf18      	it	ne
 8002d2e:	2500      	movne	r5, #0
 8002d30:	6832      	ldr	r2, [r6, #0]
 8002d32:	f04f 0600 	mov.w	r6, #0
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	bf08      	it	eq
 8002d3a:	1aad      	subeq	r5, r5, r2
 8002d3c:	6922      	ldr	r2, [r4, #16]
 8002d3e:	bf08      	it	eq
 8002d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bfc4      	itt	gt
 8002d48:	1a9b      	subgt	r3, r3, r2
 8002d4a:	18ed      	addgt	r5, r5, r3
 8002d4c:	341a      	adds	r4, #26
 8002d4e:	42b5      	cmp	r5, r6
 8002d50:	d11a      	bne.n	8002d88 <_printf_common+0xcc>
 8002d52:	2000      	movs	r0, #0
 8002d54:	e008      	b.n	8002d68 <_printf_common+0xac>
 8002d56:	2301      	movs	r3, #1
 8002d58:	4652      	mov	r2, sl
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d103      	bne.n	8002d6c <_printf_common+0xb0>
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	e7c4      	b.n	8002cfa <_printf_common+0x3e>
 8002d70:	2030      	movs	r0, #48	; 0x30
 8002d72:	18e1      	adds	r1, r4, r3
 8002d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7e:	4422      	add	r2, r4
 8002d80:	3302      	adds	r3, #2
 8002d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d86:	e7c5      	b.n	8002d14 <_printf_common+0x58>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	4638      	mov	r0, r7
 8002d90:	47c0      	blx	r8
 8002d92:	3001      	adds	r0, #1
 8002d94:	d0e6      	beq.n	8002d64 <_printf_common+0xa8>
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7d9      	b.n	8002d4e <_printf_common+0x92>
	...

08002d9c <_printf_i>:
 8002d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002da0:	460c      	mov	r4, r1
 8002da2:	7e27      	ldrb	r7, [r4, #24]
 8002da4:	4691      	mov	r9, r2
 8002da6:	2f78      	cmp	r7, #120	; 0x78
 8002da8:	4680      	mov	r8, r0
 8002daa:	469a      	mov	sl, r3
 8002dac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002dae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002db2:	d807      	bhi.n	8002dc4 <_printf_i+0x28>
 8002db4:	2f62      	cmp	r7, #98	; 0x62
 8002db6:	d80a      	bhi.n	8002dce <_printf_i+0x32>
 8002db8:	2f00      	cmp	r7, #0
 8002dba:	f000 80d9 	beq.w	8002f70 <_printf_i+0x1d4>
 8002dbe:	2f58      	cmp	r7, #88	; 0x58
 8002dc0:	f000 80a4 	beq.w	8002f0c <_printf_i+0x170>
 8002dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dcc:	e03a      	b.n	8002e44 <_printf_i+0xa8>
 8002dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dd2:	2b15      	cmp	r3, #21
 8002dd4:	d8f6      	bhi.n	8002dc4 <_printf_i+0x28>
 8002dd6:	a001      	add	r0, pc, #4	; (adr r0, 8002ddc <_printf_i+0x40>)
 8002dd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e49 	.word	0x08002e49
 8002de4:	08002dc5 	.word	0x08002dc5
 8002de8:	08002dc5 	.word	0x08002dc5
 8002dec:	08002dc5 	.word	0x08002dc5
 8002df0:	08002dc5 	.word	0x08002dc5
 8002df4:	08002e49 	.word	0x08002e49
 8002df8:	08002dc5 	.word	0x08002dc5
 8002dfc:	08002dc5 	.word	0x08002dc5
 8002e00:	08002dc5 	.word	0x08002dc5
 8002e04:	08002dc5 	.word	0x08002dc5
 8002e08:	08002f57 	.word	0x08002f57
 8002e0c:	08002e79 	.word	0x08002e79
 8002e10:	08002f39 	.word	0x08002f39
 8002e14:	08002dc5 	.word	0x08002dc5
 8002e18:	08002dc5 	.word	0x08002dc5
 8002e1c:	08002f79 	.word	0x08002f79
 8002e20:	08002dc5 	.word	0x08002dc5
 8002e24:	08002e79 	.word	0x08002e79
 8002e28:	08002dc5 	.word	0x08002dc5
 8002e2c:	08002dc5 	.word	0x08002dc5
 8002e30:	08002f41 	.word	0x08002f41
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e3a:	1d1a      	adds	r2, r3, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	600a      	str	r2, [r1, #0]
 8002e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0a4      	b.n	8002f92 <_printf_i+0x1f6>
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	6808      	ldr	r0, [r1, #0]
 8002e4c:	062e      	lsls	r6, r5, #24
 8002e4e:	f100 0304 	add.w	r3, r0, #4
 8002e52:	d50a      	bpl.n	8002e6a <_printf_i+0xce>
 8002e54:	6805      	ldr	r5, [r0, #0]
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	2d00      	cmp	r5, #0
 8002e5a:	da03      	bge.n	8002e64 <_printf_i+0xc8>
 8002e5c:	232d      	movs	r3, #45	; 0x2d
 8002e5e:	426d      	negs	r5, r5
 8002e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e64:	230a      	movs	r3, #10
 8002e66:	485e      	ldr	r0, [pc, #376]	; (8002fe0 <_printf_i+0x244>)
 8002e68:	e019      	b.n	8002e9e <_printf_i+0x102>
 8002e6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e6e:	6805      	ldr	r5, [r0, #0]
 8002e70:	600b      	str	r3, [r1, #0]
 8002e72:	bf18      	it	ne
 8002e74:	b22d      	sxthne	r5, r5
 8002e76:	e7ef      	b.n	8002e58 <_printf_i+0xbc>
 8002e78:	680b      	ldr	r3, [r1, #0]
 8002e7a:	6825      	ldr	r5, [r4, #0]
 8002e7c:	1d18      	adds	r0, r3, #4
 8002e7e:	6008      	str	r0, [r1, #0]
 8002e80:	0628      	lsls	r0, r5, #24
 8002e82:	d501      	bpl.n	8002e88 <_printf_i+0xec>
 8002e84:	681d      	ldr	r5, [r3, #0]
 8002e86:	e002      	b.n	8002e8e <_printf_i+0xf2>
 8002e88:	0669      	lsls	r1, r5, #25
 8002e8a:	d5fb      	bpl.n	8002e84 <_printf_i+0xe8>
 8002e8c:	881d      	ldrh	r5, [r3, #0]
 8002e8e:	2f6f      	cmp	r7, #111	; 0x6f
 8002e90:	bf0c      	ite	eq
 8002e92:	2308      	moveq	r3, #8
 8002e94:	230a      	movne	r3, #10
 8002e96:	4852      	ldr	r0, [pc, #328]	; (8002fe0 <_printf_i+0x244>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e9e:	6866      	ldr	r6, [r4, #4]
 8002ea0:	2e00      	cmp	r6, #0
 8002ea2:	bfa8      	it	ge
 8002ea4:	6821      	ldrge	r1, [r4, #0]
 8002ea6:	60a6      	str	r6, [r4, #8]
 8002ea8:	bfa4      	itt	ge
 8002eaa:	f021 0104 	bicge.w	r1, r1, #4
 8002eae:	6021      	strge	r1, [r4, #0]
 8002eb0:	b90d      	cbnz	r5, 8002eb6 <_printf_i+0x11a>
 8002eb2:	2e00      	cmp	r6, #0
 8002eb4:	d04d      	beq.n	8002f52 <_printf_i+0x1b6>
 8002eb6:	4616      	mov	r6, r2
 8002eb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ebc:	fb03 5711 	mls	r7, r3, r1, r5
 8002ec0:	5dc7      	ldrb	r7, [r0, r7]
 8002ec2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ec6:	462f      	mov	r7, r5
 8002ec8:	42bb      	cmp	r3, r7
 8002eca:	460d      	mov	r5, r1
 8002ecc:	d9f4      	bls.n	8002eb8 <_printf_i+0x11c>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d10b      	bne.n	8002eea <_printf_i+0x14e>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	07df      	lsls	r7, r3, #31
 8002ed6:	d508      	bpl.n	8002eea <_printf_i+0x14e>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6861      	ldr	r1, [r4, #4]
 8002edc:	4299      	cmp	r1, r3
 8002ede:	bfde      	ittt	le
 8002ee0:	2330      	movle	r3, #48	; 0x30
 8002ee2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ee6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002eea:	1b92      	subs	r2, r2, r6
 8002eec:	6122      	str	r2, [r4, #16]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	f8cd a000 	str.w	sl, [sp]
 8002ef8:	aa03      	add	r2, sp, #12
 8002efa:	f7ff fedf 	bl	8002cbc <_printf_common>
 8002efe:	3001      	adds	r0, #1
 8002f00:	d14c      	bne.n	8002f9c <_printf_i+0x200>
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f06:	b004      	add	sp, #16
 8002f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0c:	4834      	ldr	r0, [pc, #208]	; (8002fe0 <_printf_i+0x244>)
 8002f0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f12:	680e      	ldr	r6, [r1, #0]
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f1a:	061f      	lsls	r7, r3, #24
 8002f1c:	600e      	str	r6, [r1, #0]
 8002f1e:	d514      	bpl.n	8002f4a <_printf_i+0x1ae>
 8002f20:	07d9      	lsls	r1, r3, #31
 8002f22:	bf44      	itt	mi
 8002f24:	f043 0320 	orrmi.w	r3, r3, #32
 8002f28:	6023      	strmi	r3, [r4, #0]
 8002f2a:	b91d      	cbnz	r5, 8002f34 <_printf_i+0x198>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f023 0320 	bic.w	r3, r3, #32
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	2310      	movs	r3, #16
 8002f36:	e7af      	b.n	8002e98 <_printf_i+0xfc>
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	f043 0320 	orr.w	r3, r3, #32
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	2378      	movs	r3, #120	; 0x78
 8002f42:	4828      	ldr	r0, [pc, #160]	; (8002fe4 <_printf_i+0x248>)
 8002f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f48:	e7e3      	b.n	8002f12 <_printf_i+0x176>
 8002f4a:	065e      	lsls	r6, r3, #25
 8002f4c:	bf48      	it	mi
 8002f4e:	b2ad      	uxthmi	r5, r5
 8002f50:	e7e6      	b.n	8002f20 <_printf_i+0x184>
 8002f52:	4616      	mov	r6, r2
 8002f54:	e7bb      	b.n	8002ece <_printf_i+0x132>
 8002f56:	680b      	ldr	r3, [r1, #0]
 8002f58:	6826      	ldr	r6, [r4, #0]
 8002f5a:	1d1d      	adds	r5, r3, #4
 8002f5c:	6960      	ldr	r0, [r4, #20]
 8002f5e:	600d      	str	r5, [r1, #0]
 8002f60:	0635      	lsls	r5, r6, #24
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	d501      	bpl.n	8002f6a <_printf_i+0x1ce>
 8002f66:	6018      	str	r0, [r3, #0]
 8002f68:	e002      	b.n	8002f70 <_printf_i+0x1d4>
 8002f6a:	0671      	lsls	r1, r6, #25
 8002f6c:	d5fb      	bpl.n	8002f66 <_printf_i+0x1ca>
 8002f6e:	8018      	strh	r0, [r3, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	4616      	mov	r6, r2
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	e7ba      	b.n	8002eee <_printf_i+0x152>
 8002f78:	680b      	ldr	r3, [r1, #0]
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	600a      	str	r2, [r1, #0]
 8002f7e:	681e      	ldr	r6, [r3, #0]
 8002f80:	2100      	movs	r1, #0
 8002f82:	4630      	mov	r0, r6
 8002f84:	6862      	ldr	r2, [r4, #4]
 8002f86:	f000 f82f 	bl	8002fe8 <memchr>
 8002f8a:	b108      	cbz	r0, 8002f90 <_printf_i+0x1f4>
 8002f8c:	1b80      	subs	r0, r0, r6
 8002f8e:	6060      	str	r0, [r4, #4]
 8002f90:	6863      	ldr	r3, [r4, #4]
 8002f92:	6123      	str	r3, [r4, #16]
 8002f94:	2300      	movs	r3, #0
 8002f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f9a:	e7a8      	b.n	8002eee <_printf_i+0x152>
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	47d0      	blx	sl
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d0ab      	beq.n	8002f02 <_printf_i+0x166>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	079b      	lsls	r3, r3, #30
 8002fae:	d413      	bmi.n	8002fd8 <_printf_i+0x23c>
 8002fb0:	68e0      	ldr	r0, [r4, #12]
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	bfb8      	it	lt
 8002fb8:	4618      	movlt	r0, r3
 8002fba:	e7a4      	b.n	8002f06 <_printf_i+0x16a>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	47d0      	blx	sl
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d09b      	beq.n	8002f02 <_printf_i+0x166>
 8002fca:	3501      	adds	r5, #1
 8002fcc:	68e3      	ldr	r3, [r4, #12]
 8002fce:	9903      	ldr	r1, [sp, #12]
 8002fd0:	1a5b      	subs	r3, r3, r1
 8002fd2:	42ab      	cmp	r3, r5
 8002fd4:	dcf2      	bgt.n	8002fbc <_printf_i+0x220>
 8002fd6:	e7eb      	b.n	8002fb0 <_printf_i+0x214>
 8002fd8:	2500      	movs	r5, #0
 8002fda:	f104 0619 	add.w	r6, r4, #25
 8002fde:	e7f5      	b.n	8002fcc <_printf_i+0x230>
 8002fe0:	080032cd 	.word	0x080032cd
 8002fe4:	080032de 	.word	0x080032de

08002fe8 <memchr>:
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b510      	push	{r4, lr}
 8002fec:	b2c9      	uxtb	r1, r1
 8002fee:	4402      	add	r2, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	d101      	bne.n	8002ffa <memchr+0x12>
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	e003      	b.n	8003002 <memchr+0x1a>
 8002ffa:	7804      	ldrb	r4, [r0, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	428c      	cmp	r4, r1
 8003000:	d1f6      	bne.n	8002ff0 <memchr+0x8>
 8003002:	bd10      	pop	{r4, pc}

08003004 <memcpy>:
 8003004:	440a      	add	r2, r1
 8003006:	4291      	cmp	r1, r2
 8003008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800300c:	d100      	bne.n	8003010 <memcpy+0xc>
 800300e:	4770      	bx	lr
 8003010:	b510      	push	{r4, lr}
 8003012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003016:	4291      	cmp	r1, r2
 8003018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800301c:	d1f9      	bne.n	8003012 <memcpy+0xe>
 800301e:	bd10      	pop	{r4, pc}

08003020 <memmove>:
 8003020:	4288      	cmp	r0, r1
 8003022:	b510      	push	{r4, lr}
 8003024:	eb01 0402 	add.w	r4, r1, r2
 8003028:	d902      	bls.n	8003030 <memmove+0x10>
 800302a:	4284      	cmp	r4, r0
 800302c:	4623      	mov	r3, r4
 800302e:	d807      	bhi.n	8003040 <memmove+0x20>
 8003030:	1e43      	subs	r3, r0, #1
 8003032:	42a1      	cmp	r1, r4
 8003034:	d008      	beq.n	8003048 <memmove+0x28>
 8003036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800303a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800303e:	e7f8      	b.n	8003032 <memmove+0x12>
 8003040:	4601      	mov	r1, r0
 8003042:	4402      	add	r2, r0
 8003044:	428a      	cmp	r2, r1
 8003046:	d100      	bne.n	800304a <memmove+0x2a>
 8003048:	bd10      	pop	{r4, pc}
 800304a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800304e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003052:	e7f7      	b.n	8003044 <memmove+0x24>

08003054 <_free_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4605      	mov	r5, r0
 8003058:	2900      	cmp	r1, #0
 800305a:	d043      	beq.n	80030e4 <_free_r+0x90>
 800305c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003060:	1f0c      	subs	r4, r1, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	bfb8      	it	lt
 8003066:	18e4      	addlt	r4, r4, r3
 8003068:	f000 f8d0 	bl	800320c <__malloc_lock>
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <_free_r+0x94>)
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	4610      	mov	r0, r2
 8003072:	b933      	cbnz	r3, 8003082 <_free_r+0x2e>
 8003074:	6063      	str	r3, [r4, #4]
 8003076:	6014      	str	r4, [r2, #0]
 8003078:	4628      	mov	r0, r5
 800307a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307e:	f000 b8cb 	b.w	8003218 <__malloc_unlock>
 8003082:	42a3      	cmp	r3, r4
 8003084:	d90a      	bls.n	800309c <_free_r+0x48>
 8003086:	6821      	ldr	r1, [r4, #0]
 8003088:	1862      	adds	r2, r4, r1
 800308a:	4293      	cmp	r3, r2
 800308c:	bf01      	itttt	eq
 800308e:	681a      	ldreq	r2, [r3, #0]
 8003090:	685b      	ldreq	r3, [r3, #4]
 8003092:	1852      	addeq	r2, r2, r1
 8003094:	6022      	streq	r2, [r4, #0]
 8003096:	6063      	str	r3, [r4, #4]
 8003098:	6004      	str	r4, [r0, #0]
 800309a:	e7ed      	b.n	8003078 <_free_r+0x24>
 800309c:	461a      	mov	r2, r3
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	b10b      	cbz	r3, 80030a6 <_free_r+0x52>
 80030a2:	42a3      	cmp	r3, r4
 80030a4:	d9fa      	bls.n	800309c <_free_r+0x48>
 80030a6:	6811      	ldr	r1, [r2, #0]
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	42a0      	cmp	r0, r4
 80030ac:	d10b      	bne.n	80030c6 <_free_r+0x72>
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	4401      	add	r1, r0
 80030b2:	1850      	adds	r0, r2, r1
 80030b4:	4283      	cmp	r3, r0
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	d1de      	bne.n	8003078 <_free_r+0x24>
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4401      	add	r1, r0
 80030c0:	6011      	str	r1, [r2, #0]
 80030c2:	6053      	str	r3, [r2, #4]
 80030c4:	e7d8      	b.n	8003078 <_free_r+0x24>
 80030c6:	d902      	bls.n	80030ce <_free_r+0x7a>
 80030c8:	230c      	movs	r3, #12
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	e7d4      	b.n	8003078 <_free_r+0x24>
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	1821      	adds	r1, r4, r0
 80030d2:	428b      	cmp	r3, r1
 80030d4:	bf01      	itttt	eq
 80030d6:	6819      	ldreq	r1, [r3, #0]
 80030d8:	685b      	ldreq	r3, [r3, #4]
 80030da:	1809      	addeq	r1, r1, r0
 80030dc:	6021      	streq	r1, [r4, #0]
 80030de:	6063      	str	r3, [r4, #4]
 80030e0:	6054      	str	r4, [r2, #4]
 80030e2:	e7c9      	b.n	8003078 <_free_r+0x24>
 80030e4:	bd38      	pop	{r3, r4, r5, pc}
 80030e6:	bf00      	nop
 80030e8:	200000c4 	.word	0x200000c4

080030ec <_malloc_r>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	1ccd      	adds	r5, r1, #3
 80030f0:	f025 0503 	bic.w	r5, r5, #3
 80030f4:	3508      	adds	r5, #8
 80030f6:	2d0c      	cmp	r5, #12
 80030f8:	bf38      	it	cc
 80030fa:	250c      	movcc	r5, #12
 80030fc:	2d00      	cmp	r5, #0
 80030fe:	4606      	mov	r6, r0
 8003100:	db01      	blt.n	8003106 <_malloc_r+0x1a>
 8003102:	42a9      	cmp	r1, r5
 8003104:	d903      	bls.n	800310e <_malloc_r+0x22>
 8003106:	230c      	movs	r3, #12
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	2000      	movs	r0, #0
 800310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310e:	f000 f87d 	bl	800320c <__malloc_lock>
 8003112:	4921      	ldr	r1, [pc, #132]	; (8003198 <_malloc_r+0xac>)
 8003114:	680a      	ldr	r2, [r1, #0]
 8003116:	4614      	mov	r4, r2
 8003118:	b99c      	cbnz	r4, 8003142 <_malloc_r+0x56>
 800311a:	4f20      	ldr	r7, [pc, #128]	; (800319c <_malloc_r+0xb0>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b923      	cbnz	r3, 800312a <_malloc_r+0x3e>
 8003120:	4621      	mov	r1, r4
 8003122:	4630      	mov	r0, r6
 8003124:	f000 f862 	bl	80031ec <_sbrk_r>
 8003128:	6038      	str	r0, [r7, #0]
 800312a:	4629      	mov	r1, r5
 800312c:	4630      	mov	r0, r6
 800312e:	f000 f85d 	bl	80031ec <_sbrk_r>
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	d123      	bne.n	800317e <_malloc_r+0x92>
 8003136:	230c      	movs	r3, #12
 8003138:	4630      	mov	r0, r6
 800313a:	6033      	str	r3, [r6, #0]
 800313c:	f000 f86c 	bl	8003218 <__malloc_unlock>
 8003140:	e7e3      	b.n	800310a <_malloc_r+0x1e>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	1b5b      	subs	r3, r3, r5
 8003146:	d417      	bmi.n	8003178 <_malloc_r+0x8c>
 8003148:	2b0b      	cmp	r3, #11
 800314a:	d903      	bls.n	8003154 <_malloc_r+0x68>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	441c      	add	r4, r3
 8003150:	6025      	str	r5, [r4, #0]
 8003152:	e004      	b.n	800315e <_malloc_r+0x72>
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	42a2      	cmp	r2, r4
 8003158:	bf0c      	ite	eq
 800315a:	600b      	streq	r3, [r1, #0]
 800315c:	6053      	strne	r3, [r2, #4]
 800315e:	4630      	mov	r0, r6
 8003160:	f000 f85a 	bl	8003218 <__malloc_unlock>
 8003164:	f104 000b 	add.w	r0, r4, #11
 8003168:	1d23      	adds	r3, r4, #4
 800316a:	f020 0007 	bic.w	r0, r0, #7
 800316e:	1ac2      	subs	r2, r0, r3
 8003170:	d0cc      	beq.n	800310c <_malloc_r+0x20>
 8003172:	1a1b      	subs	r3, r3, r0
 8003174:	50a3      	str	r3, [r4, r2]
 8003176:	e7c9      	b.n	800310c <_malloc_r+0x20>
 8003178:	4622      	mov	r2, r4
 800317a:	6864      	ldr	r4, [r4, #4]
 800317c:	e7cc      	b.n	8003118 <_malloc_r+0x2c>
 800317e:	1cc4      	adds	r4, r0, #3
 8003180:	f024 0403 	bic.w	r4, r4, #3
 8003184:	42a0      	cmp	r0, r4
 8003186:	d0e3      	beq.n	8003150 <_malloc_r+0x64>
 8003188:	1a21      	subs	r1, r4, r0
 800318a:	4630      	mov	r0, r6
 800318c:	f000 f82e 	bl	80031ec <_sbrk_r>
 8003190:	3001      	adds	r0, #1
 8003192:	d1dd      	bne.n	8003150 <_malloc_r+0x64>
 8003194:	e7cf      	b.n	8003136 <_malloc_r+0x4a>
 8003196:	bf00      	nop
 8003198:	200000c4 	.word	0x200000c4
 800319c:	200000c8 	.word	0x200000c8

080031a0 <_realloc_r>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	4607      	mov	r7, r0
 80031a4:	4614      	mov	r4, r2
 80031a6:	460e      	mov	r6, r1
 80031a8:	b921      	cbnz	r1, 80031b4 <_realloc_r+0x14>
 80031aa:	4611      	mov	r1, r2
 80031ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031b0:	f7ff bf9c 	b.w	80030ec <_malloc_r>
 80031b4:	b922      	cbnz	r2, 80031c0 <_realloc_r+0x20>
 80031b6:	f7ff ff4d 	bl	8003054 <_free_r>
 80031ba:	4625      	mov	r5, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c0:	f000 f830 	bl	8003224 <_malloc_usable_size_r>
 80031c4:	42a0      	cmp	r0, r4
 80031c6:	d20f      	bcs.n	80031e8 <_realloc_r+0x48>
 80031c8:	4621      	mov	r1, r4
 80031ca:	4638      	mov	r0, r7
 80031cc:	f7ff ff8e 	bl	80030ec <_malloc_r>
 80031d0:	4605      	mov	r5, r0
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d0f2      	beq.n	80031bc <_realloc_r+0x1c>
 80031d6:	4631      	mov	r1, r6
 80031d8:	4622      	mov	r2, r4
 80031da:	f7ff ff13 	bl	8003004 <memcpy>
 80031de:	4631      	mov	r1, r6
 80031e0:	4638      	mov	r0, r7
 80031e2:	f7ff ff37 	bl	8003054 <_free_r>
 80031e6:	e7e9      	b.n	80031bc <_realloc_r+0x1c>
 80031e8:	4635      	mov	r5, r6
 80031ea:	e7e7      	b.n	80031bc <_realloc_r+0x1c>

080031ec <_sbrk_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	2300      	movs	r3, #0
 80031f0:	4d05      	ldr	r5, [pc, #20]	; (8003208 <_sbrk_r+0x1c>)
 80031f2:	4604      	mov	r4, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	602b      	str	r3, [r5, #0]
 80031f8:	f7fd fa44 	bl	8000684 <_sbrk>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_sbrk_r+0x1a>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	b103      	cbz	r3, 8003206 <_sbrk_r+0x1a>
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	20000128 	.word	0x20000128

0800320c <__malloc_lock>:
 800320c:	4801      	ldr	r0, [pc, #4]	; (8003214 <__malloc_lock+0x8>)
 800320e:	f000 b811 	b.w	8003234 <__retarget_lock_acquire_recursive>
 8003212:	bf00      	nop
 8003214:	20000130 	.word	0x20000130

08003218 <__malloc_unlock>:
 8003218:	4801      	ldr	r0, [pc, #4]	; (8003220 <__malloc_unlock+0x8>)
 800321a:	f000 b80c 	b.w	8003236 <__retarget_lock_release_recursive>
 800321e:	bf00      	nop
 8003220:	20000130 	.word	0x20000130

08003224 <_malloc_usable_size_r>:
 8003224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003228:	1f18      	subs	r0, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfbc      	itt	lt
 800322e:	580b      	ldrlt	r3, [r1, r0]
 8003230:	18c0      	addlt	r0, r0, r3
 8003232:	4770      	bx	lr

08003234 <__retarget_lock_acquire_recursive>:
 8003234:	4770      	bx	lr

08003236 <__retarget_lock_release_recursive>:
 8003236:	4770      	bx	lr

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
