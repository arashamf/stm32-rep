
f103_pwm_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800404c  0800404c  00020390  2**0
                  CONTENTS
  4 .ARM          00000000  0800404c  0800404c  00020390  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800404c  0800404c  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  08004054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000390  080043e4  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  080043e4  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc7a  00000000  00000000  000203b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  0002c033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002dc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b76  00000000  00000000  0002f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3ba  00000000  00000000  00046f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aaa1  00000000  00000000  000532f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ddd99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  000dddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000390 	.word	0x20000390
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fc4 	.word	0x08003fc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000394 	.word	0x20000394
 8000148:	08003fc4 	.word	0x08003fc4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PWM_PulseFinishedCallback>:
        }
 }*/

//--------------------------------------колбэк прерывания от DMA таймера 1--------------------------------------------------//
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwm_arr, 200);
 8000164:	23c8      	movs	r3, #200	; 0xc8
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000168:	2100      	movs	r1, #0
 800016a:	480b      	ldr	r0, [pc, #44]	; (8000198 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800016c:	f001 fe6e 	bl	8001e4c <HAL_TIM_PWM_Start_DMA>
    sprintf (UART_msg_TX,"next\r\n");
 8000170:	490a      	ldr	r1, [pc, #40]	; (800019c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000172:	480b      	ldr	r0, [pc, #44]	; (80001a0 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000174:	f003 faec 	bl	8003750 <siprintf>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	4906      	ldr	r1, [pc, #24]	; (80001a0 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000186:	4807      	ldr	r0, [pc, #28]	; (80001a4 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000188:	f002 fe00 	bl	8002d8c <HAL_UART_Transmit_DMA>
}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000000 	.word	0x20000000
 8000198:	200004c0 	.word	0x200004c0
 800019c:	08003fdc 	.word	0x08003fdc
 80001a0:	200003ac 	.word	0x200003ac
 80001a4:	2000047c 	.word	0x2000047c

080001a8 <HAL_UART_TxCpltCallback>:

//----------------------------------------------------колбэк прерывания от UART 1------------------------------------//
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
          if(huart == &huart1)
          {

          }
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
	...

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c0:	f000 fb9a 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c4:	f000 f83a 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c8:	f000 f96e 	bl	80004a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001cc:	f000 f946 	bl	800045c <MX_DMA_Init>
  MX_TIM1_Init();
 80001d0:	f000 f87a 	bl	80002c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80001d4:	f000 f918 	bl	8000408 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwm_arr, 200); //запуск таймера 1 для генерации Ш�?Ма через DMA
 80001d8:	23c8      	movs	r3, #200	; 0xc8
 80001da:	4a11      	ldr	r2, [pc, #68]	; (8000220 <main+0x64>)
 80001dc:	2100      	movs	r1, #0
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <main+0x68>)
 80001e0:	f001 fe34 	bl	8001e4c <HAL_TIM_PWM_Start_DMA>
  sprintf (UART_msg_TX,"pwm_start\r\n");
 80001e4:	4910      	ldr	r1, [pc, #64]	; (8000228 <main+0x6c>)
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <main+0x70>)
 80001e8:	f003 fab2 	bl	8003750 <siprintf>
  HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART_msg_TX, strlen(UART_msg_TX));
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x70>)
 80001ee:	f7ff ffad 	bl	800014c <strlen>
 80001f2:	4603      	mov	r3, r0
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	461a      	mov	r2, r3
 80001f8:	490c      	ldr	r1, [pc, #48]	; (800022c <main+0x70>)
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x74>)
 80001fc:	f002 fdc6 	bl	8002d8c <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //помигаем
 8000200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0x78>)
 8000206:	f001 f945 	bl	8001494 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800020a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x7c>)
 8000210:	f001 f940 	bl	8001494 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 fbd0 	bl	80009bc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //помигаем
 800021c:	e7f0      	b.n	8000200 <main+0x44>
 800021e:	bf00      	nop
 8000220:	20000000 	.word	0x20000000
 8000224:	200004c0 	.word	0x200004c0
 8000228:	08003fe4 	.word	0x08003fe4
 800022c:	200003ac 	.word	0x200003ac
 8000230:	2000047c 	.word	0x2000047c
 8000234:	40011000 	.word	0x40011000
 8000238:	40010800 	.word	0x40010800

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fa78 	bl	8003740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800026c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800027c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f91e 	bl	80014c8 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000292:	f000 f955 	bl	8000540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fb8a 	bl	80019c8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f941 	bl	8000540 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b096      	sub	sp, #88	; 0x58
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2220      	movs	r2, #32
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fa1d 	bl	8003740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000306:	4b3e      	ldr	r3, [pc, #248]	; (8000400 <MX_TIM1_Init+0x138>)
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <MX_TIM1_Init+0x13c>)
 800030a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 800030c:	4b3c      	ldr	r3, [pc, #240]	; (8000400 <MX_TIM1_Init+0x138>)
 800030e:	229f      	movs	r2, #159	; 0x9f
 8000310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b3b      	ldr	r3, [pc, #236]	; (8000400 <MX_TIM1_Init+0x138>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000318:	4b39      	ldr	r3, [pc, #228]	; (8000400 <MX_TIM1_Init+0x138>)
 800031a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800031e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b37      	ldr	r3, [pc, #220]	; (8000400 <MX_TIM1_Init+0x138>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000326:	4b36      	ldr	r3, [pc, #216]	; (8000400 <MX_TIM1_Init+0x138>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <MX_TIM1_Init+0x138>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000332:	4833      	ldr	r0, [pc, #204]	; (8000400 <MX_TIM1_Init+0x138>)
 8000334:	f001 fce2 	bl	8001cfc <HAL_TIM_Base_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800033e:	f000 f8ff 	bl	8000540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800034c:	4619      	mov	r1, r3
 800034e:	482c      	ldr	r0, [pc, #176]	; (8000400 <MX_TIM1_Init+0x138>)
 8000350:	f001 ffd4 	bl	80022fc <HAL_TIM_ConfigClockSource>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800035a:	f000 f8f1 	bl	8000540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800035e:	4828      	ldr	r0, [pc, #160]	; (8000400 <MX_TIM1_Init+0x138>)
 8000360:	f001 fd1b 	bl	8001d9a <HAL_TIM_PWM_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800036a:	f000 f8e9 	bl	8000540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036e:	2300      	movs	r3, #0
 8000370:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037a:	4619      	mov	r1, r3
 800037c:	4820      	ldr	r0, [pc, #128]	; (8000400 <MX_TIM1_Init+0x138>)
 800037e:	f002 fc09 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000388:	f000 f8da 	bl	8000540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038c:	2360      	movs	r3, #96	; 0x60
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000394:	2300      	movs	r3, #0
 8000396:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003a0:	2300      	movs	r3, #0
 80003a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ac:	2200      	movs	r2, #0
 80003ae:	4619      	mov	r1, r3
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <MX_TIM1_Init+0x138>)
 80003b2:	f001 fee5 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003bc:	f000 f8c0 	bl	8000540 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4807      	ldr	r0, [pc, #28]	; (8000400 <MX_TIM1_Init+0x138>)
 80003e4:	f002 fc34 	bl	8002c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80003ee:	f000 f8a7 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <MX_TIM1_Init+0x138>)
 80003f4:	f000 f926 	bl	8000644 <HAL_TIM_MspPostInit>

}
 80003f8:	bf00      	nop
 80003fa:	3758      	adds	r7, #88	; 0x58
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200004c0 	.word	0x200004c0
 8000404:	40012c00 	.word	0x40012c00

08000408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_USART1_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000414:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_USART1_UART_Init+0x4c>)
 8000440:	f002 fc57 	bl	8002cf2 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044a:	f000 f879 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000047c 	.word	0x2000047c
 8000458:	40013800 	.word	0x40013800

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_DMA_Init+0x48>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <MX_DMA_Init+0x48>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <MX_DMA_Init+0x48>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200c      	movs	r0, #12
 8000480:	f000 fb97 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000484:	200c      	movs	r0, #12
 8000486:	f000 fbb0 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200e      	movs	r0, #14
 8000490:	f000 fb8f 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000494:	200e      	movs	r0, #14
 8000496:	f000 fba8 	bl	8000bea <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <MX_GPIO_Init+0x90>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MX_GPIO_Init+0x90>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <MX_GPIO_Init+0x90>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_GPIO_Init+0x94>)
 800050c:	f000 ffaa 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0x94>)
 800052a:	f000 fe17 	bl	800115c <HAL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>
	...

0800054c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_MspInit+0x5c>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <HAL_MspInit+0x5c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x5c>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_MspInit+0x5c>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000574:	61d3      	str	r3, [r2, #28]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x60>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_MspInit+0x60>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010000 	.word	0x40010000

080005b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <HAL_TIM_Base_MspInit+0x84>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d133      	bne.n	800062a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <HAL_TIM_Base_MspInit+0x88>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <HAL_TIM_Base_MspInit+0x88>)
 80005c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_TIM_Base_MspInit+0x88>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_TIM_Base_MspInit+0x90>)
 80005de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 80005fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000600:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 8000610:	f000 fb06 	bl	8000c20 <HAL_DMA_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800061a:	f7ff ff91 	bl	8000540 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <HAL_TIM_Base_MspInit+0x8c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40021000 	.word	0x40021000
 800063c:	200003f4 	.word	0x200003f4
 8000640:	4002001c 	.word	0x4002001c

08000644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <HAL_TIM_MspPostInit+0x5c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d118      	bne.n	8000696 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_TIM_MspPostInit+0x60>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_TIM_MspPostInit+0x60>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_TIM_MspPostInit+0x60>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2302      	movs	r3, #2
 8000688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_TIM_MspPostInit+0x64>)
 8000692:	f000 fd63 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012c00 	.word	0x40012c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800

080006ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_UART_MspInit+0xe8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d15f      	bne.n	800078c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006cc:	4b32      	ldr	r3, [pc, #200]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a31      	ldr	r2, [pc, #196]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <HAL_UART_MspInit+0xec>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4822      	ldr	r0, [pc, #136]	; (800079c <HAL_UART_MspInit+0xf0>)
 8000712:	f000 fd23 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <HAL_UART_MspInit+0xf0>)
 800072c:	f000 fd16 	bl	800115c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <HAL_UART_MspInit+0xf8>)
 8000734:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000738:	2210      	movs	r2, #16
 800073a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000762:	f000 fa5d 	bl	8000c20 <HAL_DMA_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800076c:	f7ff fee8 	bl	8000540 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_UART_MspInit+0xf4>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2025      	movs	r0, #37	; 0x25
 8000782:	f000 fa16 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000786:	2025      	movs	r0, #37	; 0x25
 8000788:	f000 fa2f 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40013800 	.word	0x40013800
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800
 80007a0:	20000438 	.word	0x20000438
 80007a4:	40020044 	.word	0x40020044

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f8c9 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <DMA1_Channel2_IRQHandler+0x10>)
 80007fe:	f000 fb79 	bl	8000ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200003f4 	.word	0x200003f4

0800080c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <DMA1_Channel4_IRQHandler+0x10>)
 8000812:	f000 fb6f 	bl	8000ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000438 	.word	0x20000438

08000820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USART1_IRQHandler+0x10>)
 8000826:	f002 fb1d 	bl	8002e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000047c 	.word	0x2000047c

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f002 ff42 	bl	80036ec <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20005000 	.word	0x20005000
 8000894:	00000400 	.word	0x00000400
 8000898:	200003e8 	.word	0x200003e8
 800089c:	20000520 	.word	0x20000520

080008a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d2:	f7ff ffe5 	bl	80008a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f002 ff0f 	bl	80036f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff fc6f 	bl	80001bc <main>
  bx lr
 80008de:	4770      	bx	lr
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 80008e8:	08004054 	.word	0x08004054
  ldr r2, =_sbss
 80008ec:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80008f0:	2000051c 	.word	0x2000051c

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x28>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f947 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff fe1a 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f95f 	bl	8000c06 <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f927 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000320 	.word	0x20000320
 800097c:	20000328 	.word	0x20000328
 8000980:	20000324 	.word	0x20000324

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_IncTick+0x20>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000328 	.word	0x20000328
 80009a4:	20000508 	.word	0x20000508

080009a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000508 	.word	0x20000508

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000328 	.word	0x20000328

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <__NVIC_EnableIRQ+0x34>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff2d 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff42 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff35 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e043      	b.n	8000cbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_DMA_Init+0xa8>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <HAL_DMA_Init+0xac>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_DMA_Init+0xb0>)
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2202      	movs	r2, #2
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	bffdfff8 	.word	0xbffdfff8
 8000ccc:	cccccccd 	.word	0xcccccccd
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <HAL_DMA_Start_IT+0x20>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e04a      	b.n	8000d8a <HAL_DMA_Start_IT+0xb6>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d13a      	bne.n	8000d7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2202      	movs	r2, #2
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2200      	movs	r2, #0
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f9e8 	bl	8001100 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d008      	beq.n	8000d4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 020e 	orr.w	r2, r2, #14
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e00f      	b.n	8000d6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0204 	bic.w	r2, r2, #4
 8000d58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 020a 	orr.w	r2, r2, #10
 8000d68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0201 	orr.w	r2, r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e005      	b.n	8000d88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d84:	2302      	movs	r3, #2
 8000d86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d008      	beq.n	8000dba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e020      	b.n	8000dfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d005      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2204      	movs	r2, #4
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e051      	b.n	8000ece <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 020e 	bic.w	r2, r2, #14
 8000e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0201 	bic.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_DMA_Abort_IT+0xd0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d029      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xa0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_DMA_Abort_IT+0xd4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d022      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0x9c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_DMA_Abort_IT+0xd8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d01a      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x96>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_DMA_Abort_IT+0xdc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d012      	beq.n	8000e98 <HAL_DMA_Abort_IT+0x90>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_DMA_Abort_IT+0xe0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d00a      	beq.n	8000e92 <HAL_DMA_Abort_IT+0x8a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_DMA_Abort_IT+0xe4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d102      	bne.n	8000e8c <HAL_DMA_Abort_IT+0x84>
 8000e86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e8a:	e00e      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e90:	e00b      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e96:	e008      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	e005      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	e002      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	e000      	b.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_DMA_Abort_IT+0xe8>)
 8000eac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	4798      	blx	r3
    } 
  }
  return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020008 	.word	0x40020008
 8000edc:	4002001c 	.word	0x4002001c
 8000ee0:	40020030 	.word	0x40020030
 8000ee4:	40020044 	.word	0x40020044
 8000ee8:	40020058 	.word	0x40020058
 8000eec:	4002006c 	.word	0x4002006c
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	2204      	movs	r2, #4
 8000f12:	409a      	lsls	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d04f      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xc8>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d04a      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a66      	ldr	r2, [pc, #408]	; (80010e4 <HAL_DMA_IRQHandler+0x1f0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d029      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0xae>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <HAL_DMA_IRQHandler+0x1f4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_IRQHandler+0xaa>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_DMA_IRQHandler+0x1f8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01a      	beq.n	8000f98 <HAL_DMA_IRQHandler+0xa4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a62      	ldr	r2, [pc, #392]	; (80010f0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d012      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x9e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a60      	ldr	r2, [pc, #384]	; (80010f4 <HAL_DMA_IRQHandler+0x200>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00a      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x98>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	; (80010f8 <HAL_DMA_IRQHandler+0x204>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_DMA_IRQHandler+0x92>
 8000f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f84:	e00e      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000f86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f8a:	e00b      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000f8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f90:	e008      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f96:	e005      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9c:	e002      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_IRQHandler+0xb0>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_DMA_IRQHandler+0x208>)
 8000fa6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8094 	beq.w	80010da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fba:	e08e      	b.n	80010da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d056      	beq.n	800107a <HAL_DMA_IRQHandler+0x186>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d051      	beq.n	800107a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020a 	bic.w	r2, r2, #10
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HAL_DMA_IRQHandler+0x1f0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d029      	beq.n	800105a <HAL_DMA_IRQHandler+0x166>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <HAL_DMA_IRQHandler+0x1f4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d022      	beq.n	8001056 <HAL_DMA_IRQHandler+0x162>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a35      	ldr	r2, [pc, #212]	; (80010ec <HAL_DMA_IRQHandler+0x1f8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x15c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a34      	ldr	r2, [pc, #208]	; (80010f0 <HAL_DMA_IRQHandler+0x1fc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d012      	beq.n	800104a <HAL_DMA_IRQHandler+0x156>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_DMA_IRQHandler+0x200>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00a      	beq.n	8001044 <HAL_DMA_IRQHandler+0x150>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_DMA_IRQHandler+0x204>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d102      	bne.n	800103e <HAL_DMA_IRQHandler+0x14a>
 8001038:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800103c:	e00e      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 800103e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001042:	e00b      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 8001044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001048:	e008      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	e005      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 8001050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001054:	e002      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 8001056:	2320      	movs	r3, #32
 8001058:	e000      	b.n	800105c <HAL_DMA_IRQHandler+0x168>
 800105a:	2302      	movs	r3, #2
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_DMA_IRQHandler+0x208>)
 800105e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	2b00      	cmp	r3, #0
 800106e:	d034      	beq.n	80010da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001078:	e02f      	b.n	80010da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2208      	movs	r2, #8
 8001080:	409a      	lsls	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d028      	beq.n	80010dc <HAL_DMA_IRQHandler+0x1e8>
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b00      	cmp	r3, #0
 8001092:	d023      	beq.n	80010dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 020e 	bic.w	r2, r2, #14
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
    }
  }
  return;
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020008 	.word	0x40020008
 80010e8:	4002001c 	.word	0x4002001c
 80010ec:	40020030 	.word	0x40020030
 80010f0:	40020044 	.word	0x40020044
 80010f4:	40020058 	.word	0x40020058
 80010f8:	4002006c 	.word	0x4002006c
 80010fc:	40020000 	.word	0x40020000

08001100 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d108      	bne.n	8001140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800113e:	e007      	b.n	8001150 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	60da      	str	r2, [r3, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e169      	b.n	8001444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001170:	2201      	movs	r2, #1
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 8158 	bne.w	800143e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4a9a      	ldr	r2, [pc, #616]	; (80013fc <HAL_GPIO_Init+0x2a0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d05e      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 8001198:	4a98      	ldr	r2, [pc, #608]	; (80013fc <HAL_GPIO_Init+0x2a0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d875      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 800119e:	4a98      	ldr	r2, [pc, #608]	; (8001400 <HAL_GPIO_Init+0x2a4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d058      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011a4:	4a96      	ldr	r2, [pc, #600]	; (8001400 <HAL_GPIO_Init+0x2a4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d86f      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011aa:	4a96      	ldr	r2, [pc, #600]	; (8001404 <HAL_GPIO_Init+0x2a8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d052      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011b0:	4a94      	ldr	r2, [pc, #592]	; (8001404 <HAL_GPIO_Init+0x2a8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d869      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011b6:	4a94      	ldr	r2, [pc, #592]	; (8001408 <HAL_GPIO_Init+0x2ac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d04c      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011bc:	4a92      	ldr	r2, [pc, #584]	; (8001408 <HAL_GPIO_Init+0x2ac>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d863      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011c2:	4a92      	ldr	r2, [pc, #584]	; (800140c <HAL_GPIO_Init+0x2b0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d046      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011c8:	4a90      	ldr	r2, [pc, #576]	; (800140c <HAL_GPIO_Init+0x2b0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d85d      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d82a      	bhi.n	8001228 <HAL_GPIO_Init+0xcc>
 80011d2:	2b12      	cmp	r3, #18
 80011d4:	d859      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <HAL_GPIO_Init+0x80>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001231 	.word	0x08001231
 80011e4:	08001243 	.word	0x08001243
 80011e8:	08001285 	.word	0x08001285
 80011ec:	0800128b 	.word	0x0800128b
 80011f0:	0800128b 	.word	0x0800128b
 80011f4:	0800128b 	.word	0x0800128b
 80011f8:	0800128b 	.word	0x0800128b
 80011fc:	0800128b 	.word	0x0800128b
 8001200:	0800128b 	.word	0x0800128b
 8001204:	0800128b 	.word	0x0800128b
 8001208:	0800128b 	.word	0x0800128b
 800120c:	0800128b 	.word	0x0800128b
 8001210:	0800128b 	.word	0x0800128b
 8001214:	0800128b 	.word	0x0800128b
 8001218:	0800128b 	.word	0x0800128b
 800121c:	0800128b 	.word	0x0800128b
 8001220:	08001239 	.word	0x08001239
 8001224:	0800124d 	.word	0x0800124d
 8001228:	4a79      	ldr	r2, [pc, #484]	; (8001410 <HAL_GPIO_Init+0x2b4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800122e:	e02c      	b.n	800128a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e029      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	3304      	adds	r3, #4
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e024      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	3308      	adds	r3, #8
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e01f      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	330c      	adds	r3, #12
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e01a      	b.n	800128c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125e:	2304      	movs	r3, #4
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e013      	b.n	800128c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800126c:	2308      	movs	r3, #8
 800126e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	611a      	str	r2, [r3, #16]
          break;
 8001276:	e009      	b.n	800128c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001278:	2308      	movs	r3, #8
 800127a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	615a      	str	r2, [r3, #20]
          break;
 8001282:	e003      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x130>
          break;
 800128a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d801      	bhi.n	8001296 <HAL_GPIO_Init+0x13a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	e001      	b.n	800129a <HAL_GPIO_Init+0x13e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d802      	bhi.n	80012a8 <HAL_GPIO_Init+0x14c>
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x152>
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	3b08      	subs	r3, #8
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	210f      	movs	r1, #15
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	6a39      	ldr	r1, [r7, #32]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	431a      	orrs	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80b1 	beq.w	800143e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012dc:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x2b8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x2b8>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x2b8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a40      	ldr	r2, [pc, #256]	; (800141c <HAL_GPIO_Init+0x2c0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <HAL_GPIO_Init+0x1ec>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_GPIO_Init+0x2c4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00d      	beq.n	8001344 <HAL_GPIO_Init+0x1e8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d007      	beq.n	8001340 <HAL_GPIO_Init+0x1e4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3d      	ldr	r2, [pc, #244]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_GPIO_Init+0x1e0>
 8001338:	2303      	movs	r3, #3
 800133a:	e006      	b.n	800134a <HAL_GPIO_Init+0x1ee>
 800133c:	2304      	movs	r3, #4
 800133e:	e004      	b.n	800134a <HAL_GPIO_Init+0x1ee>
 8001340:	2302      	movs	r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x1ee>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_GPIO_Init+0x1ee>
 8001348:	2300      	movs	r3, #0
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	f002 0203 	and.w	r2, r2, #3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4093      	lsls	r3, r2
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800135a:	492f      	ldr	r1, [pc, #188]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_GPIO_Init+0x2d0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	492c      	ldr	r1, [pc, #176]	; (800142c <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_GPIO_Init+0x2d0>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	4928      	ldr	r1, [pc, #160]	; (800142c <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_GPIO_Init+0x2d0>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4922      	ldr	r1, [pc, #136]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	491e      	ldr	r1, [pc, #120]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	4918      	ldr	r1, [pc, #96]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	43db      	mvns	r3, r3
 80013da:	4914      	ldr	r1, [pc, #80]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013dc:	4013      	ands	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d021      	beq.n	8001430 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
 80013f8:	e021      	b.n	800143e <HAL_GPIO_Init+0x2e2>
 80013fa:	bf00      	nop
 80013fc:	10320000 	.word	0x10320000
 8001400:	10310000 	.word	0x10310000
 8001404:	10220000 	.word	0x10220000
 8001408:	10210000 	.word	0x10210000
 800140c:	10120000 	.word	0x10120000
 8001410:	10110000 	.word	0x10110000
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000
 800141c:	40010800 	.word	0x40010800
 8001420:	40010c00 	.word	0x40010c00
 8001424:	40011000 	.word	0x40011000
 8001428:	40011400 	.word	0x40011400
 800142c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	43db      	mvns	r3, r3
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <HAL_GPIO_Init+0x304>)
 800143a:	4013      	ands	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	3301      	adds	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	f47f ae8e 	bne.w	8001170 <HAL_GPIO_Init+0x14>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	372c      	adds	r7, #44	; 0x2c
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43d9      	mvns	r1, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	400b      	ands	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e26c      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e8:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00c      	beq.n	800150e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
 8001500:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x12c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d168      	bne.n	80015f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e246      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x76>
 8001530:	4b80      	ldr	r3, [pc, #512]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7f      	ldr	r2, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e02e      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b78      	ldr	r3, [pc, #480]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0xbc>
 800156a:	4b72      	ldr	r3, [pc, #456]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a71      	ldr	r2, [pc, #452]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001584:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a67      	ldr	r2, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fa00 	bl	80009a8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff f9fc 	bl	80009a8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1fa      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xe4>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f9ec 	bl	80009a8 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff f9e8 	bl	80009a8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1e6      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x10c>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1ba      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4939      	ldr	r1, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff f9a1 	bl	80009a8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff f99d 	bl	80009a8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e19b      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4927      	ldr	r1, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f980 	bl	80009a8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff f97c 	bl	80009a8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e17a      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d03a      	beq.n	800174c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d019      	beq.n	8001712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x274>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff f960 	bl	80009a8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff f95c 	bl	80009a8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e15a      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f000 fad8 	bl	8001cc0 <RCC_Delay>
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_OscConfig+0x274>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff f946 	bl	80009a8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	e00f      	b.n	8001740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f942 	bl	80009a8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d908      	bls.n	8001740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e140      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	42420000 	.word	0x42420000
 800173c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e9      	bne.n	8001720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a6 	beq.w	80018a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b97      	ldr	r3, [pc, #604]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a93      	ldr	r2, [pc, #588]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b91      	ldr	r3, [pc, #580]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff f903 	bl	80009a8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff f8ff 	bl	80009a8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0fd      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x312>
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	e02d      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x334>
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a75      	ldr	r2, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a72      	ldr	r2, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e01c      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x356>
 8001804:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a6c      	ldr	r2, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff f8b3 	bl	80009a8 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f8af 	bl	80009a8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0ab      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ee      	beq.n	8001846 <HAL_RCC_OscConfig+0x37e>
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff f89d 	bl	80009a8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f899 	bl	80009a8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e095      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8081 	beq.w	80019b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d061      	beq.n	8001980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d146      	bne.n	8001952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f86d 	bl	80009a8 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f869 	bl	80009a8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e067      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	492d      	ldr	r1, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a19      	ldr	r1, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	430b      	orrs	r3, r1
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f83d 	bl	80009a8 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f839 	bl	80009a8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e037      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x46a>
 8001950:	e02f      	b.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f826 	bl	80009a8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f822 	bl	80009a8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e020      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x498>
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e013      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42420060 	.word	0x42420060

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d0      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4965      	ldr	r1, [pc, #404]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d040      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e073      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06b      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4936      	ldr	r1, [pc, #216]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ff76 	bl	80009a8 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7fe ff72 	bl	80009a8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e053      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d210      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1cc>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fed4 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08004000 	.word	0x08004000
 8001b94:	20000320 	.word	0x20000320
 8001b98:	20000324 	.word	0x20000324

08001b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b490      	push	{r4, r7}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ba4:	1d3c      	adds	r4, r7, #4
 8001ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bac:	f240 2301 	movw	r3, #513	; 0x201
 8001bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x40>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x46>
 8001bda:	e02d      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bde:	623b      	str	r3, [r7, #32]
      break;
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	0c9b      	lsrs	r3, r3, #18
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bee:	4413      	add	r3, r2
 8001bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c5b      	lsrs	r3, r3, #17
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c0e:	4413      	add	r3, r2
 8001c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	fb02 f203 	mul.w	r2, r2, r3
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	623b      	str	r3, [r7, #32]
      break;
 8001c36:	e002      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc90      	pop	{r4, r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08003ff0 	.word	0x08003ff0
 8001c50:	40021000 	.word	0x40021000
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	003d0900 	.word	0x003d0900

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000320 	.word	0x20000320

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	f7ff fff2 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08004010 	.word	0x08004010

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0adb      	lsrs	r3, r3, #11
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08004010 	.word	0x08004010

08001cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <RCC_Delay+0x34>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <RCC_Delay+0x38>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0a5b      	lsrs	r3, r3, #9
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cdc:	bf00      	nop
  }
  while (Delay --);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	60fa      	str	r2, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f9      	bne.n	8001cdc <RCC_Delay+0x1c>
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000320 	.word	0x20000320
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e041      	b.n	8001d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fc44 	bl	80005b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f000 fc86 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e041      	b.n	8001e30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f839 	bl	8001e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f000 fc37 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_TIM_PWM_Start_DMA+0x28>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e022      	b.n	8001eba <HAL_TIM_PWM_Start_DMA+0x6e>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d109      	bne.n	8001e8e <HAL_TIM_PWM_Start_DMA+0x42>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	e015      	b.n	8001eba <HAL_TIM_PWM_Start_DMA+0x6e>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d109      	bne.n	8001ea8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_PWM_Start_DMA+0x6e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e14e      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_TIM_PWM_Start_DMA+0x90>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e022      	b.n	8001f22 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d109      	bne.n	8001ef6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	e015      	b.n	8001f22 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d109      	bne.n	8001f10 <HAL_TIM_PWM_Start_DMA+0xc4>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e008      	b.n	8001f22 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d104      	bne.n	8001f36 <HAL_TIM_PWM_Start_DMA+0xea>
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e114      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <HAL_TIM_PWM_Start_DMA+0xfa>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f44:	e016      	b.n	8001f74 <HAL_TIM_PWM_Start_DMA+0x128>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PWM_Start_DMA+0x10a>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	e00e      	b.n	8001f74 <HAL_TIM_PWM_Start_DMA+0x128>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start_DMA+0x11a>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	e006      	b.n	8001f74 <HAL_TIM_PWM_Start_DMA+0x128>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f6e:	e001      	b.n	8001f74 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0f5      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	f200 80ae 	bhi.w	80020d8 <HAL_TIM_PWM_Start_DMA+0x28c>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001fb9 	.word	0x08001fb9
 8001f88:	080020d9 	.word	0x080020d9
 8001f8c:	080020d9 	.word	0x080020d9
 8001f90:	080020d9 	.word	0x080020d9
 8001f94:	08002001 	.word	0x08002001
 8001f98:	080020d9 	.word	0x080020d9
 8001f9c:	080020d9 	.word	0x080020d9
 8001fa0:	080020d9 	.word	0x080020d9
 8001fa4:	08002049 	.word	0x08002049
 8001fa8:	080020d9 	.word	0x080020d9
 8001fac:	080020d9 	.word	0x080020d9
 8001fb0:	080020d9 	.word	0x080020d9
 8001fb4:	08002091 	.word	0x08002091
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4a69      	ldr	r2, [pc, #420]	; (800216c <HAL_TIM_PWM_Start_DMA+0x320>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	4a68      	ldr	r2, [pc, #416]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3334      	adds	r3, #52	; 0x34
 8001fdc:	461a      	mov	r2, r3
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	f7fe fe78 	bl	8000cd4 <HAL_DMA_Start_IT>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0b8      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	60da      	str	r2, [r3, #12]
      break;
 8001ffe:	e06c      	b.n	80020da <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_TIM_PWM_Start_DMA+0x320>)
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	4a56      	ldr	r2, [pc, #344]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002016:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3338      	adds	r3, #56	; 0x38
 8002024:	461a      	mov	r2, r3
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	f7fe fe54 	bl	8000cd4 <HAL_DMA_Start_IT>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e094      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002044:	60da      	str	r2, [r3, #12]
      break;
 8002046:	e048      	b.n	80020da <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x324>)
 800205e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	333c      	adds	r3, #60	; 0x3c
 800206c:	461a      	mov	r2, r3
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	f7fe fe30 	bl	8000cd4 <HAL_DMA_Start_IT>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e070      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208c:	60da      	str	r2, [r3, #12]
      break;
 800208e:	e024      	b.n	80020da <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a34      	ldr	r2, [pc, #208]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_TIM_PWM_Start_DMA+0x320>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a32      	ldr	r2, [pc, #200]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x324>)
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3340      	adds	r3, #64	; 0x40
 80020b4:	461a      	mov	r2, r3
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	f7fe fe0c 	bl	8000cd4 <HAL_DMA_Start_IT>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e04c      	b.n	8002160 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020d4:	60da      	str	r2, [r3, #12]
      break;
 80020d6:	e000      	b.n	80020da <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80020d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd32 	bl	8002b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_TIM_PWM_Start_DMA+0x328>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d107      	bne.n	8002102 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00e      	beq.n	800212a <HAL_TIM_PWM_Start_DMA+0x2de>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d009      	beq.n	800212a <HAL_TIM_PWM_Start_DMA+0x2de>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_TIM_PWM_Start_DMA+0x2de>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <HAL_TIM_PWM_Start_DMA+0x330>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d010      	beq.n	800215e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e007      	b.n	800215e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	0800253b 	.word	0x0800253b
 800216c:	080025e3 	.word	0x080025e3
 8002170:	080024a9 	.word	0x080024a9
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e0ac      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f200 809f 	bhi.w	80022e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	080022e9 	.word	0x080022e9
 80021b8:	080022e9 	.word	0x080022e9
 80021bc:	080022e9 	.word	0x080022e9
 80021c0:	08002225 	.word	0x08002225
 80021c4:	080022e9 	.word	0x080022e9
 80021c8:	080022e9 	.word	0x080022e9
 80021cc:	080022e9 	.word	0x080022e9
 80021d0:	08002267 	.word	0x08002267
 80021d4:	080022e9 	.word	0x080022e9
 80021d8:	080022e9 	.word	0x080022e9
 80021dc:	080022e9 	.word	0x080022e9
 80021e0:	080022a7 	.word	0x080022a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fa90 	bl	8002710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6999      	ldr	r1, [r3, #24]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	619a      	str	r2, [r3, #24]
      break;
 8002222:	e062      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fad6 	bl	80027dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
      break;
 8002264:	e041      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fb1f 	bl	80028b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0204 	bic.w	r2, r2, #4
 8002290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69d9      	ldr	r1, [r3, #28]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
      break;
 80022a4:	e021      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb69 	bl	8002984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	021a      	lsls	r2, r3, #8
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	61da      	str	r2, [r3, #28]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80022e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x18>
 8002310:	2302      	movs	r3, #2
 8002312:	e0b3      	b.n	800247c <HAL_TIM_ConfigClockSource+0x180>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234c:	d03e      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	f200 8087 	bhi.w	8002464 <HAL_TIM_ConfigClockSource+0x168>
 8002356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235a:	f000 8085 	beq.w	8002468 <HAL_TIM_ConfigClockSource+0x16c>
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002362:	d87f      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d01a      	beq.n	800239e <HAL_TIM_ConfigClockSource+0xa2>
 8002368:	2b70      	cmp	r3, #112	; 0x70
 800236a:	d87b      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 800236c:	2b60      	cmp	r3, #96	; 0x60
 800236e:	d050      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x116>
 8002370:	2b60      	cmp	r3, #96	; 0x60
 8002372:	d877      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 8002374:	2b50      	cmp	r3, #80	; 0x50
 8002376:	d03c      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002378:	2b50      	cmp	r3, #80	; 0x50
 800237a:	d873      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d058      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x136>
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d86f      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b30      	cmp	r3, #48	; 0x30
 8002386:	d064      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x156>
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d86b      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d060      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x156>
 8002390:	2b20      	cmp	r3, #32
 8002392:	d867      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05c      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x156>
 8002398:	2b10      	cmp	r3, #16
 800239a:	d05a      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800239c:	e062      	b.n	8002464 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f000 fbae 	bl	8002b0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	609a      	str	r2, [r3, #8]
      break;
 80023ca:	e04e      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f000 fb97 	bl	8002b0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ee:	609a      	str	r2, [r3, #8]
      break;
 80023f0:	e03b      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 fb0e 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2150      	movs	r1, #80	; 0x50
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fb65 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002410:	e02b      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f000 fb2c 	bl	8002a7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2160      	movs	r1, #96	; 0x60
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb55 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002430:	e01b      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 faee 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fb45 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002450:	e00b      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f000 fb3c 	bl	8002ada <TIM_ITRx_SetConfig>
        break;
 8002462:	e002      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d107      	bne.n	80024d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ce:	e02a      	b.n	8002526 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d107      	bne.n	80024ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e8:	e01d      	b.n	8002526 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2204      	movs	r2, #4
 80024f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002502:	e010      	b.n	8002526 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d107      	bne.n	800251e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2208      	movs	r2, #8
 8002512:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800251c:	e003      	b.n	8002526 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff ffb5 	bl	8002496 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d10b      	bne.n	800256a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d136      	bne.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002568:	e031      	b.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d10b      	bne.n	800258c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2202      	movs	r2, #2
 8002578:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d125      	bne.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258a:	e020      	b.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d10b      	bne.n	80025ae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2204      	movs	r2, #4
 800259a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d114      	bne.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	e00f      	b.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10a      	bne.n	80025ce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2208      	movs	r2, #8
 80025bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7fd fdc4 	bl	800015c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	771a      	strb	r2, [r3, #28]
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d103      	bne.n	8002602 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	771a      	strb	r2, [r3, #28]
 8002600:	e019      	b.n	8002636 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d103      	bne.n	8002614 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2202      	movs	r2, #2
 8002610:	771a      	strb	r2, [r3, #28]
 8002612:	e010      	b.n	8002636 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d103      	bne.n	8002626 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2204      	movs	r2, #4
 8002622:	771a      	strb	r2, [r3, #28]
 8002624:	e007      	b.n	8002636 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d102      	bne.n	8002636 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2208      	movs	r2, #8
 8002634:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff24 	bl	8002484 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	771a      	strb	r2, [r3, #28]
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a26      	ldr	r2, [pc, #152]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <TIM_Base_SetConfig+0xc0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <TIM_Base_SetConfig+0xc0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0201 	bic.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 0302 	bic.w	r3, r3, #2
 8002758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <TIM_OC1_SetConfig+0xc8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10c      	bne.n	8002786 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0308 	bic.w	r3, r3, #8
 8002772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <TIM_OC1_SetConfig+0xc8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	621a      	str	r2, [r3, #32]
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00

080027dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f023 0210 	bic.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0320 	bic.w	r3, r3, #32
 8002826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <TIM_OC2_SetConfig+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10d      	bne.n	8002858 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <TIM_OC2_SetConfig+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d113      	bne.n	8002888 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800286e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <TIM_OC3_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <TIM_OC3_SetConfig+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	031b      	lsls	r3, r3, #12
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <TIM_OC4_SetConfig+0x98>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d109      	bne.n	80029f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00

08002a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 030a 	bic.w	r3, r3, #10
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 0210 	bic.w	r2, r3, #16
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	609a      	str	r2, [r3, #8]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e046      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e03d      	b.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e03f      	b.n	8002d84 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fd fcc7 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2224      	movs	r2, #36	; 0x24
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fc4a 	bl	80035d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d153      	bne.n	8002e4e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_UART_Transmit_DMA+0x26>
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e04c      	b.n	8002e50 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Transmit_DMA+0x38>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e045      	b.n	8002e50 <HAL_UART_Transmit_DMA+0xc4>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2221      	movs	r2, #33	; 0x21
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_UART_Transmit_DMA+0xcc>)
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_UART_Transmit_DMA+0xd0>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_UART_Transmit_DMA+0xd4>)
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	2200      	movs	r2, #0
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002e0c:	f107 0308 	add.w	r3, r7, #8
 8002e10:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	461a      	mov	r2, r3
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	f7fd ff56 	bl	8000cd4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e48:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	08003205 	.word	0x08003205
 8002e5c:	08003257 	.word	0x08003257
 8002e60:	08003273 	.word	0x08003273

08002e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x52>
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fae5 	bl	800347e <UART_Receive_IT>
      return;
 8002eb4:	e17b      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b1 	beq.w	8003020 <HAL_UART_IRQHandler+0x1bc>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x70>
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80a6 	beq.w	8003020 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x90>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_UART_IRQHandler+0xb0>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0202 	orr.w	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_UART_IRQHandler+0xd0>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00f      	beq.n	8002f5e <HAL_UART_IRQHandler+0xfa>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <HAL_UART_IRQHandler+0xee>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0208 	orr.w	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 811e 	beq.w	80031a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_UART_IRQHandler+0x11e>
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa7e 	bl	800347e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_UART_IRQHandler+0x146>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d031      	beq.n	800300e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9c0 	bl	8003330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d023      	beq.n	8003006 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a76      	ldr	r2, [pc, #472]	; (80031b4 <HAL_UART_IRQHandler+0x350>)
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd ff10 	bl	8000e08 <HAL_DMA_Abort_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00e      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8ec 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00a      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8e8 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e006      	b.n	800301c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8e4 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800301a:	e0c3      	b.n	80031a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	bf00      	nop
    return;
 800301e:	e0c1      	b.n	80031a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 80a1 	bne.w	800316c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 809b 	beq.w	800316c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8095 	beq.w	800316c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04e      	beq.n	8003104 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003070:	8a3b      	ldrh	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8098 	beq.w	80031a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307c:	8a3a      	ldrh	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	f080 8092 	bcs.w	80031a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8a3a      	ldrh	r2, [r7, #16]
 8003088:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b20      	cmp	r3, #32
 8003092:	d02b      	beq.n	80030ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0210 	bic.w	r2, r2, #16
 80030e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fe53 	bl	8000d92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f876 	bl	80031ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003102:	e051      	b.n	80031a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310c:	b29b      	uxth	r3, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d047      	beq.n	80031ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800311c:	8a7b      	ldrh	r3, [r7, #18]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003130:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0210 	bic.w	r2, r2, #16
 800315e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003160:	8a7b      	ldrh	r3, [r7, #18]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f842 	bl	80031ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800316a:	e01f      	b.n	80031ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_UART_IRQHandler+0x324>
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f915 	bl	80033b0 <UART_Transmit_IT>
    return;
 8003186:	e012      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <HAL_UART_IRQHandler+0x34a>
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f956 	bl	800344e <UART_EndTransmit_IT>
    return;
 80031a2:	e004      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
    return;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
      return;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_UART_IRQHandler+0x34a>
      return;
 80031ac:	bf00      	nop
  }
}
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08003389 	.word	0x08003389

080031b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d113      	bne.n	8003248 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003234:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003244:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003246:	e002      	b.n	800324e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7fc ffad 	bl	80001a8 <HAL_UART_TxCpltCallback>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ffa7 	bl	80031b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b21      	cmp	r3, #33	; 0x21
 80032a4:	d108      	bne.n	80032b8 <UART_DMAError+0x46>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	f000 f827 	bl	8003306 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b22      	cmp	r3, #34	; 0x22
 80032d8:	d108      	bne.n	80032ec <UART_DMAError+0x7a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f000 f822 	bl	8003330 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032f8:	68b8      	ldr	r0, [r7, #8]
 80032fa:	f7ff ff6f 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800331c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003346:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0210 	bic.w	r2, r2, #16
 800336e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ff1a 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b21      	cmp	r3, #33	; 0x21
 80033c2:	d13e      	bne.n	8003442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	d114      	bne.n	80033f8 <UART_Transmit_IT+0x48>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d110      	bne.n	80033f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]
 80033f6:	e008      	b.n	800340a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6211      	str	r1, [r2, #32]
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4619      	mov	r1, r3
 8003418:	84d1      	strh	r1, [r2, #38]	; 0x26
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fc fe9a 	bl	80001a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	; 0x22
 8003490:	f040 8099 	bne.w	80035c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d117      	bne.n	80034ce <UART_Receive_IT+0x50>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	b29a      	uxth	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e026      	b.n	800351c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d007      	beq.n	80034f2 <UART_Receive_IT+0x74>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <UART_Receive_IT+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e008      	b.n	8003512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	b2da      	uxtb	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800352c:	2b00      	cmp	r3, #0
 800352e:	d148      	bne.n	80035c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	d123      	bne.n	80035b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0210 	bic.w	r2, r2, #16
 8003584:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b10      	cmp	r3, #16
 8003592:	d10a      	bne.n	80035aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fe1c 	bl	80031ee <HAL_UARTEx_RxEventCallback>
 80035b6:	e002      	b.n	80035be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe06 	bl	80031ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e002      	b.n	80035c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800360a:	f023 030c 	bic.w	r3, r3, #12
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	430b      	orrs	r3, r1
 8003616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <UART_SetConfig+0x114>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d103      	bne.n	8003640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7fe fb2e 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	e002      	b.n	8003646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003640:	f7fe fb16 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8003644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <UART_SetConfig+0x118>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	0119      	lsls	r1, r3, #4
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009a      	lsls	r2, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	fbb2 f2f3 	udiv	r2, r2, r3
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <UART_SetConfig+0x118>)
 800367e:	fba3 0302 	umull	r0, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2064      	movs	r0, #100	; 0x64
 8003686:	fb00 f303 	mul.w	r3, r0, r3
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <UART_SetConfig+0x118>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369c:	4419      	add	r1, r3
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009a      	lsls	r2, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <UART_SetConfig+0x118>)
 80036b6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2064      	movs	r0, #100	; 0x64
 80036be:	fb00 f303 	mul.w	r3, r0, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	3332      	adds	r3, #50	; 0x32
 80036c8:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <UART_SetConfig+0x118>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	440a      	add	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40013800 	.word	0x40013800
 80036e8:	51eb851f 	.word	0x51eb851f

080036ec <__errno>:
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <__errno+0x8>)
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000032c 	.word	0x2000032c

080036f8 <__libc_init_array>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	2600      	movs	r6, #0
 80036fc:	4d0c      	ldr	r5, [pc, #48]	; (8003730 <__libc_init_array+0x38>)
 80036fe:	4c0d      	ldr	r4, [pc, #52]	; (8003734 <__libc_init_array+0x3c>)
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	42a6      	cmp	r6, r4
 8003706:	d109      	bne.n	800371c <__libc_init_array+0x24>
 8003708:	f000 fc5c 	bl	8003fc4 <_init>
 800370c:	2600      	movs	r6, #0
 800370e:	4d0a      	ldr	r5, [pc, #40]	; (8003738 <__libc_init_array+0x40>)
 8003710:	4c0a      	ldr	r4, [pc, #40]	; (800373c <__libc_init_array+0x44>)
 8003712:	1b64      	subs	r4, r4, r5
 8003714:	10a4      	asrs	r4, r4, #2
 8003716:	42a6      	cmp	r6, r4
 8003718:	d105      	bne.n	8003726 <__libc_init_array+0x2e>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003720:	4798      	blx	r3
 8003722:	3601      	adds	r6, #1
 8003724:	e7ee      	b.n	8003704 <__libc_init_array+0xc>
 8003726:	f855 3b04 	ldr.w	r3, [r5], #4
 800372a:	4798      	blx	r3
 800372c:	3601      	adds	r6, #1
 800372e:	e7f2      	b.n	8003716 <__libc_init_array+0x1e>
 8003730:	0800404c 	.word	0x0800404c
 8003734:	0800404c 	.word	0x0800404c
 8003738:	0800404c 	.word	0x0800404c
 800373c:	08004050 	.word	0x08004050

08003740 <memset>:
 8003740:	4603      	mov	r3, r0
 8003742:	4402      	add	r2, r0
 8003744:	4293      	cmp	r3, r2
 8003746:	d100      	bne.n	800374a <memset+0xa>
 8003748:	4770      	bx	lr
 800374a:	f803 1b01 	strb.w	r1, [r3], #1
 800374e:	e7f9      	b.n	8003744 <memset+0x4>

08003750 <siprintf>:
 8003750:	b40e      	push	{r1, r2, r3}
 8003752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003756:	b500      	push	{lr}
 8003758:	b09c      	sub	sp, #112	; 0x70
 800375a:	ab1d      	add	r3, sp, #116	; 0x74
 800375c:	9002      	str	r0, [sp, #8]
 800375e:	9006      	str	r0, [sp, #24]
 8003760:	9107      	str	r1, [sp, #28]
 8003762:	9104      	str	r1, [sp, #16]
 8003764:	4808      	ldr	r0, [pc, #32]	; (8003788 <siprintf+0x38>)
 8003766:	4909      	ldr	r1, [pc, #36]	; (800378c <siprintf+0x3c>)
 8003768:	f853 2b04 	ldr.w	r2, [r3], #4
 800376c:	9105      	str	r1, [sp, #20]
 800376e:	6800      	ldr	r0, [r0, #0]
 8003770:	a902      	add	r1, sp, #8
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f000 f868 	bl	8003848 <_svfiprintf_r>
 8003778:	2200      	movs	r2, #0
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	b01c      	add	sp, #112	; 0x70
 8003780:	f85d eb04 	ldr.w	lr, [sp], #4
 8003784:	b003      	add	sp, #12
 8003786:	4770      	bx	lr
 8003788:	2000032c 	.word	0x2000032c
 800378c:	ffff0208 	.word	0xffff0208

08003790 <__ssputs_r>:
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	688e      	ldr	r6, [r1, #8]
 8003796:	4682      	mov	sl, r0
 8003798:	429e      	cmp	r6, r3
 800379a:	460c      	mov	r4, r1
 800379c:	4690      	mov	r8, r2
 800379e:	461f      	mov	r7, r3
 80037a0:	d838      	bhi.n	8003814 <__ssputs_r+0x84>
 80037a2:	898a      	ldrh	r2, [r1, #12]
 80037a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037a8:	d032      	beq.n	8003810 <__ssputs_r+0x80>
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	6909      	ldr	r1, [r1, #16]
 80037ae:	3301      	adds	r3, #1
 80037b0:	eba5 0901 	sub.w	r9, r5, r1
 80037b4:	6965      	ldr	r5, [r4, #20]
 80037b6:	444b      	add	r3, r9
 80037b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037c0:	106d      	asrs	r5, r5, #1
 80037c2:	429d      	cmp	r5, r3
 80037c4:	bf38      	it	cc
 80037c6:	461d      	movcc	r5, r3
 80037c8:	0553      	lsls	r3, r2, #21
 80037ca:	d531      	bpl.n	8003830 <__ssputs_r+0xa0>
 80037cc:	4629      	mov	r1, r5
 80037ce:	f000 fb53 	bl	8003e78 <_malloc_r>
 80037d2:	4606      	mov	r6, r0
 80037d4:	b950      	cbnz	r0, 80037ec <__ssputs_r+0x5c>
 80037d6:	230c      	movs	r3, #12
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f8ca 3000 	str.w	r3, [sl]
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ec:	464a      	mov	r2, r9
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	f000 face 	bl	8003d90 <memcpy>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6126      	str	r6, [r4, #16]
 8003802:	444e      	add	r6, r9
 8003804:	6026      	str	r6, [r4, #0]
 8003806:	463e      	mov	r6, r7
 8003808:	6165      	str	r5, [r4, #20]
 800380a:	eba5 0509 	sub.w	r5, r5, r9
 800380e:	60a5      	str	r5, [r4, #8]
 8003810:	42be      	cmp	r6, r7
 8003812:	d900      	bls.n	8003816 <__ssputs_r+0x86>
 8003814:	463e      	mov	r6, r7
 8003816:	4632      	mov	r2, r6
 8003818:	4641      	mov	r1, r8
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	f000 fac6 	bl	8003dac <memmove>
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	1b9b      	subs	r3, r3, r6
 8003826:	4432      	add	r2, r6
 8003828:	2000      	movs	r0, #0
 800382a:	60a3      	str	r3, [r4, #8]
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	e7db      	b.n	80037e8 <__ssputs_r+0x58>
 8003830:	462a      	mov	r2, r5
 8003832:	f000 fb7b 	bl	8003f2c <_realloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	d1e1      	bne.n	8003800 <__ssputs_r+0x70>
 800383c:	4650      	mov	r0, sl
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	f000 face 	bl	8003de0 <_free_r>
 8003844:	e7c7      	b.n	80037d6 <__ssputs_r+0x46>
	...

08003848 <_svfiprintf_r>:
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	4698      	mov	r8, r3
 800384e:	898b      	ldrh	r3, [r1, #12]
 8003850:	4607      	mov	r7, r0
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	460d      	mov	r5, r1
 8003856:	4614      	mov	r4, r2
 8003858:	b09d      	sub	sp, #116	; 0x74
 800385a:	d50e      	bpl.n	800387a <_svfiprintf_r+0x32>
 800385c:	690b      	ldr	r3, [r1, #16]
 800385e:	b963      	cbnz	r3, 800387a <_svfiprintf_r+0x32>
 8003860:	2140      	movs	r1, #64	; 0x40
 8003862:	f000 fb09 	bl	8003e78 <_malloc_r>
 8003866:	6028      	str	r0, [r5, #0]
 8003868:	6128      	str	r0, [r5, #16]
 800386a:	b920      	cbnz	r0, 8003876 <_svfiprintf_r+0x2e>
 800386c:	230c      	movs	r3, #12
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e0d1      	b.n	8003a1a <_svfiprintf_r+0x1d2>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	616b      	str	r3, [r5, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	2320      	movs	r3, #32
 8003880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	f04f 0901 	mov.w	r9, #1
 800388a:	f8cd 800c 	str.w	r8, [sp, #12]
 800388e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a34 <_svfiprintf_r+0x1ec>
 8003892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003896:	4623      	mov	r3, r4
 8003898:	469a      	mov	sl, r3
 800389a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800389e:	b10a      	cbz	r2, 80038a4 <_svfiprintf_r+0x5c>
 80038a0:	2a25      	cmp	r2, #37	; 0x25
 80038a2:	d1f9      	bne.n	8003898 <_svfiprintf_r+0x50>
 80038a4:	ebba 0b04 	subs.w	fp, sl, r4
 80038a8:	d00b      	beq.n	80038c2 <_svfiprintf_r+0x7a>
 80038aa:	465b      	mov	r3, fp
 80038ac:	4622      	mov	r2, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ff6d 	bl	8003790 <__ssputs_r>
 80038b6:	3001      	adds	r0, #1
 80038b8:	f000 80aa 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038be:	445a      	add	r2, fp
 80038c0:	9209      	str	r2, [sp, #36]	; 0x24
 80038c2:	f89a 3000 	ldrb.w	r3, [sl]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a2 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f04f 32ff 	mov.w	r2, #4294967295
 80038d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d6:	f10a 0a01 	add.w	sl, sl, #1
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	9307      	str	r3, [sp, #28]
 80038de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038e2:	931a      	str	r3, [sp, #104]	; 0x68
 80038e4:	4654      	mov	r4, sl
 80038e6:	2205      	movs	r2, #5
 80038e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ec:	4851      	ldr	r0, [pc, #324]	; (8003a34 <_svfiprintf_r+0x1ec>)
 80038ee:	f000 fa41 	bl	8003d74 <memchr>
 80038f2:	9a04      	ldr	r2, [sp, #16]
 80038f4:	b9d8      	cbnz	r0, 800392e <_svfiprintf_r+0xe6>
 80038f6:	06d0      	lsls	r0, r2, #27
 80038f8:	bf44      	itt	mi
 80038fa:	2320      	movmi	r3, #32
 80038fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003900:	0711      	lsls	r1, r2, #28
 8003902:	bf44      	itt	mi
 8003904:	232b      	movmi	r3, #43	; 0x2b
 8003906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800390a:	f89a 3000 	ldrb.w	r3, [sl]
 800390e:	2b2a      	cmp	r3, #42	; 0x2a
 8003910:	d015      	beq.n	800393e <_svfiprintf_r+0xf6>
 8003912:	4654      	mov	r4, sl
 8003914:	2000      	movs	r0, #0
 8003916:	f04f 0c0a 	mov.w	ip, #10
 800391a:	9a07      	ldr	r2, [sp, #28]
 800391c:	4621      	mov	r1, r4
 800391e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003922:	3b30      	subs	r3, #48	; 0x30
 8003924:	2b09      	cmp	r3, #9
 8003926:	d94e      	bls.n	80039c6 <_svfiprintf_r+0x17e>
 8003928:	b1b0      	cbz	r0, 8003958 <_svfiprintf_r+0x110>
 800392a:	9207      	str	r2, [sp, #28]
 800392c:	e014      	b.n	8003958 <_svfiprintf_r+0x110>
 800392e:	eba0 0308 	sub.w	r3, r0, r8
 8003932:	fa09 f303 	lsl.w	r3, r9, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	46a2      	mov	sl, r4
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	e7d2      	b.n	80038e4 <_svfiprintf_r+0x9c>
 800393e:	9b03      	ldr	r3, [sp, #12]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	9103      	str	r1, [sp, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbb      	ittet	lt
 800394a:	425b      	neglt	r3, r3
 800394c:	f042 0202 	orrlt.w	r2, r2, #2
 8003950:	9307      	strge	r3, [sp, #28]
 8003952:	9307      	strlt	r3, [sp, #28]
 8003954:	bfb8      	it	lt
 8003956:	9204      	strlt	r2, [sp, #16]
 8003958:	7823      	ldrb	r3, [r4, #0]
 800395a:	2b2e      	cmp	r3, #46	; 0x2e
 800395c:	d10c      	bne.n	8003978 <_svfiprintf_r+0x130>
 800395e:	7863      	ldrb	r3, [r4, #1]
 8003960:	2b2a      	cmp	r3, #42	; 0x2a
 8003962:	d135      	bne.n	80039d0 <_svfiprintf_r+0x188>
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	3402      	adds	r4, #2
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	9203      	str	r2, [sp, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	f04f 33ff 	movlt.w	r3, #4294967295
 8003976:	9305      	str	r3, [sp, #20]
 8003978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a44 <_svfiprintf_r+0x1fc>
 800397c:	2203      	movs	r2, #3
 800397e:	4650      	mov	r0, sl
 8003980:	7821      	ldrb	r1, [r4, #0]
 8003982:	f000 f9f7 	bl	8003d74 <memchr>
 8003986:	b140      	cbz	r0, 800399a <_svfiprintf_r+0x152>
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	eba0 000a 	sub.w	r0, r0, sl
 800398e:	fa03 f000 	lsl.w	r0, r3, r0
 8003992:	9b04      	ldr	r3, [sp, #16]
 8003994:	3401      	adds	r4, #1
 8003996:	4303      	orrs	r3, r0
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399e:	2206      	movs	r2, #6
 80039a0:	4825      	ldr	r0, [pc, #148]	; (8003a38 <_svfiprintf_r+0x1f0>)
 80039a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039a6:	f000 f9e5 	bl	8003d74 <memchr>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d038      	beq.n	8003a20 <_svfiprintf_r+0x1d8>
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <_svfiprintf_r+0x1f4>)
 80039b0:	bb1b      	cbnz	r3, 80039fa <_svfiprintf_r+0x1b2>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	3307      	adds	r3, #7
 80039b6:	f023 0307 	bic.w	r3, r3, #7
 80039ba:	3308      	adds	r3, #8
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c0:	4433      	add	r3, r6
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	e767      	b.n	8003896 <_svfiprintf_r+0x4e>
 80039c6:	460c      	mov	r4, r1
 80039c8:	2001      	movs	r0, #1
 80039ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ce:	e7a5      	b.n	800391c <_svfiprintf_r+0xd4>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	4619      	mov	r1, r3
 80039d8:	3401      	adds	r4, #1
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	4620      	mov	r0, r4
 80039de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039e2:	3a30      	subs	r2, #48	; 0x30
 80039e4:	2a09      	cmp	r2, #9
 80039e6:	d903      	bls.n	80039f0 <_svfiprintf_r+0x1a8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0c5      	beq.n	8003978 <_svfiprintf_r+0x130>
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	e7c3      	b.n	8003978 <_svfiprintf_r+0x130>
 80039f0:	4604      	mov	r4, r0
 80039f2:	2301      	movs	r3, #1
 80039f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80039f8:	e7f0      	b.n	80039dc <_svfiprintf_r+0x194>
 80039fa:	ab03      	add	r3, sp, #12
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	462a      	mov	r2, r5
 8003a00:	4638      	mov	r0, r7
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	f3af 8000 	nop.w
 8003a0a:	1c42      	adds	r2, r0, #1
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	d1d6      	bne.n	80039be <_svfiprintf_r+0x176>
 8003a10:	89ab      	ldrh	r3, [r5, #12]
 8003a12:	065b      	lsls	r3, r3, #25
 8003a14:	f53f af2c 	bmi.w	8003870 <_svfiprintf_r+0x28>
 8003a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1a:	b01d      	add	sp, #116	; 0x74
 8003a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a20:	ab03      	add	r3, sp, #12
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	462a      	mov	r2, r5
 8003a26:	4638      	mov	r0, r7
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a2a:	a904      	add	r1, sp, #16
 8003a2c:	f000 f87c 	bl	8003b28 <_printf_i>
 8003a30:	e7eb      	b.n	8003a0a <_svfiprintf_r+0x1c2>
 8003a32:	bf00      	nop
 8003a34:	08004018 	.word	0x08004018
 8003a38:	08004022 	.word	0x08004022
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	08003791 	.word	0x08003791
 8003a44:	0800401e 	.word	0x0800401e

08003a48 <_printf_common>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	4607      	mov	r7, r0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfb8      	it	lt
 8003a5a:	4613      	movlt	r3, r2
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a62:	460c      	mov	r4, r1
 8003a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a68:	b10a      	cbz	r2, 8003a6e <_printf_common+0x26>
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	0699      	lsls	r1, r3, #26
 8003a72:	bf42      	ittt	mi
 8003a74:	6833      	ldrmi	r3, [r6, #0]
 8003a76:	3302      	addmi	r3, #2
 8003a78:	6033      	strmi	r3, [r6, #0]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d106      	bne.n	8003a90 <_printf_common+0x48>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dc28      	bgt.n	8003ae2 <_printf_common+0x9a>
 8003a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d42d      	bmi.n	8003afc <_printf_common+0xb4>
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d020      	beq.n	8003af0 <_printf_common+0xa8>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	68e5      	ldr	r5, [r4, #12]
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf18      	it	ne
 8003aba:	2500      	movne	r5, #0
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	f04f 0600 	mov.w	r6, #0
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	bf08      	it	eq
 8003ac6:	1aad      	subeq	r5, r5, r2
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	bf08      	it	eq
 8003acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfc4      	itt	gt
 8003ad4:	1a9b      	subgt	r3, r3, r2
 8003ad6:	18ed      	addgt	r5, r5, r3
 8003ad8:	341a      	adds	r4, #26
 8003ada:	42b5      	cmp	r5, r6
 8003adc:	d11a      	bne.n	8003b14 <_printf_common+0xcc>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e008      	b.n	8003af4 <_printf_common+0xac>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	4638      	mov	r0, r7
 8003aea:	47c0      	blx	r8
 8003aec:	3001      	adds	r0, #1
 8003aee:	d103      	bne.n	8003af8 <_printf_common+0xb0>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7c4      	b.n	8003a86 <_printf_common+0x3e>
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	18e1      	adds	r1, r4, r3
 8003b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b0a:	4422      	add	r2, r4
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b12:	e7c5      	b.n	8003aa0 <_printf_common+0x58>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4622      	mov	r2, r4
 8003b18:	4649      	mov	r1, r9
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0e6      	beq.n	8003af0 <_printf_common+0xa8>
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7d9      	b.n	8003ada <_printf_common+0x92>
	...

08003b28 <_printf_i>:
 8003b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	7e27      	ldrb	r7, [r4, #24]
 8003b30:	4691      	mov	r9, r2
 8003b32:	2f78      	cmp	r7, #120	; 0x78
 8003b34:	4680      	mov	r8, r0
 8003b36:	469a      	mov	sl, r3
 8003b38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3e:	d807      	bhi.n	8003b50 <_printf_i+0x28>
 8003b40:	2f62      	cmp	r7, #98	; 0x62
 8003b42:	d80a      	bhi.n	8003b5a <_printf_i+0x32>
 8003b44:	2f00      	cmp	r7, #0
 8003b46:	f000 80d9 	beq.w	8003cfc <_printf_i+0x1d4>
 8003b4a:	2f58      	cmp	r7, #88	; 0x58
 8003b4c:	f000 80a4 	beq.w	8003c98 <_printf_i+0x170>
 8003b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b58:	e03a      	b.n	8003bd0 <_printf_i+0xa8>
 8003b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b5e:	2b15      	cmp	r3, #21
 8003b60:	d8f6      	bhi.n	8003b50 <_printf_i+0x28>
 8003b62:	a001      	add	r0, pc, #4	; (adr r0, 8003b68 <_printf_i+0x40>)
 8003b64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b68:	08003bc1 	.word	0x08003bc1
 8003b6c:	08003bd5 	.word	0x08003bd5
 8003b70:	08003b51 	.word	0x08003b51
 8003b74:	08003b51 	.word	0x08003b51
 8003b78:	08003b51 	.word	0x08003b51
 8003b7c:	08003b51 	.word	0x08003b51
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003b51 	.word	0x08003b51
 8003b88:	08003b51 	.word	0x08003b51
 8003b8c:	08003b51 	.word	0x08003b51
 8003b90:	08003b51 	.word	0x08003b51
 8003b94:	08003ce3 	.word	0x08003ce3
 8003b98:	08003c05 	.word	0x08003c05
 8003b9c:	08003cc5 	.word	0x08003cc5
 8003ba0:	08003b51 	.word	0x08003b51
 8003ba4:	08003b51 	.word	0x08003b51
 8003ba8:	08003d05 	.word	0x08003d05
 8003bac:	08003b51 	.word	0x08003b51
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b51 	.word	0x08003b51
 8003bb8:	08003b51 	.word	0x08003b51
 8003bbc:	08003ccd 	.word	0x08003ccd
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	600a      	str	r2, [r1, #0]
 8003bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0a4      	b.n	8003d1e <_printf_i+0x1f6>
 8003bd4:	6825      	ldr	r5, [r4, #0]
 8003bd6:	6808      	ldr	r0, [r1, #0]
 8003bd8:	062e      	lsls	r6, r5, #24
 8003bda:	f100 0304 	add.w	r3, r0, #4
 8003bde:	d50a      	bpl.n	8003bf6 <_printf_i+0xce>
 8003be0:	6805      	ldr	r5, [r0, #0]
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	da03      	bge.n	8003bf0 <_printf_i+0xc8>
 8003be8:	232d      	movs	r3, #45	; 0x2d
 8003bea:	426d      	negs	r5, r5
 8003bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	485e      	ldr	r0, [pc, #376]	; (8003d6c <_printf_i+0x244>)
 8003bf4:	e019      	b.n	8003c2a <_printf_i+0x102>
 8003bf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bfa:	6805      	ldr	r5, [r0, #0]
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	bf18      	it	ne
 8003c00:	b22d      	sxthne	r5, r5
 8003c02:	e7ef      	b.n	8003be4 <_printf_i+0xbc>
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	1d18      	adds	r0, r3, #4
 8003c0a:	6008      	str	r0, [r1, #0]
 8003c0c:	0628      	lsls	r0, r5, #24
 8003c0e:	d501      	bpl.n	8003c14 <_printf_i+0xec>
 8003c10:	681d      	ldr	r5, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <_printf_i+0xf2>
 8003c14:	0669      	lsls	r1, r5, #25
 8003c16:	d5fb      	bpl.n	8003c10 <_printf_i+0xe8>
 8003c18:	881d      	ldrh	r5, [r3, #0]
 8003c1a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2308      	moveq	r3, #8
 8003c20:	230a      	movne	r3, #10
 8003c22:	4852      	ldr	r0, [pc, #328]	; (8003d6c <_printf_i+0x244>)
 8003c24:	2100      	movs	r1, #0
 8003c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c2a:	6866      	ldr	r6, [r4, #4]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	bfa8      	it	ge
 8003c30:	6821      	ldrge	r1, [r4, #0]
 8003c32:	60a6      	str	r6, [r4, #8]
 8003c34:	bfa4      	itt	ge
 8003c36:	f021 0104 	bicge.w	r1, r1, #4
 8003c3a:	6021      	strge	r1, [r4, #0]
 8003c3c:	b90d      	cbnz	r5, 8003c42 <_printf_i+0x11a>
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	d04d      	beq.n	8003cde <_printf_i+0x1b6>
 8003c42:	4616      	mov	r6, r2
 8003c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c48:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4c:	5dc7      	ldrb	r7, [r0, r7]
 8003c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c52:	462f      	mov	r7, r5
 8003c54:	42bb      	cmp	r3, r7
 8003c56:	460d      	mov	r5, r1
 8003c58:	d9f4      	bls.n	8003c44 <_printf_i+0x11c>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d10b      	bne.n	8003c76 <_printf_i+0x14e>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07df      	lsls	r7, r3, #31
 8003c62:	d508      	bpl.n	8003c76 <_printf_i+0x14e>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6861      	ldr	r1, [r4, #4]
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	bfde      	ittt	le
 8003c6c:	2330      	movle	r3, #48	; 0x30
 8003c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c76:	1b92      	subs	r2, r2, r6
 8003c78:	6122      	str	r2, [r4, #16]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f8cd a000 	str.w	sl, [sp]
 8003c84:	aa03      	add	r2, sp, #12
 8003c86:	f7ff fedf 	bl	8003a48 <_printf_common>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d14c      	bne.n	8003d28 <_printf_i+0x200>
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c92:	b004      	add	sp, #16
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	4834      	ldr	r0, [pc, #208]	; (8003d6c <_printf_i+0x244>)
 8003c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c9e:	680e      	ldr	r6, [r1, #0]
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ca6:	061f      	lsls	r7, r3, #24
 8003ca8:	600e      	str	r6, [r1, #0]
 8003caa:	d514      	bpl.n	8003cd6 <_printf_i+0x1ae>
 8003cac:	07d9      	lsls	r1, r3, #31
 8003cae:	bf44      	itt	mi
 8003cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb4:	6023      	strmi	r3, [r4, #0]
 8003cb6:	b91d      	cbnz	r5, 8003cc0 <_printf_i+0x198>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	e7af      	b.n	8003c24 <_printf_i+0xfc>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	2378      	movs	r3, #120	; 0x78
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <_printf_i+0x248>)
 8003cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd4:	e7e3      	b.n	8003c9e <_printf_i+0x176>
 8003cd6:	065e      	lsls	r6, r3, #25
 8003cd8:	bf48      	it	mi
 8003cda:	b2ad      	uxthmi	r5, r5
 8003cdc:	e7e6      	b.n	8003cac <_printf_i+0x184>
 8003cde:	4616      	mov	r6, r2
 8003ce0:	e7bb      	b.n	8003c5a <_printf_i+0x132>
 8003ce2:	680b      	ldr	r3, [r1, #0]
 8003ce4:	6826      	ldr	r6, [r4, #0]
 8003ce6:	1d1d      	adds	r5, r3, #4
 8003ce8:	6960      	ldr	r0, [r4, #20]
 8003cea:	600d      	str	r5, [r1, #0]
 8003cec:	0635      	lsls	r5, r6, #24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0x1ce>
 8003cf2:	6018      	str	r0, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x1d4>
 8003cf6:	0671      	lsls	r1, r6, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x1ca>
 8003cfa:	8018      	strh	r0, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4616      	mov	r6, r2
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	e7ba      	b.n	8003c7a <_printf_i+0x152>
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	600a      	str	r2, [r1, #0]
 8003d0a:	681e      	ldr	r6, [r3, #0]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4630      	mov	r0, r6
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	f000 f82f 	bl	8003d74 <memchr>
 8003d16:	b108      	cbz	r0, 8003d1c <_printf_i+0x1f4>
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	6060      	str	r0, [r4, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d26:	e7a8      	b.n	8003c7a <_printf_i+0x152>
 8003d28:	4632      	mov	r2, r6
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	47d0      	blx	sl
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0ab      	beq.n	8003c8e <_printf_i+0x166>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	079b      	lsls	r3, r3, #30
 8003d3a:	d413      	bmi.n	8003d64 <_printf_i+0x23c>
 8003d3c:	68e0      	ldr	r0, [r4, #12]
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	4298      	cmp	r0, r3
 8003d42:	bfb8      	it	lt
 8003d44:	4618      	movlt	r0, r3
 8003d46:	e7a4      	b.n	8003c92 <_printf_i+0x16a>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4640      	mov	r0, r8
 8003d50:	47d0      	blx	sl
 8003d52:	3001      	adds	r0, #1
 8003d54:	d09b      	beq.n	8003c8e <_printf_i+0x166>
 8003d56:	3501      	adds	r5, #1
 8003d58:	68e3      	ldr	r3, [r4, #12]
 8003d5a:	9903      	ldr	r1, [sp, #12]
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	42ab      	cmp	r3, r5
 8003d60:	dcf2      	bgt.n	8003d48 <_printf_i+0x220>
 8003d62:	e7eb      	b.n	8003d3c <_printf_i+0x214>
 8003d64:	2500      	movs	r5, #0
 8003d66:	f104 0619 	add.w	r6, r4, #25
 8003d6a:	e7f5      	b.n	8003d58 <_printf_i+0x230>
 8003d6c:	08004029 	.word	0x08004029
 8003d70:	0800403a 	.word	0x0800403a

08003d74 <memchr>:
 8003d74:	4603      	mov	r3, r0
 8003d76:	b510      	push	{r4, lr}
 8003d78:	b2c9      	uxtb	r1, r1
 8003d7a:	4402      	add	r2, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	d101      	bne.n	8003d86 <memchr+0x12>
 8003d82:	2000      	movs	r0, #0
 8003d84:	e003      	b.n	8003d8e <memchr+0x1a>
 8003d86:	7804      	ldrb	r4, [r0, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	428c      	cmp	r4, r1
 8003d8c:	d1f6      	bne.n	8003d7c <memchr+0x8>
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <memcpy>:
 8003d90:	440a      	add	r2, r1
 8003d92:	4291      	cmp	r1, r2
 8003d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d98:	d100      	bne.n	8003d9c <memcpy+0xc>
 8003d9a:	4770      	bx	lr
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003da8:	d1f9      	bne.n	8003d9e <memcpy+0xe>
 8003daa:	bd10      	pop	{r4, pc}

08003dac <memmove>:
 8003dac:	4288      	cmp	r0, r1
 8003dae:	b510      	push	{r4, lr}
 8003db0:	eb01 0402 	add.w	r4, r1, r2
 8003db4:	d902      	bls.n	8003dbc <memmove+0x10>
 8003db6:	4284      	cmp	r4, r0
 8003db8:	4623      	mov	r3, r4
 8003dba:	d807      	bhi.n	8003dcc <memmove+0x20>
 8003dbc:	1e43      	subs	r3, r0, #1
 8003dbe:	42a1      	cmp	r1, r4
 8003dc0:	d008      	beq.n	8003dd4 <memmove+0x28>
 8003dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dca:	e7f8      	b.n	8003dbe <memmove+0x12>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4402      	add	r2, r0
 8003dd0:	428a      	cmp	r2, r1
 8003dd2:	d100      	bne.n	8003dd6 <memmove+0x2a>
 8003dd4:	bd10      	pop	{r4, pc}
 8003dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dde:	e7f7      	b.n	8003dd0 <memmove+0x24>

08003de0 <_free_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4605      	mov	r5, r0
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d043      	beq.n	8003e70 <_free_r+0x90>
 8003de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dec:	1f0c      	subs	r4, r1, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfb8      	it	lt
 8003df2:	18e4      	addlt	r4, r4, r3
 8003df4:	f000 f8d0 	bl	8003f98 <__malloc_lock>
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <_free_r+0x94>)
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	b933      	cbnz	r3, 8003e0e <_free_r+0x2e>
 8003e00:	6063      	str	r3, [r4, #4]
 8003e02:	6014      	str	r4, [r2, #0]
 8003e04:	4628      	mov	r0, r5
 8003e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e0a:	f000 b8cb 	b.w	8003fa4 <__malloc_unlock>
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	d90a      	bls.n	8003e28 <_free_r+0x48>
 8003e12:	6821      	ldr	r1, [r4, #0]
 8003e14:	1862      	adds	r2, r4, r1
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bf01      	itttt	eq
 8003e1a:	681a      	ldreq	r2, [r3, #0]
 8003e1c:	685b      	ldreq	r3, [r3, #4]
 8003e1e:	1852      	addeq	r2, r2, r1
 8003e20:	6022      	streq	r2, [r4, #0]
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	6004      	str	r4, [r0, #0]
 8003e26:	e7ed      	b.n	8003e04 <_free_r+0x24>
 8003e28:	461a      	mov	r2, r3
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b10b      	cbz	r3, 8003e32 <_free_r+0x52>
 8003e2e:	42a3      	cmp	r3, r4
 8003e30:	d9fa      	bls.n	8003e28 <_free_r+0x48>
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	1850      	adds	r0, r2, r1
 8003e36:	42a0      	cmp	r0, r4
 8003e38:	d10b      	bne.n	8003e52 <_free_r+0x72>
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	4401      	add	r1, r0
 8003e3e:	1850      	adds	r0, r2, r1
 8003e40:	4283      	cmp	r3, r0
 8003e42:	6011      	str	r1, [r2, #0]
 8003e44:	d1de      	bne.n	8003e04 <_free_r+0x24>
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e7d8      	b.n	8003e04 <_free_r+0x24>
 8003e52:	d902      	bls.n	8003e5a <_free_r+0x7a>
 8003e54:	230c      	movs	r3, #12
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	e7d4      	b.n	8003e04 <_free_r+0x24>
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	1821      	adds	r1, r4, r0
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	bf01      	itttt	eq
 8003e62:	6819      	ldreq	r1, [r3, #0]
 8003e64:	685b      	ldreq	r3, [r3, #4]
 8003e66:	1809      	addeq	r1, r1, r0
 8003e68:	6021      	streq	r1, [r4, #0]
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	6054      	str	r4, [r2, #4]
 8003e6e:	e7c9      	b.n	8003e04 <_free_r+0x24>
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	bf00      	nop
 8003e74:	200003ec 	.word	0x200003ec

08003e78 <_malloc_r>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	1ccd      	adds	r5, r1, #3
 8003e7c:	f025 0503 	bic.w	r5, r5, #3
 8003e80:	3508      	adds	r5, #8
 8003e82:	2d0c      	cmp	r5, #12
 8003e84:	bf38      	it	cc
 8003e86:	250c      	movcc	r5, #12
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	db01      	blt.n	8003e92 <_malloc_r+0x1a>
 8003e8e:	42a9      	cmp	r1, r5
 8003e90:	d903      	bls.n	8003e9a <_malloc_r+0x22>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	2000      	movs	r0, #0
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9a:	f000 f87d 	bl	8003f98 <__malloc_lock>
 8003e9e:	4921      	ldr	r1, [pc, #132]	; (8003f24 <_malloc_r+0xac>)
 8003ea0:	680a      	ldr	r2, [r1, #0]
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	b99c      	cbnz	r4, 8003ece <_malloc_r+0x56>
 8003ea6:	4f20      	ldr	r7, [pc, #128]	; (8003f28 <_malloc_r+0xb0>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	b923      	cbnz	r3, 8003eb6 <_malloc_r+0x3e>
 8003eac:	4621      	mov	r1, r4
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f000 f862 	bl	8003f78 <_sbrk_r>
 8003eb4:	6038      	str	r0, [r7, #0]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f000 f85d 	bl	8003f78 <_sbrk_r>
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	d123      	bne.n	8003f0a <_malloc_r+0x92>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	6033      	str	r3, [r6, #0]
 8003ec8:	f000 f86c 	bl	8003fa4 <__malloc_unlock>
 8003ecc:	e7e3      	b.n	8003e96 <_malloc_r+0x1e>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	1b5b      	subs	r3, r3, r5
 8003ed2:	d417      	bmi.n	8003f04 <_malloc_r+0x8c>
 8003ed4:	2b0b      	cmp	r3, #11
 8003ed6:	d903      	bls.n	8003ee0 <_malloc_r+0x68>
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	441c      	add	r4, r3
 8003edc:	6025      	str	r5, [r4, #0]
 8003ede:	e004      	b.n	8003eea <_malloc_r+0x72>
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	42a2      	cmp	r2, r4
 8003ee4:	bf0c      	ite	eq
 8003ee6:	600b      	streq	r3, [r1, #0]
 8003ee8:	6053      	strne	r3, [r2, #4]
 8003eea:	4630      	mov	r0, r6
 8003eec:	f000 f85a 	bl	8003fa4 <__malloc_unlock>
 8003ef0:	f104 000b 	add.w	r0, r4, #11
 8003ef4:	1d23      	adds	r3, r4, #4
 8003ef6:	f020 0007 	bic.w	r0, r0, #7
 8003efa:	1ac2      	subs	r2, r0, r3
 8003efc:	d0cc      	beq.n	8003e98 <_malloc_r+0x20>
 8003efe:	1a1b      	subs	r3, r3, r0
 8003f00:	50a3      	str	r3, [r4, r2]
 8003f02:	e7c9      	b.n	8003e98 <_malloc_r+0x20>
 8003f04:	4622      	mov	r2, r4
 8003f06:	6864      	ldr	r4, [r4, #4]
 8003f08:	e7cc      	b.n	8003ea4 <_malloc_r+0x2c>
 8003f0a:	1cc4      	adds	r4, r0, #3
 8003f0c:	f024 0403 	bic.w	r4, r4, #3
 8003f10:	42a0      	cmp	r0, r4
 8003f12:	d0e3      	beq.n	8003edc <_malloc_r+0x64>
 8003f14:	1a21      	subs	r1, r4, r0
 8003f16:	4630      	mov	r0, r6
 8003f18:	f000 f82e 	bl	8003f78 <_sbrk_r>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d1dd      	bne.n	8003edc <_malloc_r+0x64>
 8003f20:	e7cf      	b.n	8003ec2 <_malloc_r+0x4a>
 8003f22:	bf00      	nop
 8003f24:	200003ec 	.word	0x200003ec
 8003f28:	200003f0 	.word	0x200003f0

08003f2c <_realloc_r>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	4607      	mov	r7, r0
 8003f30:	4614      	mov	r4, r2
 8003f32:	460e      	mov	r6, r1
 8003f34:	b921      	cbnz	r1, 8003f40 <_realloc_r+0x14>
 8003f36:	4611      	mov	r1, r2
 8003f38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f3c:	f7ff bf9c 	b.w	8003e78 <_malloc_r>
 8003f40:	b922      	cbnz	r2, 8003f4c <_realloc_r+0x20>
 8003f42:	f7ff ff4d 	bl	8003de0 <_free_r>
 8003f46:	4625      	mov	r5, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	f000 f830 	bl	8003fb0 <_malloc_usable_size_r>
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d20f      	bcs.n	8003f74 <_realloc_r+0x48>
 8003f54:	4621      	mov	r1, r4
 8003f56:	4638      	mov	r0, r7
 8003f58:	f7ff ff8e 	bl	8003e78 <_malloc_r>
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0f2      	beq.n	8003f48 <_realloc_r+0x1c>
 8003f62:	4631      	mov	r1, r6
 8003f64:	4622      	mov	r2, r4
 8003f66:	f7ff ff13 	bl	8003d90 <memcpy>
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff37 	bl	8003de0 <_free_r>
 8003f72:	e7e9      	b.n	8003f48 <_realloc_r+0x1c>
 8003f74:	4635      	mov	r5, r6
 8003f76:	e7e7      	b.n	8003f48 <_realloc_r+0x1c>

08003f78 <_sbrk_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_sbrk_r+0x1c>)
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fc fc56 	bl	8000834 <_sbrk>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_sbrk_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_sbrk_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	2000050c 	.word	0x2000050c

08003f98 <__malloc_lock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	; (8003fa0 <__malloc_lock+0x8>)
 8003f9a:	f000 b811 	b.w	8003fc0 <__retarget_lock_acquire_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20000514 	.word	0x20000514

08003fa4 <__malloc_unlock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	; (8003fac <__malloc_unlock+0x8>)
 8003fa6:	f000 b80c 	b.w	8003fc2 <__retarget_lock_release_recursive>
 8003faa:	bf00      	nop
 8003fac:	20000514 	.word	0x20000514

08003fb0 <_malloc_usable_size_r>:
 8003fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb4:	1f18      	subs	r0, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfbc      	itt	lt
 8003fba:	580b      	ldrlt	r3, [r1, r0]
 8003fbc:	18c0      	addlt	r0, r0, r3
 8003fbe:	4770      	bx	lr

08003fc0 <__retarget_lock_acquire_recursive>:
 8003fc0:	4770      	bx	lr

08003fc2 <__retarget_lock_release_recursive>:
 8003fc2:	4770      	bx	lr

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
