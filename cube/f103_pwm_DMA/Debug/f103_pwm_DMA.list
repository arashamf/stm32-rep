
f103_pwm_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08003c08  08003c08  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c08  08003c08  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000208  08003e18  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08003e18  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd93  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c13  00000000  00000000  0002bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b76  00000000  00000000  0002f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4ea  00000000  00000000  00046ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa95  00000000  00000000  000533b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dde45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000dde98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000208 	.word	0x20000208
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b68 	.word	0x08003b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000020c 	.word	0x2000020c
 8000148:	08003b68 	.word	0x08003b68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//прерывание 1 раз в 10 мс
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d142      	bne.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        {
        	if (flag)
 800016e:	4b23      	ldr	r3, [pc, #140]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d01f      	beq.n	80001b6 <HAL_TIM_PeriodElapsedCallback+0x5a>
        	{
        		duty_ch1 += PERIOD/100; // прибавляем длительность импульса  PWM по 1
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	3301      	adds	r3, #1
 800017c:	4a20      	ldr	r2, [pc, #128]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800017e:	6013      	str	r3, [r2, #0]
        		TIM1->CCR1 = duty_ch1;
 8000180:	4a20      	ldr	r2, [pc, #128]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000182:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	6353      	str	r3, [r2, #52]	; 0x34
        		if(duty_ch1 >= PERIOD)
 8000188:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b63      	cmp	r3, #99	; 0x63
 800018e:	d931      	bls.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        		{
        			flag = 0;
 8000190:	4b1a      	ldr	r3, [pc, #104]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
        			sprintf (UART_msg_TX,"flag=0\r\n");
 8000196:	491c      	ldr	r1, [pc, #112]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000198:	481c      	ldr	r0, [pc, #112]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800019a:	f003 f8ab 	bl	80032f4 <siprintf>
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800019e:	481b      	ldr	r0, [pc, #108]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ac:	4917      	ldr	r1, [pc, #92]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ae:	4818      	ldr	r0, [pc, #96]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001b0:	f002 ff04 	bl	8002fbc <HAL_UART_Transmit>
        			sprintf (UART_msg_TX,"flag=1\r\n");
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
        		}
        	}
        }
 }
 80001b4:	e01e      	b.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        		duty_ch1 -= PERIOD/100; // убавляем длительность импульса PWM по 1
 80001b6:	4b12      	ldr	r3, [pc, #72]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	4a10      	ldr	r2, [pc, #64]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001be:	6013      	str	r3, [r2, #0]
        		TIM1->CCR1 = duty_ch1;
 80001c0:	4a10      	ldr	r2, [pc, #64]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80001c2:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	6353      	str	r3, [r2, #52]	; 0x34
        		if(duty_ch1 <= 1)
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d811      	bhi.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x98>
        			flag = 1;
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]
        			sprintf (UART_msg_TX,"flag=1\r\n");
 80001d6:	490f      	ldr	r1, [pc, #60]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001da:	f003 f88b 	bl	80032f4 <siprintf>
        			HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ee:	4808      	ldr	r0, [pc, #32]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001f0:	f002 fee4 	bl	8002fbc <HAL_UART_Transmit>
 }
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	20000000 	.word	0x20000000
 8000204:	40012c00 	.word	0x40012c00
 8000208:	08003b80 	.word	0x08003b80
 800020c:	20000224 	.word	0x20000224
 8000210:	200002b0 	.word	0x200002b0
 8000214:	08003b8c 	.word	0x08003b8c

08000218 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwm_arr, 100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	4a0c      	ldr	r2, [pc, #48]	; (8000254 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000224:	2100      	movs	r1, #0
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000228:	f001 fdf4 	bl	8001e14 <HAL_TIM_PWM_Start_DMA>
    sprintf (UART_msg_TX,"next\r\n");
 800022c:	490b      	ldr	r1, [pc, #44]	; (800025c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000230:	f003 f860 	bl	80032f4 <siprintf>
    HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000234:	480a      	ldr	r0, [pc, #40]	; (8000260 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000236:	f7ff ff89 	bl	800014c <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	b29a      	uxth	r2, r3
 800023e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000242:	4907      	ldr	r1, [pc, #28]	; (8000260 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000244:	4807      	ldr	r0, [pc, #28]	; (8000264 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000246:	f002 feb9 	bl	8002fbc <HAL_UART_Transmit>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000008 	.word	0x20000008
 8000258:	200002f4 	.word	0x200002f4
 800025c:	08003b98 	.word	0x08003b98
 8000260:	20000224 	.word	0x20000224
 8000264:	200002b0 	.word	0x200002b0

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fbd8 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f83c 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f9b8 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000278:	f000 f998 	bl	80005ac <MX_DMA_Init>
  MX_TIM1_Init();
 800027c:	f000 f87c 	bl	8000378 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000280:	f000 f96a 	bl	8000558 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000284:	f000 f91a 	bl	80004bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwm_arr, 100);
 8000288:	2364      	movs	r3, #100	; 0x64
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <main+0x68>)
 800028c:	2100      	movs	r1, #0
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <main+0x6c>)
 8000290:	f001 fdc0 	bl	8001e14 <HAL_TIM_PWM_Start_DMA>
  sprintf (UART_msg_TX,"pwm_start\r\n");
 8000294:	4910      	ldr	r1, [pc, #64]	; (80002d8 <main+0x70>)
 8000296:	4811      	ldr	r0, [pc, #68]	; (80002dc <main+0x74>)
 8000298:	f003 f82c 	bl	80032f4 <siprintf>
  HAL_UART_Transmit(&huart1, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800029c:	480f      	ldr	r0, [pc, #60]	; (80002dc <main+0x74>)
 800029e:	f7ff ff55 	bl	800014c <strlen>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002aa:	490c      	ldr	r1, [pc, #48]	; (80002dc <main+0x74>)
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <main+0x78>)
 80002ae:	f002 fe85 	bl	8002fbc <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <main+0x7c>)
 80002b8:	f001 f8d0 	bl	800145c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80002bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <main+0x80>)
 80002c2:	f001 f8cb 	bl	800145c <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ca:	f000 fc0b 	bl	8000ae4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002ce:	e7f0      	b.n	80002b2 <main+0x4a>
 80002d0:	20000008 	.word	0x20000008
 80002d4:	200002f4 	.word	0x200002f4
 80002d8:	08003ba0 	.word	0x08003ba0
 80002dc:	20000224 	.word	0x20000224
 80002e0:	200002b0 	.word	0x200002b0
 80002e4:	40011000 	.word	0x40011000
 80002e8:	40010800 	.word	0x40010800

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fff2 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800031c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800032c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f8aa 	bl	8001490 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000342:	f000 f9b3 	bl	80006ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	2302      	movs	r3, #2
 800034c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2101      	movs	r1, #1
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fb16 	bl	8001990 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f99f 	bl	80006ac <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b096      	sub	sp, #88	; 0x58
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]
 80003a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 ff97 	bl	80032e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003b8:	4a3f      	ldr	r2, [pc, #252]	; (80004b8 <MX_TIM1_Init+0x140>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003be:	f240 123f 	movw	r2, #319	; 0x13f
 80003c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b3b      	ldr	r3, [pc, #236]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003ca:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003de:	4b35      	ldr	r3, [pc, #212]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e4:	4833      	ldr	r0, [pc, #204]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80003e6:	f001 fc6d 	bl	8001cc4 <HAL_TIM_Base_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003f0:	f000 f95c 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003fe:	4619      	mov	r1, r3
 8000400:	482c      	ldr	r0, [pc, #176]	; (80004b4 <MX_TIM1_Init+0x13c>)
 8000402:	f002 f867 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800040c:	f000 f94e 	bl	80006ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000410:	4828      	ldr	r0, [pc, #160]	; (80004b4 <MX_TIM1_Init+0x13c>)
 8000412:	f001 fca6 	bl	8001d62 <HAL_TIM_PWM_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800041c:	f000 f946 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000420:	2300      	movs	r3, #0
 8000422:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800042c:	4619      	mov	r1, r3
 800042e:	4821      	ldr	r0, [pc, #132]	; (80004b4 <MX_TIM1_Init+0x13c>)
 8000430:	f002 fcb6 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800043a:	f000 f937 	bl	80006ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043e:	2360      	movs	r3, #96	; 0x60
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000446:	2300      	movs	r3, #0
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800044a:	2300      	movs	r3, #0
 800044c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000452:	2300      	movs	r3, #0
 8000454:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000456:	2300      	movs	r3, #0
 8000458:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_TIM1_Init+0x13c>)
 8000464:	f001 ff78 	bl	8002358 <HAL_TIM_PWM_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800046e:	f000 f91d 	bl	80006ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4619      	mov	r1, r3
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <MX_TIM1_Init+0x13c>)
 8000496:	f002 fce1 	bl	8002e5c <HAL_TIMEx_ConfigBreakDeadTime>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80004a0:	f000 f904 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <MX_TIM1_Init+0x13c>)
 80004a6:	f000 f99d 	bl	80007e4 <HAL_TIM_MspPostInit>

}
 80004aa:	bf00      	nop
 80004ac:	3758      	adds	r7, #88	; 0x58
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200002f4 	.word	0x200002f4
 80004b8:	40012c00 	.word	0x40012c00

080004bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_TIM2_Init+0x98>)
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_TIM2_Init+0x98>)
 80004e2:	f240 123f 	movw	r2, #319	; 0x13f
 80004e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_TIM2_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_TIM2_Init+0x98>)
 80004f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_TIM2_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_TIM2_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <MX_TIM2_Init+0x98>)
 8000504:	f001 fbde 	bl	8001cc4 <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800050e:	f000 f8cd 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	4619      	mov	r1, r3
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <MX_TIM2_Init+0x98>)
 8000520:	f001 ffd8 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800052a:	f000 f8bf 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <MX_TIM2_Init+0x98>)
 800053c:	f002 fc30 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000546:	f000 f8b1 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000033c 	.word	0x2000033c

08000558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <MX_USART1_UART_Init+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000564:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000590:	f002 fcc7 	bl	8002f22 <HAL_UART_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059a:	f000 f887 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200002b0 	.word	0x200002b0
 80005a8:	40013800 	.word	0x40013800

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x38>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200c      	movs	r0, #12
 80005d0:	f000 fb83 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005d4:	200c      	movs	r0, #12
 80005d6:	f000 fb9c 	bl	8000d12 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <MX_GPIO_Init+0xb8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xb8>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_GPIO_Init+0xb8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xb8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xb8>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xb8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xb8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xb8>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0xb8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <MX_GPIO_Init+0xbc>)
 800064c:	f000 feee 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xc0>)
 8000658:	f000 fee8 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000676:	f000 fd55 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800067a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0xc0>)
 8000694:	f000 fd46 	bl	8001124 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40011000 	.word	0x40011000
 80006a8:	40010800 	.word	0x40010800

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_MspInit+0x60>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_MspInit+0x60>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000

0800071c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <HAL_TIM_Base_MspInit+0xb8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d134      	bne.n	8000798 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 8000734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <HAL_TIM_Base_MspInit+0xc4>)
 800074a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 800074e:	2210      	movs	r2, #16
 8000750:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 800077c:	f000 fae4 	bl	8000d48 <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000786:	f7ff ff91 	bl	80006ac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_TIM_Base_MspInit+0xc0>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000796:	e018      	b.n	80007ca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a0:	d113      	bne.n	80007ca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_TIM_Base_MspInit+0xbc>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	201c      	movs	r0, #28
 80007c0:	f000 fa8b 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c4:	201c      	movs	r0, #28
 80007c6:	f000 faa4 	bl	8000d12 <HAL_NVIC_EnableIRQ>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40012c00 	.word	0x40012c00
 80007d8:	40021000 	.word	0x40021000
 80007dc:	2000026c 	.word	0x2000026c
 80007e0:	4002001c 	.word	0x4002001c

080007e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_TIM_MspPostInit+0x5c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d118      	bne.n	8000836 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_TIM_MspPostInit+0x60>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_TIM_MspPostInit+0x60>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_TIM_MspPostInit+0x60>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2302      	movs	r3, #2
 8000828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_TIM_MspPostInit+0x64>)
 8000832:	f000 fc77 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d131      	bne.n	80008d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x90>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_UART_MspInit+0x90>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x90>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800089c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <HAL_UART_MspInit+0x94>)
 80008b2:	f000 fc37 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_UART_MspInit+0x94>)
 80008cc:	f000 fc2a 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40013800 	.word	0x40013800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f8bf 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <DMA1_Channel2_IRQHandler+0x10>)
 800093a:	f000 fabf 	bl	8000ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000026c 	.word	0x2000026c

08000948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM2_IRQHandler+0x10>)
 800094e:	f001 fbfb 	bl	8002148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000033c 	.word	0x2000033c

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f002 fc80 	bl	8003290 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20005000 	.word	0x20005000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	20000260 	.word	0x20000260
 80009c4:	20000398 	.word	0x20000398

080009c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fa:	f7ff ffe5 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 fc4d 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff fc31 	bl	8000268 <main>
  bx lr
 8000a06:	4770      	bx	lr
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8000a10:	08003c10 	.word	0x08003c10
  ldr r2, =_sbss
 8000a14:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8000a18:	20000398 	.word	0x20000398

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x28>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f947 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fe3c 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f95f 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	f000 f927 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000198 	.word	0x20000198
 8000aa4:	200001a0 	.word	0x200001a0
 8000aa8:	2000019c 	.word	0x2000019c

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	200001a0 	.word	0x200001a0
 8000acc:	20000384 	.word	0x20000384

08000ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000384 	.word	0x20000384

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001a0 	.word	0x200001a0

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <__NVIC_EnableIRQ+0x34>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2d 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff42 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff35 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e043      	b.n	8000de6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_DMA_Init+0xa8>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_DMA_Init+0xac>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_DMA_Init+0xb0>)
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	bffdfff8 	.word	0xbffdfff8
 8000df4:	cccccccd 	.word	0xcccccccd
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <HAL_DMA_Start_IT+0x20>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e04a      	b.n	8000eb2 <HAL_DMA_Start_IT+0xb6>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d13a      	bne.n	8000ea4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2202      	movs	r2, #2
 8000e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 f938 	bl	80010c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d008      	beq.n	8000e72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 020e 	orr.w	r2, r2, #14
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e00f      	b.n	8000e92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0204 	bic.w	r2, r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 020a 	orr.w	r2, r2, #10
 8000e90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0201 	orr.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e005      	b.n	8000eb0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eac:	2302      	movs	r3, #2
 8000eae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2204      	movs	r2, #4
 8000eda:	409a      	lsls	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d04f      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xc8>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d04a      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0204 	bic.w	r2, r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a66      	ldr	r2, [pc, #408]	; (80010ac <HAL_DMA_IRQHandler+0x1f0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d029      	beq.n	8000f6a <HAL_DMA_IRQHandler+0xae>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a65      	ldr	r2, [pc, #404]	; (80010b0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d022      	beq.n	8000f66 <HAL_DMA_IRQHandler+0xaa>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <HAL_DMA_IRQHandler+0x1f8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01a      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xa4>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a62      	ldr	r2, [pc, #392]	; (80010b8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d012      	beq.n	8000f5a <HAL_DMA_IRQHandler+0x9e>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a60      	ldr	r2, [pc, #384]	; (80010bc <HAL_DMA_IRQHandler+0x200>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00a      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x98>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <HAL_DMA_IRQHandler+0x204>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <HAL_DMA_IRQHandler+0x92>
 8000f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4c:	e00e      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f52:	e00b      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f58:	e008      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5e:	e005      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	e002      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	e000      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	4a55      	ldr	r2, [pc, #340]	; (80010c4 <HAL_DMA_IRQHandler+0x208>)
 8000f6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8094 	beq.w	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f82:	e08e      	b.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	2202      	movs	r2, #2
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d056      	beq.n	8001042 <HAL_DMA_IRQHandler+0x186>
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d051      	beq.n	8001042 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 020a 	bic.w	r2, r2, #10
 8000fba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <HAL_DMA_IRQHandler+0x1f0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d029      	beq.n	8001022 <HAL_DMA_IRQHandler+0x166>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <HAL_DMA_IRQHandler+0x1f4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d022      	beq.n	800101e <HAL_DMA_IRQHandler+0x162>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <HAL_DMA_IRQHandler+0x1f8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01a      	beq.n	8001018 <HAL_DMA_IRQHandler+0x15c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <HAL_DMA_IRQHandler+0x1fc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d012      	beq.n	8001012 <HAL_DMA_IRQHandler+0x156>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a32      	ldr	r2, [pc, #200]	; (80010bc <HAL_DMA_IRQHandler+0x200>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00a      	beq.n	800100c <HAL_DMA_IRQHandler+0x150>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_DMA_IRQHandler+0x204>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_DMA_IRQHandler+0x14a>
 8001000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001004:	e00e      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100a:	e00b      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	e008      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	e005      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	e002      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 800101e:	2320      	movs	r3, #32
 8001020:	e000      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001022:	2302      	movs	r3, #2
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_DMA_IRQHandler+0x208>)
 8001026:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	2b00      	cmp	r3, #0
 8001036:	d034      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001040:	e02f      	b.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2208      	movs	r2, #8
 8001048:	409a      	lsls	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d028      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
    }
  }
  return;
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
}
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020008 	.word	0x40020008
 80010b0:	4002001c 	.word	0x4002001c
 80010b4:	40020030 	.word	0x40020030
 80010b8:	40020044 	.word	0x40020044
 80010bc:	40020058 	.word	0x40020058
 80010c0:	4002006c 	.word	0x4002006c
 80010c4:	40020000 	.word	0x40020000

080010c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d108      	bne.n	8001108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001106:	e007      	b.n	8001118 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b08b      	sub	sp, #44	; 0x2c
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e169      	b.n	800140c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001138:	2201      	movs	r2, #1
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8158 	bne.w	8001406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a9a      	ldr	r2, [pc, #616]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d05e      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001160:	4a98      	ldr	r2, [pc, #608]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d875      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001166:	4a98      	ldr	r2, [pc, #608]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d058      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 800116c:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d86f      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001172:	4a96      	ldr	r2, [pc, #600]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d052      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001178:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d869      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800117e:	4a94      	ldr	r2, [pc, #592]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d04c      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001184:	4a92      	ldr	r2, [pc, #584]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d863      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800118a:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d046      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001190:	4a90      	ldr	r2, [pc, #576]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d85d      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d82a      	bhi.n	80011f0 <HAL_GPIO_Init+0xcc>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d859      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <HAL_GPIO_Init+0x80>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	0800121f 	.word	0x0800121f
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800120b 	.word	0x0800120b
 80011b0:	0800124d 	.word	0x0800124d
 80011b4:	08001253 	.word	0x08001253
 80011b8:	08001253 	.word	0x08001253
 80011bc:	08001253 	.word	0x08001253
 80011c0:	08001253 	.word	0x08001253
 80011c4:	08001253 	.word	0x08001253
 80011c8:	08001253 	.word	0x08001253
 80011cc:	08001253 	.word	0x08001253
 80011d0:	08001253 	.word	0x08001253
 80011d4:	08001253 	.word	0x08001253
 80011d8:	08001253 	.word	0x08001253
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001253 	.word	0x08001253
 80011e4:	08001253 	.word	0x08001253
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001215 	.word	0x08001215
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <HAL_GPIO_Init+0x2b4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f6:	e02c      	b.n	8001252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e029      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	3304      	adds	r3, #4
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e024      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	3308      	adds	r3, #8
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e01f      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	330c      	adds	r3, #12
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e01a      	b.n	8001254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001226:	2304      	movs	r3, #4
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e013      	b.n	8001254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001234:	2308      	movs	r3, #8
 8001236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	611a      	str	r2, [r3, #16]
          break;
 800123e:	e009      	b.n	8001254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	615a      	str	r2, [r3, #20]
          break;
 800124a:	e003      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x130>
          break;
 8001252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	d801      	bhi.n	800125e <HAL_GPIO_Init+0x13a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_Init+0x13e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d802      	bhi.n	8001270 <HAL_GPIO_Init+0x14c>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x152>
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3b08      	subs	r3, #8
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	210f      	movs	r1, #15
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	6a39      	ldr	r1, [r7, #32]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80b1 	beq.w	8001406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012bc:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a40      	ldr	r2, [pc, #256]	; (80013e4 <HAL_GPIO_Init+0x2c0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <HAL_GPIO_Init+0x2c4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1e0>
 8001300:	2303      	movs	r3, #3
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001304:	2304      	movs	r3, #4
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001310:	2300      	movs	r3, #0
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001322:	492f      	ldr	r1, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	492c      	ldr	r1, [pc, #176]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4928      	ldr	r1, [pc, #160]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	491e      	ldr	r1, [pc, #120]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4914      	ldr	r1, [pc, #80]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e021      	b.n	8001406 <HAL_GPIO_Init+0x2e2>
 80013c2:	bf00      	nop
 80013c4:	10320000 	.word	0x10320000
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10220000 	.word	0x10220000
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10120000 	.word	0x10120000
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001402:	4013      	ands	r3, r2
 8001404:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	f47f ae8e 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	372c      	adds	r7, #44	; 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43d9      	mvns	r1, r3
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e26c      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014bc:	4b8f      	ldr	r3, [pc, #572]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
 80014c8:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d10b      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d06c      	beq.n	80015bc <HAL_RCC_OscConfig+0x12c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d168      	bne.n	80015bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e246      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x76>
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7a      	ldr	r2, [pc, #488]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a77      	ldr	r2, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xbc>
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a71      	ldr	r2, [pc, #452]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a67      	ldr	r2, [pc, #412]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fab0 	bl	8000ad0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff faac 	bl	8000ad0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1fa      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xe4>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fa9c 	bl	8000ad0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fa98 	bl	8000ad0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1e6      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x10c>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1ba      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4939      	ldr	r1, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fa51 	bl	8000ad0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa4d 	bl	8000ad0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e19b      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4927      	ldr	r1, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fa30 	bl	8000ad0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fa2c 	bl	8000ad0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e17a      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03a      	beq.n	8001714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fa10 	bl	8000ad0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fa0c 	bl	8000ad0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e15a      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 fad8 	bl	8001c88 <RCC_Delay>
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f9f6 	bl	8000ad0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	e00f      	b.n	8001708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f9f2 	bl	8000ad0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d908      	bls.n	8001708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e140      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	42420000 	.word	0x42420000
 8001704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b9e      	ldr	r3, [pc, #632]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e9      	bne.n	80016e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a6 	beq.w	800186e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b97      	ldr	r3, [pc, #604]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b94      	ldr	r3, [pc, #592]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a93      	ldr	r2, [pc, #588]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b91      	ldr	r3, [pc, #580]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCC_OscConfig+0x4f8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff f9b3 	bl	8000ad0 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff f9af 	bl	8000ad0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0fd      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x4f8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x312>
 8001794:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b73      	ldr	r3, [pc, #460]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a72      	ldr	r2, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x356>
 80017cc:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a69      	ldr	r2, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017e6:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a66      	ldr	r2, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	4b64      	ldr	r3, [pc, #400]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a63      	ldr	r2, [pc, #396]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f963 	bl	8000ad0 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f95f 	bl	8000ad0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0ab      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x37e>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f94d 	bl	8000ad0 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f949 	bl	8000ad0 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e095      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8081 	beq.w	800197a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b42      	ldr	r3, [pc, #264]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d061      	beq.n	8001948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d146      	bne.n	800191a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_OscConfig+0x4fc>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f91d 	bl	8000ad0 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f919 	bl	8000ad0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e067      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	492d      	ldr	r1, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a19      	ldr	r1, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	430b      	orrs	r3, r1
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x4fc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f8ed 	bl	8000ad0 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f8e9 	bl	8000ad0 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e037      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x46a>
 8001918:	e02f      	b.n	800197a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_RCC_OscConfig+0x4fc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f8d6 	bl	8000ad0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f8d2 	bl	8000ad0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e020      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x498>
 8001946:	e018      	b.n	800197a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e013      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	429a      	cmp	r2, r3
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	40007000 	.word	0x40007000
 800198c:	42420060 	.word	0x42420060

08001990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0d0      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d910      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0207 	bic.w	r2, r3, #7
 80019ba:	4965      	ldr	r1, [pc, #404]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b8      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	494d      	ldr	r1, [pc, #308]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d040      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d115      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e07f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e073      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06b      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4936      	ldr	r1, [pc, #216]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f826 	bl	8000ad0 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f822 	bl	8000ad0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e053      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d210      	bcs.n	8001ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4922      	ldr	r1, [pc, #136]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 f821 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1cc>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1d0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ff84 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08003bbc 	.word	0x08003bbc
 8001b5c:	20000198 	.word	0x20000198
 8001b60:	2000019c 	.word	0x2000019c

08001b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b490      	push	{r4, r7}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b6c:	1d3c      	adds	r4, r7, #4
 8001b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b74:	f240 2301 	movw	r3, #513	; 0x201
 8001b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x46>
 8001ba2:	e02d      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	623b      	str	r3, [r7, #32]
      break;
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c5b      	lsrs	r3, r3, #17
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be2:	fb02 f203 	mul.w	r2, r2, r3
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	e004      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	623b      	str	r3, [r7, #32]
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c02:	623b      	str	r3, [r7, #32]
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6a3b      	ldr	r3, [r7, #32]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc90      	pop	{r4, r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	08003bac 	.word	0x08003bac
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	003d0900 	.word	0x003d0900

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000198 	.word	0x20000198

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff2 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08003bcc 	.word	0x08003bcc

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	0adb      	lsrs	r3, r3, #11
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003bcc 	.word	0x08003bcc

08001c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <RCC_Delay+0x34>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <RCC_Delay+0x38>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca4:	bf00      	nop
  }
  while (Delay --);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <RCC_Delay+0x1c>
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000198 	.word	0x20000198
 8001cc0:	10624dd3 	.word	0x10624dd3

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e041      	b.n	8001d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fd16 	bl	800071c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fda8 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e041      	b.n	8001df8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d106      	bne.n	8001d8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f839 	bl	8001e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f000 fd59 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_TIM_PWM_Start_DMA+0x28>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e022      	b.n	8001e82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d109      	bne.n	8001e56 <HAL_TIM_PWM_Start_DMA+0x42>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	e015      	b.n	8001e82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d109      	bne.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x5c>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e008      	b.n	8001e82 <HAL_TIM_PWM_Start_DMA+0x6e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e14e      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_TIM_PWM_Start_DMA+0x90>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e022      	b.n	8001eea <HAL_TIM_PWM_Start_DMA+0xd6>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d109      	bne.n	8001ebe <HAL_TIM_PWM_Start_DMA+0xaa>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	e015      	b.n	8001eea <HAL_TIM_PWM_Start_DMA+0xd6>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d109      	bne.n	8001ed8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	e008      	b.n	8001eea <HAL_TIM_PWM_Start_DMA+0xd6>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_TIM_PWM_Start_DMA+0xea>
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e114      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start_DMA+0xfa>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f0c:	e016      	b.n	8001f3c <HAL_TIM_PWM_Start_DMA+0x128>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start_DMA+0x10a>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f1c:	e00e      	b.n	8001f3c <HAL_TIM_PWM_Start_DMA+0x128>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start_DMA+0x11a>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2c:	e006      	b.n	8001f3c <HAL_TIM_PWM_Start_DMA+0x128>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f36:	e001      	b.n	8001f3c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0f5      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	f200 80ae 	bhi.w	80020a0 <HAL_TIM_PWM_Start_DMA+0x28c>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_TIM_PWM_Start_DMA+0x138>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f81 	.word	0x08001f81
 8001f50:	080020a1 	.word	0x080020a1
 8001f54:	080020a1 	.word	0x080020a1
 8001f58:	080020a1 	.word	0x080020a1
 8001f5c:	08001fc9 	.word	0x08001fc9
 8001f60:	080020a1 	.word	0x080020a1
 8001f64:	080020a1 	.word	0x080020a1
 8001f68:	080020a1 	.word	0x080020a1
 8001f6c:	08002011 	.word	0x08002011
 8001f70:	080020a1 	.word	0x080020a1
 8001f74:	080020a1 	.word	0x080020a1
 8001f78:	080020a1 	.word	0x080020a1
 8001f7c:	08002059 	.word	0x08002059
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	4a6a      	ldr	r2, [pc, #424]	; (8002130 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	4a68      	ldr	r2, [pc, #416]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3334      	adds	r3, #52	; 0x34
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	f7fe ff28 	bl	8000dfc <HAL_DMA_Start_IT>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0b8      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc4:	60da      	str	r2, [r3, #12]
      break;
 8001fc6:	e06c      	b.n	80020a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	4a56      	ldr	r2, [pc, #344]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3338      	adds	r3, #56	; 0x38
 8001fec:	461a      	mov	r2, r3
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	f7fe ff04 	bl	8000dfc <HAL_DMA_Start_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e094      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800200c:	60da      	str	r2, [r3, #12]
      break;
 800200e:	e048      	b.n	80020a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	4a45      	ldr	r2, [pc, #276]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x320>)
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a44      	ldr	r2, [pc, #272]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002026:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	461a      	mov	r2, r3
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	f7fe fee0 	bl	8000dfc <HAL_DMA_Start_IT>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e070      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002054:	60da      	str	r2, [r3, #12]
      break;
 8002056:	e024      	b.n	80020a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a32      	ldr	r2, [pc, #200]	; (8002138 <HAL_TIM_PWM_Start_DMA+0x324>)
 800206e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3340      	adds	r3, #64	; 0x40
 800207c:	461a      	mov	r2, r3
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	f7fe febc 	bl	8000dfc <HAL_DMA_Start_IT>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e04c      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800209c:	60da      	str	r2, [r3, #12]
      break;
 800209e:	e000      	b.n	80020a2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80020a0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fe54 	bl	8002d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_TIM_PWM_Start_DMA+0x328>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d107      	bne.n	80020ca <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_TIM_PWM_Start_DMA+0x328>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d009      	beq.n	80020f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_TIM_PWM_Start_DMA+0x330>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d111      	bne.n	8002116 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d010      	beq.n	8002126 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002114:	e007      	b.n	8002126 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	08002749 	.word	0x08002749
 8002134:	080027f1 	.word	0x080027f1
 8002138:	080026b7 	.word	0x080026b7
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800

08002148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa6f 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa62 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe f83d 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0204 	mvn.w	r2, #4
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa45 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa38 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7fe f813 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b08      	cmp	r3, #8
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b08      	cmp	r3, #8
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0208 	mvn.w	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa1b 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa0e 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fd ffe9 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2208      	movs	r2, #8
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9f1 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9e4 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fd ffbf 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0201 	mvn.w	r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fd ff48 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fe0c 	bl	8002f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f9b7 	bl	8002692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0220 	mvn.w	r2, #32
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fdd7 	bl	8002efe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800236e:	2302      	movs	r3, #2
 8002370:	e0ac      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	f200 809f 	bhi.w	80024c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	080023bd 	.word	0x080023bd
 800238c:	080024c1 	.word	0x080024c1
 8002390:	080024c1 	.word	0x080024c1
 8002394:	080024c1 	.word	0x080024c1
 8002398:	080023fd 	.word	0x080023fd
 800239c:	080024c1 	.word	0x080024c1
 80023a0:	080024c1 	.word	0x080024c1
 80023a4:	080024c1 	.word	0x080024c1
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	080024c1 	.word	0x080024c1
 80023b0:	080024c1 	.word	0x080024c1
 80023b4:	080024c1 	.word	0x080024c1
 80023b8:	0800247f 	.word	0x0800247f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 faaa 	bl	800291c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	619a      	str	r2, [r3, #24]
      break;
 80023fa:	e062      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 faf0 	bl	80029e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6999      	ldr	r1, [r3, #24]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	021a      	lsls	r2, r3, #8
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	619a      	str	r2, [r3, #24]
      break;
 800243c:	e041      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fb39 	bl	8002abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0208 	orr.w	r2, r2, #8
 8002458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0204 	bic.w	r2, r2, #4
 8002468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
      break;
 800247c:	e021      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fb83 	bl	8002b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69d9      	ldr	r1, [r3, #28]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	61da      	str	r2, [r3, #28]
      break;
 80024be:	e000      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80024c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_ConfigClockSource+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0b3      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x180>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800250a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002524:	d03e      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	f200 8087 	bhi.w	800263c <HAL_TIM_ConfigClockSource+0x168>
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	f000 8085 	beq.w	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	d87f      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d01a      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0xa2>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d87b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b60      	cmp	r3, #96	; 0x60
 8002546:	d050      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x116>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d877      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b50      	cmp	r3, #80	; 0x50
 800254e:	d03c      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0xf6>
 8002550:	2b50      	cmp	r3, #80	; 0x50
 8002552:	d873      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d058      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x136>
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d86f      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b30      	cmp	r3, #48	; 0x30
 800255e:	d064      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002560:	2b30      	cmp	r3, #48	; 0x30
 8002562:	d86b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b20      	cmp	r3, #32
 8002566:	d060      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d867      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002570:	2b10      	cmp	r3, #16
 8002572:	d05a      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002574:	e062      	b.n	800263c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f000 fbc8 	bl	8002d1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002598:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
      break;
 80025a2:	e04e      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f000 fbb1 	bl	8002d1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c6:	609a      	str	r2, [r3, #8]
      break;
 80025c8:	e03b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fb28 	bl	8002c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2150      	movs	r1, #80	; 0x50
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb7f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e02b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 fb46 	bl	8002c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2160      	movs	r1, #96	; 0x60
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fb6f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002608:	e01b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 fb08 	bl	8002c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2140      	movs	r1, #64	; 0x40
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fb5f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002628:	e00b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f000 fb56 	bl	8002ce6 <TIM_ITRx_SetConfig>
        break;
 800263a:	e002      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d107      	bne.n	80026de <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026dc:	e02a      	b.n	8002734 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2202      	movs	r2, #2
 80026ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f6:	e01d      	b.n	8002734 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d107      	bne.n	8002712 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2204      	movs	r2, #4
 8002706:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002710:	e010      	b.n	8002734 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2208      	movs	r2, #8
 8002720:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800272a:	e003      	b.n	8002734 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff ffb5 	bl	80026a4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d10b      	bne.n	8002778 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d136      	bne.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002776:	e031      	b.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d10b      	bne.n	800279a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2202      	movs	r2, #2
 8002786:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d125      	bne.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002798:	e020      	b.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d10b      	bne.n	80027bc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2204      	movs	r2, #4
 80027a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d114      	bne.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ba:	e00f      	b.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d10a      	bne.n	80027dc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2208      	movs	r2, #8
 80027ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7fd fd1b 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d103      	bne.n	8002810 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	771a      	strb	r2, [r3, #28]
 800280e:	e019      	b.n	8002844 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2202      	movs	r2, #2
 800281e:	771a      	strb	r2, [r3, #28]
 8002820:	e010      	b.n	8002844 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d103      	bne.n	8002834 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2204      	movs	r2, #4
 8002830:	771a      	strb	r2, [r3, #28]
 8002832:	e007      	b.n	8002844 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d102      	bne.n	8002844 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2208      	movs	r2, #8
 8002842:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff ff1b 	bl	8002680 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a29      	ldr	r2, [pc, #164]	; (8002910 <TIM_Base_SetConfig+0xb8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00b      	beq.n	8002888 <TIM_Base_SetConfig+0x30>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d007      	beq.n	8002888 <TIM_Base_SetConfig+0x30>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a26      	ldr	r2, [pc, #152]	; (8002914 <TIM_Base_SetConfig+0xbc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d003      	beq.n	8002888 <TIM_Base_SetConfig+0x30>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <TIM_Base_SetConfig+0xc0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <TIM_Base_SetConfig+0xb8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_Base_SetConfig+0x62>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d007      	beq.n	80028ba <TIM_Base_SetConfig+0x62>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <TIM_Base_SetConfig+0xbc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_Base_SetConfig+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <TIM_Base_SetConfig+0xc0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <TIM_Base_SetConfig+0xb8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	615a      	str	r2, [r3, #20]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800

0800291c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 0201 	bic.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 0302 	bic.w	r3, r3, #2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <TIM_OC1_SetConfig+0xc8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10c      	bne.n	8002992 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0308 	bic.w	r3, r3, #8
 800297e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <TIM_OC1_SetConfig+0xc8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d111      	bne.n	80029be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40012c00 	.word	0x40012c00

080029e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0320 	bic.w	r3, r3, #32
 8002a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <TIM_OC2_SetConfig+0xd0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10d      	bne.n	8002a64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <TIM_OC2_SetConfig+0xd0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d113      	bne.n	8002a94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC3_SetConfig+0xd0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <TIM_OC3_SetConfig+0xd0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d113      	bne.n	8002b66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <TIM_OC4_SetConfig+0x98>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 030a 	bic.w	r3, r3, #10
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f023 0210 	bic.w	r2, r3, #16
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	621a      	str	r2, [r3, #32]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f043 0307 	orr.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	021a      	lsls	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e046      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800

08002e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e03d      	b.n	8002ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e03f      	b.n	8002fb4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd fc7f 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2224      	movs	r2, #36	; 0x24
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f904 	bl	8003174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d17c      	bne.n	80030d6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_Transmit+0x2c>
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e075      	b.n	80030d8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit+0x3e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e06e      	b.n	80030d8 <HAL_UART_Transmit+0x11c>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2221      	movs	r2, #33	; 0x21
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003010:	f7fd fd5e 	bl	8000ad0 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d108      	bne.n	800303e <HAL_UART_Transmit+0x82>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e003      	b.n	8003046 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800304e:	e02a      	b.n	80030a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f840 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e036      	b.n	80030d8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	3302      	adds	r3, #2
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e007      	b.n	8003098 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1cf      	bne.n	8003050 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f810 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e006      	b.n	80030d8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f0:	e02c      	b.n	800314c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f8:	d028      	beq.n	800314c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <UART_WaitOnFlagUntilTimeout+0x30>
 8003100:	f7fd fce6 	bl	8000ad0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	d21d      	bcs.n	800314c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800311e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e00f      	b.n	800316c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d0c3      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ae:	f023 030c 	bic.w	r3, r3, #12
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <UART_SetConfig+0x114>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7fe fd40 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	e002      	b.n	80031ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7fe fd28 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	0119      	lsls	r1, r3, #4
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <UART_SetConfig+0x118>)
 8003222:	fba3 0302 	umull	r0, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2064      	movs	r0, #100	; 0x64
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	3332      	adds	r3, #50	; 0x32
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <UART_SetConfig+0x118>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003240:	4419      	add	r1, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	; 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	440a      	add	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013800 	.word	0x40013800
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200001a4 	.word	0x200001a4

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4d0c      	ldr	r5, [pc, #48]	; (80032d4 <__libc_init_array+0x38>)
 80032a2:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	f000 fc5c 	bl	8003b68 <_init>
 80032b0:	2600      	movs	r6, #0
 80032b2:	4d0a      	ldr	r5, [pc, #40]	; (80032dc <__libc_init_array+0x40>)
 80032b4:	4c0a      	ldr	r4, [pc, #40]	; (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003c08 	.word	0x08003c08
 80032d8:	08003c08 	.word	0x08003c08
 80032dc:	08003c08 	.word	0x08003c08
 80032e0:	08003c0c 	.word	0x08003c0c

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <siprintf>:
 80032f4:	b40e      	push	{r1, r2, r3}
 80032f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032fa:	b500      	push	{lr}
 80032fc:	b09c      	sub	sp, #112	; 0x70
 80032fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003300:	9002      	str	r0, [sp, #8]
 8003302:	9006      	str	r0, [sp, #24]
 8003304:	9107      	str	r1, [sp, #28]
 8003306:	9104      	str	r1, [sp, #16]
 8003308:	4808      	ldr	r0, [pc, #32]	; (800332c <siprintf+0x38>)
 800330a:	4909      	ldr	r1, [pc, #36]	; (8003330 <siprintf+0x3c>)
 800330c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003310:	9105      	str	r1, [sp, #20]
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	a902      	add	r1, sp, #8
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	f000 f868 	bl	80033ec <_svfiprintf_r>
 800331c:	2200      	movs	r2, #0
 800331e:	9b02      	ldr	r3, [sp, #8]
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	b01c      	add	sp, #112	; 0x70
 8003324:	f85d eb04 	ldr.w	lr, [sp], #4
 8003328:	b003      	add	sp, #12
 800332a:	4770      	bx	lr
 800332c:	200001a4 	.word	0x200001a4
 8003330:	ffff0208 	.word	0xffff0208

08003334 <__ssputs_r>:
 8003334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	688e      	ldr	r6, [r1, #8]
 800333a:	4682      	mov	sl, r0
 800333c:	429e      	cmp	r6, r3
 800333e:	460c      	mov	r4, r1
 8003340:	4690      	mov	r8, r2
 8003342:	461f      	mov	r7, r3
 8003344:	d838      	bhi.n	80033b8 <__ssputs_r+0x84>
 8003346:	898a      	ldrh	r2, [r1, #12]
 8003348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800334c:	d032      	beq.n	80033b4 <__ssputs_r+0x80>
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	6909      	ldr	r1, [r1, #16]
 8003352:	3301      	adds	r3, #1
 8003354:	eba5 0901 	sub.w	r9, r5, r1
 8003358:	6965      	ldr	r5, [r4, #20]
 800335a:	444b      	add	r3, r9
 800335c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003364:	106d      	asrs	r5, r5, #1
 8003366:	429d      	cmp	r5, r3
 8003368:	bf38      	it	cc
 800336a:	461d      	movcc	r5, r3
 800336c:	0553      	lsls	r3, r2, #21
 800336e:	d531      	bpl.n	80033d4 <__ssputs_r+0xa0>
 8003370:	4629      	mov	r1, r5
 8003372:	f000 fb53 	bl	8003a1c <_malloc_r>
 8003376:	4606      	mov	r6, r0
 8003378:	b950      	cbnz	r0, 8003390 <__ssputs_r+0x5c>
 800337a:	230c      	movs	r3, #12
 800337c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003380:	f8ca 3000 	str.w	r3, [sl]
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003390:	464a      	mov	r2, r9
 8003392:	6921      	ldr	r1, [r4, #16]
 8003394:	f000 face 	bl	8003934 <memcpy>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800339e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a2:	81a3      	strh	r3, [r4, #12]
 80033a4:	6126      	str	r6, [r4, #16]
 80033a6:	444e      	add	r6, r9
 80033a8:	6026      	str	r6, [r4, #0]
 80033aa:	463e      	mov	r6, r7
 80033ac:	6165      	str	r5, [r4, #20]
 80033ae:	eba5 0509 	sub.w	r5, r5, r9
 80033b2:	60a5      	str	r5, [r4, #8]
 80033b4:	42be      	cmp	r6, r7
 80033b6:	d900      	bls.n	80033ba <__ssputs_r+0x86>
 80033b8:	463e      	mov	r6, r7
 80033ba:	4632      	mov	r2, r6
 80033bc:	4641      	mov	r1, r8
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	f000 fac6 	bl	8003950 <memmove>
 80033c4:	68a3      	ldr	r3, [r4, #8]
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	1b9b      	subs	r3, r3, r6
 80033ca:	4432      	add	r2, r6
 80033cc:	2000      	movs	r0, #0
 80033ce:	60a3      	str	r3, [r4, #8]
 80033d0:	6022      	str	r2, [r4, #0]
 80033d2:	e7db      	b.n	800338c <__ssputs_r+0x58>
 80033d4:	462a      	mov	r2, r5
 80033d6:	f000 fb7b 	bl	8003ad0 <_realloc_r>
 80033da:	4606      	mov	r6, r0
 80033dc:	2800      	cmp	r0, #0
 80033de:	d1e1      	bne.n	80033a4 <__ssputs_r+0x70>
 80033e0:	4650      	mov	r0, sl
 80033e2:	6921      	ldr	r1, [r4, #16]
 80033e4:	f000 face 	bl	8003984 <_free_r>
 80033e8:	e7c7      	b.n	800337a <__ssputs_r+0x46>
	...

080033ec <_svfiprintf_r>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	4698      	mov	r8, r3
 80033f2:	898b      	ldrh	r3, [r1, #12]
 80033f4:	4607      	mov	r7, r0
 80033f6:	061b      	lsls	r3, r3, #24
 80033f8:	460d      	mov	r5, r1
 80033fa:	4614      	mov	r4, r2
 80033fc:	b09d      	sub	sp, #116	; 0x74
 80033fe:	d50e      	bpl.n	800341e <_svfiprintf_r+0x32>
 8003400:	690b      	ldr	r3, [r1, #16]
 8003402:	b963      	cbnz	r3, 800341e <_svfiprintf_r+0x32>
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	f000 fb09 	bl	8003a1c <_malloc_r>
 800340a:	6028      	str	r0, [r5, #0]
 800340c:	6128      	str	r0, [r5, #16]
 800340e:	b920      	cbnz	r0, 800341a <_svfiprintf_r+0x2e>
 8003410:	230c      	movs	r3, #12
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003418:	e0d1      	b.n	80035be <_svfiprintf_r+0x1d2>
 800341a:	2340      	movs	r3, #64	; 0x40
 800341c:	616b      	str	r3, [r5, #20]
 800341e:	2300      	movs	r3, #0
 8003420:	9309      	str	r3, [sp, #36]	; 0x24
 8003422:	2320      	movs	r3, #32
 8003424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003428:	2330      	movs	r3, #48	; 0x30
 800342a:	f04f 0901 	mov.w	r9, #1
 800342e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003432:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035d8 <_svfiprintf_r+0x1ec>
 8003436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343a:	4623      	mov	r3, r4
 800343c:	469a      	mov	sl, r3
 800343e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003442:	b10a      	cbz	r2, 8003448 <_svfiprintf_r+0x5c>
 8003444:	2a25      	cmp	r2, #37	; 0x25
 8003446:	d1f9      	bne.n	800343c <_svfiprintf_r+0x50>
 8003448:	ebba 0b04 	subs.w	fp, sl, r4
 800344c:	d00b      	beq.n	8003466 <_svfiprintf_r+0x7a>
 800344e:	465b      	mov	r3, fp
 8003450:	4622      	mov	r2, r4
 8003452:	4629      	mov	r1, r5
 8003454:	4638      	mov	r0, r7
 8003456:	f7ff ff6d 	bl	8003334 <__ssputs_r>
 800345a:	3001      	adds	r0, #1
 800345c:	f000 80aa 	beq.w	80035b4 <_svfiprintf_r+0x1c8>
 8003460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003462:	445a      	add	r2, fp
 8003464:	9209      	str	r2, [sp, #36]	; 0x24
 8003466:	f89a 3000 	ldrb.w	r3, [sl]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a2 	beq.w	80035b4 <_svfiprintf_r+0x1c8>
 8003470:	2300      	movs	r3, #0
 8003472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800347a:	f10a 0a01 	add.w	sl, sl, #1
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	9307      	str	r3, [sp, #28]
 8003482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003486:	931a      	str	r3, [sp, #104]	; 0x68
 8003488:	4654      	mov	r4, sl
 800348a:	2205      	movs	r2, #5
 800348c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003490:	4851      	ldr	r0, [pc, #324]	; (80035d8 <_svfiprintf_r+0x1ec>)
 8003492:	f000 fa41 	bl	8003918 <memchr>
 8003496:	9a04      	ldr	r2, [sp, #16]
 8003498:	b9d8      	cbnz	r0, 80034d2 <_svfiprintf_r+0xe6>
 800349a:	06d0      	lsls	r0, r2, #27
 800349c:	bf44      	itt	mi
 800349e:	2320      	movmi	r3, #32
 80034a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a4:	0711      	lsls	r1, r2, #28
 80034a6:	bf44      	itt	mi
 80034a8:	232b      	movmi	r3, #43	; 0x2b
 80034aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ae:	f89a 3000 	ldrb.w	r3, [sl]
 80034b2:	2b2a      	cmp	r3, #42	; 0x2a
 80034b4:	d015      	beq.n	80034e2 <_svfiprintf_r+0xf6>
 80034b6:	4654      	mov	r4, sl
 80034b8:	2000      	movs	r0, #0
 80034ba:	f04f 0c0a 	mov.w	ip, #10
 80034be:	9a07      	ldr	r2, [sp, #28]
 80034c0:	4621      	mov	r1, r4
 80034c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034c6:	3b30      	subs	r3, #48	; 0x30
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	d94e      	bls.n	800356a <_svfiprintf_r+0x17e>
 80034cc:	b1b0      	cbz	r0, 80034fc <_svfiprintf_r+0x110>
 80034ce:	9207      	str	r2, [sp, #28]
 80034d0:	e014      	b.n	80034fc <_svfiprintf_r+0x110>
 80034d2:	eba0 0308 	sub.w	r3, r0, r8
 80034d6:	fa09 f303 	lsl.w	r3, r9, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	46a2      	mov	sl, r4
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	e7d2      	b.n	8003488 <_svfiprintf_r+0x9c>
 80034e2:	9b03      	ldr	r3, [sp, #12]
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	9103      	str	r1, [sp, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbb      	ittet	lt
 80034ee:	425b      	neglt	r3, r3
 80034f0:	f042 0202 	orrlt.w	r2, r2, #2
 80034f4:	9307      	strge	r3, [sp, #28]
 80034f6:	9307      	strlt	r3, [sp, #28]
 80034f8:	bfb8      	it	lt
 80034fa:	9204      	strlt	r2, [sp, #16]
 80034fc:	7823      	ldrb	r3, [r4, #0]
 80034fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003500:	d10c      	bne.n	800351c <_svfiprintf_r+0x130>
 8003502:	7863      	ldrb	r3, [r4, #1]
 8003504:	2b2a      	cmp	r3, #42	; 0x2a
 8003506:	d135      	bne.n	8003574 <_svfiprintf_r+0x188>
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	3402      	adds	r4, #2
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	9203      	str	r2, [sp, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfb8      	it	lt
 8003516:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035e8 <_svfiprintf_r+0x1fc>
 8003520:	2203      	movs	r2, #3
 8003522:	4650      	mov	r0, sl
 8003524:	7821      	ldrb	r1, [r4, #0]
 8003526:	f000 f9f7 	bl	8003918 <memchr>
 800352a:	b140      	cbz	r0, 800353e <_svfiprintf_r+0x152>
 800352c:	2340      	movs	r3, #64	; 0x40
 800352e:	eba0 000a 	sub.w	r0, r0, sl
 8003532:	fa03 f000 	lsl.w	r0, r3, r0
 8003536:	9b04      	ldr	r3, [sp, #16]
 8003538:	3401      	adds	r4, #1
 800353a:	4303      	orrs	r3, r0
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003542:	2206      	movs	r2, #6
 8003544:	4825      	ldr	r0, [pc, #148]	; (80035dc <_svfiprintf_r+0x1f0>)
 8003546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800354a:	f000 f9e5 	bl	8003918 <memchr>
 800354e:	2800      	cmp	r0, #0
 8003550:	d038      	beq.n	80035c4 <_svfiprintf_r+0x1d8>
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <_svfiprintf_r+0x1f4>)
 8003554:	bb1b      	cbnz	r3, 800359e <_svfiprintf_r+0x1b2>
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	3307      	adds	r3, #7
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	3308      	adds	r3, #8
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003564:	4433      	add	r3, r6
 8003566:	9309      	str	r3, [sp, #36]	; 0x24
 8003568:	e767      	b.n	800343a <_svfiprintf_r+0x4e>
 800356a:	460c      	mov	r4, r1
 800356c:	2001      	movs	r0, #1
 800356e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003572:	e7a5      	b.n	80034c0 <_svfiprintf_r+0xd4>
 8003574:	2300      	movs	r3, #0
 8003576:	f04f 0c0a 	mov.w	ip, #10
 800357a:	4619      	mov	r1, r3
 800357c:	3401      	adds	r4, #1
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	4620      	mov	r0, r4
 8003582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003586:	3a30      	subs	r2, #48	; 0x30
 8003588:	2a09      	cmp	r2, #9
 800358a:	d903      	bls.n	8003594 <_svfiprintf_r+0x1a8>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0c5      	beq.n	800351c <_svfiprintf_r+0x130>
 8003590:	9105      	str	r1, [sp, #20]
 8003592:	e7c3      	b.n	800351c <_svfiprintf_r+0x130>
 8003594:	4604      	mov	r4, r0
 8003596:	2301      	movs	r3, #1
 8003598:	fb0c 2101 	mla	r1, ip, r1, r2
 800359c:	e7f0      	b.n	8003580 <_svfiprintf_r+0x194>
 800359e:	ab03      	add	r3, sp, #12
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4638      	mov	r0, r7
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <_svfiprintf_r+0x1f8>)
 80035a8:	a904      	add	r1, sp, #16
 80035aa:	f3af 8000 	nop.w
 80035ae:	1c42      	adds	r2, r0, #1
 80035b0:	4606      	mov	r6, r0
 80035b2:	d1d6      	bne.n	8003562 <_svfiprintf_r+0x176>
 80035b4:	89ab      	ldrh	r3, [r5, #12]
 80035b6:	065b      	lsls	r3, r3, #25
 80035b8:	f53f af2c 	bmi.w	8003414 <_svfiprintf_r+0x28>
 80035bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035be:	b01d      	add	sp, #116	; 0x74
 80035c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c4:	ab03      	add	r3, sp, #12
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	462a      	mov	r2, r5
 80035ca:	4638      	mov	r0, r7
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_svfiprintf_r+0x1f8>)
 80035ce:	a904      	add	r1, sp, #16
 80035d0:	f000 f87c 	bl	80036cc <_printf_i>
 80035d4:	e7eb      	b.n	80035ae <_svfiprintf_r+0x1c2>
 80035d6:	bf00      	nop
 80035d8:	08003bd4 	.word	0x08003bd4
 80035dc:	08003bde 	.word	0x08003bde
 80035e0:	00000000 	.word	0x00000000
 80035e4:	08003335 	.word	0x08003335
 80035e8:	08003bda 	.word	0x08003bda

080035ec <_printf_common>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	4616      	mov	r6, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	4607      	mov	r7, r0
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bfb8      	it	lt
 80035fe:	4613      	movlt	r3, r2
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003606:	460c      	mov	r4, r1
 8003608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800360c:	b10a      	cbz	r2, 8003612 <_printf_common+0x26>
 800360e:	3301      	adds	r3, #1
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0699      	lsls	r1, r3, #26
 8003616:	bf42      	ittt	mi
 8003618:	6833      	ldrmi	r3, [r6, #0]
 800361a:	3302      	addmi	r3, #2
 800361c:	6033      	strmi	r3, [r6, #0]
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	f015 0506 	ands.w	r5, r5, #6
 8003624:	d106      	bne.n	8003634 <_printf_common+0x48>
 8003626:	f104 0a19 	add.w	sl, r4, #25
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	6832      	ldr	r2, [r6, #0]
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	42ab      	cmp	r3, r5
 8003632:	dc28      	bgt.n	8003686 <_printf_common+0x9a>
 8003634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003638:	1e13      	subs	r3, r2, #0
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	bf18      	it	ne
 800363e:	2301      	movne	r3, #1
 8003640:	0692      	lsls	r2, r2, #26
 8003642:	d42d      	bmi.n	80036a0 <_printf_common+0xb4>
 8003644:	4649      	mov	r1, r9
 8003646:	4638      	mov	r0, r7
 8003648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d020      	beq.n	8003694 <_printf_common+0xa8>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	68e5      	ldr	r5, [r4, #12]
 8003656:	f003 0306 	and.w	r3, r3, #6
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf18      	it	ne
 800365e:	2500      	movne	r5, #0
 8003660:	6832      	ldr	r2, [r6, #0]
 8003662:	f04f 0600 	mov.w	r6, #0
 8003666:	68a3      	ldr	r3, [r4, #8]
 8003668:	bf08      	it	eq
 800366a:	1aad      	subeq	r5, r5, r2
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	bf08      	it	eq
 8003670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003674:	4293      	cmp	r3, r2
 8003676:	bfc4      	itt	gt
 8003678:	1a9b      	subgt	r3, r3, r2
 800367a:	18ed      	addgt	r5, r5, r3
 800367c:	341a      	adds	r4, #26
 800367e:	42b5      	cmp	r5, r6
 8003680:	d11a      	bne.n	80036b8 <_printf_common+0xcc>
 8003682:	2000      	movs	r0, #0
 8003684:	e008      	b.n	8003698 <_printf_common+0xac>
 8003686:	2301      	movs	r3, #1
 8003688:	4652      	mov	r2, sl
 800368a:	4649      	mov	r1, r9
 800368c:	4638      	mov	r0, r7
 800368e:	47c0      	blx	r8
 8003690:	3001      	adds	r0, #1
 8003692:	d103      	bne.n	800369c <_printf_common+0xb0>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369c:	3501      	adds	r5, #1
 800369e:	e7c4      	b.n	800362a <_printf_common+0x3e>
 80036a0:	2030      	movs	r0, #48	; 0x30
 80036a2:	18e1      	adds	r1, r4, r3
 80036a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ae:	4422      	add	r2, r4
 80036b0:	3302      	adds	r3, #2
 80036b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b6:	e7c5      	b.n	8003644 <_printf_common+0x58>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4622      	mov	r2, r4
 80036bc:	4649      	mov	r1, r9
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	3001      	adds	r0, #1
 80036c4:	d0e6      	beq.n	8003694 <_printf_common+0xa8>
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7d9      	b.n	800367e <_printf_common+0x92>
	...

080036cc <_printf_i>:
 80036cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d0:	460c      	mov	r4, r1
 80036d2:	7e27      	ldrb	r7, [r4, #24]
 80036d4:	4691      	mov	r9, r2
 80036d6:	2f78      	cmp	r7, #120	; 0x78
 80036d8:	4680      	mov	r8, r0
 80036da:	469a      	mov	sl, r3
 80036dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e2:	d807      	bhi.n	80036f4 <_printf_i+0x28>
 80036e4:	2f62      	cmp	r7, #98	; 0x62
 80036e6:	d80a      	bhi.n	80036fe <_printf_i+0x32>
 80036e8:	2f00      	cmp	r7, #0
 80036ea:	f000 80d9 	beq.w	80038a0 <_printf_i+0x1d4>
 80036ee:	2f58      	cmp	r7, #88	; 0x58
 80036f0:	f000 80a4 	beq.w	800383c <_printf_i+0x170>
 80036f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036fc:	e03a      	b.n	8003774 <_printf_i+0xa8>
 80036fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003702:	2b15      	cmp	r3, #21
 8003704:	d8f6      	bhi.n	80036f4 <_printf_i+0x28>
 8003706:	a001      	add	r0, pc, #4	; (adr r0, 800370c <_printf_i+0x40>)
 8003708:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800370c:	08003765 	.word	0x08003765
 8003710:	08003779 	.word	0x08003779
 8003714:	080036f5 	.word	0x080036f5
 8003718:	080036f5 	.word	0x080036f5
 800371c:	080036f5 	.word	0x080036f5
 8003720:	080036f5 	.word	0x080036f5
 8003724:	08003779 	.word	0x08003779
 8003728:	080036f5 	.word	0x080036f5
 800372c:	080036f5 	.word	0x080036f5
 8003730:	080036f5 	.word	0x080036f5
 8003734:	080036f5 	.word	0x080036f5
 8003738:	08003887 	.word	0x08003887
 800373c:	080037a9 	.word	0x080037a9
 8003740:	08003869 	.word	0x08003869
 8003744:	080036f5 	.word	0x080036f5
 8003748:	080036f5 	.word	0x080036f5
 800374c:	080038a9 	.word	0x080038a9
 8003750:	080036f5 	.word	0x080036f5
 8003754:	080037a9 	.word	0x080037a9
 8003758:	080036f5 	.word	0x080036f5
 800375c:	080036f5 	.word	0x080036f5
 8003760:	08003871 	.word	0x08003871
 8003764:	680b      	ldr	r3, [r1, #0]
 8003766:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	600a      	str	r2, [r1, #0]
 8003770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003774:	2301      	movs	r3, #1
 8003776:	e0a4      	b.n	80038c2 <_printf_i+0x1f6>
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	6808      	ldr	r0, [r1, #0]
 800377c:	062e      	lsls	r6, r5, #24
 800377e:	f100 0304 	add.w	r3, r0, #4
 8003782:	d50a      	bpl.n	800379a <_printf_i+0xce>
 8003784:	6805      	ldr	r5, [r0, #0]
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	2d00      	cmp	r5, #0
 800378a:	da03      	bge.n	8003794 <_printf_i+0xc8>
 800378c:	232d      	movs	r3, #45	; 0x2d
 800378e:	426d      	negs	r5, r5
 8003790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003794:	230a      	movs	r3, #10
 8003796:	485e      	ldr	r0, [pc, #376]	; (8003910 <_printf_i+0x244>)
 8003798:	e019      	b.n	80037ce <_printf_i+0x102>
 800379a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800379e:	6805      	ldr	r5, [r0, #0]
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	bf18      	it	ne
 80037a4:	b22d      	sxthne	r5, r5
 80037a6:	e7ef      	b.n	8003788 <_printf_i+0xbc>
 80037a8:	680b      	ldr	r3, [r1, #0]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	1d18      	adds	r0, r3, #4
 80037ae:	6008      	str	r0, [r1, #0]
 80037b0:	0628      	lsls	r0, r5, #24
 80037b2:	d501      	bpl.n	80037b8 <_printf_i+0xec>
 80037b4:	681d      	ldr	r5, [r3, #0]
 80037b6:	e002      	b.n	80037be <_printf_i+0xf2>
 80037b8:	0669      	lsls	r1, r5, #25
 80037ba:	d5fb      	bpl.n	80037b4 <_printf_i+0xe8>
 80037bc:	881d      	ldrh	r5, [r3, #0]
 80037be:	2f6f      	cmp	r7, #111	; 0x6f
 80037c0:	bf0c      	ite	eq
 80037c2:	2308      	moveq	r3, #8
 80037c4:	230a      	movne	r3, #10
 80037c6:	4852      	ldr	r0, [pc, #328]	; (8003910 <_printf_i+0x244>)
 80037c8:	2100      	movs	r1, #0
 80037ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ce:	6866      	ldr	r6, [r4, #4]
 80037d0:	2e00      	cmp	r6, #0
 80037d2:	bfa8      	it	ge
 80037d4:	6821      	ldrge	r1, [r4, #0]
 80037d6:	60a6      	str	r6, [r4, #8]
 80037d8:	bfa4      	itt	ge
 80037da:	f021 0104 	bicge.w	r1, r1, #4
 80037de:	6021      	strge	r1, [r4, #0]
 80037e0:	b90d      	cbnz	r5, 80037e6 <_printf_i+0x11a>
 80037e2:	2e00      	cmp	r6, #0
 80037e4:	d04d      	beq.n	8003882 <_printf_i+0x1b6>
 80037e6:	4616      	mov	r6, r2
 80037e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ec:	fb03 5711 	mls	r7, r3, r1, r5
 80037f0:	5dc7      	ldrb	r7, [r0, r7]
 80037f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f6:	462f      	mov	r7, r5
 80037f8:	42bb      	cmp	r3, r7
 80037fa:	460d      	mov	r5, r1
 80037fc:	d9f4      	bls.n	80037e8 <_printf_i+0x11c>
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d10b      	bne.n	800381a <_printf_i+0x14e>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	07df      	lsls	r7, r3, #31
 8003806:	d508      	bpl.n	800381a <_printf_i+0x14e>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	6861      	ldr	r1, [r4, #4]
 800380c:	4299      	cmp	r1, r3
 800380e:	bfde      	ittt	le
 8003810:	2330      	movle	r3, #48	; 0x30
 8003812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003816:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800381a:	1b92      	subs	r2, r2, r6
 800381c:	6122      	str	r2, [r4, #16]
 800381e:	464b      	mov	r3, r9
 8003820:	4621      	mov	r1, r4
 8003822:	4640      	mov	r0, r8
 8003824:	f8cd a000 	str.w	sl, [sp]
 8003828:	aa03      	add	r2, sp, #12
 800382a:	f7ff fedf 	bl	80035ec <_printf_common>
 800382e:	3001      	adds	r0, #1
 8003830:	d14c      	bne.n	80038cc <_printf_i+0x200>
 8003832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003836:	b004      	add	sp, #16
 8003838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383c:	4834      	ldr	r0, [pc, #208]	; (8003910 <_printf_i+0x244>)
 800383e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003842:	680e      	ldr	r6, [r1, #0]
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f856 5b04 	ldr.w	r5, [r6], #4
 800384a:	061f      	lsls	r7, r3, #24
 800384c:	600e      	str	r6, [r1, #0]
 800384e:	d514      	bpl.n	800387a <_printf_i+0x1ae>
 8003850:	07d9      	lsls	r1, r3, #31
 8003852:	bf44      	itt	mi
 8003854:	f043 0320 	orrmi.w	r3, r3, #32
 8003858:	6023      	strmi	r3, [r4, #0]
 800385a:	b91d      	cbnz	r5, 8003864 <_printf_i+0x198>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f023 0320 	bic.w	r3, r3, #32
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	2310      	movs	r3, #16
 8003866:	e7af      	b.n	80037c8 <_printf_i+0xfc>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	2378      	movs	r3, #120	; 0x78
 8003872:	4828      	ldr	r0, [pc, #160]	; (8003914 <_printf_i+0x248>)
 8003874:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003878:	e7e3      	b.n	8003842 <_printf_i+0x176>
 800387a:	065e      	lsls	r6, r3, #25
 800387c:	bf48      	it	mi
 800387e:	b2ad      	uxthmi	r5, r5
 8003880:	e7e6      	b.n	8003850 <_printf_i+0x184>
 8003882:	4616      	mov	r6, r2
 8003884:	e7bb      	b.n	80037fe <_printf_i+0x132>
 8003886:	680b      	ldr	r3, [r1, #0]
 8003888:	6826      	ldr	r6, [r4, #0]
 800388a:	1d1d      	adds	r5, r3, #4
 800388c:	6960      	ldr	r0, [r4, #20]
 800388e:	600d      	str	r5, [r1, #0]
 8003890:	0635      	lsls	r5, r6, #24
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	d501      	bpl.n	800389a <_printf_i+0x1ce>
 8003896:	6018      	str	r0, [r3, #0]
 8003898:	e002      	b.n	80038a0 <_printf_i+0x1d4>
 800389a:	0671      	lsls	r1, r6, #25
 800389c:	d5fb      	bpl.n	8003896 <_printf_i+0x1ca>
 800389e:	8018      	strh	r0, [r3, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	4616      	mov	r6, r2
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	e7ba      	b.n	800381e <_printf_i+0x152>
 80038a8:	680b      	ldr	r3, [r1, #0]
 80038aa:	1d1a      	adds	r2, r3, #4
 80038ac:	600a      	str	r2, [r1, #0]
 80038ae:	681e      	ldr	r6, [r3, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	4630      	mov	r0, r6
 80038b4:	6862      	ldr	r2, [r4, #4]
 80038b6:	f000 f82f 	bl	8003918 <memchr>
 80038ba:	b108      	cbz	r0, 80038c0 <_printf_i+0x1f4>
 80038bc:	1b80      	subs	r0, r0, r6
 80038be:	6060      	str	r0, [r4, #4]
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	6123      	str	r3, [r4, #16]
 80038c4:	2300      	movs	r3, #0
 80038c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ca:	e7a8      	b.n	800381e <_printf_i+0x152>
 80038cc:	4632      	mov	r2, r6
 80038ce:	4649      	mov	r1, r9
 80038d0:	4640      	mov	r0, r8
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	47d0      	blx	sl
 80038d6:	3001      	adds	r0, #1
 80038d8:	d0ab      	beq.n	8003832 <_printf_i+0x166>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	079b      	lsls	r3, r3, #30
 80038de:	d413      	bmi.n	8003908 <_printf_i+0x23c>
 80038e0:	68e0      	ldr	r0, [r4, #12]
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	4298      	cmp	r0, r3
 80038e6:	bfb8      	it	lt
 80038e8:	4618      	movlt	r0, r3
 80038ea:	e7a4      	b.n	8003836 <_printf_i+0x16a>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4632      	mov	r2, r6
 80038f0:	4649      	mov	r1, r9
 80038f2:	4640      	mov	r0, r8
 80038f4:	47d0      	blx	sl
 80038f6:	3001      	adds	r0, #1
 80038f8:	d09b      	beq.n	8003832 <_printf_i+0x166>
 80038fa:	3501      	adds	r5, #1
 80038fc:	68e3      	ldr	r3, [r4, #12]
 80038fe:	9903      	ldr	r1, [sp, #12]
 8003900:	1a5b      	subs	r3, r3, r1
 8003902:	42ab      	cmp	r3, r5
 8003904:	dcf2      	bgt.n	80038ec <_printf_i+0x220>
 8003906:	e7eb      	b.n	80038e0 <_printf_i+0x214>
 8003908:	2500      	movs	r5, #0
 800390a:	f104 0619 	add.w	r6, r4, #25
 800390e:	e7f5      	b.n	80038fc <_printf_i+0x230>
 8003910:	08003be5 	.word	0x08003be5
 8003914:	08003bf6 	.word	0x08003bf6

08003918 <memchr>:
 8003918:	4603      	mov	r3, r0
 800391a:	b510      	push	{r4, lr}
 800391c:	b2c9      	uxtb	r1, r1
 800391e:	4402      	add	r2, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	4618      	mov	r0, r3
 8003924:	d101      	bne.n	800392a <memchr+0x12>
 8003926:	2000      	movs	r0, #0
 8003928:	e003      	b.n	8003932 <memchr+0x1a>
 800392a:	7804      	ldrb	r4, [r0, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	428c      	cmp	r4, r1
 8003930:	d1f6      	bne.n	8003920 <memchr+0x8>
 8003932:	bd10      	pop	{r4, pc}

08003934 <memcpy>:
 8003934:	440a      	add	r2, r1
 8003936:	4291      	cmp	r1, r2
 8003938:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800393c:	d100      	bne.n	8003940 <memcpy+0xc>
 800393e:	4770      	bx	lr
 8003940:	b510      	push	{r4, lr}
 8003942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003946:	4291      	cmp	r1, r2
 8003948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800394c:	d1f9      	bne.n	8003942 <memcpy+0xe>
 800394e:	bd10      	pop	{r4, pc}

08003950 <memmove>:
 8003950:	4288      	cmp	r0, r1
 8003952:	b510      	push	{r4, lr}
 8003954:	eb01 0402 	add.w	r4, r1, r2
 8003958:	d902      	bls.n	8003960 <memmove+0x10>
 800395a:	4284      	cmp	r4, r0
 800395c:	4623      	mov	r3, r4
 800395e:	d807      	bhi.n	8003970 <memmove+0x20>
 8003960:	1e43      	subs	r3, r0, #1
 8003962:	42a1      	cmp	r1, r4
 8003964:	d008      	beq.n	8003978 <memmove+0x28>
 8003966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800396a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800396e:	e7f8      	b.n	8003962 <memmove+0x12>
 8003970:	4601      	mov	r1, r0
 8003972:	4402      	add	r2, r0
 8003974:	428a      	cmp	r2, r1
 8003976:	d100      	bne.n	800397a <memmove+0x2a>
 8003978:	bd10      	pop	{r4, pc}
 800397a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800397e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003982:	e7f7      	b.n	8003974 <memmove+0x24>

08003984 <_free_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	4605      	mov	r5, r0
 8003988:	2900      	cmp	r1, #0
 800398a:	d043      	beq.n	8003a14 <_free_r+0x90>
 800398c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003990:	1f0c      	subs	r4, r1, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfb8      	it	lt
 8003996:	18e4      	addlt	r4, r4, r3
 8003998:	f000 f8d0 	bl	8003b3c <__malloc_lock>
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <_free_r+0x94>)
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	4610      	mov	r0, r2
 80039a2:	b933      	cbnz	r3, 80039b2 <_free_r+0x2e>
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	6014      	str	r4, [r2, #0]
 80039a8:	4628      	mov	r0, r5
 80039aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ae:	f000 b8cb 	b.w	8003b48 <__malloc_unlock>
 80039b2:	42a3      	cmp	r3, r4
 80039b4:	d90a      	bls.n	80039cc <_free_r+0x48>
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	1862      	adds	r2, r4, r1
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bf01      	itttt	eq
 80039be:	681a      	ldreq	r2, [r3, #0]
 80039c0:	685b      	ldreq	r3, [r3, #4]
 80039c2:	1852      	addeq	r2, r2, r1
 80039c4:	6022      	streq	r2, [r4, #0]
 80039c6:	6063      	str	r3, [r4, #4]
 80039c8:	6004      	str	r4, [r0, #0]
 80039ca:	e7ed      	b.n	80039a8 <_free_r+0x24>
 80039cc:	461a      	mov	r2, r3
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b10b      	cbz	r3, 80039d6 <_free_r+0x52>
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	d9fa      	bls.n	80039cc <_free_r+0x48>
 80039d6:	6811      	ldr	r1, [r2, #0]
 80039d8:	1850      	adds	r0, r2, r1
 80039da:	42a0      	cmp	r0, r4
 80039dc:	d10b      	bne.n	80039f6 <_free_r+0x72>
 80039de:	6820      	ldr	r0, [r4, #0]
 80039e0:	4401      	add	r1, r0
 80039e2:	1850      	adds	r0, r2, r1
 80039e4:	4283      	cmp	r3, r0
 80039e6:	6011      	str	r1, [r2, #0]
 80039e8:	d1de      	bne.n	80039a8 <_free_r+0x24>
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4401      	add	r1, r0
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	6053      	str	r3, [r2, #4]
 80039f4:	e7d8      	b.n	80039a8 <_free_r+0x24>
 80039f6:	d902      	bls.n	80039fe <_free_r+0x7a>
 80039f8:	230c      	movs	r3, #12
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	e7d4      	b.n	80039a8 <_free_r+0x24>
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	1821      	adds	r1, r4, r0
 8003a02:	428b      	cmp	r3, r1
 8003a04:	bf01      	itttt	eq
 8003a06:	6819      	ldreq	r1, [r3, #0]
 8003a08:	685b      	ldreq	r3, [r3, #4]
 8003a0a:	1809      	addeq	r1, r1, r0
 8003a0c:	6021      	streq	r1, [r4, #0]
 8003a0e:	6063      	str	r3, [r4, #4]
 8003a10:	6054      	str	r4, [r2, #4]
 8003a12:	e7c9      	b.n	80039a8 <_free_r+0x24>
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
 8003a16:	bf00      	nop
 8003a18:	20000264 	.word	0x20000264

08003a1c <_malloc_r>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	1ccd      	adds	r5, r1, #3
 8003a20:	f025 0503 	bic.w	r5, r5, #3
 8003a24:	3508      	adds	r5, #8
 8003a26:	2d0c      	cmp	r5, #12
 8003a28:	bf38      	it	cc
 8003a2a:	250c      	movcc	r5, #12
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	4606      	mov	r6, r0
 8003a30:	db01      	blt.n	8003a36 <_malloc_r+0x1a>
 8003a32:	42a9      	cmp	r1, r5
 8003a34:	d903      	bls.n	8003a3e <_malloc_r+0x22>
 8003a36:	230c      	movs	r3, #12
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3e:	f000 f87d 	bl	8003b3c <__malloc_lock>
 8003a42:	4921      	ldr	r1, [pc, #132]	; (8003ac8 <_malloc_r+0xac>)
 8003a44:	680a      	ldr	r2, [r1, #0]
 8003a46:	4614      	mov	r4, r2
 8003a48:	b99c      	cbnz	r4, 8003a72 <_malloc_r+0x56>
 8003a4a:	4f20      	ldr	r7, [pc, #128]	; (8003acc <_malloc_r+0xb0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b923      	cbnz	r3, 8003a5a <_malloc_r+0x3e>
 8003a50:	4621      	mov	r1, r4
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f862 	bl	8003b1c <_sbrk_r>
 8003a58:	6038      	str	r0, [r7, #0]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f000 f85d 	bl	8003b1c <_sbrk_r>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	d123      	bne.n	8003aae <_malloc_r+0x92>
 8003a66:	230c      	movs	r3, #12
 8003a68:	4630      	mov	r0, r6
 8003a6a:	6033      	str	r3, [r6, #0]
 8003a6c:	f000 f86c 	bl	8003b48 <__malloc_unlock>
 8003a70:	e7e3      	b.n	8003a3a <_malloc_r+0x1e>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	1b5b      	subs	r3, r3, r5
 8003a76:	d417      	bmi.n	8003aa8 <_malloc_r+0x8c>
 8003a78:	2b0b      	cmp	r3, #11
 8003a7a:	d903      	bls.n	8003a84 <_malloc_r+0x68>
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	441c      	add	r4, r3
 8003a80:	6025      	str	r5, [r4, #0]
 8003a82:	e004      	b.n	8003a8e <_malloc_r+0x72>
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	bf0c      	ite	eq
 8003a8a:	600b      	streq	r3, [r1, #0]
 8003a8c:	6053      	strne	r3, [r2, #4]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 f85a 	bl	8003b48 <__malloc_unlock>
 8003a94:	f104 000b 	add.w	r0, r4, #11
 8003a98:	1d23      	adds	r3, r4, #4
 8003a9a:	f020 0007 	bic.w	r0, r0, #7
 8003a9e:	1ac2      	subs	r2, r0, r3
 8003aa0:	d0cc      	beq.n	8003a3c <_malloc_r+0x20>
 8003aa2:	1a1b      	subs	r3, r3, r0
 8003aa4:	50a3      	str	r3, [r4, r2]
 8003aa6:	e7c9      	b.n	8003a3c <_malloc_r+0x20>
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	6864      	ldr	r4, [r4, #4]
 8003aac:	e7cc      	b.n	8003a48 <_malloc_r+0x2c>
 8003aae:	1cc4      	adds	r4, r0, #3
 8003ab0:	f024 0403 	bic.w	r4, r4, #3
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d0e3      	beq.n	8003a80 <_malloc_r+0x64>
 8003ab8:	1a21      	subs	r1, r4, r0
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f82e 	bl	8003b1c <_sbrk_r>
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d1dd      	bne.n	8003a80 <_malloc_r+0x64>
 8003ac4:	e7cf      	b.n	8003a66 <_malloc_r+0x4a>
 8003ac6:	bf00      	nop
 8003ac8:	20000264 	.word	0x20000264
 8003acc:	20000268 	.word	0x20000268

08003ad0 <_realloc_r>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	4607      	mov	r7, r0
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	460e      	mov	r6, r1
 8003ad8:	b921      	cbnz	r1, 8003ae4 <_realloc_r+0x14>
 8003ada:	4611      	mov	r1, r2
 8003adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ae0:	f7ff bf9c 	b.w	8003a1c <_malloc_r>
 8003ae4:	b922      	cbnz	r2, 8003af0 <_realloc_r+0x20>
 8003ae6:	f7ff ff4d 	bl	8003984 <_free_r>
 8003aea:	4625      	mov	r5, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af0:	f000 f830 	bl	8003b54 <_malloc_usable_size_r>
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d20f      	bcs.n	8003b18 <_realloc_r+0x48>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ff8e 	bl	8003a1c <_malloc_r>
 8003b00:	4605      	mov	r5, r0
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d0f2      	beq.n	8003aec <_realloc_r+0x1c>
 8003b06:	4631      	mov	r1, r6
 8003b08:	4622      	mov	r2, r4
 8003b0a:	f7ff ff13 	bl	8003934 <memcpy>
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4638      	mov	r0, r7
 8003b12:	f7ff ff37 	bl	8003984 <_free_r>
 8003b16:	e7e9      	b.n	8003aec <_realloc_r+0x1c>
 8003b18:	4635      	mov	r5, r6
 8003b1a:	e7e7      	b.n	8003aec <_realloc_r+0x1c>

08003b1c <_sbrk_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4d05      	ldr	r5, [pc, #20]	; (8003b38 <_sbrk_r+0x1c>)
 8003b22:	4604      	mov	r4, r0
 8003b24:	4608      	mov	r0, r1
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	f7fc ff18 	bl	800095c <_sbrk>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_sbrk_r+0x1a>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_sbrk_r+0x1a>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	20000388 	.word	0x20000388

08003b3c <__malloc_lock>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__malloc_lock+0x8>)
 8003b3e:	f000 b811 	b.w	8003b64 <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	20000390 	.word	0x20000390

08003b48 <__malloc_unlock>:
 8003b48:	4801      	ldr	r0, [pc, #4]	; (8003b50 <__malloc_unlock+0x8>)
 8003b4a:	f000 b80c 	b.w	8003b66 <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	20000390 	.word	0x20000390

08003b54 <_malloc_usable_size_r>:
 8003b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b58:	1f18      	subs	r0, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfbc      	itt	lt
 8003b5e:	580b      	ldrlt	r3, [r1, r0]
 8003b60:	18c0      	addlt	r0, r0, r3
 8003b62:	4770      	bx	lr

08003b64 <__retarget_lock_acquire_recursive>:
 8003b64:	4770      	bx	lr

08003b66 <__retarget_lock_release_recursive>:
 8003b66:	4770      	bx	lr

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
